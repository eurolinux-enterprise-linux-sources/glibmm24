<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="class">
    <name>Gio::Action</name>
    <filename>classGio_1_1Action.html</filename>
    <base>Glib::Interface</base>
    <member kind="function">
      <type></type>
      <name>Action</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>ab390d96aac2bbd8f29e3cb9509720b6e</anchor>
      <arglist>(Action &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Action &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>aaa69e02e8ff82f431f21def4d2987677</anchor>
      <arglist>(Action &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Action</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>aa007868906fe536d4a4c4983bcae7ce7</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GAction *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>ad7cd56bdda4c3128f15a65b125838bb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GAction *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>ad377f84861cbd4fc911dc3b31709ff18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_name</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>ad08cb7680cc1ae8a3fa3039a7f70e519</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantType</type>
      <name>get_parameter_type</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a1bd060e05bcf698955569f997b809a2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantType</type>
      <name>get_state_type</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a85e2a11ae418e89ce061bcd745106a10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_state_hint</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a88865cf14c960c8221f1685ff262cebf</anchor>
      <arglist>(T_Value &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantBase</type>
      <name>get_state_hint_variant</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>ac7c834b7e8872664fccecdb6ec767503</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_enabled</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a79dba47c16a2e49ee83e33643bf6edf5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>change_state</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a90da4d2d2a6660cf71ad49d4069565bc</anchor>
      <arglist>(const T_Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>change_state</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>aa2e58f99930c048265cccaec3224c7fd</anchor>
      <arglist>(const Glib::Variant&lt; T_Value &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>change_state_variant</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>ade53cd09b546f381f07b78a2e9d95279</anchor>
      <arglist>(const Glib::VariantBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>change_state</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a8337a39d2a7546831f4a567670614886</anchor>
      <arglist>(const Glib::VariantBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_state</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a2b822038a9065dd52a9130a8d383bdb9</anchor>
      <arglist>(T_Value &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantBase</type>
      <name>get_state_variant</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>ac564bfd850abc4f41925da71314c257a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activate</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a5ca6d1b8d24caf541f0c4ea9658446bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activate</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a9f669ad6ada8aa29202dfe58405bffb7</anchor>
      <arglist>(const T_Value &amp;parameter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activate</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>af296509987a6d370aa57f40e09a4a84a</anchor>
      <arglist>(const Glib::Variant&lt; T_Value &gt; &amp;parameter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activate_variant</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a638a85ba4a833fe573480ed786bef010</anchor>
      <arglist>(const Glib::VariantBase &amp;parameter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activate</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a37d9b6b05160bfb4044659330287f9b2</anchor>
      <arglist>(const Glib::VariantBase &amp;parameter)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>print_detailed_name</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a7a384060cbcf4e7d8160d494de2dd286</anchor>
      <arglist>(const T_Value &amp;target_value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_enabled</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a03612a7e00dc2642b33a29a3ddca34d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_name</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a4f31342216b01378c18a38ef89509edb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::VariantType &gt;</type>
      <name>property_parameter_type</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a395a809decc7bb32c85f3bd713c3da44</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::VariantBase &gt;</type>
      <name>property_state</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>adaaaafe9c8e136a26ece1a53f8eba41e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::VariantType &gt;</type>
      <name>property_state_type</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a5e1655bcc6255efba743f1cc64b9583b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::ustring</type>
      <name>get_name_vfunc</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a5f9eefb632ecfd993c04879dee0f8c33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::VariantType</type>
      <name>get_parameter_type_vfunc</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>abb281f309e4b17a63ec4f29ed42ee1c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::VariantType</type>
      <name>get_state_type_vfunc</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a5c5080f0b3d59e7e8b94f2c0e70e5c92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::VariantBase</type>
      <name>get_state_hint_vfunc</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>ad42cef8e7f2d36fd5f99759127618622</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>get_enabled_vfunc</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a58f893aa96b438f6ffc101de1425ffc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::VariantBase</type>
      <name>get_state_vfunc</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>ac0f13259a64ba3429efad60a479c367c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>change_state_vfunc</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a8d838854ab0998b8efdd3bb810d4429f</anchor>
      <arglist>(const Glib::VariantBase &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>activate_vfunc</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a7e8062660469df51e34198ce39d63d59</anchor>
      <arglist>(const Glib::VariantBase &amp;parameter)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>ada7d2f0ad7524c3addb5f8bc3956f005</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a508f2dd4565bcc8afdbf92835a8e668d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>name_is_valid</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a50947296af8797dc7105378c8ee94ada</anchor>
      <arglist>(const Glib::ustring &amp;action_name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>parse_detailed_name</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>af9499f200e298f81f88e19402d7c7217</anchor>
      <arglist>(const Glib::ustring &amp;detailed_name, Glib::ustring &amp;action_name, T_Value &amp;target_value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>parse_detailed_name_variant</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a168bcf6023c045232cd225a80a0bd7d9</anchor>
      <arglist>(const Glib::ustring &amp;detailed_name, Glib::ustring &amp;action_name, Glib::VariantBase &amp;target_value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::ustring</type>
      <name>print_detailed_name_variant</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>aebbb8988cbd0ff6caab00ca3ccb28416</anchor>
      <arglist>(const Glib::ustring &amp;action_name, const Glib::VariantBase &amp;target_value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Action</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a6dab71d4d3af45977f0931e7ebf9fddf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Action &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a51714129b90228d8921685cd2783f62f</anchor>
      <arglist>(GAction *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::ActionGroup</name>
    <filename>classGio_1_1ActionGroup.html</filename>
    <base>Glib::Interface</base>
    <member kind="function">
      <type></type>
      <name>ActionGroup</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a84d2fe229e4ab6e2ae12c3ffa4a4dfe3</anchor>
      <arglist>(ActionGroup &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ActionGroup &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a88967a640883d76f64cbd32354aac716</anchor>
      <arglist>(ActionGroup &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ActionGroup</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>ae2f2915914c06a18c4715875cebbb193</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GActionGroup *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>affe86c6498361e348fe33be39be04ab0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GActionGroup *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a8d67019d69daa699c8faa7dae8e2d9ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_action</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>ac69556969ceffd2f1a6b914868b44906</anchor>
      <arglist>(const Glib::ustring &amp;action_name) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::ustring &gt;</type>
      <name>list_actions</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>aadea9b1711980e46d1bf751003bdb214</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>query_action</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a19e7a3c5f3e49adbf92cac1e2b6966a7</anchor>
      <arglist>(const Glib::ustring &amp;action_name, bool &amp;enabled, Glib::VariantType &amp;parameter_type, Glib::VariantBase &amp;state_hint, Glib::VariantType &amp;state_type, Glib::VariantBase &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>query_action</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a28aa7ffebc5e1880cfb57f5fb0ff1d3f</anchor>
      <arglist>(const Glib::ustring &amp;action_name, bool &amp;enabled, Glib::VariantType &amp;parameter_type, Glib::VariantBase &amp;state_hint, Glib::VariantType &amp;state_type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>query_action</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a896c0f50d6c4fd4cc17b22d363b7ad81</anchor>
      <arglist>(const Glib::ustring &amp;action_name, bool &amp;enabled, Glib::VariantType &amp;parameter_type, Glib::VariantBase &amp;state_hint, Glib::VariantBase &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>query_action</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>acfc61788cb9bc2b4b923763f0483b51e</anchor>
      <arglist>(const Glib::ustring &amp;action_name, bool &amp;enabled, Glib::VariantType &amp;parameter_type, Glib::VariantBase &amp;state_hint)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>query_action</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a788c4e56d0077bd8662968ccdd86e2b6</anchor>
      <arglist>(const Glib::ustring &amp;action_name, bool &amp;enabled, Glib::VariantBase &amp;state_hint, Glib::VariantType &amp;state_type, Glib::VariantBase &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>query_action</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>af4678fc74b915ecd70a36fa911276105</anchor>
      <arglist>(const Glib::ustring &amp;action_name, bool &amp;enabled, Glib::VariantBase &amp;state_hint, Glib::VariantType &amp;state_type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>query_action</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>abdc51e18b1a5cb871db9194d636ea055</anchor>
      <arglist>(const Glib::ustring &amp;action_name, bool &amp;enabled, Glib::VariantBase &amp;state_hint, Glib::VariantBase &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>query_action</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a6cd39881204a98dcf766f65d630c6e02</anchor>
      <arglist>(const Glib::ustring &amp;action_name, bool &amp;enabled, Glib::VariantBase &amp;state_hint)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_action_enabled</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a3933cb020130a72fafee260642af0b76</anchor>
      <arglist>(const Glib::ustring &amp;action_name) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantType</type>
      <name>get_action_parameter_type</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a1bcd16b4db40ddb68928a30e9e799c76</anchor>
      <arglist>(const Glib::ustring &amp;action_name) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantType</type>
      <name>get_action_state_type</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a77b29cfb43fbfa9944e0565d99e4ddc9</anchor>
      <arglist>(const Glib::ustring &amp;action_name) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantContainerBase</type>
      <name>get_action_state_hint</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>afbf1d2da2a34888c7738f5163366dbe1</anchor>
      <arglist>(const Glib::ustring &amp;action_name) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_action_state_hint</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a3c82de16a858a0915d513b46707f1729</anchor>
      <arglist>(const Glib::ustring &amp;action_name, T_Value &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantContainerBase</type>
      <name>get_action_state_hint_variant</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a00fe6cc0135dcb391a23f83201bed9f6</anchor>
      <arglist>(const Glib::ustring &amp;action_name) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantBase</type>
      <name>get_action_state</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>acd1a2e52771c04f66869208d8ea92959</anchor>
      <arglist>(const Glib::ustring &amp;action_name) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_action_state</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a42d89721f9778fdc550f107b4eb4a26b</anchor>
      <arglist>(const Glib::ustring &amp;action_name, T_Value &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantBase</type>
      <name>get_action_state_variant</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a37e3e90bdb0a0a8d48d7dd676309d4b6</anchor>
      <arglist>(const Glib::ustring &amp;action_name) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>change_action_state</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a4488ac862cf56001be245ccf4638d85c</anchor>
      <arglist>(const Glib::ustring &amp;action_name, const Glib::VariantBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activate_action</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>acb1430eed8062a856c32b8e48f41ebe6</anchor>
      <arglist>(const Glib::ustring &amp;action_name, const Glib::VariantBase &amp;parameter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activate_action</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a96a3b2f5be80d7263a5acf8a8529d7eb</anchor>
      <arglist>(const Glib::ustring &amp;action_name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>action_added</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a81e3d3f5123763a1a65e920deb7e1677</anchor>
      <arglist>(const Glib::ustring &amp;action_name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>action_removed</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>ae4fb6c4dca623abffd51178fc87cc8b2</anchor>
      <arglist>(const Glib::ustring &amp;action_name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>action_enabled_changed</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a9c9d5b01a16210ee40d2ee078c589253</anchor>
      <arglist>(const Glib::ustring &amp;action_name, bool enabled)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>action_state_changed</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a5a303e38b81629b094e7290f366a40ac</anchor>
      <arglist>(const Glib::ustring &amp;action_name, const Glib::VariantBase &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, const Glib::ustring &amp;&gt;</type>
      <name>signal_action_added</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a120584bcb13069e0e0276f43d97b2a92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxyDetailedAnyType&lt; void, const Glib::ustring &amp;&gt;</type>
      <name>signal_action_added</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>ad2a637cb3a9465317507463743227df6</anchor>
      <arglist>(const Glib::ustring &amp;action_name)</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, const Glib::ustring &amp;, bool &gt;</type>
      <name>signal_action_enabled_changed</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>afd1077cf7a303b13774713702e2ce306</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxyDetailedAnyType&lt; void, const Glib::ustring &amp;, bool &gt;</type>
      <name>signal_action_enabled_changed</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>afa07e9393be0cfd33693b54dcca1611f</anchor>
      <arglist>(const Glib::ustring &amp;action_name)</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, const Glib::ustring &amp;&gt;</type>
      <name>signal_action_removed</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a8745e0d4814243c6f5966fdab4d0a836</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxyDetailedAnyType&lt; void, const Glib::ustring &amp;&gt;</type>
      <name>signal_action_removed</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>af029dceedef03f9aa5604d813946630c</anchor>
      <arglist>(const Glib::ustring &amp;action_name)</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, const Glib::ustring &amp;, const Glib::VariantBase &amp;&gt;</type>
      <name>signal_action_state_changed</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>ac6eba8cb0b47069a8576e6ce0de60bc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxyDetailedAnyType&lt; void, const Glib::ustring &amp;, const Glib::VariantBase &amp;&gt;</type>
      <name>signal_action_state_changed</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>aec9b8956be61d292f4f1c80e534f2cc7</anchor>
      <arglist>(const Glib::ustring &amp;action_name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>has_action_vfunc</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a4f8074ed60d479d54a890799052f15d2</anchor>
      <arglist>(const Glib::ustring &amp;name) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; Glib::ustring &gt;</type>
      <name>list_actions_vfunc</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a51a9ee3d126097b466245508daebb635</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>get_action_enabled_vfunc</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a15820ec7bd83a9cf031b91068daa3706</anchor>
      <arglist>(const Glib::ustring &amp;name) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::VariantType</type>
      <name>get_action_parameter_type_vfunc</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a287b6da3cbde325b94dec0e347b7ac6e</anchor>
      <arglist>(const Glib::ustring &amp;name) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::VariantType</type>
      <name>get_action_state_type_vfunc</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a08822c575a5ac480846eb712f44835e8</anchor>
      <arglist>(const Glib::ustring &amp;name) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::VariantBase</type>
      <name>get_action_state_hint_vfunc</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>ab5e4bf02931c4f5002c511b5580d3951</anchor>
      <arglist>(const Glib::ustring &amp;name) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::VariantBase</type>
      <name>get_action_state_vfunc</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a764b37cab20074282ce76c0a2b58640c</anchor>
      <arglist>(const Glib::ustring &amp;name) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>change_action_state_vfunc</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>aa621807bd6c8ce09466a03f4b4d7cf04</anchor>
      <arglist>(const Glib::ustring &amp;name, const Glib::VariantBase &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>activate_action_vfunc</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a0dca67391676bf10e3e4bd167dfeba62</anchor>
      <arglist>(const Glib::ustring &amp;name, const Glib::VariantBase &amp;parameter)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a19d09dd80a81909b8927ebe631de486a</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>abb04677c5e63eb413f111339ea385568</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ActionGroup</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>ab609e11f0c2f1fc50b7a1fa44a28e052</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_action_added</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a1f2650b664d5147b80e90648cd765267</anchor>
      <arglist>(const Glib::ustring &amp;action_name)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_action_enabled_changed</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a9a7e4f8b6320487ef072937f1c617f29</anchor>
      <arglist>(const Glib::ustring &amp;action_name, bool enabled)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_action_removed</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>abfd41d6c32940285f651aaa09aede3d9</anchor>
      <arglist>(const Glib::ustring &amp;action_name)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_action_state_changed</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>acb99c786b38bc8b55d3b9d82df6a9853</anchor>
      <arglist>(const Glib::ustring &amp;action_name, const Glib::VariantBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::ActionGroup &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a428112d0fff62242c0d4e3f31f076f8c</anchor>
      <arglist>(GActionGroup *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::ActionMap</name>
    <filename>classGio_1_1ActionMap.html</filename>
    <base>Glib::Interface</base>
    <member kind="typedef">
      <type>sigc::slot&lt; void &gt;</type>
      <name>ActivateSlot</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>abf2cce2ba0840b59724ab4ef852e4de1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void, const Glib::VariantBase &amp; &gt;</type>
      <name>ActivateWithParameterSlot</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>a68656be48a3eadd7128de841419fe470</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void, const Glib::ustring &amp; &gt;</type>
      <name>ActivateWithStringParameterSlot</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>ac5344c6412f64c6f22a8d2efe40319d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void, int &gt;</type>
      <name>ActivateWithIntParameterSlot</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>a317a4385cc1008122440d12749bda708</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ActionMap</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>a6403f38a400c1cffdc7f572c2391d97d</anchor>
      <arglist>(ActionMap &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ActionMap &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>a8a3bc4039ea70bc4a80a9cbf64b01b39</anchor>
      <arglist>(ActionMap &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ActionMap</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>acdf9a04d708e81bb56f726c0ca1f4475</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GActionMap *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>a7733b9ec4c8ad7f36887661e1c5118d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GActionMap *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>ac2fe46c4e5e7c5ae0a72dff23aa3a0f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_action</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>a3cd54f21b2f817b279c6e47154610852</anchor>
      <arglist>(const Glib::RefPtr&lt; Action &gt; &amp;action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_action</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>afd8bcc4209fae2afbb0aba3f90c8bb0d</anchor>
      <arglist>(const Glib::ustring &amp;action_name)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Action &gt;</type>
      <name>lookup_action</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>aca337f535c1db1d435bbf79d9e7d3c0e</anchor>
      <arglist>(const Glib::ustring &amp;action_name)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Action &gt;</type>
      <name>lookup_action</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>a15cdc4348ddd3c362b2d874b535a5578</anchor>
      <arglist>(const Glib::ustring &amp;action_name) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SimpleAction &gt;</type>
      <name>add_action</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>a784dfa4573e994ac452d5e2dd56a5909</anchor>
      <arglist>(const Glib::ustring &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SimpleAction &gt;</type>
      <name>add_action</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>af98561d9fe5f98aa1e469be0ec55d82b</anchor>
      <arglist>(const Glib::ustring &amp;name, const ActivateSlot &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SimpleAction &gt;</type>
      <name>add_action_with_parameter</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>a3548d329e7abda0d6325c1f75a799da6</anchor>
      <arglist>(const Glib::ustring &amp;name, const ActivateWithParameterSlot &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SimpleAction &gt;</type>
      <name>add_action_with_parameter</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>ae95f49cb4d4516d7bb2f2699b1b16b55</anchor>
      <arglist>(const Glib::ustring &amp;name, const Glib::VariantType &amp;parameter_type, const ActivateWithParameterSlot &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SimpleAction &gt;</type>
      <name>add_action_bool</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>aec19298dafe16546dd4c664fd3f3ef3f</anchor>
      <arglist>(const Glib::ustring &amp;name, bool state=false)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SimpleAction &gt;</type>
      <name>add_action_bool</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>a1e0cfe16737aa26601508a0b912f6fea</anchor>
      <arglist>(const Glib::ustring &amp;name, const ActivateSlot &amp;slot, bool state=false)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SimpleAction &gt;</type>
      <name>add_action_radio_string</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>a99f4d541960158961ba0e30209ca1b2d</anchor>
      <arglist>(const Glib::ustring &amp;name, const Glib::ustring &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SimpleAction &gt;</type>
      <name>add_action_radio_string</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>a5324d4987143dadbd08d5696e99bb66d</anchor>
      <arglist>(const Glib::ustring &amp;name, const ActivateWithStringParameterSlot &amp;slot, const Glib::ustring &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SimpleAction &gt;</type>
      <name>add_action_radio_integer</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>aaa389cd74fb2455308b9d19d8a06601e</anchor>
      <arglist>(const Glib::ustring &amp;name, gint32 state)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SimpleAction &gt;</type>
      <name>add_action_radio_integer</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>ad106a05dd5179295c5d037c1ebad66f9</anchor>
      <arglist>(const Glib::ustring &amp;name, const ActivateWithIntParameterSlot &amp;slot, gint32 state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::RefPtr&lt; Action &gt;</type>
      <name>lookup_action_vfunc</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>a6965a7b2a0dd0326076f5ff84a3806fc</anchor>
      <arglist>(const Glib::ustring &amp;name) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add_action_vfunc</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>ab76fded906ba6681080e188956087581</anchor>
      <arglist>(Glib::RefPtr&lt; Action &gt; action) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>remove_action_vfunc</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>af9666b169b2fc68093950d8aacf1cf28</anchor>
      <arglist>(const Glib::ustring &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>a6e390dc3b7c4bb4422fbfafbb3190173</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>a24704a273680f1947ea09b72a6268146</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ActionMap</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>ad507af7d6d501b3e3e23f7838fd093e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::ActionMap &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>a58108146b22f328cb2153f3bcbd0c07b</anchor>
      <arglist>(GActionMap *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::AppInfo</name>
    <filename>classGio_1_1AppInfo.html</filename>
    <base>Glib::Interface</base>
    <member kind="function">
      <type></type>
      <name>AppInfo</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a0d5a1b1bebcbfa57387e9eba626b64c4</anchor>
      <arglist>(AppInfo &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AppInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>ad110078d86238bfa5c5457e7a7d80571</anchor>
      <arglist>(AppInfo &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AppInfo</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>aacaf2d0110259d8e3a10d4b0be0dfa9a</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GAppInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>ab31e9bca0208159f0be42227397b8a94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GAppInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>ab6cde38716e9752b2fc37fecd8ab5ef1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; AppInfo &gt;</type>
      <name>create_duplicate</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>af7d00351eec3acacc8ba7f6bad3155ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a6bef66c69318bba775b3a0407851409b</anchor>
      <arglist>(const Glib::RefPtr&lt; AppInfo &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_id</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>aa213a9dba56ef3fb8b6d942598465295</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_name</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a1a323314cb372ffeff2f7b943b334e88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_display_name</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a216d923382a31bd5f1a6e7f444af9bf4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_description</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a80fd19502c16648848fcbfd7ec577594</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_executable</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>af207c9db42f5857af55cd00153a0f091</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_commandline</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a76a66fc7701638175d599507726539a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Icon &gt;</type>
      <name>get_icon</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a35a0c2c10ee787cc5d1d4ac7773bab0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Glib::RefPtr&lt; const Icon &gt;</type>
      <name>get_icon</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a9cee4701bbebc0311a909d2bbb0917a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>launch</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>af9079f56ea37a27dcabdb041707dbd50</anchor>
      <arglist>(const Glib::RefPtr&lt; Gio::File &gt; &amp;file, const Glib::RefPtr&lt; AppLaunchContext &gt; &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>launch</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a1e86424b7f3b683618431f26b734dae6</anchor>
      <arglist>(const Glib::RefPtr&lt; Gio::File &gt; &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>launch</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>afb9803d5a199e8f52e10a514e1f04904</anchor>
      <arglist>(const std::vector&lt; Glib::RefPtr&lt; Gio::File &gt; &gt; &amp;files, const Glib::RefPtr&lt; AppLaunchContext &gt; &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>launch</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a564a73066abb31e967b47996bfcb7ae1</anchor>
      <arglist>(const std::vector&lt; Glib::RefPtr&lt; Gio::File &gt; &gt; &amp;files)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>supports_uris</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>acf7b9f7dbf125b7202b9509a487ac297</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>supports_files</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>af54e41b88229dc06650bb61479a1ba83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>launch_uris</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a672f83767cf814986c615608ebff3e27</anchor>
      <arglist>(const Glib::ListHandle&lt; std::string &gt; &amp;uris, GAppLaunchContext *context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>launch_uris</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>aac3462b5b46847a6f5b9cf05b9625f60</anchor>
      <arglist>(const Glib::ListHandle&lt; std::string &gt; &amp;uris, const Glib::RefPtr&lt; AppLaunchContext &gt; &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>launch_uris</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>abd6088290069f9a94ced5e4c6ef4291e</anchor>
      <arglist>(const Glib::ListHandle&lt; std::string &gt; &amp;uris)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>launch_uri</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>ae8d4be7b3e1b8a6ea02d5d9c64da661b</anchor>
      <arglist>(const std::string &amp;uris, const Glib::RefPtr&lt; AppLaunchContext &gt; &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>launch_uri</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a7fe4ef78cda00dbdb7a1f9c6f7038e2b</anchor>
      <arglist>(const std::string &amp;uris)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>should_show</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a392d63d07bd7e5e59300aa82e0e8cdff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_delete</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a54c165961f585c9f7712813948271a15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>do_delete</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a634d024dee3e412df7dc794a280a438e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_as_default_for_type</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a59cefa47ef35940d5c0b74a396728808</anchor>
      <arglist>(const std::string &amp;content_type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_as_default_for_extension</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a33b6e19f73a30f1dde7913282aa20aeb</anchor>
      <arglist>(const std::string &amp;extension)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add_supports_type</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a0dedbcba19457176114948c80efdfbe4</anchor>
      <arglist>(const std::string &amp;content_type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_remove_supports_type</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a79a7d3799452f42f8e5ecee1c88cafab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove_supports_type</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>aa1e9856c39e12c5ad1770299e391b6c0</anchor>
      <arglist>(const std::string &amp;content_type)</arglist>
    </member>
    <member kind="function">
      <type>Glib::StringArrayHandle</type>
      <name>get_supported_types</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a264929e63bfd7fc2b32fa15228753b68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_as_last_used_for_type</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a0a4ac1c4cec460b52eb18ac3029dd851</anchor>
      <arglist>(const std::string &amp;content_type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a12bbf2ad90f8915f46c3a49b6354e8ec</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>acd648d51cd85afa83a57c71e0679cbcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; AppInfo &gt;</type>
      <name>create_from_commandline</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>ac77db461b3142c9459c8c1a211672bf9</anchor>
      <arglist>(const std::string &amp;commandline, const std::string &amp;application_name, AppInfoCreateFlags flags)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::ListHandle&lt; Glib::RefPtr&lt; AppInfo &gt; &gt;</type>
      <name>get_all</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a21c3fa9bf0f708f3cf52ec38eb837c2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::ListHandle&lt; Glib::RefPtr&lt; AppInfo &gt; &gt;</type>
      <name>get_all_for_type</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a05bb9f05067d8469f2de981794a31302</anchor>
      <arglist>(const std::string &amp;content_type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; AppInfo &gt;</type>
      <name>get_default_for_type</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a42907d07abfa7e35e2f220436d3fcb72</anchor>
      <arglist>(const std::string &amp;content_type, bool must_support_uris=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; AppInfo &gt;</type>
      <name>get_default_for_uri_scheme</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>ac278c0e445faed4288c6a719e059e0da</anchor>
      <arglist>(const std::string &amp;uri_scheme)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>reset_type_associations</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a01913be6448947643c9de26bddd0659c</anchor>
      <arglist>(const std::string &amp;content_type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>launch_default_for_uri</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>acf9d831fcddbf5626b1e1b9ff70c8598</anchor>
      <arglist>(const std::string &amp;uri, const Glib::RefPtr&lt; AppLaunchContext &gt; &amp;context)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>launch_default_for_uri</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a164a90bd2c00e9c4acb1194c475dd5d5</anchor>
      <arglist>(const std::string &amp;uri)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>launch_default_for_uri_async</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a9f62550dfdf89f8e40beefb9cad954c8</anchor>
      <arglist>(const std::string &amp;uri, const Glib::RefPtr&lt; AppLaunchContext &gt; &amp;context, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>launch_default_for_uri_async</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>afc7f3b3afa4d8fba260adbd04d415e28</anchor>
      <arglist>(const std::string &amp;uri, const Glib::RefPtr&lt; AppLaunchContext &gt; &amp;context, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>launch_default_for_uri_async</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>aca208ccec5fbc47994e40b21964a3f89</anchor>
      <arglist>(const std::string &amp;uri, const Glib::RefPtr&lt; AppLaunchContext &gt; &amp;context, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>launch_default_for_uri_async</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>acf100d9d91329d297cb6cf48fc789f65</anchor>
      <arglist>(const std::string &amp;uri, const Glib::RefPtr&lt; AppLaunchContext &gt; &amp;context)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>launch_default_for_uri_async</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>abee9e61a8f842c65b631c2813cf71cc7</anchor>
      <arglist>(const std::string &amp;uri, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>launch_default_for_uri_async</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>adc752d24e8d188304d2f245c2db42c84</anchor>
      <arglist>(const std::string &amp;uri, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>launch_default_for_uri_async</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>aac20e1c9ab244634cd4c217d477ded3b</anchor>
      <arglist>(const std::string &amp;uri, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>launch_default_for_uri_async</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a793db7ad462622f3d413449f1db9e909</anchor>
      <arglist>(const std::string &amp;uri)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>launch_default_for_uri_finish</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a8e36f34fe0b871f69c4ce68ca04e97e0</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AppInfo</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>affdc34dc0642b5a17cb53aadd8e02806</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::AppInfo &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a074ab0526fd01e5ee2daf2c81c17f552</anchor>
      <arglist>(GAppInfo *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::AppLaunchContext</name>
    <filename>classGio_1_1AppLaunchContext.html</filename>
    <base>Glib::Object</base>
    <member kind="function">
      <type></type>
      <name>AppLaunchContext</name>
      <anchorfile>classGio_1_1AppLaunchContext.html</anchorfile>
      <anchor>a702511e3fb6e926096e59f7ef896e38a</anchor>
      <arglist>(AppLaunchContext &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AppLaunchContext &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1AppLaunchContext.html</anchorfile>
      <anchor>a727d932b20a9c581727d5494454cc449</anchor>
      <arglist>(AppLaunchContext &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AppLaunchContext</name>
      <anchorfile>classGio_1_1AppLaunchContext.html</anchorfile>
      <anchor>a15ead04ec051ef96ac561c8e81b907d0</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GAppLaunchContext *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1AppLaunchContext.html</anchorfile>
      <anchor>a41ed3abab4ad83b765974dfa6cb66067</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GAppLaunchContext *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1AppLaunchContext.html</anchorfile>
      <anchor>a21b096a9264cfb427754049fbcb9cbce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GAppLaunchContext *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1AppLaunchContext.html</anchorfile>
      <anchor>ac14e1569a0a5a81f846c0e11e7109011</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setenv</name>
      <anchorfile>classGio_1_1AppLaunchContext.html</anchorfile>
      <anchor>ab96bed2c0a5ad1ab135a54585da697c4</anchor>
      <arglist>(const Glib::ustring &amp;variable, const Glib::ustring &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsetenv</name>
      <anchorfile>classGio_1_1AppLaunchContext.html</anchorfile>
      <anchor>a36b7dbc0301cebdf9d3dcf5ec589db04</anchor>
      <arglist>(const Glib::ustring &amp;variable)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::ustring &gt;</type>
      <name>get_environment</name>
      <anchorfile>classGio_1_1AppLaunchContext.html</anchorfile>
      <anchor>a75c663c7b5062b3c8f4c002290bebc30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_display</name>
      <anchorfile>classGio_1_1AppLaunchContext.html</anchorfile>
      <anchor>acb9df3c4d0856cf54725a0ec1baf29cb</anchor>
      <arglist>(const Glib::RefPtr&lt; AppInfo &gt; &amp;info, const Glib::ListHandle&lt; Glib::RefPtr&lt; Gio::File &gt; &gt; &amp;files)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_startup_notify_id</name>
      <anchorfile>classGio_1_1AppLaunchContext.html</anchorfile>
      <anchor>ac76a58054fccd2cfc6f3554e1d4b012a</anchor>
      <arglist>(const Glib::RefPtr&lt; AppInfo &gt; &amp;info, const Glib::ListHandle&lt; Glib::RefPtr&lt; Gio::File &gt; &gt; &amp;files)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>launch_failed</name>
      <anchorfile>classGio_1_1AppLaunchContext.html</anchorfile>
      <anchor>aeb5fe002776ad4f040b6be49fa25b46a</anchor>
      <arglist>(const std::string &amp;startup_notify_id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1AppLaunchContext.html</anchorfile>
      <anchor>accc93a5b33f2f4b4609796c8f4db94c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; AppLaunchContext &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1AppLaunchContext.html</anchorfile>
      <anchor>a9e0b952987932c15f4f8ac7ae6d2e046</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AppLaunchContext</name>
      <anchorfile>classGio_1_1AppLaunchContext.html</anchorfile>
      <anchor>a04c6b83e39f16c6ae04ad10c387e2cec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::AppLaunchContext &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1AppLaunchContext.html</anchorfile>
      <anchor>a3cda3d0a285e3ad87f1c94142b04a688</anchor>
      <arglist>(GAppLaunchContext *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::Application</name>
    <filename>classGio_1_1Application.html</filename>
    <base>Glib::Object</base>
    <base>Gio::ActionGroup</base>
    <base>Gio::ActionMap</base>
    <member kind="enumeration">
      <type></type>
      <name>OptionType</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gabd6606988f30170f2e53b2b121f2b219</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTION_TYPE_BOOL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd6606988f30170f2e53b2b121f2b219a31b0b3d2951ef1533e8a2775db79250e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTION_TYPE_STRING</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd6606988f30170f2e53b2b121f2b219a018d6130d8f46e1dbdf7db263c54d05e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTION_TYPE_INT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd6606988f30170f2e53b2b121f2b219ab5f2e456b9c5bd209c872b11a878d29b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTION_TYPE_FILENAME</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd6606988f30170f2e53b2b121f2b219aa24cb753e2b6aa5411bbc242217935ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTION_TYPE_STRING_VECTOR</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd6606988f30170f2e53b2b121f2b219adc4a9ed1661944d8301d372708915d78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTION_TYPE_FILENAME_VECTOR</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd6606988f30170f2e53b2b121f2b219a9f3ccf0b9217a0d5380bc97d11117c58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTION_TYPE_DOUBLE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd6606988f30170f2e53b2b121f2b219a320a43020a59acf7a724177a30d0265e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTION_TYPE_INT64</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd6606988f30170f2e53b2b121f2b219ae4ceecbbf5f1e343ca896fcd442d707f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Glib::RefPtr&lt; File &gt; &gt;</type>
      <name>type_vec_files</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a84940225c51259e8a97fc968d884719f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTION_TYPE_BOOL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd6606988f30170f2e53b2b121f2b219a31b0b3d2951ef1533e8a2775db79250e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTION_TYPE_STRING</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd6606988f30170f2e53b2b121f2b219a018d6130d8f46e1dbdf7db263c54d05e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTION_TYPE_INT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd6606988f30170f2e53b2b121f2b219ab5f2e456b9c5bd209c872b11a878d29b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTION_TYPE_FILENAME</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd6606988f30170f2e53b2b121f2b219aa24cb753e2b6aa5411bbc242217935ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTION_TYPE_STRING_VECTOR</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd6606988f30170f2e53b2b121f2b219adc4a9ed1661944d8301d372708915d78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTION_TYPE_FILENAME_VECTOR</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd6606988f30170f2e53b2b121f2b219a9f3ccf0b9217a0d5380bc97d11117c58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTION_TYPE_DOUBLE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd6606988f30170f2e53b2b121f2b219a320a43020a59acf7a724177a30d0265e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTION_TYPE_INT64</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd6606988f30170f2e53b2b121f2b219ae4ceecbbf5f1e343ca896fcd442d707f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Application</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a527499b1fac892db84b79fb496f36392</anchor>
      <arglist>(Application &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Application &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>ab25f22fcaa48cf360d954ab0b09f02d5</anchor>
      <arglist>(Application &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Application</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>ab0c103b42c1956a2659bc32842c37eec</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GApplication *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a5bf7165c776bb2979a15da499b67b906</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GApplication *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>abd36f54b082dc347c177827b020703b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GApplication *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a554fe8f0fbd560c6ab28fc7c49ac3ce5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_id</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>ae7bcda78590028fb7a1a507ebe61f272</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_id</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a4a33387fd6130b5305ca410c95d2ef96</anchor>
      <arglist>(const Glib::ustring &amp;application_id)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; DBus::Connection &gt;</type>
      <name>get_dbus_connection</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a1b7f24a60afc884e40ab49461790a0a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const DBus::Connection &gt;</type>
      <name>get_dbus_connection</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a3d760aebcd86e6dfce58bc9c9a411902</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_dbus_object_path</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>af4482bd6d369041e9d3a277e6a886193</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>get_inactivity_timeout</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a712e938a0b07d7a12890148f7ede7867</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_inactivity_timeout</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a19eebde1f77194f294e7f00f773ba1b7</anchor>
      <arglist>(guint inactivity_timeout)</arglist>
    </member>
    <member kind="function">
      <type>ApplicationFlags</type>
      <name>get_flags</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a20d472117da16b73a779fbc5aab77930</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_flags</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>aefe6afbad1f139beafeada33a9e72db4</anchor>
      <arglist>(ApplicationFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_resource_base_path</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a4249f93597e87b560e85773a28355947</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_resource_base_path</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>aea5e5103e2891d2c11ab408aee0bc7cb</anchor>
      <arglist>(const std::string &amp;resource_path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unset_resource_base_path</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a3b8ce1a8981e43337c74f61ac9646747</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_action_group</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a9bf1e6006b6eac3e7ccefc1e6bfc92c4</anchor>
      <arglist>(const Glib::RefPtr&lt; ActionGroup &gt; &amp;action_group)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_main_option_entry</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a2bf725f62f0f5f37831fb6c9dbf98cbb</anchor>
      <arglist>(OptionType arg_type, const Glib::ustring &amp;long_name, gchar short_name=&apos;\0&apos;, const Glib::ustring &amp;description=Glib::ustring(), const Glib::ustring &amp;arg_description=Glib::ustring(), int flags=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_main_option_entry</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a8edee1307310099cb0d8ca3e3a62e377</anchor>
      <arglist>(const Glib::OptionGroup::SlotOptionArgString &amp;slot, const Glib::ustring &amp;long_name, gchar short_name=&apos;\0&apos;, const Glib::ustring &amp;description=Glib::ustring(), const Glib::ustring &amp;arg_description=Glib::ustring(), int flags=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_main_option_entry_filename</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>ad2b41a2ce184f336aa5b1fafc749897f</anchor>
      <arglist>(const Glib::OptionGroup::SlotOptionArgFilename &amp;slot, const Glib::ustring &amp;long_name, gchar short_name=&apos;\0&apos;, const Glib::ustring &amp;description=Glib::ustring(), const Glib::ustring &amp;arg_description=Glib::ustring(), int flags=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_option_context_parameter_string</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a3192ac1dd8753f5c3d6a77ffdecb9e95</anchor>
      <arglist>(const Glib::ustring &amp;parameter_string)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_option_context_summary</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a239a2d145f86a36cbc56a17492ff1b16</anchor>
      <arglist>(const Glib::ustring &amp;summary)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_option_context_description</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a114d4151379039701457bb8493e3ee26</anchor>
      <arglist>(const Glib::ustring &amp;description)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_registered</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>aa688563127ac43d18141e94eb0018b7f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_remote</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a9b3b75abf5fb22bd1eebb138bb59f128</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>register_application</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>adc6e597f2d27521f3658c6b8b48d9ae0</anchor>
      <arglist>(const Glib::RefPtr&lt; Gio::Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>register_application</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a8964856be3086656cc1f933381754d3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hold</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>ae20746f00a9ae5a98b21f469c079bc65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a8d279ffaf0b8ea548ac5ae1db0ebe0a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activate</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a933c7e0d462692cf7389ab3b08b6e883</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a41a766989330ceba997254c31d322e5f</anchor>
      <arglist>(const type_vec_files &amp;files, const Glib::ustring &amp;hint=Glib::ustring())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a5f72e3bf2d0826d69067e6138a97d47b</anchor>
      <arglist>(const Glib::RefPtr&lt; Gio::File &gt; &amp;file, const Glib::ustring &amp;hint=Glib::ustring())</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>run</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>add3bdf8c89411777cb44d6ce5aa26f9b</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quit</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a0420530131f4303251091dac443b1961</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mark_busy</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>afb0429cbaaaf8bc48f461a90507fc157</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unmark_busy</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>acb096763f2db84419d2d3e32f0393d04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_busy</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a34746a96594f742084b601d8d516f760</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_notification</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a76d3d76f750a48fdbb965079b6619209</anchor>
      <arglist>(const Glib::ustring &amp;id, const Glib::RefPtr&lt; Notification &gt; &amp;notification)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_notification</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a7f9412ab2649d6c9ec77fed22b7ede71</anchor>
      <arglist>(const Glib::RefPtr&lt; Notification &gt; &amp;notification)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>withdraw_notification</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a0ac34e395e0a335bdf60022be1804e34</anchor>
      <arglist>(const Glib::ustring &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_WriteOnly&lt; Glib::RefPtr&lt; ActionGroup &gt; &gt;</type>
      <name>property_action_group</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>abc3c0d24a55249fca479302d97a21217</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; Glib::ustring &gt;</type>
      <name>property_application_id</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>ae7aa0fb864de6c4c61f62c9bad6b2c8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_application_id</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>af3577c8e1122d1f46e4b826e10add696</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; ApplicationFlags &gt;</type>
      <name>property_flags</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>ab478a16ab3e8a5d2819c5abe2590b88b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; ApplicationFlags &gt;</type>
      <name>property_flags</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>aed81913841d90b59a67da759b0c92220</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; guint &gt;</type>
      <name>property_inactivity_timeout</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a037c44160c6fb4f305ad3ce0c098c9b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; guint &gt;</type>
      <name>property_inactivity_timeout</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a8a708a9b77328e65780b12f703bf5d40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_is_registered</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>ac4086d22c52c15c748189ac88987311e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_is_remote</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a920b4061965729fa49c7ac8ed680b375</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_resource_base_path</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>ad71dce18e50533290571586ea0666a00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_resource_base_path</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a0fea5d21dd07018284d24eef10b4c9c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; std::string &gt;</type>
      <name>property_resource_base_path_string</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a83c30160c632cd834159fe98a1da004a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; std::string &gt;</type>
      <name>property_resource_base_path_string</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a8d138bf928bd1f248028e38f4db76302</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_is_busy</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a4a8707e43a712cabb6964d187d3b9196</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void &gt;</type>
      <name>signal_startup</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>adba5f298b72c5c8cc5a5a1aa37aff479</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void &gt;</type>
      <name>signal_shutdown</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a062b43b0b8de05e82e5d8e0a8bde8fdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void &gt;</type>
      <name>signal_activate</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a2dd1fb75ca34eaa041f5cbff338aa2ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, const type_vec_files &amp;, const Glib::ustring &amp;&gt;</type>
      <name>signal_open</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a1b8f9c2614df531044d7c5259b746256</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; int, const Glib::RefPtr&lt; ApplicationCommandLine &gt; &amp;&gt;</type>
      <name>signal_command_line</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a940f9249fc36306c73114e93aa753883</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; int, const Glib::RefPtr&lt; Glib::VariantDict &gt; &amp;&gt;</type>
      <name>signal_handle_local_options</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a808270a096cfab0d84790dce076507c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a63cc5cae8c93f4cb344cbeab0cdfcef3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Application &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a49723f8caca339ff409c077d49425327</anchor>
      <arglist>(const Glib::ustring &amp;application_id=Glib::ustring(), ApplicationFlags flags=APPLICATION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>id_is_valid</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>ad9d589ea6286e7518017494117f465a2</anchor>
      <arglist>(const Glib::ustring &amp;application_id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set_default</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a13e52a81fba2eca92dc7e2e582dc409d</anchor>
      <arglist>(const Glib::RefPtr&lt; Application &gt; &amp;application)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unset_default</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>aaff99f1512e9dde8fd3c182d71c82cc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Application &gt;</type>
      <name>get_default</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a00e9413f162dffe7b7c6dbc09fa83bfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Application</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>ab36332457ba478951f7743ed48324c6b</anchor>
      <arglist>(const Glib::ustring &amp;application_id=Glib::ustring(), ApplicationFlags flags=APPLICATION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_open</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a11939a724e0ab8ddfa3989a950dce5ed</anchor>
      <arglist>(const type_vec_files &amp;files, const Glib::ustring &amp;hint)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>local_command_line_vfunc</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a83d78cc068e04862a3d0fdab1afa48f8</anchor>
      <arglist>(char **&amp;arguments, int &amp;exit_status)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>before_emit_vfunc</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a32ff64453c75b262ec3c39f584d860d3</anchor>
      <arglist>(const Glib::VariantBase &amp;platform_data)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>after_emit_vfunc</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a24a45fbd57b7863e073d0bf120adb52e</anchor>
      <arglist>(const Glib::VariantBase &amp;platform_data)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>quit_mainloop_vfunc</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a2071fdc29b98017584d0a5ad6ca25236</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>run_mainloop_vfunc</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>acec64d0bcee724c3cb83bf124159e5d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_startup</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a1f101517a3cfad44c71f5b147893cccb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_activate</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>af764ec32aee390fc888a4236ef7f4b8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>on_command_line</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a3a061412c26150b96c69a0595325b707</anchor>
      <arglist>(const Glib::RefPtr&lt; ApplicationCommandLine &gt; &amp;command_line)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Application &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a49c378c598e06036b2ed954dd6405706</anchor>
      <arglist>(GApplication *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::ApplicationCommandLine</name>
    <filename>classGio_1_1ApplicationCommandLine.html</filename>
    <base>Glib::Object</base>
    <member kind="function">
      <type></type>
      <name>ApplicationCommandLine</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>a8aad26b384bbd7cd97b0e989e607ba27</anchor>
      <arglist>(ApplicationCommandLine &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ApplicationCommandLine &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>ab308360b5c2f90c577298d62925ffcee</anchor>
      <arglist>(ApplicationCommandLine &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ApplicationCommandLine</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>ace26403d392356355278423ba5660d54</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GApplicationCommandLine *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>a4164115e133faeba88f120179790e870</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GApplicationCommandLine *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>adf6b029287942c03023c7b6ca6333349</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GApplicationCommandLine *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>a2110250bf429a7d01670420fd06e3c96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>char **</type>
      <name>get_arguments</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>a1d45384448da1e8774f9374329ab6af1</anchor>
      <arglist>(int &amp;argc) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Glib::VariantDict &gt;</type>
      <name>get_options_dict</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>ac361e879901096590f95a30d5b8ba3cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Glib::VariantDict &gt;</type>
      <name>get_options_dict</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>a79c2560ececf0624c5edf8544ac98046</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; InputStream &gt;</type>
      <name>get_stdin</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>a252d466396f0be57c51ef0a493e5bb01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const InputStream &gt;</type>
      <name>get_stdin</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>a9083234b8ee4d515dd1e0bb4e171ec30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_cwd</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>af370436ffec2bfdeffcf107ee38b7b79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>get_environ</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>ad5a59fd433a124127049cef5b1aa40a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getenv</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>a4e97dc1d8c78f0ab39562d1be7b4d011</anchor>
      <arglist>(const Glib::ustring &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_remote</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>a206e72222f2ba946e67f00efb09aac6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::Variant&lt; std::map&lt; Glib::ustring, Glib::VariantBase &gt; &gt;</type>
      <name>get_platform_data</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>a84896c4e3efc982c6516239ad4cc4272</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_exit_status</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>a1f4ae1a2fc62b6a3cbe48f1751f7c886</anchor>
      <arglist>(int exit_status)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_exit_status</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>af4e3c036e14a2c3130afa1ab514ccd07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>a7b09db106ab8473149c9585bef47024b</anchor>
      <arglist>(const Glib::ustring &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printerr</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>aebab1a57ff18a18a651c95ae0b1d0146</anchor>
      <arglist>(const Glib::ustring &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; File &gt;</type>
      <name>create_file_for_arg</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>aa97fbc054828a4e46c050909d9e14617</anchor>
      <arglist>(const Glib::ustring &amp;arg) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>a9180788048a1d94d59593c4feaa46d95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ApplicationCommandLine</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>a33112e7fdeb3f82a7c08f50d35710d64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::ApplicationCommandLine &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>a4888027a1e5b3562c802965418b8b740</anchor>
      <arglist>(GApplicationCommandLine *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::AsyncInitable</name>
    <filename>classGio_1_1AsyncInitable.html</filename>
    <base>Glib::Interface</base>
    <member kind="function">
      <type></type>
      <name>AsyncInitable</name>
      <anchorfile>classGio_1_1AsyncInitable.html</anchorfile>
      <anchor>addf5422b731c672d042c6c7e8da787ef</anchor>
      <arglist>(AsyncInitable &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AsyncInitable &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1AsyncInitable.html</anchorfile>
      <anchor>ae3bb694af6e28518a5d3f401a64272d9</anchor>
      <arglist>(AsyncInitable &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AsyncInitable</name>
      <anchorfile>classGio_1_1AsyncInitable.html</anchorfile>
      <anchor>ae22eeb0b781a07a95476d6585dcb9731</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GAsyncInitable *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1AsyncInitable.html</anchorfile>
      <anchor>a17b715d899d7ff40a10e98cbc04fb950</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GAsyncInitable *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1AsyncInitable.html</anchorfile>
      <anchor>acc37022cd45551603b86bd7eb3f4449e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1AsyncInitable.html</anchorfile>
      <anchor>ac9d58b099c38f8957f8780b459cd68dd</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1AsyncInitable.html</anchorfile>
      <anchor>ad13b8625eb70ea9c8af3fd5c3b9d2460</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AsyncInitable</name>
      <anchorfile>classGio_1_1AsyncInitable.html</anchorfile>
      <anchor>aec93b083db2e2e8609ef916bf5f11e32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init_async</name>
      <anchorfile>classGio_1_1AsyncInitable.html</anchorfile>
      <anchor>ae1439e78cf813af329c36239c838b0ab</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init_async</name>
      <anchorfile>classGio_1_1AsyncInitable.html</anchorfile>
      <anchor>a05377786e1a1edd01541fd5768db65fa</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>init_finish</name>
      <anchorfile>classGio_1_1AsyncInitable.html</anchorfile>
      <anchor>a07df2b8ecba0a06d7ff26d08ba86e9df</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Glib::RefPtr&lt; Glib::Object &gt;</type>
      <name>create_finish</name>
      <anchorfile>classGio_1_1AsyncInitable.html</anchorfile>
      <anchor>a9545cbf4fe23c6217d32efd2f75b489d</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>init_async_vfunc</name>
      <anchorfile>classGio_1_1AsyncInitable.html</anchorfile>
      <anchor>affca6d14e16c2841101528edf768f9cc</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>init_finish_vfunc</name>
      <anchorfile>classGio_1_1AsyncInitable.html</anchorfile>
      <anchor>a14689b76b1fe02c25bf88ce0eec9f1d7</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::AsyncInitable &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1AsyncInitable.html</anchorfile>
      <anchor>a631d18f9a5459cbb3848b2098738e6d6</anchor>
      <arglist>(GAsyncInitable *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::AsyncResult</name>
    <filename>classGio_1_1AsyncResult.html</filename>
    <base>Glib::Interface</base>
    <member kind="function">
      <type></type>
      <name>AsyncResult</name>
      <anchorfile>classGio_1_1AsyncResult.html</anchorfile>
      <anchor>a3f5b7527b2944b25360df292a8646195</anchor>
      <arglist>(AsyncResult &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AsyncResult &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1AsyncResult.html</anchorfile>
      <anchor>a3b20f9bc103c814677eccc088a449a0f</anchor>
      <arglist>(AsyncResult &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AsyncResult</name>
      <anchorfile>classGio_1_1AsyncResult.html</anchorfile>
      <anchor>a99fa00a7123936f94da650f792b35ac0</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GAsyncResult *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1AsyncResult.html</anchorfile>
      <anchor>ad7ebc2ac808bd8eff4f4cd4f94c1c70a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GAsyncResult *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1AsyncResult.html</anchorfile>
      <anchor>a93de2a1accbba4cd11f33d20493004c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Glib::Object &gt;</type>
      <name>get_source_object</name>
      <anchorfile>classGio_1_1AsyncResult.html</anchorfile>
      <anchor>a3b89bee3ed3ff402ff58f836e1d2398e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Glib::Object &gt;</type>
      <name>get_source_object</name>
      <anchorfile>classGio_1_1AsyncResult.html</anchorfile>
      <anchor>a51d23fc896f541fb879cfb61eaba0c71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Glib::ObjectBase &gt;</type>
      <name>get_source_object_base</name>
      <anchorfile>classGio_1_1AsyncResult.html</anchorfile>
      <anchor>a65a9e867d84321b270e2b7be7b36e631</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Glib::ObjectBase &gt;</type>
      <name>get_source_object_base</name>
      <anchorfile>classGio_1_1AsyncResult.html</anchorfile>
      <anchor>a3cb1f3392aaa60ba323d214cd80455fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_tagged</name>
      <anchorfile>classGio_1_1AsyncResult.html</anchorfile>
      <anchor>a59b86f9aa9e88902c69380ee9051b0c8</anchor>
      <arglist>(gpointer source_tag) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::RefPtr&lt; Glib::ObjectBase &gt;</type>
      <name>get_source_object_vfunc</name>
      <anchorfile>classGio_1_1AsyncResult.html</anchorfile>
      <anchor>a305c556281152983343a2353e28ca05b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1AsyncResult.html</anchorfile>
      <anchor>a27a2e7a0488f8a3db08fa9547c791c6a</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1AsyncResult.html</anchorfile>
      <anchor>a2f0dc50fadce2a220280f885e3af1d88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AsyncResult</name>
      <anchorfile>classGio_1_1AsyncResult.html</anchorfile>
      <anchor>ad50735bd35c6bcd1d037ea4fb39eeac6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::AsyncResult &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1AsyncResult.html</anchorfile>
      <anchor>a08e7667c305f6c361345c9a8e261d73a</anchor>
      <arglist>(GAsyncResult *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::BufferedInputStream</name>
    <filename>classGio_1_1BufferedInputStream.html</filename>
    <base>Gio::FilterInputStream</base>
    <member kind="function">
      <type></type>
      <name>BufferedInputStream</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>a8dd907fee4a87dfc91208af97fc61efe</anchor>
      <arglist>(BufferedInputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BufferedInputStream &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>a8e292869360e1759985fb19dad94bc3f</anchor>
      <arglist>(BufferedInputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BufferedInputStream</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>abdabb7b16973ac5cd4e6a1e9af4e6501</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GBufferedInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>aa9d0c1e643650b9a45831865f06e21be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GBufferedInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>a14a9e57c8f3001060a273ba4b0969470</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GBufferedInputStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>a47dc5f78b1faed25cdaaafe42b526d6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>gsize</type>
      <name>get_buffer_size</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>aeb9a6a63c9976136ae8d561bd513eb9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_buffer_size</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>af5f861a5b30aadc48e21fb10a46afaa7</anchor>
      <arglist>(gsize size)</arglist>
    </member>
    <member kind="function">
      <type>gsize</type>
      <name>get_available</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>aedda2733ae6e15a0c06f268fd00a0bc6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>gsize</type>
      <name>peek</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>ac2d29b242729dcfe09ca96c74cff0963</anchor>
      <arglist>(void *buffer, gsize offset, gsize count) const</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>peek_buffer</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>a7c137693d43db328f7e165f5aece112f</anchor>
      <arglist>(gsize &amp;count) const</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>fill</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>a197687762599fb7c5b60141b55120cde</anchor>
      <arglist>(gssize count, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>fill</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>a271eab4876136b4960d37350738bfdfe</anchor>
      <arglist>(gssize count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill_async</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>a0a41790e04e9ba500eb18d1ce8371d34</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, gssize count, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill_async</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>aadb9c1b367e36c20c91e16ea840b6ef0</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, gssize count, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>fill_finish</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>a13c665ccc722a2544539086846137277</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read_byte</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>a85477f09b58dfb83e5a1ef62f119457a</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read_byte</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>a8741ffb62c82425f54bc5e005c2a238f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; guint &gt;</type>
      <name>property_buffer_size</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>a10be713afc0912c4a5fe89a2c40d943e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; guint &gt;</type>
      <name>property_buffer_size</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>a40051e41aaf50489e9eaed53c1ade904</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>aa08a6604e27f04c95fa7ed60838fff02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; BufferedInputStream &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>afc33c31f5c437df14d385d3aa9d1a37b</anchor>
      <arglist>(const Glib::RefPtr&lt; InputStream &gt; &amp;base_stream)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; BufferedInputStream &gt;</type>
      <name>create_sized</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>a0ecd42e418c250abc04bfa03f09b252c</anchor>
      <arglist>(const Glib::RefPtr&lt; InputStream &gt; &amp;base_stream, gsize buffer_size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BufferedInputStream</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>a0a81d8bea742203e775f796f73f46ea4</anchor>
      <arglist>(const Glib::RefPtr&lt; InputStream &gt; &amp;base_stream)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BufferedInputStream</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>afdadf0f95e646cdeede70af551f7fa85</anchor>
      <arglist>(const Glib::RefPtr&lt; InputStream &gt; &amp;base_stream, gsize buffer_size)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::BufferedInputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>adfe9bf4339f83095d6e96dda7b747575</anchor>
      <arglist>(GBufferedInputStream *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::BufferedOutputStream</name>
    <filename>classGio_1_1BufferedOutputStream.html</filename>
    <base>Gio::FilterOutputStream</base>
    <member kind="function">
      <type></type>
      <name>BufferedOutputStream</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>abdb5bd3a5c3276bd22fc253583fb32ea</anchor>
      <arglist>(BufferedOutputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BufferedOutputStream &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>a722c7af8d8daee3106b6f7878685bf6a</anchor>
      <arglist>(BufferedOutputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BufferedOutputStream</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>aebd39ed4a44ce05b617de6eea4513a17</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GBufferedOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>a6dfd09a0501267ef81030e3cf8e9ae47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GBufferedOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>a70c7734d19c3f0bb3270475c448637f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GBufferedOutputStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>a890c12d13d9f87332b00b785e32e4424</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>gsize</type>
      <name>get_buffer_size</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>ae10be9fc53a9f05fd9fe4d2501729c89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_buffer_size</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>a8044f48728b7020ba86e7364421b21fb</anchor>
      <arglist>(gsize size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_auto_grow</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>a5c308a93b5538db6c614b67e015474c5</anchor>
      <arglist>(bool auto_grow=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_auto_grow</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>a2c4159c614049dc31c6c9c7127017e58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; guint &gt;</type>
      <name>property_buffer_size</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>a4198c7a760017e659eb2b509c3dc5974</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; guint &gt;</type>
      <name>property_buffer_size</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>ab844f1de6c396bd963ce346e86002666</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_auto_grow</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>a0cf7d27482a3c64bf2078d9ed8dfef58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_auto_grow</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>a78460365ff90f1b7e926eafed525e8f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>af984ae9ac1c9ab19d9c72b23467018b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; BufferedOutputStream &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>ad5cfe5126450ce9236a8c1f768aed4c5</anchor>
      <arglist>(const Glib::RefPtr&lt; OutputStream &gt; &amp;base_stream)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; BufferedOutputStream &gt;</type>
      <name>create_sized</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>ae687f0c086ed2b598bfe1b5c5e1d28b0</anchor>
      <arglist>(const Glib::RefPtr&lt; OutputStream &gt; &amp;base_stream, gsize buffer_size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BufferedOutputStream</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>abd7e5b3a7dc3a71b5cae2214cce5e5d6</anchor>
      <arglist>(const Glib::RefPtr&lt; OutputStream &gt; &amp;base_stream)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BufferedOutputStream</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>a4dfd4e8ed1425f8804c5df73f97ce8da</anchor>
      <arglist>(const Glib::RefPtr&lt; OutputStream &gt; &amp;base_stream, gsize buffer_size)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::BufferedOutputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>ab4fbaeef8ea590b6c674973d25678902</anchor>
      <arglist>(GBufferedOutputStream *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::Cancellable</name>
    <filename>classGio_1_1Cancellable.html</filename>
    <base>Glib::Object</base>
    <member kind="typedef">
      <type>sigc::slot&lt; void &gt;</type>
      <name>SlotCancelledCallback</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>a84040a5b1d108157db74d94aabf5e5bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cancellable</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>a6a622e128290c0892675feb5317a31be</anchor>
      <arglist>(Cancellable &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Cancellable &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>ad94e04d0ff5a558d970a07eda6d518ca</anchor>
      <arglist>(Cancellable &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Cancellable</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>a173a6bb960ce578908289d0158fdc82e</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GCancellable *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>ae19ec1e85fd9cd7893914d4d7c20120d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GCancellable *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>a1b664d53694049c6c6bf17ff7b369024</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GCancellable *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>a379e6394bad0fff1eb11e1a160f30235</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_cancelled</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>a37aaf27c434411a9b7bea730b484631a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_fd</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>a8d2e4887caefe8b7597dfa8f15731001</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>make_pollfd</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>a6627893047c8a375324b58e955661395</anchor>
      <arglist>(GPollFD *pollfd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release_fd</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>ad8f406bb61e80d382153ebf600822ce2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancel</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>a86adae0645cec20d09d1a2903fe46cc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_current</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>ad893da5aebfb4baf34ecdbdad7a3608b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_current</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>a93b5a39447d2b4eb9fb56748cb687fc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>a2285370aea5d98141e742e73743b9c3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>gulong</type>
      <name>connect</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>a99eafc7ee028fba0da0ec18f92306490</anchor>
      <arglist>(const SlotCancelledCallback &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disconnect</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>aa9277479b4bf0b80090e780e26215713</anchor>
      <arglist>(gulong handler_id)</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void &gt;</type>
      <name>signal_cancelled</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>a1d1fc16cffa31fba0a90d7c59e0969b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>a48b647ae1c890d85ceaeaf556e4a3113</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Cancellable &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>a8d59324b4c253f8c890901cd934203a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Cancellable &gt;</type>
      <name>get_current</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>aaf923ce91ddf21fc03bf2902e12cd4e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Cancellable</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>aab7733b6e915e4ebe280fbb669b6af2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_cancelled</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>aff017e200824997b9c26d82f147e078f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Cancellable &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>ac45875da91c9c870a0f154a8249047c0</anchor>
      <arglist>(GCancellable *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::CharsetConverter</name>
    <filename>classGio_1_1CharsetConverter.html</filename>
    <base>Glib::Object</base>
    <base>Gio::Converter</base>
    <member kind="function">
      <type></type>
      <name>CharsetConverter</name>
      <anchorfile>classGio_1_1CharsetConverter.html</anchorfile>
      <anchor>aa700719ae9183d87f8fd0c8b929e92ad</anchor>
      <arglist>(CharsetConverter &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>CharsetConverter &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1CharsetConverter.html</anchorfile>
      <anchor>afbb7a11fc05def408008b90234b0f246</anchor>
      <arglist>(CharsetConverter &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CharsetConverter</name>
      <anchorfile>classGio_1_1CharsetConverter.html</anchorfile>
      <anchor>a694adf5cead4f2721ddde379d523e143</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GCharsetConverter *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1CharsetConverter.html</anchorfile>
      <anchor>a68e4408875be26bdf2182bb57ae4fba7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GCharsetConverter *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1CharsetConverter.html</anchorfile>
      <anchor>ab62b900cf53e994c1145e7de3f1fb212</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GCharsetConverter *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1CharsetConverter.html</anchorfile>
      <anchor>acf7a3a6edc47050a63c7722220ada7a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_fallback</name>
      <anchorfile>classGio_1_1CharsetConverter.html</anchorfile>
      <anchor>a7e895857e2d7f6fecc411509ec38ea68</anchor>
      <arglist>(bool use_fallback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_use_fallback</name>
      <anchorfile>classGio_1_1CharsetConverter.html</anchorfile>
      <anchor>acaa10943044930ab5c258516b5a90e6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>get_num_fallbacks</name>
      <anchorfile>classGio_1_1CharsetConverter.html</anchorfile>
      <anchor>a3bc9a7f3ccc27ffce30d771a0c658a0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_from_charset</name>
      <anchorfile>classGio_1_1CharsetConverter.html</anchorfile>
      <anchor>a44cfbb137cce84a6c6bd1645f3cfdcd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_to_charset</name>
      <anchorfile>classGio_1_1CharsetConverter.html</anchorfile>
      <anchor>adf18528c83352241629200947a5702ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_use_fallback</name>
      <anchorfile>classGio_1_1CharsetConverter.html</anchorfile>
      <anchor>a6b731319ccdfee017391c355737f9a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_use_fallback</name>
      <anchorfile>classGio_1_1CharsetConverter.html</anchorfile>
      <anchor>a263c5738e5f5c4cbc8ed37eda785305c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1CharsetConverter.html</anchorfile>
      <anchor>a5509aa74fea77a92c3ba4b52414fe107</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; CharsetConverter &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1CharsetConverter.html</anchorfile>
      <anchor>adf903e89ac7e34f6b211c3b414797eb9</anchor>
      <arglist>(const Glib::ustring &amp;to_charset, const Glib::ustring &amp;from_charset)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CharsetConverter</name>
      <anchorfile>classGio_1_1CharsetConverter.html</anchorfile>
      <anchor>a1ef8d8864c3415d85e65e881b8aefc64</anchor>
      <arglist>(const Glib::ustring &amp;to_charset, const Glib::ustring &amp;from_charset)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::CharsetConverter &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1CharsetConverter.html</anchorfile>
      <anchor>ac58649ccbd58df5ece04510f9d5e5138</anchor>
      <arglist>(GCharsetConverter *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::Converter</name>
    <filename>classGio_1_1Converter.html</filename>
    <base>Glib::Interface</base>
    <member kind="function">
      <type></type>
      <name>Converter</name>
      <anchorfile>classGio_1_1Converter.html</anchorfile>
      <anchor>a95f97adf10d5178955b4e9d3f1c5ab3f</anchor>
      <arglist>(Converter &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Converter &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1Converter.html</anchorfile>
      <anchor>a13135d618fad2b7ef3444ab5429486c7</anchor>
      <arglist>(Converter &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Converter</name>
      <anchorfile>classGio_1_1Converter.html</anchorfile>
      <anchor>a6e403bcad4307d25d9e72a8a22b8c53f</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GConverter *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Converter.html</anchorfile>
      <anchor>a904857babeefa2a3bb6106f83811b99b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GConverter *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Converter.html</anchorfile>
      <anchor>a4aa44683bba0d527345866f1b39769a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConverterResult</type>
      <name>convert</name>
      <anchorfile>classGio_1_1Converter.html</anchorfile>
      <anchor>ac7778c230badef940aa3abbbc43abaea</anchor>
      <arglist>(const void *inbuf, gsize inbuf_size, void *outbuf, gsize outbuf_size, ConverterFlags flags, gsize &amp;bytes_read, gsize &amp;bytes_written)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classGio_1_1Converter.html</anchorfile>
      <anchor>a258cb44c0dbd3d98c9eea89e6d35c866</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConverterResult</type>
      <name>convert_vfunc</name>
      <anchorfile>classGio_1_1Converter.html</anchorfile>
      <anchor>a7aa9c3c714fe2fe385c9ceef81563f95</anchor>
      <arglist>(const void *inbuf, gsize inbuf_size, void *outbuf, gsize outbuf_size, ConverterFlags flags, gsize &amp;bytes_read, gsize &amp;bytes_written)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset_vfunc</name>
      <anchorfile>classGio_1_1Converter.html</anchorfile>
      <anchor>af44ff18014e7898232eca4f4df906ee8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1Converter.html</anchorfile>
      <anchor>a17ceb5a322220c2810389a499a6d43c9</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Converter.html</anchorfile>
      <anchor>a9dacabc2905a659441b89a70ee33b6e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Converter</name>
      <anchorfile>classGio_1_1Converter.html</anchorfile>
      <anchor>ae70264adb3ca2a27e800bc84fbaf0716</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Converter &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Converter.html</anchorfile>
      <anchor>a5a53e9fbdcfb444cbe49955aac39c65f</anchor>
      <arglist>(GConverter *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::ConverterInputStream</name>
    <filename>classGio_1_1ConverterInputStream.html</filename>
    <base>Gio::FilterInputStream</base>
    <base>Gio::PollableInputStream</base>
    <member kind="function">
      <type></type>
      <name>ConverterInputStream</name>
      <anchorfile>classGio_1_1ConverterInputStream.html</anchorfile>
      <anchor>a68d39c5dbe32af5ff7d4176050f5bf1b</anchor>
      <arglist>(ConverterInputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ConverterInputStream &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1ConverterInputStream.html</anchorfile>
      <anchor>ad74ee8c22b10daaba2085ee5e080dcc1</anchor>
      <arglist>(ConverterInputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConverterInputStream</name>
      <anchorfile>classGio_1_1ConverterInputStream.html</anchorfile>
      <anchor>ad86c6d9544f00d9ed984ed7cb63b9708</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GConverterInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ConverterInputStream.html</anchorfile>
      <anchor>aa076a6a334d59b2876b84b16e5f15a8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GConverterInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ConverterInputStream.html</anchorfile>
      <anchor>a09df98824d711ff81ff0801cc4686ab0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GConverterInputStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1ConverterInputStream.html</anchorfile>
      <anchor>ad1d7a973d356d14c4d702590152c1ece</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Converter &gt;</type>
      <name>get_converter</name>
      <anchorfile>classGio_1_1ConverterInputStream.html</anchorfile>
      <anchor>a47a3b2a636c33fbc7fee8eaf14220634</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Converter &gt;</type>
      <name>get_converter</name>
      <anchorfile>classGio_1_1ConverterInputStream.html</anchorfile>
      <anchor>a7fc2cbc563fae659572ab4c04b38132b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; Converter &gt; &gt;</type>
      <name>property_converter</name>
      <anchorfile>classGio_1_1ConverterInputStream.html</anchorfile>
      <anchor>a1e42a83bdb505f43360c28766d84cc8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1ConverterInputStream.html</anchorfile>
      <anchor>a2e7192600bb103a2e0b67a52f5eaf700</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; ConverterInputStream &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1ConverterInputStream.html</anchorfile>
      <anchor>a29d12b5a1fde929ae9d9070650a7a144</anchor>
      <arglist>(const Glib::RefPtr&lt; InputStream &gt; &amp;base_stream, const Glib::RefPtr&lt; Converter &gt; &amp;converter)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConverterInputStream</name>
      <anchorfile>classGio_1_1ConverterInputStream.html</anchorfile>
      <anchor>af5e916fdc7ae04d6833bd2f85bbbce34</anchor>
      <arglist>(const Glib::RefPtr&lt; InputStream &gt; &amp;base_stream, const Glib::RefPtr&lt; Converter &gt; &amp;converter)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::ConverterInputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1ConverterInputStream.html</anchorfile>
      <anchor>a3f7d4430f52555bbba6ca2c0e2614802</anchor>
      <arglist>(GConverterInputStream *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::ConverterOutputStream</name>
    <filename>classGio_1_1ConverterOutputStream.html</filename>
    <base>Gio::FilterOutputStream</base>
    <base>Gio::PollableOutputStream</base>
    <member kind="function">
      <type></type>
      <name>ConverterOutputStream</name>
      <anchorfile>classGio_1_1ConverterOutputStream.html</anchorfile>
      <anchor>a9b4369c40dcbfa0408ec64291b8606e6</anchor>
      <arglist>(ConverterOutputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ConverterOutputStream &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1ConverterOutputStream.html</anchorfile>
      <anchor>a2094b7f47ff4aba854f5dd8809567a9d</anchor>
      <arglist>(ConverterOutputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConverterOutputStream</name>
      <anchorfile>classGio_1_1ConverterOutputStream.html</anchorfile>
      <anchor>a860f1c301e81a3bdadfa9ea3d9378820</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GConverterOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ConverterOutputStream.html</anchorfile>
      <anchor>a333f4ee5b989075bcf1e1dce9f0b0178</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GConverterOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ConverterOutputStream.html</anchorfile>
      <anchor>aa7df68449ac7a05779663162a7e92291</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GConverterOutputStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1ConverterOutputStream.html</anchorfile>
      <anchor>a938a80f3c12a2d451589b0996ed2fcf0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Converter &gt;</type>
      <name>get_converter</name>
      <anchorfile>classGio_1_1ConverterOutputStream.html</anchorfile>
      <anchor>a4a69aedf2615cd5980086ea10e92f516</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Converter &gt;</type>
      <name>get_converter</name>
      <anchorfile>classGio_1_1ConverterOutputStream.html</anchorfile>
      <anchor>aa29962d474fc4f29f3cf0723eaebc3a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; Converter &gt; &gt;</type>
      <name>property_converter</name>
      <anchorfile>classGio_1_1ConverterOutputStream.html</anchorfile>
      <anchor>a4fc37e349e4f82644b181df12d9c5696</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1ConverterOutputStream.html</anchorfile>
      <anchor>aade9ad0b43d43f31081b339e4b9d9a5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; ConverterOutputStream &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1ConverterOutputStream.html</anchorfile>
      <anchor>a5a85c4d188f35c66639f16cad69c92f6</anchor>
      <arglist>(const Glib::RefPtr&lt; OutputStream &gt; &amp;base_stream, const Glib::RefPtr&lt; Converter &gt; &amp;converter)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConverterOutputStream</name>
      <anchorfile>classGio_1_1ConverterOutputStream.html</anchorfile>
      <anchor>a76f58e7c20b906a644beca882286d04c</anchor>
      <arglist>(const Glib::RefPtr&lt; OutputStream &gt; &amp;base_stream, const Glib::RefPtr&lt; Converter &gt; &amp;converter)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::ConverterOutputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1ConverterOutputStream.html</anchorfile>
      <anchor>a33f780befc49741bd252d0f16039cabc</anchor>
      <arglist>(GConverterOutputStream *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::Credentials</name>
    <filename>classGio_1_1Credentials.html</filename>
    <base>Glib::Object</base>
    <member kind="function">
      <type></type>
      <name>Credentials</name>
      <anchorfile>classGio_1_1Credentials.html</anchorfile>
      <anchor>abf302646b39fc08d94cfe7d437e84e5b</anchor>
      <arglist>(Credentials &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Credentials &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1Credentials.html</anchorfile>
      <anchor>a09d75a4d41bc679d66280d822409f704</anchor>
      <arglist>(Credentials &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Credentials</name>
      <anchorfile>classGio_1_1Credentials.html</anchorfile>
      <anchor>ae9015e765a1448e454fa6a9ed45057c5</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GCredentials *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Credentials.html</anchorfile>
      <anchor>a046b2268030f002af002310500000873</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GCredentials *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Credentials.html</anchorfile>
      <anchor>a7942e74dd26c084b650288e08c4b6b78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GCredentials *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1Credentials.html</anchorfile>
      <anchor>ae88176bf9139ac2f8ec61fc2b243eddd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>to_string</name>
      <anchorfile>classGio_1_1Credentials.html</anchorfile>
      <anchor>a876d3890e2c124dc3efd86ae9edfb94f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>gpointer</type>
      <name>get_native</name>
      <anchorfile>classGio_1_1Credentials.html</anchorfile>
      <anchor>a71bcd9f09372b9baeaebe515dfd98bf7</anchor>
      <arglist>(CredentialsType native_type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_native</name>
      <anchorfile>classGio_1_1Credentials.html</anchorfile>
      <anchor>af513a0e52915235faf163d5de363a0bd</anchor>
      <arglist>(CredentialsType native_type, gpointer native)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_same_user</name>
      <anchorfile>classGio_1_1Credentials.html</anchorfile>
      <anchor>a762d208e479db720c4e5124ed329131a</anchor>
      <arglist>(const Glib::RefPtr&lt; const Credentials &gt; &amp;other_credentials)</arglist>
    </member>
    <member kind="function">
      <type>uid_t</type>
      <name>get_unix_user</name>
      <anchorfile>classGio_1_1Credentials.html</anchorfile>
      <anchor>a09b5b839f82cbb23c86aa036e883a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_unix_user</name>
      <anchorfile>classGio_1_1Credentials.html</anchorfile>
      <anchor>ab791dcd8caa32cc01ad38a6d8cf343e7</anchor>
      <arglist>(uid_t uid)</arglist>
    </member>
    <member kind="function">
      <type>pid_t</type>
      <name>get_unix_pid</name>
      <anchorfile>classGio_1_1Credentials.html</anchorfile>
      <anchor>a3ff605061f38ffad5900a487e0861102</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Credentials.html</anchorfile>
      <anchor>a146b6d80a0ce203582402bee5684424d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Credentials &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1Credentials.html</anchorfile>
      <anchor>ad1d94115b234e0db180e48509fa18fd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Credentials</name>
      <anchorfile>classGio_1_1Credentials.html</anchorfile>
      <anchor>a1aef06c5a74793011858b45cfd8d7898</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Credentials &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Credentials.html</anchorfile>
      <anchor>af140151edb8dd5ccf10f9decf594b731</anchor>
      <arglist>(GCredentials *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DataInputStream</name>
    <filename>classGio_1_1DataInputStream.html</filename>
    <base>Gio::BufferedInputStream</base>
    <member kind="function">
      <type></type>
      <name>DataInputStream</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>af8f20a68204c9de4a164358a5d337a09</anchor>
      <arglist>(DataInputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DataInputStream &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>afa6499117ccec4ed02116b58333a4e9a</anchor>
      <arglist>(DataInputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DataInputStream</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a8f393561ea8694df85dffb7ecc52303f</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GDataInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>ad788764326462190e900785f50a50740</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDataInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>ae1f0b43322788ff8774011eeb474ae02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GDataInputStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a8252806b8ac5548c51a0418162ddb6ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_byte_order</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a032c20df06b83828d3cb5e81f6b8f561</anchor>
      <arglist>(DataStreamByteOrder order)</arglist>
    </member>
    <member kind="function">
      <type>DataStreamByteOrder</type>
      <name>get_byte_order</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a10ad45f7a902a8cd7085f1c64f92f318</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_newline_type</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>afbc8ad1476fd82e808234a661bfe4cd3</anchor>
      <arglist>(DataStreamNewlineType type)</arglist>
    </member>
    <member kind="function">
      <type>DataStreamNewlineType</type>
      <name>get_newline_type</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>af38e063f7f88e9acca11d12cc039bf8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>guchar</type>
      <name>read_byte</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>aca226b5c2d1248dd079d835dd089570d</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>guchar</type>
      <name>read_byte</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>af4d01aa4e791d403b79db406befcc28e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>gint16</type>
      <name>read_int16</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a9fd357f931715d83c69b7010ff86af80</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>gint16</type>
      <name>read_int16</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a2407fa551610510cfdcda3b2d8adabdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>guint16</type>
      <name>read_uint16</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a9ac667e423ec3c3d997fc2a4683956d3</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>guint16</type>
      <name>read_uint16</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a4e99722aa033a78ac2f4dc593b36d197</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>gint32</type>
      <name>read_int32</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a6280a6c0c6cc1803dc3df8dc29910bcd</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>gint32</type>
      <name>read_int32</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>adbbe894fae2ba5d071c3f50895af9067</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>guint32</type>
      <name>read_uint32</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>ae7d36dbd67425b923fe335ec5a3f4124</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>guint32</type>
      <name>read_uint32</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a587856139c73d6c2df1ad2c5560cffec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>gint64</type>
      <name>read_int64</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a5d9599527bcd651841fd4f73082d26e0</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>gint64</type>
      <name>read_int64</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a6ccd4123a211d1d89c17bb6e4a4aae35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>guint64</type>
      <name>read_uint64</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a2e486863876f833e910286300c7e17a4</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>guint64</type>
      <name>read_uint64</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a9c7ed7807b2a8370f879a820dd0c7989</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_line</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a4e1ac2a250c7acd60417454379d580a7</anchor>
      <arglist>(std::string &amp;line, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_line</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a5186689410fe626e35688190b65ec0c5</anchor>
      <arglist>(std::string &amp;line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_line_utf8</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>ac779efdf33abb470832715abeb47f3ef</anchor>
      <arglist>(std::string &amp;line, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, gsize &amp;length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_line_utf8</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>ad48b87d450f26683d167c74c7c224ceb</anchor>
      <arglist>(std::string &amp;line, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_line_utf8</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>aa1ba4df39f51b81c6e105c71d5941493</anchor>
      <arglist>(std::string &amp;line, gsize &amp;length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_line_utf8</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a8cdccad3a356c1bc34bc9ec967b710b0</anchor>
      <arglist>(std::string &amp;line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_line_async</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>aad31c733d13f737f893326b3b7f1ff0d</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_line_finish</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a538562b9bf3a80138ba9918b2249f834</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result, std::string &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_line_finish_utf8</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a5dade4189842c81b4dc3fc43a8b79af3</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result, std::string &amp;data, gsize &amp;length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_line_finish_utf8</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a79e503ebe50065088e7daaa306da9cc3</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result, std::string &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_until</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a058c5367f9be4e4e36d5fb9de2201815</anchor>
      <arglist>(std::string &amp;data, const std::string &amp;stop_chars, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_until</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>aa7d2a04bf5a4628df0530ec40d4c33cf</anchor>
      <arglist>(std::string &amp;data, const std::string &amp;stop_chars)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_until_async</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a708cba487c68c8c927fe8ae6277b6123</anchor>
      <arglist>(const std::string &amp;stop_chars, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_until_finish</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>aa851cb398896f39bea56868b46bd480d</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result, std::string &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_upto</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>ae1ecebe6229884c4510e5b42eabe4874</anchor>
      <arglist>(std::string &amp;data, const std::string &amp;stop_chars, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_upto</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>afe582f97c8438b1517f16e805e332d1f</anchor>
      <arglist>(std::string &amp;data, const std::string &amp;stop_chars)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_upto_async</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a76d195879b8aa04c22a5c69dc82c0f46</anchor>
      <arglist>(const std::string &amp;stop_chars, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_upto_finish</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>ad0b61e9b6225bea6af433ae28dbdbea8</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result, std::string &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; DataStreamByteOrder &gt;</type>
      <name>property_byte_order</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a53ffda2bedfb47315afc50d9ec64ba3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; DataStreamByteOrder &gt;</type>
      <name>property_byte_order</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a57347cb46fed862e9f90a79333e527e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; DataStreamNewlineType &gt;</type>
      <name>property_newline_type</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>adf55222b27ecf5db6a604d4e111431f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; DataStreamNewlineType &gt;</type>
      <name>property_newline_type</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a697a6924991d3b3b83a22318c597f724</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a9880bf6913e0ac284cb2607efbb91178</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; DataInputStream &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a5ecca0b3f4fdc5962c3c63e4e6706e4e</anchor>
      <arglist>(const Glib::RefPtr&lt; InputStream &gt; &amp;base_stream)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DataInputStream</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a65e68eef09e6aa1d9e52d446a171fba3</anchor>
      <arglist>(const Glib::RefPtr&lt; InputStream &gt; &amp;base_stream)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DataInputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a88853a1864df25dc8dda900a6ad52266</anchor>
      <arglist>(GDataInputStream *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DataOutputStream</name>
    <filename>classGio_1_1DataOutputStream.html</filename>
    <base>Gio::BufferedOutputStream</base>
    <member kind="function">
      <type></type>
      <name>DataOutputStream</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>a786dea4a84578697bccd6619afffa830</anchor>
      <arglist>(DataOutputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DataOutputStream &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>a96c37879ee770257a37314d5090963b1</anchor>
      <arglist>(DataOutputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DataOutputStream</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>aaea9a0ac9fbfab12401857852c547eba</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GDataOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>acf92da9c162b7a0805aabe334912d5cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDataOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>adb881bcebf9ca7ce2bc16a6e881ba036</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GDataOutputStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>ac1e10167167a2f5c894e567003483419</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_byte_order</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>ad35d1b14012a1f4ce7aeca8e73a0560a</anchor>
      <arglist>(DataStreamByteOrder order)</arglist>
    </member>
    <member kind="function">
      <type>DataStreamByteOrder</type>
      <name>get_byte_order</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>ac86576704b398b560ee2afae95aa29a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put_byte</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>a193a3d737db19250895ad4329b82a602</anchor>
      <arglist>(guchar data, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put_byte</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>a82d0f12bac635dc5889847c4911c3407</anchor>
      <arglist>(guchar data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put_int16</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>a967df26dca9c0948d78bd495800eeda3</anchor>
      <arglist>(gint16 data, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put_int16</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>a29c0d46538383ed82d622068d826d06e</anchor>
      <arglist>(gint16 data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put_uint16</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>aa0f8a4fda83e453a49d5cf614868b392</anchor>
      <arglist>(guint16 data, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put_uint16</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>aa222bd351437698643820251e28a406d</anchor>
      <arglist>(guint16 data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put_int32</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>ac405b5c957d34ff068fb07a30dbb5f09</anchor>
      <arglist>(gint32 data, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put_int32</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>ac02e3766459a8bb970022ff3991d841e</anchor>
      <arglist>(gint32 data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put_uint32</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>a4851b514c9f3ca166b581b35f530ea71</anchor>
      <arglist>(guint32 data, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put_uint32</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>a16cdae2dd633a4afaea583baa7d10d44</anchor>
      <arglist>(guint32 data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put_int64</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>ac7efa2d21047145f79fd651129b372f2</anchor>
      <arglist>(gint64 data, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put_int64</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>abbe60cbe43ae446cef3a7c9764a6fe08</anchor>
      <arglist>(gint64 data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put_uint64</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>a4a16076bd66c8f2e249ecde22f9762c1</anchor>
      <arglist>(guint64 data, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put_uint64</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>a5dfd43d27380c031314adf0dc67b4cb4</anchor>
      <arglist>(guint64 data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put_string</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>a11a8e87ba2da06727d2c8751214b7055</anchor>
      <arglist>(std::string str, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put_string</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>ababf1898b1e49d7d16fdacdfe38db3f3</anchor>
      <arglist>(std::string str)</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; DataStreamByteOrder &gt;</type>
      <name>property_byte_order</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>a1f7d606475f5bf58d6a344a35a3b93ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; DataStreamByteOrder &gt;</type>
      <name>property_byte_order</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>a162656cf2cb68512194efadbf8140804</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>aa9e6fcef3024211d11d990f97673ebf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; DataOutputStream &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>aa9c23f0bf4d13c5a4ca5b7bb03991928</anchor>
      <arglist>(const Glib::RefPtr&lt; OutputStream &gt; &amp;base_stream)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DataOutputStream</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>ab01b287da67c8d2312a82f03de59916f</anchor>
      <arglist>(const Glib::RefPtr&lt; OutputStream &gt; &amp;base_stream)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DataOutputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>a53e38b7e7370532ed71a1f434050043a</anchor>
      <arglist>(GDataOutputStream *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::ActionGroup</name>
    <filename>classGio_1_1DBus_1_1ActionGroup.html</filename>
    <base>Glib::Object</base>
    <base>Gio::ActionGroup</base>
    <base>Gio::RemoteActionGroup</base>
    <member kind="function">
      <type></type>
      <name>ActionGroup</name>
      <anchorfile>classGio_1_1DBus_1_1ActionGroup.html</anchorfile>
      <anchor>aeea4d054289e408514f6d0fcdd550e88</anchor>
      <arglist>(ActionGroup &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ActionGroup &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1DBus_1_1ActionGroup.html</anchorfile>
      <anchor>a865a65e6899539745aae8fefd5319b15</anchor>
      <arglist>(ActionGroup &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ActionGroup</name>
      <anchorfile>classGio_1_1DBus_1_1ActionGroup.html</anchorfile>
      <anchor>a8fe38ca5e2c97ef18c33932e788a6028</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GDBusActionGroup *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1ActionGroup.html</anchorfile>
      <anchor>af204b2a102bf4879637ae918c1aa3c8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusActionGroup *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1ActionGroup.html</anchorfile>
      <anchor>a57998f6757765d6ab433cdf9f4d72a1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GDBusActionGroup *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DBus_1_1ActionGroup.html</anchorfile>
      <anchor>a2778a9ba291334d7c0dc8c938332c10d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1DBus_1_1ActionGroup.html</anchorfile>
      <anchor>abc5614460a0bd08d0d68479ff825b295</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; ActionGroup &gt;</type>
      <name>get</name>
      <anchorfile>classGio_1_1DBus_1_1ActionGroup.html</anchorfile>
      <anchor>a721e1e3b58be710394342ceb614d6bc6</anchor>
      <arglist>(const Glib::RefPtr&lt; Connection &gt; &amp;connection, const Glib::ustring &amp;bus_name, const Glib::ustring &amp;object_path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ActionGroup</name>
      <anchorfile>classGio_1_1DBus_1_1ActionGroup.html</anchorfile>
      <anchor>ac25a47a88a737e1f91def678fa9f0bc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::ActionGroup &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1ActionGroup.html</anchorfile>
      <anchor>a8400f184f1802e90a2479756edfcdd87</anchor>
      <arglist>(GDBusActionGroup *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::AnnotationInfo</name>
    <filename>classGio_1_1DBus_1_1AnnotationInfo.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGio_1_1DBus_1_1AnnotationInfo.html</anchorfile>
      <anchor>a0e6121ce7510611416573f4a35bb4b76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGio_1_1DBus_1_1AnnotationInfo.html</anchorfile>
      <anchor>aafaa587487be71f3fd5622b4b7fb8e54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GDBusAnnotationInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1AnnotationInfo.html</anchorfile>
      <anchor>a4cd47b1916ab575b517b257ccda3cf16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusAnnotationInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1AnnotationInfo.html</anchorfile>
      <anchor>a357fe193df7b2baf24997fb5f17baf60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GDBusAnnotationInfo *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DBus_1_1AnnotationInfo.html</anchorfile>
      <anchor>a8c3c0f285428e7d184e1541852f2c170</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AnnotationInfo</name>
      <anchorfile>classGio_1_1DBus_1_1AnnotationInfo.html</anchorfile>
      <anchor>ace0fa76ac3e589e32f637110490ea243</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AnnotationInfo</name>
      <anchorfile>classGio_1_1DBus_1_1AnnotationInfo.html</anchorfile>
      <anchor>a24a747819892d390a216fe2fc229f8b2</anchor>
      <arglist>(const AnnotationInfo &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>AnnotationInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1DBus_1_1AnnotationInfo.html</anchorfile>
      <anchor>ad0f45a1bbe1a1b440b28fdbb07edb96b</anchor>
      <arglist>(const AnnotationInfo &amp;)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::ustring</type>
      <name>info_lookup</name>
      <anchorfile>classGio_1_1DBus_1_1AnnotationInfo.html</anchorfile>
      <anchor>aaa2f6ec5de178bf5c1effe2a94318731</anchor>
      <arglist>(const Glib::ArrayHandle&lt; Glib::RefPtr&lt; AnnotationInfo &gt; &gt; &amp;annotations, const Glib::ustring &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classGio_1_1DBus_1_1AnnotationInfo.html</anchorfile>
      <anchor>a1821b9691e65026f78196c1c704afee8</anchor>
      <arglist>(void *, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::AnnotationInfo &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1AnnotationInfo.html</anchorfile>
      <anchor>aeb8135b78ab3f908f2264a63f6dd78f9</anchor>
      <arglist>(GDBusAnnotationInfo *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::ArgInfo</name>
    <filename>classGio_1_1DBus_1_1ArgInfo.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGio_1_1DBus_1_1ArgInfo.html</anchorfile>
      <anchor>af54052c9cab2251aab2beb07a1fb462c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGio_1_1DBus_1_1ArgInfo.html</anchorfile>
      <anchor>a0b88793cb7f654d898b5d5786f701493</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GDBusArgInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1ArgInfo.html</anchorfile>
      <anchor>a89a8ec1e84529b99b529a7b91ba9e30f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusArgInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1ArgInfo.html</anchorfile>
      <anchor>ad8f5131ce2e6e208b33429835d7f8280</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GDBusArgInfo *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DBus_1_1ArgInfo.html</anchorfile>
      <anchor>af74476443e23f3b11efadaba8b11a2f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArgInfo</name>
      <anchorfile>classGio_1_1DBus_1_1ArgInfo.html</anchorfile>
      <anchor>ae5dacb5eb43dfbf2ca82e144e7db8b5d</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArgInfo</name>
      <anchorfile>classGio_1_1DBus_1_1ArgInfo.html</anchorfile>
      <anchor>a104dfbac7bc0a0c4cf2295cdfff8ac64</anchor>
      <arglist>(const ArgInfo &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ArgInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1DBus_1_1ArgInfo.html</anchorfile>
      <anchor>a703f3a92c986035dcb39959441f33f63</anchor>
      <arglist>(const ArgInfo &amp;)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classGio_1_1DBus_1_1ArgInfo.html</anchorfile>
      <anchor>a5f780b9e1dfb180968ef3f613367610b</anchor>
      <arglist>(void *, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::ArgInfo &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1ArgInfo.html</anchorfile>
      <anchor>a00ddff1eea33b3706fbc3a30be00a7ff</anchor>
      <arglist>(GDBusArgInfo *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::AuthObserver</name>
    <filename>classGio_1_1DBus_1_1AuthObserver.html</filename>
    <base>Glib::Object</base>
    <member kind="function">
      <type></type>
      <name>AuthObserver</name>
      <anchorfile>classGio_1_1DBus_1_1AuthObserver.html</anchorfile>
      <anchor>a0edd582ba78b3df37fdddbfe4e462671</anchor>
      <arglist>(AuthObserver &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AuthObserver &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1DBus_1_1AuthObserver.html</anchorfile>
      <anchor>a50cd38de398f9f4032335ba6231bbc55</anchor>
      <arglist>(AuthObserver &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AuthObserver</name>
      <anchorfile>classGio_1_1DBus_1_1AuthObserver.html</anchorfile>
      <anchor>a28fab512b3f177a7618b84fd43d873de</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GDBusAuthObserver *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1AuthObserver.html</anchorfile>
      <anchor>ad72fce52ddeebcbcaadad55d5b899030</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusAuthObserver *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1AuthObserver.html</anchorfile>
      <anchor>a104ddb49ffc917525313da2deb5cbf3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GDBusAuthObserver *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DBus_1_1AuthObserver.html</anchorfile>
      <anchor>a9f9851b4c582076849ecf05e313227b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>authorize_authenticated_peer</name>
      <anchorfile>classGio_1_1DBus_1_1AuthObserver.html</anchorfile>
      <anchor>aebe410b2fec6790a9266dbbed96c682e</anchor>
      <arglist>(const Glib::RefPtr&lt; const IOStream &gt; &amp;stream, const Glib::RefPtr&lt; const Credentials &gt; &amp;credentials)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allow_mechanism</name>
      <anchorfile>classGio_1_1DBus_1_1AuthObserver.html</anchorfile>
      <anchor>a9a9cf74e710e9f0aae65c1b8bdeecdda</anchor>
      <arglist>(const std::string &amp;mechanism)</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; bool, const Glib::RefPtr&lt; const IOStream &gt; &amp;, const Glib::RefPtr&lt; const Credentials &gt; &amp;&gt;</type>
      <name>signal_authorize_authenticated_peer</name>
      <anchorfile>classGio_1_1DBus_1_1AuthObserver.html</anchorfile>
      <anchor>a22bcd93acb0fd1e7d1294118364f5b20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; bool, const std::string &amp;&gt;</type>
      <name>signal_allow_mechanism</name>
      <anchorfile>classGio_1_1DBus_1_1AuthObserver.html</anchorfile>
      <anchor>ab0ebd235b05d9f5f9942b69859fc224d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1DBus_1_1AuthObserver.html</anchorfile>
      <anchor>acdb4d77e3937af8876d752dc7daf27dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; AuthObserver &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1DBus_1_1AuthObserver.html</anchorfile>
      <anchor>a1ade45e319ff8bba975aa28921e53282</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AuthObserver</name>
      <anchorfile>classGio_1_1DBus_1_1AuthObserver.html</anchorfile>
      <anchor>a7fe3b156cc2a3b4e4e1c9177581953ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::AuthObserver &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1AuthObserver.html</anchorfile>
      <anchor>a44ead0bde35ce33936e58f54ec2a0d02</anchor>
      <arglist>(GDBusAuthObserver *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::Connection</name>
    <filename>classGio_1_1DBus_1_1Connection.html</filename>
    <base>Glib::Object</base>
    <base>Gio::Initable</base>
    <base>Gio::AsyncInitable</base>
    <member kind="typedef">
      <type>sigc::slot&lt; void, const Glib::RefPtr&lt; Connection &gt; &amp;, const Glib::ustring &amp;, const Glib::ustring &amp;, const Glib::ustring &amp;, const Glib::ustring &amp;, const Glib::VariantContainerBase &amp; &gt;</type>
      <name>SlotSignal</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a10b3dce0b4b6fd222a1e7c5b43905b3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; Glib::RefPtr&lt; Message &gt;, const Glib::RefPtr&lt; Connection &gt; &amp;, const Glib::RefPtr&lt; Message &gt; &amp;, bool &gt;</type>
      <name>SlotMessageFilter</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a82ba0086500066c1fe8b1d3e8e122db2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a4742d2870f43e36455e0e70888c3e72d</anchor>
      <arglist>(Connection &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Connection &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>adec5303abce84a0c728c9a71305da150</anchor>
      <arglist>(Connection &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ac226ebf6375b5d1d946e905b839dfb66</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GDBusConnection *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>add69f87e326bd9bca8c7f6dc2f0dc26e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusConnection *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a8a25f8c993897c8368a318a4cb032b28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GDBusConnection *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ae347d91fd24a526c1dbdb880ef584bfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a3e52adb1ec39322086ea46921086a6e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a375bd798267feb962c132a45e7374632</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a8fe7ecab2b33dc024906878145750ec6</anchor>
      <arglist>(const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>close_finish</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aa8ff3983f37d15d458d54c2e2ea9ee29</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>abf8d39afa23b1379e86a0f6b284353a4</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ae4d7067d2611ea60fea58b70c2c02b24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a175ef6c874d4cada2e3adfcdaac2fbe9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a49483ff5c61943724331d67ebc0206b8</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ab9018638a894f353a678ab2dfb4f6871</anchor>
      <arglist>(const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>flush_finish</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a67eaf98f454504997b126396b657a321</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a230beebae8da6bc51f269faff7c63957</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a670fdc08181034cc0e0c6648296acca4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_exit_on_close</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a4761c99fdb04df4e20c994e622a7791d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_exit_on_close</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a7457de5a9a316eb6e1b3a9f9093ac635</anchor>
      <arglist>(bool exit_on_close=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>send_message</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aa7cfa8a2901b8301059a3bee28713037</anchor>
      <arglist>(const Glib::RefPtr&lt; Message &gt; &amp;message, SendMessageFlags flags, guint32 &amp;out_serial)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>send_message</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ad1a7babf2856bea9b12513070c311458</anchor>
      <arglist>(const Glib::RefPtr&lt; Message &gt; &amp;message, SendMessageFlags flags=Gio::DBus::SEND_MESSAGE_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_message_with_reply</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a90ce8c8c6d8780d47c3d16cfa1b313f6</anchor>
      <arglist>(const Glib::RefPtr&lt; Message &gt; &amp;message, int timeout_msec, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_message_with_reply</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ad218b54738f04a68a40d6d83e7f7a1f6</anchor>
      <arglist>(const Glib::RefPtr&lt; Message &gt; &amp;message, int timeout_msec, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Message &gt;</type>
      <name>send_message_with_reply_finish</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a50a5378cfe6e5fe845d8198fd2451695</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Message &gt;</type>
      <name>send_message_with_reply_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a9750c77a26bc9ba12f3c801bc620767d</anchor>
      <arglist>(const Glib::RefPtr&lt; Message &gt; &amp;message, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, gint timeout_msec)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Message &gt;</type>
      <name>send_message_with_reply_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ab0b1e37fb685de42b19ded29dbcdccdd</anchor>
      <arglist>(const Glib::RefPtr&lt; Message &gt; &amp;message, gint timeout_msec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start_message_processing</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aa8108e440014500506db4cf1b23ea40a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_closed</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a7f0b67e75a066a12ac2c360cb8edf875</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; IOStream &gt;</type>
      <name>get_stream</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aebf8f77b4f2aef8d1fa05edce3e48f75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const IOStream &gt;</type>
      <name>get_stream</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a22e82a84fc569233bb80c2f917cb4cf4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_guid</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a81f5fabbfd656d86ffdd66f17de4748b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_unique_name</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a2801d6a52036c5dda4099f66887f3284</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CapabilityFlags</type>
      <name>get_capabilities</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a8b2f65ab361233023b46dbb3b4450b48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Credentials &gt;</type>
      <name>get_peer_credentials</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ad841b9beb348c2e21dcb9e395ee4f28a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Credentials &gt;</type>
      <name>get_peer_credentials</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a587085659e41409e9de782f03d296f92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>guint32</type>
      <name>get_last_serial</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a4d1d2e9f031232d38f9649d3cd19f6d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a8d3e02423495de8270e69cd8d62b7468</anchor>
      <arglist>(const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const Glib::ustring &amp;method_name, const Glib::VariantContainerBase &amp;parameters, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::ustring &amp;bus_name=Glib::ustring(), int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE, const Glib::VariantType &amp;reply_type=Glib::VariantType())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ac893cdf61255a10e961cebfe01eb3e4e</anchor>
      <arglist>(const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const Glib::ustring &amp;method_name, const Glib::VariantContainerBase &amp;parameters, const SlotAsyncReady &amp;slot, const Glib::ustring &amp;bus_name=Glib::ustring(), int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE, const Glib::VariantType &amp;reply_type=Glib::VariantType())</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantContainerBase</type>
      <name>call_finish</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a230fbe18c49f2fe73857db0919b14edb</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantContainerBase</type>
      <name>call_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a4dff33b1a72b80a4b8250989852515a7</anchor>
      <arglist>(const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const Glib::ustring &amp;method_name, const Glib::VariantContainerBase &amp;parameters, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::ustring &amp;bus_name=Glib::ustring(), int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE, const Glib::VariantType &amp;reply_type=Glib::VariantType())</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantContainerBase</type>
      <name>call_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a5ac851e5ccb18bd0adbce4c96e1c5bef</anchor>
      <arglist>(const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const Glib::ustring &amp;method_name, const Glib::VariantContainerBase &amp;parameters, const Glib::ustring &amp;bus_name=Glib::ustring(), int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE, const Glib::VariantType &amp;reply_type=Glib::VariantType())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>afe25016fb8955b34c84e0f36cf50ad0e</anchor>
      <arglist>(const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const Glib::ustring &amp;method_name, const Glib::VariantContainerBase &amp;parameters, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::RefPtr&lt; UnixFDList &gt; &amp;fd_list, const Glib::ustring &amp;bus_name=Glib::ustring(), int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE, const Glib::VariantType &amp;reply_type=Glib::VariantType())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a2684a36e027deb0642bedea7e2566471</anchor>
      <arglist>(const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const Glib::ustring &amp;method_name, const Glib::VariantContainerBase &amp;parameters, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; UnixFDList &gt; &amp;fd_list, const Glib::ustring &amp;bus_name=Glib::ustring(), int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE, const Glib::VariantType &amp;reply_type=Glib::VariantType())</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantContainerBase</type>
      <name>call_finish</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a87f6faddd2fc9ba4ab4b72dbeccb4c4d</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res, Glib::RefPtr&lt; UnixFDList &gt; &amp;out_fd_list)</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantContainerBase</type>
      <name>call_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>abe7c898b4fa3cdafa3d2650480ef9045</anchor>
      <arglist>(const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const Glib::ustring &amp;method_name, const Glib::VariantContainerBase &amp;parameters, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::RefPtr&lt; UnixFDList &gt; &amp;fd_list, Glib::RefPtr&lt; UnixFDList &gt; &amp;out_fd_list, const Glib::ustring &amp;bus_name=Glib::ustring(), int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE, const Glib::VariantType &amp;reply_type=Glib::VariantType())</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantContainerBase</type>
      <name>call_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a222a433975bb921fe7683fe9c41eda01</anchor>
      <arglist>(const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const Glib::ustring &amp;method_name, const Glib::VariantContainerBase &amp;parameters, const Glib::RefPtr&lt; UnixFDList &gt; &amp;fd_list, Glib::RefPtr&lt; UnixFDList &gt; &amp;out_fd_list, const Glib::ustring &amp;bus_name=Glib::ustring(), int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE, const Glib::VariantType &amp;reply_type=Glib::VariantType())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit_signal</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aae264d3104fe85f8482580db5b7761fa</anchor>
      <arglist>(const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const Glib::ustring &amp;signal_name, const Glib::ustring &amp;destination_bus_name=Glib::ustring(), const Glib::VariantContainerBase &amp;parameters=Glib::VariantContainerBase())</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>signal_subscribe</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>af981fb48982bce9d4a27f70127df1cb5</anchor>
      <arglist>(const SlotSignal &amp;slot, const Glib::ustring &amp;sender=Glib::ustring(), const Glib::ustring &amp;interface_name=Glib::ustring(), const Glib::ustring &amp;member=Glib::ustring(), const Glib::ustring &amp;object_path=Glib::ustring(), const Glib::ustring &amp;arg0=Glib::ustring(), SignalFlags flags=Gio::DBus::SIGNAL_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>signal_unsubscribe</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a57d8deeb855f3f88d5a2164d224305ea</anchor>
      <arglist>(guint subscription_id)</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>add_filter</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a629c7cbe6bd620e240d69db4adf8362e</anchor>
      <arglist>(const SlotMessageFilter &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_filter</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aa5f078c02692ec5effae8dccbbff2e55</anchor>
      <arglist>(guint filter_id)</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>register_object</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a0c2974543543686c386601b656577593</anchor>
      <arglist>(const Glib::ustring &amp;object_path, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;interface_info, const InterfaceVTable &amp;vtable)</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>register_object</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ad8e4a523adc691ff00d946df0fc779c6</anchor>
      <arglist>(const Glib::ustring &amp;object_path, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;interface_info)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unregister_object</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a32b998fc3e093c678e6ff4e76ec29874</anchor>
      <arglist>(guint registration_id)</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>register_subtree</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ade98c63ff3e2ce7906ca4a2f63849e07</anchor>
      <arglist>(const Glib::ustring &amp;object_path, const SubtreeVTable &amp;vtable, SubtreeFlags flags=Gio::DBus::SUBTREE_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unregister_subtree</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aae026eab32dc1e6ef7eb865e2d83dc1d</anchor>
      <arglist>(guint registration_id)</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>export_action_group</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a2e5b3f466471359b4595b5846508c1a2</anchor>
      <arglist>(const Glib::ustring &amp;object_path, const Glib::RefPtr&lt; ActionGroup &gt; &amp;action_group)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unexport_action_group</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a1538b4a84bd4cb0457ba6e6dde0023b3</anchor>
      <arglist>(guint export_id)</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>export_menu_model</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ad1595ae3e1d1f1c123245d488719923c</anchor>
      <arglist>(const Glib::ustring &amp;object_path, const Glib::RefPtr&lt; MenuModel &gt; &amp;menu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unexport_menu_model</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a3b99e116bcc0a8d15cf0e9c857c62e07</anchor>
      <arglist>(guint export_id)</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; CapabilityFlags &gt;</type>
      <name>property_capabilities</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ab07b6bf8af015e998e8cf3d9005b1e87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_closed</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a3713a6c1d52777a9482af0a92e6362f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_exit_on_close</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a05f97a97a09455e024a2f26994d49edd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_exit_on_close</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aa3dc24de630742b42b5c9564b922771f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; std::string &gt;</type>
      <name>property_guid</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a4a9c8cf464604029aa1513c1652ad5f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; IOStream &gt; &gt;</type>
      <name>property_stream</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aeac9361e1841ee97640d39131b66a5ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_unique_name</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aed48cbe215506363e07f35779a0b6963</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, bool, const Glib::Error &amp;&gt;</type>
      <name>signal_closed</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a79d09a45439b5138c05bc38282dc8ceb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a7665f77b2bb56246924ea5c74934490d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>get</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a5345c2d7d7f861b0ea4ac67dffd7d5ce</anchor>
      <arglist>(BusType bus_type, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>get</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a96b8301d5d4e6a273e4bdb7778d44062</anchor>
      <arglist>(BusType bus_type, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Connection &gt;</type>
      <name>get_finish</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a20675d9ff219ddd7b9cd5d1ba4a88bbc</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Connection &gt;</type>
      <name>get_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aa9f6ff4fb7546a1600331322b33fbbfb</anchor>
      <arglist>(BusType bus_type, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Connection &gt;</type>
      <name>get_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ae29f76f48d11685c100e8c880e36b3fd</anchor>
      <arglist>(BusType bus_type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>create</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ab8be27670e0620aad315dfc0c1622ab6</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream, const std::string &amp;guid, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ConnectionFlags flags=Gio::DBus::CONNECTION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>create</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a1dcee35e3382f914ad5be4826280863f</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream, const std::string &amp;guid, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ConnectionFlags flags=Gio::DBus::CONNECTION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>create</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a6128ef85de1f6a2a51fcd91275e68162</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream, const std::string &amp;guid, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, const SlotAsyncReady &amp;slot, ConnectionFlags flags=Gio::DBus::CONNECTION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>create</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ab8706a0e8d8f2da249570e5547269c72</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream, const std::string &amp;guid, const SlotAsyncReady &amp;slot, ConnectionFlags flags=Gio::DBus::CONNECTION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Connection &gt;</type>
      <name>create_finish</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a8c3932d624428f9690f86fa2b2dcee65</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>create_for_address</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a2cfcac77627389fa35f59b52118fe0c5</anchor>
      <arglist>(const std::string &amp;address, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ConnectionFlags flags=Gio::DBus::CONNECTION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>create_for_address</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a27dedd455d630f22c3e4b1023fce7bd1</anchor>
      <arglist>(const std::string &amp;address, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ConnectionFlags flags=Gio::DBus::CONNECTION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>create_for_address</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a7541aa16a44ecc8ed8d64f143db86ebc</anchor>
      <arglist>(const std::string &amp;address, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, const SlotAsyncReady &amp;slot, ConnectionFlags flags=Gio::DBus::CONNECTION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>create_for_address</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a7121db082da9ce50211bfab69809837b</anchor>
      <arglist>(const std::string &amp;address, const SlotAsyncReady &amp;slot, ConnectionFlags flags=Gio::DBus::CONNECTION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Connection &gt;</type>
      <name>create_for_address_finish</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a4ae2f4459a49c6c839758c38ecdd3672</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Connection &gt;</type>
      <name>create_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a2f7a4d6ca323970acefe79bbbba13249</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream, const std::string &amp;guid, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ConnectionFlags flags=Gio::DBus::CONNECTION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Connection &gt;</type>
      <name>create_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aec7e858016e9d3ae71d0c3012a91a523</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream, const std::string &amp;guid, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ConnectionFlags flags=Gio::DBus::CONNECTION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Connection &gt;</type>
      <name>create_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ad43388dd55566edb548d64e32ea36985</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream, const std::string &amp;guid, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, ConnectionFlags flags=Gio::DBus::CONNECTION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Connection &gt;</type>
      <name>create_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aad07acd92fd5f4ed311ea58b1b34283c</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream, const std::string &amp;guid, ConnectionFlags flags=Gio::DBus::CONNECTION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Connection &gt;</type>
      <name>create_for_address_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a112688a795a494f3cce20a04a970e4ef</anchor>
      <arglist>(const std::string &amp;address, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ConnectionFlags flags=Gio::DBus::CONNECTION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Connection &gt;</type>
      <name>create_for_address_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a253cf6aaeb3ff39e1592e85f1a345f83</anchor>
      <arglist>(const std::string &amp;address, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ConnectionFlags flags=Gio::DBus::CONNECTION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Connection &gt;</type>
      <name>create_for_address_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a86f0ea860d112f58106d301affaa8561</anchor>
      <arglist>(const std::string &amp;address, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, ConnectionFlags flags=Gio::DBus::CONNECTION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Connection &gt;</type>
      <name>create_for_address_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a8f8b7483eba4c31bafb913897e5b8fdd</anchor>
      <arglist>(const std::string &amp;address, ConnectionFlags flags=Gio::DBus::CONNECTION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>af878a70230eb69d741b2d1c8232cc913</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream, const std::string &amp;guid, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ConnectionFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aea70bb4950131f4d82369c4cf7ff1ff3</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream, const std::string &amp;guid, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ConnectionFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a8a5dba32c3c0e009d5d708ffa01103ee</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream, const std::string &amp;guid, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, const SlotAsyncReady &amp;slot, ConnectionFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aa8f6f71d2be7e766d18e9f821cb395a2</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream, const std::string &amp;guid, const SlotAsyncReady &amp;slot, ConnectionFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a49a0547444d8d1163539846819ad8d6a</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream, const std::string &amp;guid, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ConnectionFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a54fdc2908d6d79353d20811ac5294043</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream, const std::string &amp;guid, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ConnectionFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a1e3ec1b9a12e9d9bdf75282369beae67</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream, const std::string &amp;guid, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, ConnectionFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ad378cce5c5a126f53777974b61344b48</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream, const std::string &amp;guid, ConnectionFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a58cdb0630ee4653cb6aacf05e4d658f5</anchor>
      <arglist>(const std::string &amp;address, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ConnectionFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aa9d757914a177ecad860411a8577dbf8</anchor>
      <arglist>(const std::string &amp;address, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ConnectionFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a2cc37e887b2682139f50384b91d353aa</anchor>
      <arglist>(const std::string &amp;address, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, const SlotAsyncReady &amp;slot, ConnectionFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a11b17fe1e5dffc1a0a172f0567f13cd4</anchor>
      <arglist>(const std::string &amp;address, const SlotAsyncReady &amp;slot, ConnectionFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aea75f881fbeb206f61a58361343a6daa</anchor>
      <arglist>(const std::string &amp;address, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ConnectionFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a45dd0879fd3bf7bd84fd6c2ad27f7f38</anchor>
      <arglist>(const std::string &amp;address, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ConnectionFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aff151a70d4b13e138b5417c0ee4becaf</anchor>
      <arglist>(const std::string &amp;address, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, ConnectionFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a6e0b9bacc7173bb7020506cfcd66cde3</anchor>
      <arglist>(const std::string &amp;address, ConnectionFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::Connection &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a0969ed44cfb18e10af19b6eec245e420</anchor>
      <arglist>(GDBusConnection *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::Error</name>
    <filename>classGio_1_1DBus_1_1Error.html</filename>
    <base>Glib::Error</base>
    <member kind="enumeration">
      <type></type>
      <name>Code</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caae23863990be76ca0ced65838544a2559</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_MEMORY</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa306099b6c613bd9ee55461a9df52e5b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SERVICE_UNKNOWN</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caafa2e549e2d1eece5b39253999c30d661</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NAME_HAS_NO_OWNER</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa227418ae04bf8a8fc969021a118f8839</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_REPLY</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa6f2501347b3afaedc409f88a4cb4a6f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caae691c9067d33730efecce5cdc09bdfd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_ADDRESS</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caabc3f73ec9017acdd84131bd7a05b11b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SUPPORTED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caaf0ea082c0d3e45c62b7856aec1ba4298</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LIMITS_EXCEEDED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caaa37918e7aa17bc109891e54d9c553e32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACCESS_DENIED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caae3a1dc07577bf7cf3792cc8d3d63ee33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AUTH_FAILED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa38bca965d996fac1b057fbdd9343c117</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_SERVER</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa9e1333a397c5fc93e291bd57f4fd5c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIMEOUT</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa25a7626b6188624c0f4620ba4bbb4c8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_NETWORK</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa31c11f11c65f6d811b77518a55bf2416</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADDRESS_IN_USE</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa870a7ec1f7478351d919949b7da5b83e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISCONNECTED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa4054e43b212606acd4524b11c90943e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_ARGS</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa845b0c5544dfc98f93159eaaf67514f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_NOT_FOUND</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caae1e658e6a3555f9fac8f4758eed463f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_EXISTS</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caaa37c2607fbf60be01bd01b5c4022cf87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_METHOD</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caad8886d0eed04c3df957bd7f773f24f88</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIMED_OUT</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa3cc501a2430a3664c3fa6caaf95fd609</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MATCH_RULE_NOT_FOUND</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa39be44bae03c08b3980723f201cda4ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MATCH_RULE_INVALID</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caac5e408e23e27f368fc9052b85c85204b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_EXEC_FAILED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa870b5963a5cfa0454ce808d63956c113</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_FORK_FAILED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa09bbcc74c443c82e49f6ab55171b6a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_CHILD_EXITED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caad061bffc7e97c32c478bff76310d5568</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_CHILD_SIGNALED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa2b8478fe230ae979bc5c67b7232f37d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_FAILED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa52606eee8d5e877f33ad79006d84a5f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_SETUP_FAILED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa2f505021ca9a7399f812fbb3fe0ff1e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_CONFIG_INVALID</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa09e0dc7da97e976d6b31a2089c1fa800</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_SERVICE_INVALID</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caafc16cfdd7171dc2f6fe84bb875412823</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_SERVICE_NOT_FOUND</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caadca099610a18448b80e281be77243c45</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_PERMISSIONS_INVALID</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caab0c498feea6126c86e4c30c41ef1132d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_FILE_INVALID</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caab23dd50c0e06bdda0b05109928da4747</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_NO_MEMORY</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caaf3f497e5151f911c5f2030cb341508ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNIX_PROCESS_ID_UNKNOWN</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa8ebbb2f4002a95e32377909ab2711068</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_SIGNATURE</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa5c2d44c86a5ed6df81114df83171061c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_FILE_CONTENT</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa991e2f9d312ce4e8256f58faae457bed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SELINUX_SECURITY_CONTEXT_UNKNOWN</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa0689542e01b8133111ed0ef3eb624283</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADT_AUDIT_DATA_UNKNOWN</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa60d8b356106f6ef6e652702f461caf8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OBJECT_PATH_IN_USE</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa40cc65dd7e7b0b25cfc1d8b8992808b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_OBJECT</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa35fcedf09936f939c903be6df0d5b1c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_INTERFACE</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caae938770ce1f07884257637d3b8f4d1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_PROPERTY</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa3481ada04a3cc8e195474896fa42ea66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROPERTY_READ_ONLY</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa273d9420be7b932674cd3ccf7d4a4151</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caae23863990be76ca0ced65838544a2559</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_MEMORY</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa306099b6c613bd9ee55461a9df52e5b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SERVICE_UNKNOWN</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caafa2e549e2d1eece5b39253999c30d661</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NAME_HAS_NO_OWNER</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa227418ae04bf8a8fc969021a118f8839</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_REPLY</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa6f2501347b3afaedc409f88a4cb4a6f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caae691c9067d33730efecce5cdc09bdfd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_ADDRESS</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caabc3f73ec9017acdd84131bd7a05b11b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SUPPORTED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caaf0ea082c0d3e45c62b7856aec1ba4298</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LIMITS_EXCEEDED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caaa37918e7aa17bc109891e54d9c553e32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACCESS_DENIED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caae3a1dc07577bf7cf3792cc8d3d63ee33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AUTH_FAILED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa38bca965d996fac1b057fbdd9343c117</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_SERVER</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa9e1333a397c5fc93e291bd57f4fd5c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIMEOUT</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa25a7626b6188624c0f4620ba4bbb4c8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_NETWORK</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa31c11f11c65f6d811b77518a55bf2416</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADDRESS_IN_USE</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa870a7ec1f7478351d919949b7da5b83e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISCONNECTED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa4054e43b212606acd4524b11c90943e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_ARGS</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa845b0c5544dfc98f93159eaaf67514f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_NOT_FOUND</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caae1e658e6a3555f9fac8f4758eed463f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_EXISTS</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caaa37c2607fbf60be01bd01b5c4022cf87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_METHOD</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caad8886d0eed04c3df957bd7f773f24f88</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIMED_OUT</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa3cc501a2430a3664c3fa6caaf95fd609</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MATCH_RULE_NOT_FOUND</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa39be44bae03c08b3980723f201cda4ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MATCH_RULE_INVALID</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caac5e408e23e27f368fc9052b85c85204b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_EXEC_FAILED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa870b5963a5cfa0454ce808d63956c113</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_FORK_FAILED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa09bbcc74c443c82e49f6ab55171b6a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_CHILD_EXITED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caad061bffc7e97c32c478bff76310d5568</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_CHILD_SIGNALED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa2b8478fe230ae979bc5c67b7232f37d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_FAILED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa52606eee8d5e877f33ad79006d84a5f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_SETUP_FAILED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa2f505021ca9a7399f812fbb3fe0ff1e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_CONFIG_INVALID</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa09e0dc7da97e976d6b31a2089c1fa800</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_SERVICE_INVALID</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caafc16cfdd7171dc2f6fe84bb875412823</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_SERVICE_NOT_FOUND</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caadca099610a18448b80e281be77243c45</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_PERMISSIONS_INVALID</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caab0c498feea6126c86e4c30c41ef1132d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_FILE_INVALID</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caab23dd50c0e06bdda0b05109928da4747</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_NO_MEMORY</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caaf3f497e5151f911c5f2030cb341508ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNIX_PROCESS_ID_UNKNOWN</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa8ebbb2f4002a95e32377909ab2711068</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_SIGNATURE</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa5c2d44c86a5ed6df81114df83171061c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_FILE_CONTENT</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa991e2f9d312ce4e8256f58faae457bed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SELINUX_SECURITY_CONTEXT_UNKNOWN</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa0689542e01b8133111ed0ef3eb624283</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADT_AUDIT_DATA_UNKNOWN</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa60d8b356106f6ef6e652702f461caf8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OBJECT_PATH_IN_USE</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa40cc65dd7e7b0b25cfc1d8b8992808b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_OBJECT</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa35fcedf09936f939c903be6df0d5b1c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_INTERFACE</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caae938770ce1f07884257637d3b8f4d1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_PROPERTY</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa3481ada04a3cc8e195474896fa42ea66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROPERTY_READ_ONLY</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa273d9420be7b932674cd3ccf7d4a4151</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Error</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>a323f21d8dc12b8d0f37c4b5b3531f154</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Error</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>ab5608b08033ac5f4849e620f2932a253</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>ab5d896113542238fc1ba905bfaadcc78</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::Interface</name>
    <filename>classGio_1_1DBus_1_1Interface.html</filename>
    <base>Glib::Interface</base>
    <member kind="function">
      <type></type>
      <name>Interface</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>ab73fe0df8ebf95ab85e619dc7c425eb7</anchor>
      <arglist>(Interface &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Interface &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>a493605e70c490df43b8efd57cbd2078f</anchor>
      <arglist>(Interface &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Interface</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>a40b50b5c6dfdcc051392f7d07784173f</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GDBusInterface *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>a7a3da62626d94825436aa4d86f9434c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusInterface *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>abcd8a94f909bf2a201b5143c8ed1d3bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; InterfaceInfo &gt;</type>
      <name>get_info</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>a1b3a83443cf776f5e92fcf29e3553c3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const InterfaceInfo &gt;</type>
      <name>get_info</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>a91c27700c8e64791ba3139e0302da2c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::Object &gt;</type>
      <name>get_object</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>ab307a39e08a250f1cc00cbd74a396773</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Gio::DBus::Object &gt;</type>
      <name>get_object</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>afb88359f9f99965563350e1881be6e08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::Object &gt;</type>
      <name>dup_object</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>a2286c209a9918991013950ae309af021</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Gio::DBus::Object &gt;</type>
      <name>dup_object</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>af3bbdae0dc5fe2c813cc59eab149318c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_object</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>ad048f670e0ee5206554d4a107e56b0d2</anchor>
      <arglist>(const Glib::RefPtr&lt; Gio::DBus::Object &gt; &amp;object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::RefPtr&lt; InterfaceInfo &gt;</type>
      <name>get_info_vfunc</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>a8dd86c8dffd194a9d5065f7cd41a0d86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::RefPtr&lt; Gio::DBus::Object &gt;</type>
      <name>get_object_vfunc</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>ad5f38ecfe29958c864684d5d5efab4f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_object_vfunc</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>aa557f659fdc89725727a11bbe459cd95</anchor>
      <arglist>(const Glib::RefPtr&lt; Gio::DBus::Object &gt; &amp;object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::RefPtr&lt; Gio::DBus::Object &gt;</type>
      <name>dup_object_vfunc</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>a6874c8582bf3621a421726e6e72d1bee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>a4b4a149e5f584b56c4c01d8abba953d3</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>a4c2df66edd79414fa41dbe184150c1fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Interface</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>a390f865cfe205e996d16f96abbab3f94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::Interface &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>a8af37d1125c26d5ed9a6fa7afbb80540</anchor>
      <arglist>(GDBusInterface *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::InterfaceInfo</name>
    <filename>classGio_1_1DBus_1_1InterfaceInfo.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceInfo.html</anchorfile>
      <anchor>ac3cf946f995c3a021a467657793e1ba7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceInfo.html</anchorfile>
      <anchor>a282597b5dba83f8770ef3e09022a6c83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GDBusInterfaceInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceInfo.html</anchorfile>
      <anchor>aa678c16176d57220dc4dc979b459ff20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusInterfaceInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceInfo.html</anchorfile>
      <anchor>aedaa5c86375bd28551d074d6b5475a0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GDBusInterfaceInfo *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceInfo.html</anchorfile>
      <anchor>ad0657a325108ea6474163ad1c1b3e97c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterfaceInfo</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceInfo.html</anchorfile>
      <anchor>a88fb42e90c3216ed054e2c6d55a9d249</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterfaceInfo</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceInfo.html</anchorfile>
      <anchor>a280c7af6f2230f2eabbb2abda187c62c</anchor>
      <arglist>(const InterfaceInfo &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>InterfaceInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceInfo.html</anchorfile>
      <anchor>a4c76011289b22536b12087c0c5950377</anchor>
      <arglist>(const InterfaceInfo &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; MethodInfo &gt;</type>
      <name>lookup_method</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceInfo.html</anchorfile>
      <anchor>ab6be5a8035c3dd912dd8d41d2ce90163</anchor>
      <arglist>(const Glib::ustring &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const MethodInfo &gt;</type>
      <name>lookup_method</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceInfo.html</anchorfile>
      <anchor>a18d66614d005ac901e348ab6e703fb20</anchor>
      <arglist>(const Glib::ustring &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SignalInfo &gt;</type>
      <name>lookup_signal</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceInfo.html</anchorfile>
      <anchor>ac962d00be0c6ee06c9d8ba1759896d58</anchor>
      <arglist>(const Glib::ustring &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const SignalInfo &gt;</type>
      <name>lookup_signal</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceInfo.html</anchorfile>
      <anchor>a8299969ab5741de6a2363a48ba1c286f</anchor>
      <arglist>(const Glib::ustring &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; PropertyInfo &gt;</type>
      <name>lookup_property</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceInfo.html</anchorfile>
      <anchor>aa262d64ac38a5185a0bf7f15ceeb64bb</anchor>
      <arglist>(const Glib::ustring &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const PropertyInfo &gt;</type>
      <name>lookup_property</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceInfo.html</anchorfile>
      <anchor>ab54cbe31849e955a950f644859dd9b54</anchor>
      <arglist>(const Glib::ustring &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cache_build</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceInfo.html</anchorfile>
      <anchor>ab4f56f90f2bd34ff4e4262e56b5a371d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cache_release</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceInfo.html</anchorfile>
      <anchor>aa5696de0812fd9f15c50609a65cfe4c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceInfo.html</anchorfile>
      <anchor>a9f677a6dcc5da5664fb0e129d1e3472f</anchor>
      <arglist>(void *, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::InterfaceInfo &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceInfo.html</anchorfile>
      <anchor>a406db3d3ce8c310ad8a24444873e1fdc</anchor>
      <arglist>(GDBusInterfaceInfo *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::InterfaceSkeleton</name>
    <filename>classGio_1_1DBus_1_1InterfaceSkeleton.html</filename>
    <base>Glib::Object</base>
    <base>Gio::DBus::Interface</base>
    <member kind="function">
      <type></type>
      <name>InterfaceSkeleton</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceSkeleton.html</anchorfile>
      <anchor>a62a22badf2dedf1f18860cdc9d9d7aaf</anchor>
      <arglist>(InterfaceSkeleton &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>InterfaceSkeleton &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceSkeleton.html</anchorfile>
      <anchor>a63683219194d825ae0112362d38084f0</anchor>
      <arglist>(InterfaceSkeleton &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InterfaceSkeleton</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceSkeleton.html</anchorfile>
      <anchor>a2e57f1db6768b441bd3f6482457924e9</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GDBusInterfaceSkeleton *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceSkeleton.html</anchorfile>
      <anchor>acf6afe51b3a1144f548b5bdd130f25ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusInterfaceSkeleton *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceSkeleton.html</anchorfile>
      <anchor>a36c3f317500ef9cfaa023f0f954bdb4e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GDBusInterfaceSkeleton *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceSkeleton.html</anchorfile>
      <anchor>a1398a36e0c937a737afdfd6d44ee3259</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceSkeleton.html</anchorfile>
      <anchor>add6861253e2afda8887accdecdfbcafb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; InterfaceInfo &gt;</type>
      <name>get_info</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceSkeleton.html</anchorfile>
      <anchor>a18b083ba11335a09e8267cc6e52b2d72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const InterfaceInfo &gt;</type>
      <name>get_info</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceSkeleton.html</anchorfile>
      <anchor>a1ae759bb0de55a9838fef912eeef0791</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantBase</type>
      <name>get_properties</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceSkeleton.html</anchorfile>
      <anchor>a9e2338ba1873cfaeabdd180008c34a5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>export_interface_skeleton</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceSkeleton.html</anchorfile>
      <anchor>a0347f215ce0fe4fb4ecefe3396cb7c3b</anchor>
      <arglist>(const Glib::RefPtr&lt; Connection &gt; &amp;connection, const Glib::ustring &amp;object_path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unexport</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceSkeleton.html</anchorfile>
      <anchor>a1260de895ed6713ea46e28fd82624247</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unexport_from_connection</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceSkeleton.html</anchorfile>
      <anchor>a5c7f2c6545883ffeabea0579cc622c5d</anchor>
      <arglist>(const Glib::RefPtr&lt; Connection &gt; &amp;connection)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Connection &gt;</type>
      <name>get_connection</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceSkeleton.html</anchorfile>
      <anchor>aec4795e2e8ffc6ee85f6a23da5861910</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Connection &gt;</type>
      <name>get_connection</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceSkeleton.html</anchorfile>
      <anchor>a93f1cc18af7bb8f6db33ed7eb26f8431</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::RefPtr&lt; Connection &gt; &gt;</type>
      <name>get_connections</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceSkeleton.html</anchorfile>
      <anchor>aae2cb5eae8675923e10588ceaffbd112</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::RefPtr&lt; const Connection &gt; &gt;</type>
      <name>get_connections</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceSkeleton.html</anchorfile>
      <anchor>a7be0b98753bd1ed9dc802194ec74b75d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_connection</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceSkeleton.html</anchorfile>
      <anchor>a15336035263c703cbad7fb9a8de92340</anchor>
      <arglist>(const Glib::RefPtr&lt; const Connection &gt; &amp;connection) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_object_path</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceSkeleton.html</anchorfile>
      <anchor>a064de5bcc233eedc2636008e752b707d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InterfaceSkeletonFlags</type>
      <name>get_flags</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceSkeleton.html</anchorfile>
      <anchor>ad2db3311bf2bf4e1ffaa2efc36b7168e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_flags</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceSkeleton.html</anchorfile>
      <anchor>a1a1a8528ccf28d026ecf9365a362dcd5</anchor>
      <arglist>(InterfaceSkeletonFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; InterfaceSkeletonFlags &gt;</type>
      <name>property_g_flags</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceSkeleton.html</anchorfile>
      <anchor>a1f2f05ddd701b2dd2beb58b8741c50c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; InterfaceSkeletonFlags &gt;</type>
      <name>property_g_flags</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceSkeleton.html</anchorfile>
      <anchor>a3c3e7c49a89de14590570ced3f9d1511</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; bool, const Glib::RefPtr&lt; MethodInvocation &gt; &amp;&gt;</type>
      <name>signal_authorize_method</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceSkeleton.html</anchorfile>
      <anchor>a8db8869174d62e2e284f91f2c8a6e21c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceSkeleton.html</anchorfile>
      <anchor>a611f15802e5f64b0fbb9761cf6474be1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>on_authorize_method</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceSkeleton.html</anchorfile>
      <anchor>a83b48143ec480aa4f883dd9fe96dcf9f</anchor>
      <arglist>(const Glib::RefPtr&lt; MethodInvocation &gt; &amp;invocation)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::InterfaceSkeleton &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceSkeleton.html</anchorfile>
      <anchor>a446bffe8206f2a4c7f55955136adead5</anchor>
      <arglist>(GDBusInterfaceSkeleton *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::InterfaceVTable</name>
    <filename>classGio_1_1DBus_1_1InterfaceVTable.html</filename>
    <member kind="typedef">
      <type>sigc::slot&lt; void, const Glib::RefPtr&lt; Connection &gt; &amp;, const Glib::ustring &amp;, const Glib::ustring &amp;, const Glib::ustring &amp;, const Glib::ustring &amp;, const Glib::VariantContainerBase &amp;, const Glib::RefPtr&lt; MethodInvocation &gt; &amp;&gt;</type>
      <name>SlotInterfaceMethodCall</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceVTable.html</anchorfile>
      <anchor>ae5095ffd3044c1cd0b411aec9232adb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void, Glib::VariantBase &amp;, const Glib::RefPtr&lt; Connection &gt; &amp;, const Glib::ustring &amp;, const Glib::ustring &amp;, const Glib::ustring &amp;, const Glib::ustring &amp;&gt;</type>
      <name>SlotInterfaceGetProperty</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceVTable.html</anchorfile>
      <anchor>ad32fa1b62f8ec2728e6387cecfe68af5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; bool, const Glib::RefPtr&lt; Connection &gt; &amp;, const Glib::ustring &amp;, const Glib::ustring &amp;, const Glib::ustring &amp;, const Glib::ustring &amp;, const Glib::VariantBase &amp;&gt;</type>
      <name>SlotInterfaceSetProperty</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceVTable.html</anchorfile>
      <anchor>a050123f4f1f6ccbff460ac4b23c00383</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterfaceVTable</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceVTable.html</anchorfile>
      <anchor>a0e7c550850e1d8930505db9e017f478d</anchor>
      <arglist>(const SlotInterfaceMethodCall &amp;slot_method_call, const SlotInterfaceGetProperty &amp;slot_get_property=SlotInterfaceGetProperty(), const SlotInterfaceSetProperty &amp;slot_set_property=SlotInterfaceSetProperty())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterfaceVTable</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceVTable.html</anchorfile>
      <anchor>acb2ced23d9e92a869618d708388fb609</anchor>
      <arglist>(const InterfaceVTable &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type>InterfaceVTable &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceVTable.html</anchorfile>
      <anchor>aa95fa870f5ce912c79838c0ea3c388a8</anchor>
      <arglist>(const InterfaceVTable &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterfaceVTable</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceVTable.html</anchorfile>
      <anchor>a61cf2355184387980e7c3a930d671817</anchor>
      <arglist>(InterfaceVTable &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>InterfaceVTable &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceVTable.html</anchorfile>
      <anchor>aa34d1785619b1ac8034b4ba8bd796b7f</anchor>
      <arglist>(InterfaceVTable &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InterfaceVTable</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceVTable.html</anchorfile>
      <anchor>a3536fe00698e6b273e5c4887082f68bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GDBusInterfaceVTable *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceVTable.html</anchorfile>
      <anchor>abad0b4287afd7f7374fceb39969ae256</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusInterfaceVTable *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceVTable.html</anchorfile>
      <anchor>a2e119cc2ffe37e799785d085cd99cec6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GDBusInterfaceVTable</type>
      <name>gobject_</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceVTable.html</anchorfile>
      <anchor>adda40bf9c508d67d322de3a64470e220</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SlotInterfaceMethodCall *</type>
      <name>slot_method_call_</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceVTable.html</anchorfile>
      <anchor>aa1ef781409db5046e625144192e56dac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SlotInterfaceGetProperty *</type>
      <name>slot_get_property_</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceVTable.html</anchorfile>
      <anchor>a1b097927dc86647483ede8df3f511b1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SlotInterfaceSetProperty *</type>
      <name>slot_set_property_</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceVTable.html</anchorfile>
      <anchor>a1096284683f2b9d73ce607fc8ad357b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::MenuModel</name>
    <filename>classGio_1_1DBus_1_1MenuModel.html</filename>
    <base>Gio::MenuModel</base>
    <member kind="function">
      <type></type>
      <name>MenuModel</name>
      <anchorfile>classGio_1_1DBus_1_1MenuModel.html</anchorfile>
      <anchor>aab442eb08ae1eddb595edd21008641d2</anchor>
      <arglist>(MenuModel &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MenuModel &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1DBus_1_1MenuModel.html</anchorfile>
      <anchor>aaa32ebcb5ee0d17aeadfe6d618ded0c6</anchor>
      <arglist>(MenuModel &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MenuModel</name>
      <anchorfile>classGio_1_1DBus_1_1MenuModel.html</anchorfile>
      <anchor>a62380e573f1e8f8789899b45909e0944</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GDBusMenuModel *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1MenuModel.html</anchorfile>
      <anchor>a86e78b6399f1dce5e5f660bc6803f27d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusMenuModel *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1MenuModel.html</anchorfile>
      <anchor>acba085482c08bc7c70d5cafffc03ef51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GDBusMenuModel *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DBus_1_1MenuModel.html</anchorfile>
      <anchor>abad56da89a63fa5ed876d43e57f83b7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1DBus_1_1MenuModel.html</anchorfile>
      <anchor>a6995e492bb27ba20e02ffee3629dfee7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; MenuModel &gt;</type>
      <name>get</name>
      <anchorfile>classGio_1_1DBus_1_1MenuModel.html</anchorfile>
      <anchor>a6bc438a392d6237e2e1625ac3c12c40a</anchor>
      <arglist>(const Glib::RefPtr&lt; Connection &gt; &amp;connection, const Glib::ustring &amp;bus_name, const Glib::ustring &amp;object_path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MenuModel</name>
      <anchorfile>classGio_1_1DBus_1_1MenuModel.html</anchorfile>
      <anchor>a1695e3aced2d796aab216fc5644ac053</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::MenuModel &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1MenuModel.html</anchorfile>
      <anchor>a43648ab7851c659c19a0a0e5cdebcd98</anchor>
      <arglist>(GDBusMenuModel *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::Message</name>
    <filename>classGio_1_1DBus_1_1Message.html</filename>
    <base>Glib::Object</base>
    <member kind="enumeration">
      <type></type>
      <name>ByteOrder</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>ac8c292dccde34caf51d094d2b794d78d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BYTE_ORDER_BIG_ENDIAN</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>ac8c292dccde34caf51d094d2b794d78da584cce05a0bf010785e9f0f91e545e02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BYTE_ORDER_LITTLE_ENDIAN</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>ac8c292dccde34caf51d094d2b794d78dadb9033fe7d977ea0b78d2132a618e61d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BYTE_ORDER_BIG_ENDIAN</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>ac8c292dccde34caf51d094d2b794d78da584cce05a0bf010785e9f0f91e545e02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BYTE_ORDER_LITTLE_ENDIAN</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>ac8c292dccde34caf51d094d2b794d78dadb9033fe7d977ea0b78d2132a618e61d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Message</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a77296edb0384b888bf8b947b5d1cffa1</anchor>
      <arglist>(Message &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Message &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>aaaaa053bbf02dd8125bbd955217c0777</anchor>
      <arglist>(Message &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Message</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a81d988552ed9b4bcf8877e74bcc809c4</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GDBusMessage *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a3f7e482da2809d0c027cafffeae16257</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusMessage *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a000f46a5c5d9577fded452726e82945a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GDBusMessage *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a18c8d67b0e982d6790bc880f39892998</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>print</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a9df094e7afdffcd82838d08002436005</anchor>
      <arglist>(guint indent)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_locked</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a105b19a0cac3aa30edbfbe35831e58a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>aef5359c1545cfe63a9d7fddbf5cafbf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Message &gt;</type>
      <name>copy</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a69f1a45b2adec6319dcfbb0f96ff6f80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MessageType</type>
      <name>get_message_type</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>ac74aaca08a5215638c6061a89ae26790</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_message_type</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a934241dade435756a7a585f3cda9cd67</anchor>
      <arglist>(MessageType type)</arglist>
    </member>
    <member kind="function">
      <type>ByteOrder</type>
      <name>get_byte_order</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a9e488bbfbd8f9dc977dbb12f7b44b537</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_byte_order</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a6b4d1c65c3969bc2cbbe560fcbfbb06b</anchor>
      <arglist>(ByteOrder byte_order)</arglist>
    </member>
    <member kind="function">
      <type>guint32</type>
      <name>get_serial</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>afa8fe82528b19127d2a9f86dddf1cb6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_serial</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>af69369632ec43d609032963e3a09797a</anchor>
      <arglist>(guint32 serial)</arglist>
    </member>
    <member kind="function">
      <type>MessageFlags</type>
      <name>get_flags</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>ae90909d1f58979471bd71b2f8112d680</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_flags</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a47eec341f43c138d6e48a5d187af372a</anchor>
      <arglist>(MessageFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_body</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>afdc1e7e35a6f9261f8f989f4b94c4ad2</anchor>
      <arglist>(Glib::VariantBase &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_body</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a4a5646dfe35e4a3923a1f225b7a6a801</anchor>
      <arglist>(const Glib::VariantBase &amp;body)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; UnixFDList &gt;</type>
      <name>get_unix_fd_list</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a2e173562d4ebccaa3c31d3dd68ea00f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const UnixFDList &gt;</type>
      <name>get_unix_fd_list</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a7e7fbe989c22dd680682d3002ed15389</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_unix_fd_list</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a9dea4d84c86e5e682dc7a4bdfbaaa15f</anchor>
      <arglist>(const Glib::RefPtr&lt; UnixFDList &gt; &amp;fd_list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unset_unix_fd_list</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>aad998df53929918d805806f1ffcf82ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>guint32</type>
      <name>get_num_unix_fds</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>ae63e56f37891ad1b109da09165fd2820</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_num_unix_fds</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a487e82c6d1c3f87c7b5f9d3d1fd0b4d1</anchor>
      <arglist>(guint32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_header</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a46f2cd81e5ec1242a8b8df980ecbb0a3</anchor>
      <arglist>(Glib::VariantBase &amp;value, MessageHeaderField header_field) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_header</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a25e4b36f8d6545370b07b73f1b815d16</anchor>
      <arglist>(MessageHeaderField header_field, const Glib::VariantBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; guchar &gt;</type>
      <name>get_header_fields</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a3ab850320ba41392e15084494e8bba3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_destination</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>ae98bc674bab98da923fba9643c8a53b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_destination</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a9f55a2ed2483623257291269d82d92bf</anchor>
      <arglist>(const Glib::ustring &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_error_name</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a4e64acbb714534d9e5b84c998746d1ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_error_name</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a3a574fe46f7ac14c2c0eba7d609e0ac1</anchor>
      <arglist>(const Glib::ustring &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_interface</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>af391e5c5779cddb03f10dc3184b550e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_interface</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a031683be4ab412b48e4f871f953d6cd7</anchor>
      <arglist>(const Glib::ustring &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_member</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>aa51ade4f8d26d39b7ae8416ca4313488</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_member</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a2b720f308f381555c56a6ca503b9f0c8</anchor>
      <arglist>(const Glib::ustring &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_path</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a57428689d8ab1e4f0b84e2116006a489</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_path</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a68f82ad8fa0d23762e1bcf78bb366093</anchor>
      <arglist>(const Glib::ustring &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>guint32</type>
      <name>get_reply_serial</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a3e7865635fc7b6162f304c14c24b3d6b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_reply_serial</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a7aacc89a5a9f0b638e0ceefbaf50482e</anchor>
      <arglist>(guint32 value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_sender</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a61fe6e2c29e9117dc0102c205bbfd05a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_sender</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a1058eb594d97c6d9e8d88a3ac11e83d8</anchor>
      <arglist>(const Glib::ustring &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_signature</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>aa36f4de3bc5ab80e90116b0a4af63d17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_signature</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a8036640a01ed7440b4dbc69863e5889e</anchor>
      <arglist>(const Glib::ustring &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_arg0</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a363e859015329ec0f81b2c823e9b47a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>guchar *</type>
      <name>to_blob</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a01cc723d36909410443d2472984074a6</anchor>
      <arglist>(gsize &amp;out_size, CapabilityFlags capabilities=CAPABILITY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>to_exception</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a1cbb8f345228711415e10c07a0d02bce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_locked</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a6dc594b95727f85df5d4859a5945aa9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a8e1e7c80ee9fcb6b23fdd3f5f4306fe8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Message &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>aaeb30ae1326793a0fb20c4a9474af4b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Message &gt;</type>
      <name>create_signal</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>ad2abb06b32a87dec0220e81da6f774e8</anchor>
      <arglist>(const Glib::ustring &amp;path, const Glib::ustring &amp;iface, const Glib::ustring &amp;signal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Message &gt;</type>
      <name>create_method_call</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>ad71287a390cc6597158e74823d1a2071</anchor>
      <arglist>(const Glib::ustring &amp;name, const Glib::ustring &amp;path, const Glib::ustring &amp;iface, const Glib::ustring &amp;method)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Message &gt;</type>
      <name>create_method_reply</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>ab009b7c3d9f0c019a041ea276f6a1aa8</anchor>
      <arglist>(const Glib::RefPtr&lt; Message &gt; &amp;method_call_message)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Message &gt;</type>
      <name>create_method_error_literal</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a167dc73e217ff2907c1f97ad57b555e2</anchor>
      <arglist>(const Glib::RefPtr&lt; const Message &gt; &amp;method_call_message, const Glib::ustring &amp;error_name, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Message &gt;</type>
      <name>create_from_blob</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a0c7976cb84ae87bac48213e2b895b6b6</anchor>
      <arglist>(const guchar *blob, gsize blob_len, CapabilityFlags capabilities=CAPABILITY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static gssize</type>
      <name>bytes_needed</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a30c7ec99847e57a6def4e5552cb40ec0</anchor>
      <arglist>(const guchar *blob, gsize blob_len)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Message</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a52d9686c55d462434a5e33d7b4d7a6ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::Message &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a5ea3ecdfe6482c3c8cc63feebd68b1ba</anchor>
      <arglist>(GDBusMessage *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::MethodInfo</name>
    <filename>classGio_1_1DBus_1_1MethodInfo.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInfo.html</anchorfile>
      <anchor>a9d1f99e5e8462cb48420000af3fd743b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInfo.html</anchorfile>
      <anchor>a1854186c27b88d5b254cfcf3120e98e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GDBusMethodInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInfo.html</anchorfile>
      <anchor>a4ab8c6e7a8ed42501225ecbdddd2659d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusMethodInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInfo.html</anchorfile>
      <anchor>aa408f5ff23b50e69b34e2a876dcd69b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GDBusMethodInfo *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInfo.html</anchorfile>
      <anchor>a19d90351f72999b42d89f7498711eca0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MethodInfo</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInfo.html</anchorfile>
      <anchor>af9ad46e6ae7c6265d34eadf6ba1160c8</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MethodInfo</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInfo.html</anchorfile>
      <anchor>a5682ad7f2d8f49b6ba61484169c8c6ee</anchor>
      <arglist>(const MethodInfo &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>MethodInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInfo.html</anchorfile>
      <anchor>a1dfa7e877f6c8d779ab316d2626d6e2b</anchor>
      <arglist>(const MethodInfo &amp;)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInfo.html</anchorfile>
      <anchor>a709938fc847451f185d516af9804f34a</anchor>
      <arglist>(void *, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::MethodInfo &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInfo.html</anchorfile>
      <anchor>a4f3b875fa0c513dff47215ac106f8ab4</anchor>
      <arglist>(GDBusMethodInfo *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::MethodInvocation</name>
    <filename>classGio_1_1DBus_1_1MethodInvocation.html</filename>
    <base>Glib::Object</base>
    <member kind="function">
      <type></type>
      <name>MethodInvocation</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>a6548d8a6933deaf89e47cf1f96b3d92f</anchor>
      <arglist>(MethodInvocation &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MethodInvocation &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>a2c40740e00f9b55b25e4fcdcbed98325</anchor>
      <arglist>(MethodInvocation &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MethodInvocation</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>ab0244d7b3bcfc2d4bfc53a8fd8fc1674</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GDBusMethodInvocation *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>a5170f94ecb1eea4b4bdfda7859683033</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusMethodInvocation *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>a0fe876521d518a15cd55bb316db164aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GDBusMethodInvocation *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>a2b8b049e016e86c21f1a77613891d953</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_sender</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>aa421e6769117632bf3a4df776cfc25f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_object_path</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>a44dc14b8abdd5d1cbd6b16c304bbda48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_interface_name</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>aca1440110df3195723d7fefb8e58341c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_method_name</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>acc7b29750c392b1615617d94ece2fba3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const MethodInfo &gt;</type>
      <name>get_method_info</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>ac727e778d6aaf99430de74377b62e8d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Connection &gt;</type>
      <name>get_connection</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>a4030505610abdcd13811b0e6b6bf71f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Connection &gt;</type>
      <name>get_connection</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>aa8ad51bd60ee3b394582da6e375ef96a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Message &gt;</type>
      <name>get_message</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>ac65a9d771a9ecb31ca93d0dbf26b3389</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Message &gt;</type>
      <name>get_message</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>a719e92991e7677c8978374a6e68f3355</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantContainerBase</type>
      <name>get_parameters</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>a0ec1e3775255efc861c8f01cd8fc0798</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>return_value</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>a2002577eaaaa2aaac68f8733ccb3fe70</anchor>
      <arglist>(const Glib::VariantContainerBase &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>return_value</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>abf24a8dc3bc4386b103aad68bfeb7d86</anchor>
      <arglist>(const Glib::VariantContainerBase &amp;parameters, const Glib::RefPtr&lt; UnixFDList &gt; &amp;fd_list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>return_error</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>a3a8b3cc15c7a943d2af4d68b9ae6289d</anchor>
      <arglist>(const Glib::ustring &amp;domain, int code, const Glib::ustring &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>return_error</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>a789f5152c849a5cee67943cff5055a1b</anchor>
      <arglist>(const Glib::Error &amp;error)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>return_dbus_error</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>a93574aa6f245792c9023dbd31b464a09</anchor>
      <arglist>(const Glib::ustring &amp;error_name, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>ae56fd80b7b472fccec979981be36f90b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::MethodInvocation &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>a4518a4ce2928aa3898bcbc56b8be7d65</anchor>
      <arglist>(GDBusMethodInvocation *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::NodeInfo</name>
    <filename>classGio_1_1DBus_1_1NodeInfo.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGio_1_1DBus_1_1NodeInfo.html</anchorfile>
      <anchor>a4577708becf939cfcd02dc474268ebdd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGio_1_1DBus_1_1NodeInfo.html</anchorfile>
      <anchor>aa9904285d20a8edeadf4489c6952000e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GDBusNodeInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1NodeInfo.html</anchorfile>
      <anchor>a4d4e22a05a2ff68f4f53a6463b729102</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusNodeInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1NodeInfo.html</anchorfile>
      <anchor>a24772c51076ed67632b0c1dbb4611f90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GDBusNodeInfo *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DBus_1_1NodeInfo.html</anchorfile>
      <anchor>a2cf53c836967d985aaada9204c7c9640</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeInfo</name>
      <anchorfile>classGio_1_1DBus_1_1NodeInfo.html</anchorfile>
      <anchor>a38a2bdc9d2e09fafa68a5292a22fe38d</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeInfo</name>
      <anchorfile>classGio_1_1DBus_1_1NodeInfo.html</anchorfile>
      <anchor>a462f1ef7d68274739bf4103c49d93ae6</anchor>
      <arglist>(const NodeInfo &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>NodeInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1DBus_1_1NodeInfo.html</anchorfile>
      <anchor>a1131d489dbf7e694b4e8f1232028ed91</anchor>
      <arglist>(const NodeInfo &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; InterfaceInfo &gt;</type>
      <name>lookup_interface</name>
      <anchorfile>classGio_1_1DBus_1_1NodeInfo.html</anchorfile>
      <anchor>ad30cfe6b4f39d7da66781069578ba15c</anchor>
      <arglist>(const Glib::ustring &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const InterfaceInfo &gt;</type>
      <name>lookup_interface</name>
      <anchorfile>classGio_1_1DBus_1_1NodeInfo.html</anchorfile>
      <anchor>a6ebafe330203a4ba7d83031953004728</anchor>
      <arglist>(const Glib::ustring &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; InterfaceInfo &gt;</type>
      <name>lookup_interface</name>
      <anchorfile>classGio_1_1DBus_1_1NodeInfo.html</anchorfile>
      <anchor>acffd3dc22a4a392081061df969603e24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const InterfaceInfo &gt;</type>
      <name>lookup_interface</name>
      <anchorfile>classGio_1_1DBus_1_1NodeInfo.html</anchorfile>
      <anchor>aa0291dba31d7879d54cfa6bc57675ed4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; NodeInfo &gt;</type>
      <name>create_for_xml</name>
      <anchorfile>classGio_1_1DBus_1_1NodeInfo.html</anchorfile>
      <anchor>ad1429c7da8cc66d2fc6c621dfa83d62e</anchor>
      <arglist>(const Glib::ustring &amp;xml_data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classGio_1_1DBus_1_1NodeInfo.html</anchorfile>
      <anchor>a3edceb1043c6d1acd4b6036cf84119d3</anchor>
      <arglist>(void *, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::NodeInfo &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1NodeInfo.html</anchorfile>
      <anchor>ac728ff5153511f439e9b6fe2a276f60e</anchor>
      <arglist>(GDBusNodeInfo *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::Object</name>
    <filename>classGio_1_1DBus_1_1Object.html</filename>
    <base>Glib::Interface</base>
    <member kind="function">
      <type></type>
      <name>Object</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>aa50aad3c31d548ee2f9ae63df918c7b9</anchor>
      <arglist>(Object &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Object &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>a3e323be373c139fe48e1c49b70a9b9fd</anchor>
      <arglist>(Object &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Object</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>af344faba030532ae62854bbf7c521618</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GDBusObject *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>afc66423a9325d2ed262d4771c531bc4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusObject *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>aea4c1c106193e625e87b55e19750cbf4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_object_path</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>a082d174fc8782f219ebc6bfb835fa640</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::RefPtr&lt; Gio::DBus::Interface &gt; &gt;</type>
      <name>get_interfaces</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>a6fde96e6e517df2a3747fff3709a2891</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::RefPtr&lt; const Gio::DBus::Interface &gt; &gt;</type>
      <name>get_interfaces</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>a48ce5df8a4af56c1865b6789342bf29a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::Interface &gt;</type>
      <name>get_interface</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>afd65f620dd969e88b80a1433e5859e0e</anchor>
      <arglist>(const Glib::ustring &amp;interface_name)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Gio::DBus::Interface &gt;</type>
      <name>get_interface</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>a3ea90c5727c0d6a343c9135ec21153e1</anchor>
      <arglist>(const Glib::ustring &amp;interface_name) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, const Glib::RefPtr&lt; Gio::DBus::Interface &gt; &amp;&gt;</type>
      <name>signal_interface_added</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>ae9e70d0b556e5fd1bb2f6e9145d4da4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, const Glib::RefPtr&lt; Gio::DBus::Interface &gt; &amp;&gt;</type>
      <name>signal_interface_removed</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>ad3f2265e9e9853f3fa7f31513b064d24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::ustring</type>
      <name>get_object_path_vfunc</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>a60225ea64d529b2645def1dd3918ed4d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; Glib::RefPtr&lt; Gio::DBus::Interface &gt; &gt;</type>
      <name>get_interfaces_vfunc</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>a6a383cebee9cfe8886b7b519fa048dbf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::RefPtr&lt; Gio::DBus::Interface &gt;</type>
      <name>get_interface_vfunc</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>aa53a0be597acf8c73b532bfc017ada34</anchor>
      <arglist>(const Glib::ustring &amp;interface_name) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>acd3a467a75c3fe63a23e7a9c256aa928</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>aab3f3d51f14f4c172eabc347b6a6541b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Object</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>a3bc1d9bc5e876549545585f73c6dac55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_interface_added</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>a3a4df1cab5dab39e3f12c98ca6734517</anchor>
      <arglist>(const Glib::RefPtr&lt; Gio::DBus::Interface &gt; &amp;iface)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_interface_removed</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>a091345806486e11d2c002fbaa635443d</anchor>
      <arglist>(const Glib::RefPtr&lt; Gio::DBus::Interface &gt; &amp;iface)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::Object &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>a82d99055f7aff9ee73096d0f2c7499fb</anchor>
      <arglist>(GDBusObject *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::PropertyInfo</name>
    <filename>classGio_1_1DBus_1_1PropertyInfo.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGio_1_1DBus_1_1PropertyInfo.html</anchorfile>
      <anchor>afb65e1a7d99d8ad94db753badf3dda17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGio_1_1DBus_1_1PropertyInfo.html</anchorfile>
      <anchor>a0c714dd6434b61bb3fe87c2924ef9413</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GDBusPropertyInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1PropertyInfo.html</anchorfile>
      <anchor>a1fca351057cc59b866505cc345a9103a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusPropertyInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1PropertyInfo.html</anchorfile>
      <anchor>adab90ac88a8971f826ea9147fa51ad8d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GDBusPropertyInfo *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DBus_1_1PropertyInfo.html</anchorfile>
      <anchor>a3d04a15e7cd7454b99d82e0d3c325a78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyInfo</name>
      <anchorfile>classGio_1_1DBus_1_1PropertyInfo.html</anchorfile>
      <anchor>abb157692ea96723908278e79c08d307d</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyInfo</name>
      <anchorfile>classGio_1_1DBus_1_1PropertyInfo.html</anchorfile>
      <anchor>a5d0da4a9db2bdc4f922dc880c42328b2</anchor>
      <arglist>(const PropertyInfo &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>PropertyInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1DBus_1_1PropertyInfo.html</anchorfile>
      <anchor>afe2e96c9d4829183b3cbc6e00ec24026</anchor>
      <arglist>(const PropertyInfo &amp;)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classGio_1_1DBus_1_1PropertyInfo.html</anchorfile>
      <anchor>a24cc4a36e7d9fc8119f12c138f135ef2</anchor>
      <arglist>(void *, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::PropertyInfo &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1PropertyInfo.html</anchorfile>
      <anchor>a509922a5e403fa5fbf506534c1ad3ecb</anchor>
      <arglist>(GDBusPropertyInfo *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::Proxy</name>
    <filename>classGio_1_1DBus_1_1Proxy.html</filename>
    <base>Glib::Object</base>
    <base>Gio::Initable</base>
    <base>Gio::AsyncInitable</base>
    <member kind="typedef">
      <type>std::map&lt; Glib::ustring, Glib::VariantBase &gt;</type>
      <name>MapChangedProperties</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>af7976bba584c29b8208a7f183aa5f0ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Proxy</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a978daa8fcb752b6a5314a301d5046c75</anchor>
      <arglist>(Proxy &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Proxy &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>adafeb14f8cadb2276d1bdb7d7a2e29bc</anchor>
      <arglist>(Proxy &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Proxy</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a8de63383c2c8408d4b3e2b01e68c97c2</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GDBusProxy *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a6f3d48e4bb1b9ca42cc3bb959668d388</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusProxy *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a7c4d0869c677b59210e46e0e8381324c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GDBusProxy *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>ac59b0d5b47338306ef4cfa8c977ce039</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ProxyFlags</type>
      <name>get_flags</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a350db63654a8379ae1f5d948a4bc7439</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Connection &gt;</type>
      <name>get_connection</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>adbe68149cd5c6b589f0d59e4ece27599</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Connection &gt;</type>
      <name>get_connection</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a8c1ad163187edf4747dfcb661b5fd039</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_name</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>adc31a096ea11659c7373d8a7f22930f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_name_owner</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>ab0bad341caea5dc4a08e848b20c64108</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_object_path</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a3b74c83b763817215c9c581ab3153980</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_interface_name</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a3b6ba3b479a0a64d34b5e8d9128215df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_default_timeout</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a6915de496f582ed38a74261ac7e95dc7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_default_timeout</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>ab87e7c4c04b791ba37e9d3e17a7796ed</anchor>
      <arglist>(int timeout_msec=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_cached_property</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>ad8e2c1825da3dd0dca00226007ed4382</anchor>
      <arglist>(Glib::VariantBase &amp;property, const Glib::ustring &amp;property_name) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_cached_property</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a7869a0e88aae51d06e52871a475e883e</anchor>
      <arglist>(const Glib::ustring &amp;property_name, const Glib::VariantBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::StringArrayHandle</type>
      <name>get_cached_property_names</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>ab6745e5611578f70c00d69a75fc8a9ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_interface_info</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>aa8aa8788431a5caf2bc9378a444e4207</anchor>
      <arglist>(const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; InterfaceInfo &gt;</type>
      <name>get_interface_info</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>abf89eb0335dfe61d1e620ef38d5f70dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const InterfaceInfo &gt;</type>
      <name>get_interface_info</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>ae4ecd1024f36460fca5fd0d130f2cdde</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a63fa8a2629f09c7c8f221f932e4e76b2</anchor>
      <arglist>(const Glib::ustring &amp;method_name, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::VariantContainerBase &amp;parameters=Glib::VariantContainerBase(), int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a1283e05d1cfb572efccdae40dc52b9e5</anchor>
      <arglist>(const Glib::ustring &amp;method_name, const SlotAsyncReady &amp;slot, const Glib::VariantContainerBase &amp;parameters=Glib::VariantContainerBase(), int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a33b5589c73d1d2a05f25708c9e3c13bc</anchor>
      <arglist>(const Glib::ustring &amp;method_name, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::VariantContainerBase &amp;parameters=Glib::VariantContainerBase(), int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a64024108ea956582b1096bcbe7ebdf3e</anchor>
      <arglist>(const Glib::ustring &amp;method_name, const Glib::VariantContainerBase &amp;parameters=Glib::VariantContainerBase(), int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantContainerBase</type>
      <name>call_finish</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>afe74ab7c2b3d8712a87eeab281c73eab</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantContainerBase</type>
      <name>call_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a72b268fb39e56ba1eca8957e9e7b44a7</anchor>
      <arglist>(const Glib::ustring &amp;method_name, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::VariantContainerBase &amp;parameters=Glib::VariantContainerBase(), int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantContainerBase</type>
      <name>call_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>ad42e51b01b8d4797a868bda00e33de86</anchor>
      <arglist>(const Glib::ustring &amp;method_name, const Glib::VariantContainerBase &amp;parameters=Glib::VariantContainerBase(), int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a6f057d8423d5cce8cc7486f84cb5f3e5</anchor>
      <arglist>(const Glib::ustring &amp;method_name, const Glib::VariantContainerBase &amp;parameters, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::RefPtr&lt; UnixFDList &gt; &amp;fd_list, int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a896ee57a19950b83c04baab736b2a6b8</anchor>
      <arglist>(const Glib::ustring &amp;method_name, const Glib::VariantContainerBase &amp;parameters, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; UnixFDList &gt; &amp;fd_list, int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a0d8afd593e40a951ee77165266306a05</anchor>
      <arglist>(const Glib::ustring &amp;method_name, const Glib::VariantContainerBase &amp;parameters, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::RefPtr&lt; UnixFDList &gt; &amp;fd_list, int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a6d63bf4bc0ab3b892ccc109f2b66ed29</anchor>
      <arglist>(const Glib::ustring &amp;method_name, const Glib::VariantContainerBase &amp;parameters, const Glib::RefPtr&lt; UnixFDList &gt; &amp;fd_list, int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantContainerBase</type>
      <name>call_finish</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a40b3f742a74a0f41df0d242b58b34485</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res, Glib::RefPtr&lt; UnixFDList &gt; &amp;out_fd_list)</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantContainerBase</type>
      <name>call_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>aa0cf6a0ba10bdd2bcd4e6db2a523bce0</anchor>
      <arglist>(const Glib::ustring &amp;method_name, const Glib::VariantContainerBase &amp;parameters, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::RefPtr&lt; UnixFDList &gt; &amp;fd_list, Glib::RefPtr&lt; UnixFDList &gt; &amp;out_fd_list, int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantContainerBase</type>
      <name>call_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>afe234b8ea4f47182241a81da81c6d59f</anchor>
      <arglist>(const Glib::ustring &amp;method_name, const Glib::VariantContainerBase &amp;parameters, const Glib::RefPtr&lt; UnixFDList &gt; &amp;fd_list, Glib::RefPtr&lt; UnixFDList &gt; &amp;out_fd_list, int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; Connection &gt; &gt;</type>
      <name>property_g_connection</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a30853855850699c144c58dca6deda4fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; int &gt;</type>
      <name>property_g_default_timeout</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a7daf31d79be04b1871d875dacb934037</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; int &gt;</type>
      <name>property_g_default_timeout</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>adc7897500519437dba7cd65816aa9217</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; ProxyFlags &gt;</type>
      <name>property_g_flags</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>ae9328bdcd62a79640b8bd6623b0cfd4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; Glib::RefPtr&lt; InterfaceInfo &gt; &gt;</type>
      <name>property_g_interface_info</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a1d110df0380004632fed44d9c994f465</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; InterfaceInfo &gt; &gt;</type>
      <name>property_g_interface_info</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a9d83d73d83aed2ff9b9da83f5bdda2f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_g_interface_name</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a3650f443d018bb824358308809bfb982</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_g_name</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>add198663253db4f9f74931d5c2603584</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_g_name_owner</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a1fdd10e33096bd20e24519165fb1cbfc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_g_object_path</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a19ac64ef1553eb4b811167283f570da9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, const MapChangedProperties &amp;, const std::vector&lt; Glib::ustring &gt; &amp;&gt;</type>
      <name>signal_properties_changed</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>ae51a319b03278f2e452a47806d5721c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, const Glib::ustring &amp;, const Glib::ustring &amp;, const Glib::VariantContainerBase &amp;&gt;</type>
      <name>signal_signal</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>af26f7ffa434930391849ea656b61efdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>ae979764e4465cd63b2c38bdd52e36f22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>create</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>aaf731a7c467f1d2cf244618d242b38d5</anchor>
      <arglist>(const Glib::RefPtr&lt; Connection &gt; &amp;connection, const Glib::ustring &amp;name, const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;info=Glib::RefPtr&lt; InterfaceInfo &gt;(), ProxyFlags flags=PROXY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>create</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a7d3ee2046b0d3190a26f228ad0d9307a</anchor>
      <arglist>(const Glib::RefPtr&lt; Connection &gt; &amp;connection, const Glib::ustring &amp;name, const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;info=Glib::RefPtr&lt; InterfaceInfo &gt;(), ProxyFlags flags=PROXY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Gio::DBus::Proxy &gt;</type>
      <name>create_finish</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a9e0a79cbb1444d0cc8a8a1e4f3c2c5ea</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Proxy &gt;</type>
      <name>create_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a275770db372ac7becfea4bb5fc2e9154</anchor>
      <arglist>(const Glib::RefPtr&lt; Connection &gt; &amp;connection, const Glib::ustring &amp;name, const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;info=Glib::RefPtr&lt; InterfaceInfo &gt;(), ProxyFlags flags=PROXY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Proxy &gt;</type>
      <name>create_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>abd62956ae29e83114cbcd0e251ed5ec5</anchor>
      <arglist>(const Glib::RefPtr&lt; Connection &gt; &amp;connection, const Glib::ustring &amp;name, const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;info=Glib::RefPtr&lt; InterfaceInfo &gt;(), ProxyFlags flags=PROXY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>create_for_bus</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a5cdd31131561783868e2ae4301243abe</anchor>
      <arglist>(BusType bus_type, const Glib::ustring &amp;name, const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;info=Glib::RefPtr&lt; InterfaceInfo &gt;(), ProxyFlags flags=PROXY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>create_for_bus</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a33a50d23df199bd9203453400d3c0413</anchor>
      <arglist>(BusType bus_type, const Glib::ustring &amp;name, const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;info=Glib::RefPtr&lt; InterfaceInfo &gt;(), ProxyFlags flags=PROXY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Gio::DBus::Proxy &gt;</type>
      <name>create_for_bus_finish</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a6256b66355d3d2faf0631cdd2b34b9a3</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Proxy &gt;</type>
      <name>create_for_bus_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a4803720689c06aedae8f66a347c2cf1f</anchor>
      <arglist>(BusType bus_type, const Glib::ustring &amp;name, const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;info=Glib::RefPtr&lt; InterfaceInfo &gt;(), ProxyFlags flags=PROXY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Proxy &gt;</type>
      <name>create_for_bus_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a391ae0b70ca6fc02a024240b7c36c28e</anchor>
      <arglist>(BusType bus_type, const Glib::ustring &amp;name, const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;info=Glib::RefPtr&lt; InterfaceInfo &gt;(), ProxyFlags flags=PROXY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Proxy</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a896a1ec8bbd29ab21d8a97e13968ad3f</anchor>
      <arglist>(const Glib::RefPtr&lt; Connection &gt; &amp;connection, const Glib::ustring &amp;name, const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;info=Glib::RefPtr&lt; InterfaceInfo &gt;(), ProxyFlags flags=PROXY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Proxy</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a97c249a3ef3cf77cffd416db3dea4878</anchor>
      <arglist>(const Glib::RefPtr&lt; Connection &gt; &amp;connection, const Glib::ustring &amp;name, const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;info=Glib::RefPtr&lt; InterfaceInfo &gt;(), ProxyFlags flags=PROXY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Proxy</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>af7a35e0b7aec710967a3124a211b3a0a</anchor>
      <arglist>(const Glib::RefPtr&lt; Connection &gt; &amp;connection, const Glib::ustring &amp;name, const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;info=Glib::RefPtr&lt; InterfaceInfo &gt;(), ProxyFlags flags=PROXY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Proxy</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a196d69a6bba4b735fefbcbd2dd7ee45b</anchor>
      <arglist>(const Glib::RefPtr&lt; Connection &gt; &amp;connection, const Glib::ustring &amp;name, const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;info=Glib::RefPtr&lt; InterfaceInfo &gt;(), ProxyFlags flags=PROXY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Proxy</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a70e259cb3dfaa84130f9fe41e01128fc</anchor>
      <arglist>(BusType bus_type, const Glib::ustring &amp;name, const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;info=Glib::RefPtr&lt; InterfaceInfo &gt;(), ProxyFlags flags=PROXY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Proxy</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>aea1b302264776e180a6fd7004b7efd1f</anchor>
      <arglist>(BusType bus_type, const Glib::ustring &amp;name, const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;info=Glib::RefPtr&lt; InterfaceInfo &gt;(), ProxyFlags flags=PROXY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Proxy</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a7fd33bce394e8599bf1813bc4d1f1119</anchor>
      <arglist>(BusType bus_type, const Glib::ustring &amp;name, const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;info=Glib::RefPtr&lt; InterfaceInfo &gt;(), ProxyFlags flags=PROXY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Proxy</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a8b52f673793793decbdccc948222d877</anchor>
      <arglist>(BusType bus_type, const Glib::ustring &amp;name, const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;info=Glib::RefPtr&lt; InterfaceInfo &gt;(), ProxyFlags flags=PROXY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_properties_changed</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a1ea656f9b265c333de1660285add7128</anchor>
      <arglist>(const MapChangedProperties &amp;changed_properties, const std::vector&lt; Glib::ustring &gt; &amp;invalidated_properties)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_signal</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a09fc487c57ec6adec3b2ed35cde90427</anchor>
      <arglist>(const Glib::ustring &amp;sender_name, const Glib::ustring &amp;signal_name, const Glib::VariantContainerBase &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::Proxy &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a7b5f416dd07356a82e8e36756cd3fcdf</anchor>
      <arglist>(GDBusProxy *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::Server</name>
    <filename>classGio_1_1DBus_1_1Server.html</filename>
    <base>Glib::Object</base>
    <base>Gio::Initable</base>
    <member kind="function">
      <type></type>
      <name>Server</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a9228893d17fcad4d4a82f3069e5842e3</anchor>
      <arglist>(Server &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Server &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a136ea18e0173a7f412eec019e87cd8a1</anchor>
      <arglist>(Server &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Server</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a1264e8f046e244c630b64582db1cd20a</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GDBusServer *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a0cd3fabb952476c1b9c21dee304f39c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusServer *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a61af6fbf3d02d5b9b0fb83e77ac8f686</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GDBusServer *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a13e1153d897482bceec00a0632816095</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a7ed47fd7598df4f47078d8245fcf8bbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a8d2159c52a96a9459e486b316b959bfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_active</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a45fb8f26077ba35cb83df0c790cadfb7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_guid</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>ad14c741ce189a63d315e92c202298d8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ServerFlags</type>
      <name>get_flags</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>aa10cc050ed1474145ff5d862da4ea55b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_client_address</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a3a12acab33dab5f1aeab3d0292b19bc5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_active</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a16da9910b7eb4b7fb002206a12c345a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; std::string &gt;</type>
      <name>property_address</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a5031f454a61b22a60045cd4567e7a024</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; AuthObserver &gt; &gt;</type>
      <name>property_authentication_observer</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>af214243ef2c725c48d8e877d16fd21f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; std::string &gt;</type>
      <name>property_client_address</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>abe0878382ad77023fad62169f53aea9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; ServerFlags &gt;</type>
      <name>property_flags</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>af7b4bb5afb46ad44bbaf80ed813dc74b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; std::string &gt;</type>
      <name>property_guid</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a11a249530e565f1a90b82aecd9ad64a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; bool, const Glib::RefPtr&lt; Connection &gt; &amp;&gt;</type>
      <name>signal_new_connection</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a01f038d28674a3fed6135805c61cad78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a56d80950bacc59e76229e05ed3d2c6d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Server &gt;</type>
      <name>create_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a6294a0f2e2792208b483a50350099ec8</anchor>
      <arglist>(const std::string &amp;address, const std::string &amp;guid, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ServerFlags flags=Gio::DBus::SERVER_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Server &gt;</type>
      <name>create_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a2827afcc5b64812180fe4cf3b7fdf8c9</anchor>
      <arglist>(const std::string &amp;address, const std::string &amp;guid, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ServerFlags flags=Gio::DBus::SERVER_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Server &gt;</type>
      <name>create_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>aca4e5768123f04ef2fb6de952f351cf3</anchor>
      <arglist>(const std::string &amp;address, const std::string &amp;guid, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, ServerFlags flags=Gio::DBus::SERVER_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Server &gt;</type>
      <name>create_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a571667a8f18f4c7671f45a22bd7444e7</anchor>
      <arglist>(const std::string &amp;address, const std::string &amp;guid, ServerFlags flags=Gio::DBus::SERVER_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Server</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a7fc50e8bfc813c2f0f01d2cdea326b8d</anchor>
      <arglist>(const std::string &amp;address, const std::string &amp;guid, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ServerFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Server</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a92cc34f87a739d16b17eaede57445e0a</anchor>
      <arglist>(const std::string &amp;address, const std::string &amp;guid, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ServerFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Server</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a4235f58283d062167758c5a1582accaa</anchor>
      <arglist>(const std::string &amp;address, const std::string &amp;guid, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, ServerFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Server</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a4eab0301c1628fce9b2281791f599d1e</anchor>
      <arglist>(const std::string &amp;address, const std::string &amp;guid, ServerFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::Server &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a54e250956f902b3df91aabd16398ec7c</anchor>
      <arglist>(GDBusServer *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::SignalInfo</name>
    <filename>classGio_1_1DBus_1_1SignalInfo.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGio_1_1DBus_1_1SignalInfo.html</anchorfile>
      <anchor>ab529feca69d3fef45b877586f05dcea1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGio_1_1DBus_1_1SignalInfo.html</anchorfile>
      <anchor>aafc07a44387c3c716f5f34a8cb9a3afc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GDBusSignalInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1SignalInfo.html</anchorfile>
      <anchor>a25a491489ae296d78d5ffb9ab94a8a86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusSignalInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1SignalInfo.html</anchorfile>
      <anchor>a6474c6736f88b5179e0416d9c08efcab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GDBusSignalInfo *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DBus_1_1SignalInfo.html</anchorfile>
      <anchor>a4687bb742e6b2218359898515ed8edda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignalInfo</name>
      <anchorfile>classGio_1_1DBus_1_1SignalInfo.html</anchorfile>
      <anchor>a0edf6fa5157487745355cda5a0894084</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignalInfo</name>
      <anchorfile>classGio_1_1DBus_1_1SignalInfo.html</anchorfile>
      <anchor>acd418821b63baf51baf1eeee628c1e88</anchor>
      <arglist>(const SignalInfo &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>SignalInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1DBus_1_1SignalInfo.html</anchorfile>
      <anchor>ae1ce3135eff1a0399029b5cecdb33e95</anchor>
      <arglist>(const SignalInfo &amp;)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classGio_1_1DBus_1_1SignalInfo.html</anchorfile>
      <anchor>aad3b7a58e3b03185ee9097e3b68fceb7</anchor>
      <arglist>(void *, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::SignalInfo &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1SignalInfo.html</anchorfile>
      <anchor>a65d56d02b0dfccea4da32dec69d3e27b</anchor>
      <arglist>(GDBusSignalInfo *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::SubtreeVTable</name>
    <filename>classGio_1_1DBus_1_1SubtreeVTable.html</filename>
    <member kind="typedef">
      <type>sigc::slot&lt; std::vector&lt; Glib::ustring &gt;, const Glib::RefPtr&lt; Connection &gt; &amp;, const Glib::ustring &amp;, const Glib::ustring &amp;&gt;</type>
      <name>SlotSubtreeEnumerate</name>
      <anchorfile>classGio_1_1DBus_1_1SubtreeVTable.html</anchorfile>
      <anchor>a974ea3f1cede2a7c474fc18736c2f46d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; std::vector&lt; Glib::RefPtr&lt; Gio::DBus::InterfaceInfo &gt; &gt;, const Glib::RefPtr&lt; Connection &gt; &amp;, const Glib::ustring &amp;, const Glib::ustring &amp;, const Glib::ustring &amp;&gt;</type>
      <name>SlotSubtreeIntrospect</name>
      <anchorfile>classGio_1_1DBus_1_1SubtreeVTable.html</anchorfile>
      <anchor>a2a87525514d871adc4f4653cd090ba51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; const InterfaceVTable *, const Glib::RefPtr&lt; Connection &gt; &amp;, const Glib::ustring &amp;, const Glib::ustring &amp;, const Glib::ustring &amp;, const Glib::ustring &amp;&gt;</type>
      <name>SlotSubtreeDispatch</name>
      <anchorfile>classGio_1_1DBus_1_1SubtreeVTable.html</anchorfile>
      <anchor>a82a84dbfc1e977fb9e1be650e99907e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubtreeVTable</name>
      <anchorfile>classGio_1_1DBus_1_1SubtreeVTable.html</anchorfile>
      <anchor>ab142d859127f32a04de93cb4026c085e</anchor>
      <arglist>(const SlotSubtreeEnumerate &amp;slot_enumerate, const SlotSubtreeIntrospect &amp;slot_introspect=SlotSubtreeIntrospect(), const SlotSubtreeDispatch &amp;slot_dispatch=SlotSubtreeDispatch())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubtreeVTable</name>
      <anchorfile>classGio_1_1DBus_1_1SubtreeVTable.html</anchorfile>
      <anchor>add56c064ed7ea57406662b58621744d4</anchor>
      <arglist>(const SubtreeVTable &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type>SubtreeVTable &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1DBus_1_1SubtreeVTable.html</anchorfile>
      <anchor>a6c4cfc56541fb7ce7edbded5bed9693d</anchor>
      <arglist>(const SubtreeVTable &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubtreeVTable</name>
      <anchorfile>classGio_1_1DBus_1_1SubtreeVTable.html</anchorfile>
      <anchor>a791b779f2548b639b257328f0a748f06</anchor>
      <arglist>(SubtreeVTable &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SubtreeVTable &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1DBus_1_1SubtreeVTable.html</anchorfile>
      <anchor>afa040e6a83ad2ff075ea084c5d84677d</anchor>
      <arglist>(SubtreeVTable &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SubtreeVTable</name>
      <anchorfile>classGio_1_1DBus_1_1SubtreeVTable.html</anchorfile>
      <anchor>a4a8853420d435f12b7402e293a2ac1f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GDBusSubtreeVTable *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1SubtreeVTable.html</anchorfile>
      <anchor>af887da7b2fca079327636e969fcdb00e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusSubtreeVTable *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1SubtreeVTable.html</anchorfile>
      <anchor>a6e9da9695dbf3ac2536631626e796a8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GDBusSubtreeVTable</type>
      <name>gobject_</name>
      <anchorfile>classGio_1_1DBus_1_1SubtreeVTable.html</anchorfile>
      <anchor>a6a62832b20d7dc3ed66eebb8be43bbe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SlotSubtreeEnumerate *</type>
      <name>slot_enumerate_</name>
      <anchorfile>classGio_1_1DBus_1_1SubtreeVTable.html</anchorfile>
      <anchor>a3b044ef83a82c6d956aa9ab23ea8d226</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SlotSubtreeIntrospect *</type>
      <name>slot_introspect_</name>
      <anchorfile>classGio_1_1DBus_1_1SubtreeVTable.html</anchorfile>
      <anchor>a8623b7f82d1c7bfa63de806152e87ecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SlotSubtreeDispatch *</type>
      <name>slot_dispatch_</name>
      <anchorfile>classGio_1_1DBus_1_1SubtreeVTable.html</anchorfile>
      <anchor>a911b4dfbb1e21d5eec18d37dd3617f54</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DesktopAppInfo</name>
    <filename>classGio_1_1DesktopAppInfo.html</filename>
    <base>Glib::Object</base>
    <base>Gio::AppInfo</base>
    <member kind="function">
      <type></type>
      <name>DesktopAppInfo</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>aa4a2d9bc73742b0740de20b4099dc91c</anchor>
      <arglist>(DesktopAppInfo &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DesktopAppInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>ab93a7cc41a38d67f0d1a7af76612b19a</anchor>
      <arglist>(DesktopAppInfo &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DesktopAppInfo</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>a3ab6969e067c37f329d4739f5b8ce859</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GDesktopAppInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>a3098e225a5b79ac496941ae2ab804c0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDesktopAppInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>ac21769e407f38410f9a852526a66e07e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GDesktopAppInfo *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>a60fe723570666ef15c3b024bdfaf6165</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_filename</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>a1f3fd56a775a55e306293596adbd2eb5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_hidden</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>abe05c916bdbb476808ad50e1e5a232d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::ustring &gt;</type>
      <name>get_keywords</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>afeca6470b6804c5e96b39c9801b98537</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_startup_wm_class</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>a4d3054119cd1a98dedfb7fe2afd06e50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_nodisplay</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>aa740b130f032bcba272f64443864dd5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_show_in</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>a2027e8a23a82cea627f23bae9494e548</anchor>
      <arglist>(const std::string &amp;desktop_env) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_generic_name</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>a3d0659c320429106c10803f4bca7bdbf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_categories</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>a13937bd63ab63c07c8326acc2a94d1ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_key</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>a1aa589a6d6174f789d354fca8b26066c</anchor>
      <arglist>(const Glib::ustring &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_string</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>ad744bf9f27b0a35c69d33341bf7bd3d6</anchor>
      <arglist>(const Glib::ustring &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_locale_string</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>a624235b9037a06dd6d9fac8c7bb95c8c</anchor>
      <arglist>(const Glib::ustring &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_boolean</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>ad4932ed7ee19c121ca0d610cc1ea66a9</anchor>
      <arglist>(const Glib::ustring &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::ustring &gt;</type>
      <name>list_actions</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>a412da17ab5848090e4e95785a3ab4c1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>launch_action</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>abcbc0bb6f0c48c3c06eb05756beeaa60</anchor>
      <arglist>(const Glib::ustring &amp;action_name, const Glib::RefPtr&lt; AppLaunchContext &gt; &amp;launch_context)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>launch_action</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>a15147c1871562bbd642ffa7e40f4243e</anchor>
      <arglist>(const Glib::ustring &amp;action_name)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_action_name</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>a59b6d73ede3448038ff0ec92883c1b07</anchor>
      <arglist>(const Glib::ustring &amp;action_name) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>af08dc73fb24e62daeafa3d34e6d9fb7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; DesktopAppInfo &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>ab6d9c00e00745f57d2e5b35f83060aad</anchor>
      <arglist>(const std::string &amp;desktop_id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; DesktopAppInfo &gt;</type>
      <name>create_from_keyfile</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>a4c474a10b54e12eac4cf71ee409c61c0</anchor>
      <arglist>(Glib::KeyFile &amp;key_file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; DesktopAppInfo &gt;</type>
      <name>create_from_filename</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>a42dca267f3ad09aaacd4937d20e4ed1d</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set_desktop_env</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>ad3d07eea529c72d51aa868fe30d63392</anchor>
      <arglist>(const std::string &amp;desktop_env)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DesktopAppInfo &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>ac075226810f278017e3a0fbcc372e739</anchor>
      <arglist>(GDesktopAppInfo *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::Drive</name>
    <filename>classGio_1_1Drive.html</filename>
    <base>Glib::Interface</base>
    <member kind="function">
      <type></type>
      <name>Drive</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a6f866f6d59f7afa6801b10c67a0a47b5</anchor>
      <arglist>(Drive &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Drive &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a6d7eeaf4009b266971d388af5890bd5e</anchor>
      <arglist>(Drive &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Drive</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>ab17802b5ec9ca11ea3bb8b2f973be66c</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GDrive *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>aaa1d4330f6e1d0faee6262f632c63227</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDrive *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a497c2aaab9b38de384735589bfea618e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_name</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a635a76897dcd7829a04d80d6eeee60ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Icon &gt;</type>
      <name>get_icon</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>aa7bbfe3d9eb4c716e4e964388b504458</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Icon &gt;</type>
      <name>get_icon</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a3939cd1d690964961e634c82f216731e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Icon &gt;</type>
      <name>get_symbolic_icon</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a25a8c98c25172d7fe3c747d8df4faca6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Icon &gt;</type>
      <name>get_symbolic_icon</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>aaf3634857a9f4eba83fa0f0774f3d354</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_volumes</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a497b2cfe801c8ad868ee2d3fa1459ee3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ListHandle&lt; Glib::RefPtr&lt; Volume &gt; &gt;</type>
      <name>get_volumes</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>afe6e5759dcf759a1c862e172543d6bd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_media_removable</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>aa7f48b2125037846d96228ed84a49f1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_removable</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>af2dfb06af9b30d7bfa9c6b2109f7b536</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_media</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a9f575db9b79e85aaa3bc1662aa7850fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_media_check_automatic</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a65879d5f576e25edc80a50dacefb0b38</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_poll_for_media</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a73f9a8c7622a1dda2202be73ce8a14de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_eject</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a2ccfd036b7f998dd2a9d24a695476e95</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a4163a79cc5ff639693159110592e6be0</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a7677be984564a7cf3c5ab7dd3ebb6c96</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a306949d0008fd30a59136e0759dd60ed</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a21a808bb07f7cb580899006fd42c76ea</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const SlotAsyncReady &amp;slot, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>af66cf6ad9b9027630f1c9303bbb6a8fe</anchor>
      <arglist>(MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>acb804853bd5e4ecf4abc6503e6ffa82d</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eject_finish</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>abdc299d32ba4dd96784db3a9a4523ea4</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>poll_for_media</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a1733be3e6aa7c23caa3c12a45d75878d</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>poll_for_media</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a1c565d20c1f17a233db75dec9ce30415</anchor>
      <arglist>(const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>poll_for_media</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a85bd972cad1ef7e1c2627767a825eed0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>poll_for_media_finish</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>afa415ce0439367e5d8685a2bb1bd9b8d</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_identifier</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>acfcbade6a786fb9bd314d27e628007dd</anchor>
      <arglist>(const std::string &amp;kind) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::StringArrayHandle</type>
      <name>enumerate_identifiers</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a01c2000857117c72a7b149492e5bc36b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a48cae86204823873e110ecdf7948a5c3</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const SlotAsyncReady &amp;slot, DriveStartFlags flags=DRIVE_START_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a99ca25e21f33f54e79b9d62e47ddda71</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const SlotAsyncReady &amp;slot, DriveStartFlags flags=DRIVE_START_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>start_finish</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a7d81d812989e5dc79414c63149dda9d7</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_start</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a65b1f47fd906955ce578caccbde99808</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_start_degraded</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a28915a1973193cbb823d2ebb87020fd2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a037cd31001af5d6d0540f4ccbe7b12bf</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const SlotAsyncReady &amp;slot, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a1adf5f0d63a2d3a38acc4328f726f7ed</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const SlotAsyncReady &amp;slot, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stop_finish</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a308102dbcef3dac0a3ad0006a0c1440e</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_stop</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a2d7478ace9f4b7d6ee396a4c8a6baa4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DriveStartStopType</type>
      <name>get_start_stop_type</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a142143c9db660d3bd2927a17a94b785c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_sort_key</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a9c9bcf8b5acfd5f93319fa6d650c90a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void &gt;</type>
      <name>signal_changed</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a4131c60c1f7b055f359e31e91099a1e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void &gt;</type>
      <name>signal_disconnected</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a01d2cddf69ea44ba6022c4122e58d0a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void &gt;</type>
      <name>signal_eject_button</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a56328b72402e114526a7e0372e4a97b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void &gt;</type>
      <name>signal_stop_button</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>aca8e85570ad3e38cfb068b284ace4d8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a4a00b2efd7a10fae3ffc6e67f30b0908</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>ad065a22ee02560b7a11dc934ba57f29b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Drive</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>afeac53258c52f48d82717022dd24f87e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Drive &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a1a0d5aec4d31827ebfcbdea0c2ebee87</anchor>
      <arglist>(GDrive *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::Emblem</name>
    <filename>classGio_1_1Emblem.html</filename>
    <base>Glib::Object</base>
    <base>Gio::Icon</base>
    <member kind="function">
      <type></type>
      <name>Emblem</name>
      <anchorfile>classGio_1_1Emblem.html</anchorfile>
      <anchor>a72d7e41beb648afe79f195128eee1e5c</anchor>
      <arglist>(Emblem &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Emblem &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1Emblem.html</anchorfile>
      <anchor>aae2008a5d7b203173954b6c8609892d0</anchor>
      <arglist>(Emblem &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Emblem</name>
      <anchorfile>classGio_1_1Emblem.html</anchorfile>
      <anchor>a86c30d7fc3867155e4c856648257b6a8</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GEmblem *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Emblem.html</anchorfile>
      <anchor>a18a84361942885e0b75a82ffbc342947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GEmblem *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Emblem.html</anchorfile>
      <anchor>a9eff1bc9473b5e9f317a072659f65c52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GEmblem *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1Emblem.html</anchorfile>
      <anchor>a37489c6af0fd3ebcc26f2ad70499ab69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Icon &gt;</type>
      <name>get_icon</name>
      <anchorfile>classGio_1_1Emblem.html</anchorfile>
      <anchor>a2272bb4eb06787a561eae7593912aa04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Icon &gt;</type>
      <name>get_icon</name>
      <anchorfile>classGio_1_1Emblem.html</anchorfile>
      <anchor>a03d61a0bf344ff3cb52e49f47caadc7f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EmblemOrigin</type>
      <name>get_origin</name>
      <anchorfile>classGio_1_1Emblem.html</anchorfile>
      <anchor>a2a73df9ace9cc352bec4a56a2e5edc40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Emblem.html</anchorfile>
      <anchor>a2bb85fdfcc9864d8c90cf274bfb868b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Emblem &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1Emblem.html</anchorfile>
      <anchor>a73b765b853f364b1681352efc8a73a69</anchor>
      <arglist>(const Glib::RefPtr&lt; Icon &gt; &amp;icon)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Emblem &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1Emblem.html</anchorfile>
      <anchor>a49167949418fba4e254c3044b5b2808d</anchor>
      <arglist>(const Glib::RefPtr&lt; Icon &gt; &amp;icon, EmblemOrigin origin)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Emblem</name>
      <anchorfile>classGio_1_1Emblem.html</anchorfile>
      <anchor>a145a95e9ca6ee5d31be2c94be935c060</anchor>
      <arglist>(const Glib::RefPtr&lt; Icon &gt; &amp;icon)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Emblem</name>
      <anchorfile>classGio_1_1Emblem.html</anchorfile>
      <anchor>a2ff0e5c38e6fc97b2c57188099304fef</anchor>
      <arglist>(const Glib::RefPtr&lt; Icon &gt; &amp;icon, EmblemOrigin origin)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Emblem &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Emblem.html</anchorfile>
      <anchor>a53ecca7bfb4c8b1e3ac4305a8087bf3e</anchor>
      <arglist>(GEmblem *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::EmblemedIcon</name>
    <filename>classGio_1_1EmblemedIcon.html</filename>
    <base>Glib::Object</base>
    <base>Gio::Icon</base>
    <member kind="function">
      <type></type>
      <name>EmblemedIcon</name>
      <anchorfile>classGio_1_1EmblemedIcon.html</anchorfile>
      <anchor>a664ec5706934efcd25896fe5fb877576</anchor>
      <arglist>(EmblemedIcon &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>EmblemedIcon &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1EmblemedIcon.html</anchorfile>
      <anchor>a16b53b9cf7c9a48351bad68525870071</anchor>
      <arglist>(EmblemedIcon &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EmblemedIcon</name>
      <anchorfile>classGio_1_1EmblemedIcon.html</anchorfile>
      <anchor>a7c1c82a20a4c7154af83415d11d849c7</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GEmblemedIcon *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1EmblemedIcon.html</anchorfile>
      <anchor>ad19779f46ff62261df8b924f2e218f00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GEmblemedIcon *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1EmblemedIcon.html</anchorfile>
      <anchor>a7f734389137e3583d2d6b0e20feb903b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GEmblemedIcon *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1EmblemedIcon.html</anchorfile>
      <anchor>afa5683d27b359053a929ca46d61ff512</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Icon &gt;</type>
      <name>get_icon</name>
      <anchorfile>classGio_1_1EmblemedIcon.html</anchorfile>
      <anchor>aaa34ad2bbd13edbed76aaf908a04c630</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Icon &gt;</type>
      <name>get_icon</name>
      <anchorfile>classGio_1_1EmblemedIcon.html</anchorfile>
      <anchor>a2857dcca2d062d288a2fab6c15c67b6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ListHandle&lt; Glib::RefPtr&lt; Emblem &gt; &gt;</type>
      <name>get_emblems</name>
      <anchorfile>classGio_1_1EmblemedIcon.html</anchorfile>
      <anchor>ad1795232c2d5abd7edec6a56072d94e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_emblem</name>
      <anchorfile>classGio_1_1EmblemedIcon.html</anchorfile>
      <anchor>acf332055cf535914f444bc037ba7d324</anchor>
      <arglist>(const Glib::RefPtr&lt; Emblem &gt; &amp;emblem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_emblems</name>
      <anchorfile>classGio_1_1EmblemedIcon.html</anchorfile>
      <anchor>ae04323b13dba3195a1351a4bee7eeb86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1EmblemedIcon.html</anchorfile>
      <anchor>a3100ee99c8cf620cbbac630b0af0b8ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; EmblemedIcon &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1EmblemedIcon.html</anchorfile>
      <anchor>ac4e4b5c233a669ac82db3852b5d9a1a6</anchor>
      <arglist>(const Glib::RefPtr&lt; Icon &gt; &amp;icon, const Glib::RefPtr&lt; Emblem &gt; &amp;emblem)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; EmblemedIcon &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1EmblemedIcon.html</anchorfile>
      <anchor>a7099cac3bd82490137952fddbb398379</anchor>
      <arglist>(const Glib::RefPtr&lt; Icon &gt; &amp;icon)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EmblemedIcon</name>
      <anchorfile>classGio_1_1EmblemedIcon.html</anchorfile>
      <anchor>af58a1bcda197ad6d06646423490ed60a</anchor>
      <arglist>(const Glib::RefPtr&lt; Icon &gt; &amp;icon)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EmblemedIcon</name>
      <anchorfile>classGio_1_1EmblemedIcon.html</anchorfile>
      <anchor>a2d790c876f3033983c5989a64f5ed83a</anchor>
      <arglist>(const Glib::RefPtr&lt; Icon &gt; &amp;icon, const Glib::RefPtr&lt; Emblem &gt; &amp;emblem)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::EmblemedIcon &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1EmblemedIcon.html</anchorfile>
      <anchor>a1f2d2a7c6ad0125c6a9b4b41c2b7766a</anchor>
      <arglist>(GEmblemedIcon *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::Error</name>
    <filename>classGio_1_1Error.html</filename>
    <base>Glib::Error</base>
    <member kind="enumeration">
      <type></type>
      <name>Code</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134aa0e791aa4861a641bfc653f3856328df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_FOUND</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a3d51c29d886106dd037f4373c8799e1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXISTS</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a78acf3772678a25c74fb94728f3c7697</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IS_DIRECTORY</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a4dabd1728e3bed146fb033f9f2419070</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_DIRECTORY</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a8d798f4fae06bdaadd634741002fa332</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_EMPTY</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a19eec623a4f22f6e3ee4d1598a698285</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_REGULAR_FILE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134aa444742fc383a1d56241f2808e5e8039</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SYMBOLIC_LINK</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a8819701b8608c7108360479d9688d5bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_MOUNTABLE_FILE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a0bc87348f430128c14b9362a2920815a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILENAME_TOO_LONG</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134aff37e5f318b82f35c78b52cfac031211</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_FILENAME</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a726c597108b33785960ad311612548de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOO_MANY_LINKS</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a6ad92d12741a7476c8629deb96ad5ae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_SPACE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a54e13db8342cd1d88c27c28b5abddc7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_ARGUMENT</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134aa1eeef4959d3fc475382ce232e68386a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PERMISSION_DENIED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a666ae0c513ad8de01cea2689f530674e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SUPPORTED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134ae71d1cb1e1e36c3653f1a4f176ec3459</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_MOUNTED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a28ecc89ba128c335b11262ca2597db80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALREADY_MOUNTED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a16399644d434f214cc56a030d5b300bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CLOSED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134aa6a502e9ed81ddc95d135b773d3aa23e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CANCELLED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a708f6079268ad1a626c248ace401b899</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PENDING</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a61099ae764ac98a31d71a763d9ebea20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>READ_ONLY</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a0d6db56df9bc1ff1591c6fe97186aede</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CANT_CREATE_BACKUP</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a524a62c804b8c08b75d59a4532706344</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WRONG_ETAG</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a3def678ae01ba99ccfddced5e7727e91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIMED_OUT</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134ad9be2d9a98ef25458c32ac424264d963</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WOULD_RECURSE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a8f7dbc01e13d48420983190a3d5c5e70</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUSY</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a454ffcf59d193ed719c724d86fc85010</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WOULD_BLOCK</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134aa82d49f23243e248a965673ef9a18fcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HOST_NOT_FOUND</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a138702eb31b272d3ed71ff5d45967fd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HOST_WAS_NOT_FOUND</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a207ecccfb593af57a3db3c9311e623a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WOULD_MERGE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134ad904ab52e0f3566c200afe9cb5112cb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED_HANDLED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134ac01c2c317fce5c17b7ea55de0682294a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOO_MANY_OPEN_FILES</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a310addbbc4eab010c42febe2d4d6a5d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_INITIALIZED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a1add474e375240617a4bba475e9a9920</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADDRESS_IN_USE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134ad99febacd480fca347e69ce320c2b229</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARTIAL_INPUT</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134af362ef3a89a70e8122b44eb77322b59f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_DATA</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134ad9aed06057cc503e64ee569881ec32fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DBUS_ERROR</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a2d4d3dcdabb75be97e8a0d2b0f9cb6ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HOST_UNREACHABLE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134aee145ae39a61f60260859921eff72ed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NETWORK_UNREACHABLE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a86e0c5e77ce892cabc0d9c0ffa35d91c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTION_REFUSED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a9eaa4dd03c967ab2105c0f38304b9a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROXY_FAILED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134ae474b4f0547ee249ffe1b91e412d0e72</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROXY_AUTH_FAILED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134ad3a6a3b863e3228a67bd46ca4721868f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROXY_NEED_AUTH</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a91345ba253b645e5fc0399530be07e5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROXY_NOT_ALLOWED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a7ba75f6f699f5542664e84f432a9ffb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BROKEN_PIPE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a8fb43e7d27a739e15057aa64bf319f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTION_CLOSED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a426bc92e06c715b5c03bd9bed17474f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_CONNECTED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a71e2b1c1677c4e89dcf339326974bafb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_TOO_LARGE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a0f2caabb44caf390647fdf2971be46df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134aa0e791aa4861a641bfc653f3856328df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_FOUND</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a3d51c29d886106dd037f4373c8799e1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXISTS</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a78acf3772678a25c74fb94728f3c7697</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IS_DIRECTORY</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a4dabd1728e3bed146fb033f9f2419070</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_DIRECTORY</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a8d798f4fae06bdaadd634741002fa332</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_EMPTY</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a19eec623a4f22f6e3ee4d1598a698285</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_REGULAR_FILE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134aa444742fc383a1d56241f2808e5e8039</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SYMBOLIC_LINK</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a8819701b8608c7108360479d9688d5bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_MOUNTABLE_FILE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a0bc87348f430128c14b9362a2920815a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILENAME_TOO_LONG</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134aff37e5f318b82f35c78b52cfac031211</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_FILENAME</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a726c597108b33785960ad311612548de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOO_MANY_LINKS</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a6ad92d12741a7476c8629deb96ad5ae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_SPACE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a54e13db8342cd1d88c27c28b5abddc7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_ARGUMENT</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134aa1eeef4959d3fc475382ce232e68386a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PERMISSION_DENIED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a666ae0c513ad8de01cea2689f530674e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SUPPORTED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134ae71d1cb1e1e36c3653f1a4f176ec3459</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_MOUNTED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a28ecc89ba128c335b11262ca2597db80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALREADY_MOUNTED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a16399644d434f214cc56a030d5b300bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CLOSED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134aa6a502e9ed81ddc95d135b773d3aa23e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CANCELLED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a708f6079268ad1a626c248ace401b899</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PENDING</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a61099ae764ac98a31d71a763d9ebea20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>READ_ONLY</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a0d6db56df9bc1ff1591c6fe97186aede</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CANT_CREATE_BACKUP</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a524a62c804b8c08b75d59a4532706344</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WRONG_ETAG</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a3def678ae01ba99ccfddced5e7727e91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIMED_OUT</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134ad9be2d9a98ef25458c32ac424264d963</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WOULD_RECURSE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a8f7dbc01e13d48420983190a3d5c5e70</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUSY</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a454ffcf59d193ed719c724d86fc85010</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WOULD_BLOCK</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134aa82d49f23243e248a965673ef9a18fcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HOST_NOT_FOUND</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a138702eb31b272d3ed71ff5d45967fd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HOST_WAS_NOT_FOUND</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a207ecccfb593af57a3db3c9311e623a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WOULD_MERGE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134ad904ab52e0f3566c200afe9cb5112cb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED_HANDLED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134ac01c2c317fce5c17b7ea55de0682294a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOO_MANY_OPEN_FILES</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a310addbbc4eab010c42febe2d4d6a5d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_INITIALIZED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a1add474e375240617a4bba475e9a9920</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADDRESS_IN_USE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134ad99febacd480fca347e69ce320c2b229</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARTIAL_INPUT</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134af362ef3a89a70e8122b44eb77322b59f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_DATA</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134ad9aed06057cc503e64ee569881ec32fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DBUS_ERROR</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a2d4d3dcdabb75be97e8a0d2b0f9cb6ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HOST_UNREACHABLE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134aee145ae39a61f60260859921eff72ed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NETWORK_UNREACHABLE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a86e0c5e77ce892cabc0d9c0ffa35d91c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTION_REFUSED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a9eaa4dd03c967ab2105c0f38304b9a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROXY_FAILED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134ae474b4f0547ee249ffe1b91e412d0e72</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROXY_AUTH_FAILED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134ad3a6a3b863e3228a67bd46ca4721868f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROXY_NEED_AUTH</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a91345ba253b645e5fc0399530be07e5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROXY_NOT_ALLOWED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a7ba75f6f699f5542664e84f432a9ffb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BROKEN_PIPE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a8fb43e7d27a739e15057aa64bf319f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTION_CLOSED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a426bc92e06c715b5c03bd9bed17474f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_CONNECTED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a71e2b1c1677c4e89dcf339326974bafb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_TOO_LARGE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a0f2caabb44caf390647fdf2971be46df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Error</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a6dbe1ed978ad03ee64dbec0a055c3914</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Error</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a0e59e13293663b6c1690f9277c5b48b6</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a137ff3d671f63d4edae912cff6dc9f80</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::File</name>
    <filename>classGio_1_1File.html</filename>
    <base>Glib::Interface</base>
    <member kind="typedef">
      <type>sigc::slot&lt; void, goffset, goffset &gt;</type>
      <name>SlotFileProgress</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a3e14024e7b29a9966379ddac696e0578</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void, bool, guint64, guint64, guint64 &gt;</type>
      <name>SlotFileMeasureProgress</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a0a34ebf0cd146b3bd29657ba1b5b05f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; bool, const char *, goffset &gt;</type>
      <name>SlotReadMore</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>adaa38dd8b1c40a100f906d7fd4ce9971</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>File</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a91341a5c27005398bef11c6b232f2ec8</anchor>
      <arglist>(File &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>File &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>af4d8c21aa35f4703e0b46b04ae2f5b82</anchor>
      <arglist>(File &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~File</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>adf1624302e7d139bbf462eb35cf6ddd0</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GFile *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a96552cfbaf2e5fa3659a1568db8cca91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GFile *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a501b79237bc51f7e451991b5ecf5fc54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; File &gt;</type>
      <name>dup</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a99c15050516e1302443efb7ffdb7908a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>hash</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>aac18d4a713d117402a2279cefc44fd0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>adb73d04b3bba282b7279634089c29051</anchor>
      <arglist>(const Glib::RefPtr&lt; const File &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_basename</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ac4710877255014a82c0cf9b0d7d94e0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_path</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a5884ca545300d4642dd5c28d04c8acb0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_uri</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a23196189c77edfc94f200ea5a7c6ec78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_parse_name</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a69a24829da2584254fc44f6fc2718475</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; File &gt;</type>
      <name>get_parent</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a1d67e2cc65e7eeaa3acf6f4a13fe851f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_parent</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ad7069186edc02e5a0ce189260f741c37</anchor>
      <arglist>(const Glib::RefPtr&lt; File &gt; &amp;parent) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_parent</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a35837046b0ddc08ea31746d890f98289</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; File &gt;</type>
      <name>get_child</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>afd35a8b8bae8a94545e2688aca61b08f</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; File &gt;</type>
      <name>get_child_for_display_name</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>afd06e111c67fb135fba03fa2a83c971f</anchor>
      <arglist>(const Glib::ustring &amp;display_name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_prefix</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a00304212a2d0004f1d08d0bcf9e52a95</anchor>
      <arglist>(const Glib::RefPtr&lt; const File &gt; &amp;prefix) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_relative_path</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a316e31a2bff8ede9c74844ac9aaf14d1</anchor>
      <arglist>(const Glib::RefPtr&lt; const File &gt; &amp;descendant) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; File &gt;</type>
      <name>resolve_relative_path</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ae8796b582e6b4ccba5bbd97ab40d2316</anchor>
      <arglist>(const std::string &amp;relative_path) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_native</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a8a02673b3c789f49d9c48bb7e2437556</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_uri_scheme</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a104e080480abedc9e2d54614210bbee3</anchor>
      <arglist>(const std::string &amp;uri_scheme) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_uri_scheme</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a1e1673db0aaa670f9995255890df5a98</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInputStream &gt;</type>
      <name>read</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a3ef959c7ad7096846f26eb8b282e3c68</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInputStream &gt;</type>
      <name>read</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a0395b3b0b8cec5dc1fd9953e52e5fbc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a2826eed0b1e76c3771f6ad5f5b993991</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ab451a182a647408e697c9115e66f6194</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInputStream &gt;</type>
      <name>read_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a3e71d2cd04c5c9c17a51fe8f1dc87c78</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileOutputStream &gt;</type>
      <name>append_to</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a91c93ee71eee738690cb551d11df9528</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileOutputStream &gt;</type>
      <name>append_to</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a8db337b93f3b9b9a6e163477391e6c89</anchor>
      <arglist>(FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileOutputStream &gt;</type>
      <name>create_file</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a86258e11b2884422819d051c3cfd07a2</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileOutputStream &gt;</type>
      <name>create_file</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a5cf2b17b953ccfefb1d13c39bd1be72c</anchor>
      <arglist>(FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileIOStream &gt;</type>
      <name>create_file_readwrite</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ad5ec69c5360219bccb794bab6a128e88</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileIOStream &gt;</type>
      <name>create_file_readwrite</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>acf5673ceb9095405e458b5035b0986b4</anchor>
      <arglist>(FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileOutputStream &gt;</type>
      <name>replace</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ad7cf0360096504e40f799fde5cc8e9de</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const std::string &amp;etag=std::string(), bool make_backup=false, FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileOutputStream &gt;</type>
      <name>replace</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>acf55f9291659566f6fd36271801b013b</anchor>
      <arglist>(const std::string &amp;etag=std::string(), bool make_backup=false, FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append_to_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a1e3dfb193e8f2ab69e24c4370de5335a</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, FileCreateFlags flags=FILE_CREATE_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append_to_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>abff3163e9bf8d8208cd0c0e568b777de</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, FileCreateFlags flags=FILE_CREATE_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileOutputStream &gt;</type>
      <name>append_to_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ab95fdc72631ad9a07a94eac0bac50090</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_file_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ae0c42446d37aa466173965b7db1a2053</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, FileCreateFlags flags=FILE_CREATE_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_file_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a3fe6ed015f3d2bb72aa7aceed8dc7ca1</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, FileCreateFlags flags=FILE_CREATE_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileOutputStream &gt;</type>
      <name>create_file_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a128001018104d45b158a27003c0c2638</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_file_readwrite_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a4c27a2460468aab1d3c3665234c24a56</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, FileCreateFlags flags=FILE_CREATE_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_file_readwrite_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a5a5989cfdee54778de733a529c24607b</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, FileCreateFlags flags=FILE_CREATE_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileIOStream &gt;</type>
      <name>create_file_readwrite_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a339d08bf6cafea58d9d0b0675e741d25</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ad777cdaa404a6a668ee8d520299687ce</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const std::string &amp;etag=std::string(), bool make_backup=false, FileCreateFlags flags=FILE_CREATE_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ae51e51a2e3a45da4324230b4d5401a58</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const std::string &amp;etag=std::string(), bool make_backup=false, FileCreateFlags flags=FILE_CREATE_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileOutputStream &gt;</type>
      <name>replace_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a4e5fe0438c73500d3d6ec7d0d4b39daa</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileIOStream &gt;</type>
      <name>open_readwrite</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a128757d6cf7b152c82bb378a095003ef</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileIOStream &gt;</type>
      <name>open_readwrite</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a456f74951f371ef5cca4282751efc66a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open_readwrite_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a73d95a731716c7ffaa86c3af90afe8d3</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open_readwrite_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a405af7082f531a7a39f3e7a453ab6267</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileIOStream &gt;</type>
      <name>open_readwrite_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a5fdcb54ece686c870eac69c6f93aed75</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileIOStream &gt;</type>
      <name>replace_readwrite</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>af483e2ddc29cbb6cd1ad751403247bad</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const std::string &amp;etag=std::string(), bool make_backup=false, FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileIOStream &gt;</type>
      <name>replace_readwrite</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a0c4aa84e74b27a67bce6b5fdccb91449</anchor>
      <arglist>(const std::string &amp;etag=std::string(), bool make_backup=false, FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace_readwrite_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>af5ebbb5e33c0afd302add9863f2d8c24</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const std::string &amp;etag=std::string(), bool make_backup=false, FileCreateFlags flags=FILE_CREATE_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace_readwrite_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a38b7d1782f03a4d6a4dbf3be16321324</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const std::string &amp;etag=std::string(), bool make_backup=false, FileCreateFlags flags=FILE_CREATE_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileIOStream &gt;</type>
      <name>replace_readwrite_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a47d246b8ff87be3aaef635ac123d1e44</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>query_info</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a4db1669f6bcf7d2708436c22d37003a5</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const std::string &amp;attributes=&quot;*&quot;, FileQueryInfoFlags flags=FILE_QUERY_INFO_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>query_info</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a532074049aceb4256a81c72ec9af0063</anchor>
      <arglist>(const std::string &amp;attributes=&quot;*&quot;, FileQueryInfoFlags flags=FILE_QUERY_INFO_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>query_exists</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ac2d2b7aafb6dbb0b6d443c56f6e1cf6c</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>query_exists</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a26fb14d6cd92407b45e6079a9f773e35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FileType</type>
      <name>query_file_type</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a98adc98b6d4a9682b8d5d9dbf7d0d045</anchor>
      <arglist>(FileQueryInfoFlags flags, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable) const</arglist>
    </member>
    <member kind="function">
      <type>FileType</type>
      <name>query_file_type</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>acfffd55bb11654cbe5cd571ee471caa9</anchor>
      <arglist>(FileQueryInfoFlags flags=FILE_QUERY_INFO_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>query_info_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a1167bf7a2aebad7103c9ea98f6e9c9ea</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const std::string &amp;attributes=&quot;*&quot;, FileQueryInfoFlags flags=FILE_QUERY_INFO_NONE, int io_priority=Glib::PRIORITY_DEFAULT) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>query_info_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ab159bb11f365fb82cea4ec36be0f847a</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const std::string &amp;attributes=&quot;*&quot;, FileQueryInfoFlags flags=FILE_QUERY_INFO_NONE, int io_priority=Glib::PRIORITY_DEFAULT) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>query_info_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a33eadfff77c93a77ecde795307728e52</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>query_filesystem_info</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a40486bc2f0c8758ef8a705b6b8b57e57</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const std::string &amp;attributes=&quot;*&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>query_filesystem_info</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ac737012f8df97d90e2447d94d30b817d</anchor>
      <arglist>(const std::string &amp;attributes=&quot;*&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Mount &gt;</type>
      <name>find_enclosing_mount</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a45b881926b8d58c49d3baa1f51f2ee5d</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Mount &gt;</type>
      <name>find_enclosing_mount</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a6eb675267c7ea1c2a0d40e2e754d8333</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>query_filesystem_info_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>aed167c7c0a261959cbe116e5db52951b</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const std::string &amp;attributes=&quot;*&quot;, int io_priority=Glib::PRIORITY_DEFAULT) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>query_filesystem_info_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a167424d82a0a98e0237dd73487e324f9</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const std::string &amp;attributes=&quot;*&quot;, int io_priority=Glib::PRIORITY_DEFAULT) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>query_filesystem_info_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>af986512a5b8cb8acf75afd7206b09be1</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>find_enclosing_mount_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a78c95d4fa47157f7757b686677dec018</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>find_enclosing_mount_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a67458be57c5687e7469bc26e2594f4be</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Mount &gt;</type>
      <name>find_enclosing_mount_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ad4b415b02053e16a92cabb6a48368733</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileEnumerator &gt;</type>
      <name>enumerate_children</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a68c3afcddc0d4860aa2afb4bf715bb20</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const std::string &amp;attributes=&quot;*&quot;, FileQueryInfoFlags flags=FILE_QUERY_INFO_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileEnumerator &gt;</type>
      <name>enumerate_children</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ac0e293d607499b223f4892fb290ab2d6</anchor>
      <arglist>(const std::string &amp;attributes=&quot;*&quot;, FileQueryInfoFlags flags=FILE_QUERY_INFO_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enumerate_children_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a1ead7237b7057d9b15cf5f3065988131</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const std::string &amp;attributes=&quot;*&quot;, FileQueryInfoFlags flags=FILE_QUERY_INFO_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enumerate_children_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a5b5470cf1c97754a12169201665f1202</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const std::string &amp;attributes=&quot;*&quot;, FileQueryInfoFlags flags=FILE_QUERY_INFO_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileEnumerator &gt;</type>
      <name>enumerate_children_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>acdabb80157c69c01479e0b89821c1299</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; File &gt;</type>
      <name>set_display_name</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a3dd75810d7c9ebafac398288f5afc018</anchor>
      <arglist>(const Glib::ustring &amp;display_name, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; File &gt;</type>
      <name>set_display_name</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a8c2aa80b2d0ecdd22f0222c8ce42d177</anchor>
      <arglist>(const Glib::ustring &amp;display_name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_display_name_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a0ac539d7758b9c0de809f8c83e0bba79</anchor>
      <arglist>(const Glib::ustring &amp;display_name, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_display_name_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a74d219d321dca3d438f876256dee82d2</anchor>
      <arglist>(const Glib::ustring &amp;display_name, const SlotAsyncReady &amp;slot, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; File &gt;</type>
      <name>set_display_name_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a2abb19573076b426434f7d8d2d5a0cdb</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>aded971b0cf84801f6684ad4bd5dc66c5</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a14f34508dea523cbf889b7193e513ca4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ad8499cabde1f50f1cbd5d928d63e73fb</anchor>
      <arglist>(const SlotAsyncReady &amp;slot_ready, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a21198001203267126de9a24a8e91b0d1</anchor>
      <arglist>(const SlotAsyncReady &amp;slot_ready, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a0240c85a3ec46e107666e65da9b92c54</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trash</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>acae5ecd962e832cf8d538877f4118da8</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trash</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a1925736f9af338eaf9942468b4d6d65e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trash_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>afab15e7d88376d144253bce7bfba2730</anchor>
      <arglist>(const SlotAsyncReady &amp;slot_ready, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trash_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a5cb6f01422a66c141ba721fc8790f10a</anchor>
      <arglist>(const SlotAsyncReady &amp;slot_ready, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trash_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a7ee78bd712cb24661335cee8e3d29344</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>copy</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>af9e906ed93069e6adb6d87dae158cad9</anchor>
      <arglist>(const Glib::RefPtr&lt; File &gt; &amp;destination, const SlotFileProgress &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, FileCopyFlags flags=FILE_COPY_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>copy</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a1d8159b5b377db174b376b3c09deb7c1</anchor>
      <arglist>(const Glib::RefPtr&lt; File &gt; &amp;destination, const SlotFileProgress &amp;slot, FileCopyFlags flags=FILE_COPY_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>copy</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a7a6b45bed32567031bc7b48273ad4079</anchor>
      <arglist>(const Glib::RefPtr&lt; File &gt; &amp;destination, FileCopyFlags flags=FILE_COPY_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a1785b7a4780d5d4ba5ae651350e34398</anchor>
      <arglist>(const Glib::RefPtr&lt; File &gt; &amp;destination, const SlotFileProgress &amp;slot_progress, const SlotAsyncReady &amp;slot_ready, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, FileCopyFlags flags=FILE_COPY_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a5b8ae7393c73a9a1d383a82d61f4ac30</anchor>
      <arglist>(const Glib::RefPtr&lt; File &gt; &amp;destination, const SlotAsyncReady &amp;slot_ready, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, FileCopyFlags flags=FILE_COPY_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ac2b1a85f29bbbe15998c090b3794cbf5</anchor>
      <arglist>(const Glib::RefPtr&lt; File &gt; &amp;destination, const SlotFileProgress &amp;slot_progress, const SlotAsyncReady &amp;slot_ready, FileCopyFlags flags=FILE_COPY_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ad538a383b8761d04bd36ed1aa1071e50</anchor>
      <arglist>(const Glib::RefPtr&lt; File &gt; &amp;destination, const SlotAsyncReady &amp;slot_ready, FileCopyFlags flags=FILE_COPY_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>copy_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ab16cd89db6cd5bb0c8dfdd4b635002d7</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>move</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a51c0d55880178c37dee578fdc723b0f2</anchor>
      <arglist>(const Glib::RefPtr&lt; File &gt; &amp;destination, const SlotFileProgress &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, FileCopyFlags flags=FILE_COPY_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>move</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>adfb2d8bfed1cb7af50e5e5795ebea732</anchor>
      <arglist>(const Glib::RefPtr&lt; File &gt; &amp;destination, const SlotFileProgress &amp;slot, FileCopyFlags flags=FILE_COPY_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>move</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>aba1fab56c3a8bea0b7e4d7f7324c5320</anchor>
      <arglist>(const Glib::RefPtr&lt; File &gt; &amp;destination, FileCopyFlags flags=FILE_COPY_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>make_directory</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>abfa05e23e95e77cabac289ab4e294a58</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>make_directory</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>aa1e9aa5f58a76a8562fd00a13434f554</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>make_directory_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a60cf2bf09420aec99766fa132d8ae0a8</anchor>
      <arglist>(const SlotAsyncReady &amp;slot_ready, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>make_directory_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ad7facff532924459948de0031396f9b5</anchor>
      <arglist>(const SlotAsyncReady &amp;slot_ready, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>make_directory_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a0758295d049fe070dd235786775f777e</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>make_directory_with_parents</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>afb0b5b094339057b4b15952eb73e08d6</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>make_directory_with_parents</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a874a487551d49ca62b31a3e5cf32fee6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>make_symbolic_link</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a2709318e1f24dfd0cd498d28f5e1b8fe</anchor>
      <arglist>(const std::string &amp;symlink_value, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>make_symbolic_link</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a8a9a3d060c2675ff9ac1c758f0b2c024</anchor>
      <arglist>(const std::string &amp;symlink_value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileAttributeInfoList &gt;</type>
      <name>query_settable_attributes</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a4a543339b58cff6a7e5ddd840df0e69e</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileAttributeInfoList &gt;</type>
      <name>query_settable_attributes</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a1ae03d0652bcfbad2f47409b8f815bc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileAttributeInfoList &gt;</type>
      <name>query_writable_namespaces</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>af5c7463b92e2887597486e7b195ca12f</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileAttributeInfoList &gt;</type>
      <name>query_writable_namespaces</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>aa0278acd7d09ed292359004defb742b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_attributes_from_info</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a69d9e40a85b96809abc5189b34e8d9b7</anchor>
      <arglist>(const Glib::RefPtr&lt; FileInfo &gt; &amp;info, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, FileQueryInfoFlags flags=FILE_QUERY_INFO_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_attributes_from_info</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ae9f6975ffef28f0d7145601a99de0903</anchor>
      <arglist>(const Glib::RefPtr&lt; FileInfo &gt; &amp;info, FileQueryInfoFlags flags=FILE_QUERY_INFO_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_attributes_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a14165fba9bf7d91448c3207407ae50c2</anchor>
      <arglist>(const Glib::RefPtr&lt; FileInfo &gt; &amp;info, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, FileQueryInfoFlags flags=FILE_QUERY_INFO_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_attributes_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a61317a1980318537aa8ada7bb8cc2390</anchor>
      <arglist>(const Glib::RefPtr&lt; FileInfo &gt; &amp;info, const SlotAsyncReady &amp;slot, FileQueryInfoFlags flags=FILE_QUERY_INFO_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_attributes_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>aefd45aed7b975b6e204e67927de2817a</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result, const Glib::RefPtr&lt; FileInfo &gt; &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_attribute_string</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a5ce5f43fd5e2836ac1989a54d3233ff6</anchor>
      <arglist>(const std::string &amp;attribute, const std::string &amp;value, FileQueryInfoFlags flags, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_attribute_string</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a75fa7e1a44e97a910d232f2b4ab4bfdd</anchor>
      <arglist>(const std::string &amp;attribute, const std::string &amp;value, FileQueryInfoFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_attribute_byte_string</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a4f4373b8694c346a6908195f1f2644f3</anchor>
      <arglist>(const std::string &amp;attribute, const std::string &amp;value, FileQueryInfoFlags flags, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_attribute_byte_string</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a09f574259052186e1b516bdcbe696710</anchor>
      <arglist>(const std::string &amp;attribute, const std::string &amp;value, FileQueryInfoFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_attribute_uint32</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ae53b0f4d2214e050a290c8e35cac0f27</anchor>
      <arglist>(const std::string &amp;attribute, guint32 value, FileQueryInfoFlags flags, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_attribute_uint32</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a7f769f140143f2e96a7587a10b6792a9</anchor>
      <arglist>(const std::string &amp;attribute, guint32 value, FileQueryInfoFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_attribute_int32</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ab0290ecba7b06ccf7736e2292708667e</anchor>
      <arglist>(const std::string &amp;attribute, gint32 value, FileQueryInfoFlags flags, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_attribute_int32</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a4a707084a3c0a963548a21d17d0ec0b5</anchor>
      <arglist>(const std::string &amp;attribute, gint32 value, FileQueryInfoFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_attribute_uint64</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a48638081fd7af772a39af59a558b17f7</anchor>
      <arglist>(const std::string &amp;attribute, guint64 value, FileQueryInfoFlags flags, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_attribute_uint64</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a4aa77b3580df88cfd3d7231af78155c7</anchor>
      <arglist>(const std::string &amp;attribute, guint64 value, FileQueryInfoFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_attribute_int64</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a111d73a2d003e5a5a4c5f86c7c3d2fb7</anchor>
      <arglist>(const std::string &amp;attribute, gint64 value, FileQueryInfoFlags flags, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_attribute_int64</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a4477b0063110951b26c855696ec34802</anchor>
      <arglist>(const std::string &amp;attribute, gint64 value, FileQueryInfoFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mount_enclosing_volume</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a144aa2de6b696da90a6baffbe959d732</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, MountMountFlags flags=MOUNT_MOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mount_enclosing_volume</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a70fd22116d9c8682433c4bb8cbd764c1</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const SlotAsyncReady &amp;slot, MountMountFlags flags=MOUNT_MOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mount_enclosing_volume</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a2172cdcdb683630b719c521bf00b1eb4</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, MountMountFlags flags=MOUNT_MOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mount_enclosing_volume</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a20f8f18876102a5efaa0536bfa71d71c</anchor>
      <arglist>(MountMountFlags flags=MOUNT_MOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mount_enclosing_volume_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>aefd44b1b3467bcc474b345ff98b4aa6d</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mount_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a40c88a403f5d01d722b5900545b6a4fe</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, MountMountFlags flags=MOUNT_MOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mount_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ac3c29682ef5a50de73dc2c3c3333301c</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const SlotAsyncReady &amp;slot, MountMountFlags flags=MOUNT_MOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mount_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a049e06c3d95b49ad4bff1837ef6d8677</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, MountMountFlags flags=MOUNT_MOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mount_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a8501fa88f4aaa8d52c001596960a4572</anchor>
      <arglist>(MountMountFlags flags=MOUNT_MOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; File &gt;</type>
      <name>mount_mountable_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ae15d36a7969c55122b9f85a1690a46e8</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unmount_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a5b687c8f19411e955bb069c469be92b4</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unmount_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ab6c8e9ef0e5d83a271c8307b18e779d8</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unmount_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a95f3e87e198493f4332a08aa79f6ebd3</anchor>
      <arglist>(MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unmount_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a13f7cceb9754a7498789593dd58d818c</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unmount_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ad82d5b087fef21cbadcb9407d7f43223</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unmount_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ae322b2d5f8f1d95023831c3964c9b015</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unmount_mountable_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a51458cf04ad25e4a784a3ebcb906155d</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a8a8223e3b661f03c7a60ac0f003b916e</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ad8422a939a634d2248ef6d8658f0fdad</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>aeb28fd505cab23a82c68ff00445b12e7</anchor>
      <arglist>(MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a1c103886296fd1ea1107906deebec8a5</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ab6c75952828023d27d109a3a23fafc00</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ab7aea22f6cb30b3f2be43682ddd543d9</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eject_mountable_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a6a5124de7c55e9dc5e85ffcb9d3dd14f</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>copy_attributes</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a90726dcf94248d2fddf2e4c8584b7bf0</anchor>
      <arglist>(const Glib::RefPtr&lt; File &gt; &amp;destination, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, FileCopyFlags flags=FILE_COPY_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>copy_attributes</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a05c1101ede98028c9234486eb0434250</anchor>
      <arglist>(const Glib::RefPtr&lt; File &gt; &amp;destination, FileCopyFlags flags=FILE_COPY_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileMonitor &gt;</type>
      <name>monitor_directory</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>aa0fa22ffba0ff50779e49ff9d12344e6</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, FileMonitorFlags flags=FILE_MONITOR_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileMonitor &gt;</type>
      <name>monitor_directory</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a12d36689c1024ff9fc8819f619910a92</anchor>
      <arglist>(FileMonitorFlags flags=FILE_MONITOR_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileMonitor &gt;</type>
      <name>monitor_file</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ab8e14809f330ddd58e628c96921cd987</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, FileMonitorFlags flags=FILE_MONITOR_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileMonitor &gt;</type>
      <name>monitor_file</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>aa410183ed3b4a745093383d038d271b9</anchor>
      <arglist>(FileMonitorFlags flags=FILE_MONITOR_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileMonitor &gt;</type>
      <name>monitor</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a88aacee7bb6f6d968b4383311a9dd002</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, FileMonitorFlags flags=FILE_MONITOR_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileMonitor &gt;</type>
      <name>monitor</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a50896969a9de87f810f0bf5e2d3335bd</anchor>
      <arglist>(FileMonitorFlags flags=FILE_MONITOR_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>measure_disk_usage</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a27d273c8119ef09426405e35f75e533e</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const SlotFileMeasureProgress &amp;slot_progress, guint64 &amp;disk_usage, guint64 &amp;num_dirs, guint64 &amp;num_files, FileMeasureFlags flags=FILE_MEASURE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>measure_disk_usage_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a85ebd8baacbbdf12f1b34fca92b4c8f2</anchor>
      <arglist>(const SlotAsyncReady &amp;slot_ready, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const SlotFileMeasureProgress &amp;slot_progress, FileMeasureFlags flags=FILE_MEASURE_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>measure_disk_usage_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a5463283f6a20c51d4db7943190350d26</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result, guint64 &amp;disk_usage, guint64 &amp;num_dirs, guint64 &amp;num_files)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>aa4438daeeb2171e3065bb677b6768721</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::RefPtr&lt; MountOperation &gt; &amp;start_operation, DriveStartFlags flags=DRIVE_START_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ad629eaf059b2e05b1f9bfc10c5732974</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; MountOperation &gt; &amp;start_operation, DriveStartFlags flags=DRIVE_START_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>start_mountable_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>af11e51943807876180474b39d2e521ac</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ac101831f87245a881c338014f15d38d8</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::RefPtr&lt; MountOperation &gt; &amp;start_operation, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a5ccfb3006c2bc69a32e5055939b462d6</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; MountOperation &gt; &amp;start_operation, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stop_mountable_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a195990af8825745d0d26147174824565</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>poll_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a8e81dd0bab13e56ed98456f6a53591ca</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>poll_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a2025339de9d7ed9b62300cad1a8e8fd4</anchor>
      <arglist>(const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>poll_mountable_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a2da5ec13a4a32f229ca97cce8961e637</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; AppInfo &gt;</type>
      <name>query_default_handler</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a753546465735b25633b003333b66d05c</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; AppInfo &gt;</type>
      <name>query_default_handler</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a0c0fd0ece2570b6704889df5ee43c283</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_contents</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ac53be228d732b34e062a2a57814cdf15</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, char *&amp;contents, gsize &amp;length, std::string &amp;etag_out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_contents</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ada7c826a417f88b405244c8dc39ae1ef</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, char *&amp;contents, gsize &amp;length)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_contents</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a77f7781b0ba65bc4e7e613b80b353fd7</anchor>
      <arglist>(char *&amp;contents, gsize &amp;length, std::string &amp;etag_out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_contents</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a40f3ce7cf905144bac7218f9988d2d35</anchor>
      <arglist>(char *&amp;contents, gsize &amp;length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_contents_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ad0e02ebffbaa13036e4636d2118f71a0</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_contents_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a6af7ec98d5543bce07b917b65d7276ce</anchor>
      <arglist>(const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_contents_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a5fd15277ab90bcc57db088be04cac457</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result, char *&amp;contents, gsize &amp;length, std::string &amp;etag_out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_contents_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>aee93c7e24e8391615f9f263584fb02bd</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result, char *&amp;contents, gsize &amp;length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_partial_contents_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a0e8d95fcdf7c2aa38f54e90a22d3ab6f</anchor>
      <arglist>(const SlotReadMore &amp;slot_read_more, const SlotAsyncReady &amp;slot_async_ready, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_partial_contents_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a362d71932c0ba8797a8c47b77df1b6d7</anchor>
      <arglist>(const SlotReadMore &amp;slot_read_more, const SlotAsyncReady &amp;slot_async_ready)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_partial_contents_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a4b323508401d2e6fd2b3ad659f9bb5eb</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result, char *&amp;contents, gsize &amp;length, std::string &amp;etag_out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_partial_contents_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ae3a59c3831feeadea9bd0709617d2db9</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result, char *&amp;contents, gsize &amp;length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace_contents</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>af10deca1d5c5d1f650d3b182624330dc</anchor>
      <arglist>(const char *contents, gsize length, const std::string &amp;etag, std::string &amp;new_etag, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, bool make_backup=false, FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace_contents</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ae7febf1f0f3b4b9efca9fae469082846</anchor>
      <arglist>(const char *contents, gsize length, const std::string &amp;etag, std::string &amp;new_etag, bool make_backup=false, FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace_contents</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a23126b43cd262b63c0e458c3a4d0b65c</anchor>
      <arglist>(const std::string &amp;contents, const std::string &amp;etag, std::string &amp;new_etag, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, bool make_backup=false, FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace_contents</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>aaf33a17461ff4f70fed06818e364f617</anchor>
      <arglist>(const std::string &amp;contents, const std::string &amp;etag, std::string &amp;new_etag, bool make_backup=false, FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace_contents_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ad33b24a7942429157f47379f4353378c</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const char *contents, gsize length, const std::string &amp;etag, bool make_backup=false, FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace_contents_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a9a1c445e84124e16294974a73f2f1bbb</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const char *contents, gsize length, const std::string &amp;etag, bool make_backup=false, FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace_contents_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a380d6ce6362fc05e0e18ff1b881ceac7</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const std::string &amp;contents, const std::string &amp;etag, bool make_backup=false, FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace_contents_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a6fc86aab90620881899a701c2b2775cb</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const std::string &amp;contents, const std::string &amp;etag, bool make_backup=false, FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace_contents_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>afbe0e644bafcb88ce52b62de803167cd</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result, std::string &amp;new_etag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace_contents_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>af0372ffd3f535f39b7e48c0483e4c1f4</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace_contents_bytes_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a4e6caba24b605600338ffdab6901620e</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::RefPtr&lt; const Glib::Bytes &gt; &amp;contents, const std::string &amp;etag, bool make_backup=false, FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace_contents_bytes_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>afa8e166a3ffdd266eff7fab5b24154bd</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; const Glib::Bytes &gt; &amp;contents, const std::string &amp;etag, bool make_backup=false, FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>supports_thread_contexts</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a33fe9221d11bc78619ce08424b924680</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>aa9352e68c93431dd16b8ac587703772f</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a9a1cbe348685c278bb7df93ee8018442</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; File &gt;</type>
      <name>create_for_path</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a1b1a4553b226689d50b9525488223e25</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; File &gt;</type>
      <name>create_for_uri</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a412b6b55f37f69bd4fb8fbd24d4967be</anchor>
      <arglist>(const std::string &amp;uri)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; File &gt;</type>
      <name>create_for_commandline_arg</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ab311a1c606b3907865fc8aecd4691de8</anchor>
      <arglist>(const std::string &amp;arg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; File &gt;</type>
      <name>create_for_parse_name</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a7532baa6ce71fe27cfd1e9bba91a3536</anchor>
      <arglist>(const Glib::ustring &amp;parse_name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>File</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>abb3b1f0b8e19505b34ae084c518d20fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::File &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a69670cdc7cf63783d6f9370dcbd7cc3d</anchor>
      <arglist>(GFile *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::FileAttributeInfo</name>
    <filename>classGio_1_1FileAttributeInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>FileAttributeInfo</name>
      <anchorfile>classGio_1_1FileAttributeInfo.html</anchorfile>
      <anchor>a5e4777c01a420d7265f4ccd8ed230189</anchor>
      <arglist>(const GFileAttributeInfo *ginfo)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileAttributeInfo</name>
      <anchorfile>classGio_1_1FileAttributeInfo.html</anchorfile>
      <anchor>aa290f394f7f34b5b7ba9dbb7453ae792</anchor>
      <arglist>(const FileAttributeInfo &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>FileAttributeInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1FileAttributeInfo.html</anchorfile>
      <anchor>a19efa84d8e3f28299a2b89f86c9c7730</anchor>
      <arglist>(const FileAttributeInfo &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileAttributeInfo</name>
      <anchorfile>classGio_1_1FileAttributeInfo.html</anchorfile>
      <anchor>a15ad753b3ffc17716c9cd3365a9b710f</anchor>
      <arglist>(FileAttributeInfo &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FileAttributeInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1FileAttributeInfo.html</anchorfile>
      <anchor>aebd92519f6f3f06f185dfbf8d0f70fcd</anchor>
      <arglist>(FileAttributeInfo &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FileAttributeInfo</name>
      <anchorfile>classGio_1_1FileAttributeInfo.html</anchorfile>
      <anchor>af7057435f526fc718c2be147d0df5b79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_name</name>
      <anchorfile>classGio_1_1FileAttributeInfo.html</anchorfile>
      <anchor>a2b98d10851ef6baed1ee6c044c31a688</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FileAttributeType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1FileAttributeInfo.html</anchorfile>
      <anchor>a81ec404b10f2f0af47973884ef788d22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FileAttributeInfoFlags</type>
      <name>get_flags</name>
      <anchorfile>classGio_1_1FileAttributeInfo.html</anchorfile>
      <anchor>a0b69fc193526b95ae1bfddee4e55af97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_name</name>
      <anchorfile>classGio_1_1FileAttributeInfo.html</anchorfile>
      <anchor>ab3ac15f750d21ddb4f6c7cd3240f8e03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FileAttributeType</type>
      <name>m_type</name>
      <anchorfile>classGio_1_1FileAttributeInfo.html</anchorfile>
      <anchor>abd2c79feb25a7adc6b9806d6b75d8c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FileAttributeInfoFlags</type>
      <name>m_flags</name>
      <anchorfile>classGio_1_1FileAttributeInfo.html</anchorfile>
      <anchor>a0b17e6847bad0bab1d90b7a3025e7dbf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::FileAttributeInfoList</name>
    <filename>classGio_1_1FileAttributeInfoList.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGio_1_1FileAttributeInfoList.html</anchorfile>
      <anchor>a7ca83f67060d521686abaffb804fda4d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGio_1_1FileAttributeInfoList.html</anchorfile>
      <anchor>af4112600a28d593456a97a0321b3bbb4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GFileAttributeInfoList *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileAttributeInfoList.html</anchorfile>
      <anchor>a8aba8445408cbf56722946723e6919a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GFileAttributeInfoList *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileAttributeInfoList.html</anchorfile>
      <anchor>a3ab69d665b11c82e2c8ab34f36912162</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GFileAttributeInfoList *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1FileAttributeInfoList.html</anchorfile>
      <anchor>a38db3b7cc57d2e96671c883f40535417</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileAttributeInfoList</name>
      <anchorfile>classGio_1_1FileAttributeInfoList.html</anchorfile>
      <anchor>a2f3d600ef973cbda226d7976c66e3b79</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileAttributeInfoList</name>
      <anchorfile>classGio_1_1FileAttributeInfoList.html</anchorfile>
      <anchor>a6d195172074ff32ddca22c2028c62e37</anchor>
      <arglist>(const FileAttributeInfoList &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>FileAttributeInfoList &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1FileAttributeInfoList.html</anchorfile>
      <anchor>a5553a17db6ff26f5f171afefeff843d2</anchor>
      <arglist>(const FileAttributeInfoList &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classGio_1_1FileAttributeInfoList.html</anchorfile>
      <anchor>a7642511a032bbf19747e166efe72303f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classGio_1_1FileAttributeInfoList.html</anchorfile>
      <anchor>a56784f17909d9a35659d0c1cf671db15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FileAttributeInfo</type>
      <name>lookup</name>
      <anchorfile>classGio_1_1FileAttributeInfoList.html</anchorfile>
      <anchor>adec48fc59cdd2c8ce82d3b2e74dbce99</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileAttributeInfoList &gt;</type>
      <name>dup</name>
      <anchorfile>classGio_1_1FileAttributeInfoList.html</anchorfile>
      <anchor>ad7faee649867b22e09030ec7e54898fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classGio_1_1FileAttributeInfoList.html</anchorfile>
      <anchor>aed2f07a9ff6a250c3b8fa06324765c2f</anchor>
      <arglist>(const std::string &amp;name, FileAttributeType type, FileAttributeInfoFlags flags=FILE_ATTRIBUTE_INFO_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; FileAttributeInfoList &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1FileAttributeInfoList.html</anchorfile>
      <anchor>a0a0d066b1b2e3a0a533895922ff4c14a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classGio_1_1FileAttributeInfoList.html</anchorfile>
      <anchor>a2acc6b621f0bb5aab208dceac9b353c2</anchor>
      <arglist>(void *, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::FileAttributeInfoList &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1FileAttributeInfoList.html</anchorfile>
      <anchor>a7f7b3ffb2c6258de375ee4cc566c0089</anchor>
      <arglist>(GFileAttributeInfoList *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::FileAttributeMatcher</name>
    <filename>classGio_1_1FileAttributeMatcher.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGio_1_1FileAttributeMatcher.html</anchorfile>
      <anchor>acaecebc44e9ba8f4966097644713ab59</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGio_1_1FileAttributeMatcher.html</anchorfile>
      <anchor>aa51c59fd307ad51c0dbde1b6238f5df9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GFileAttributeMatcher *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileAttributeMatcher.html</anchorfile>
      <anchor>a34cf74569abe9a13c4412bf8f2347747</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GFileAttributeMatcher *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileAttributeMatcher.html</anchorfile>
      <anchor>a2e289f15957d849c3469dc5a4d5affce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GFileAttributeMatcher *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1FileAttributeMatcher.html</anchorfile>
      <anchor>a6cd249f7f9aee4decb12318b94fdeca9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileAttributeMatcher</name>
      <anchorfile>classGio_1_1FileAttributeMatcher.html</anchorfile>
      <anchor>a15a679557094755a3805bdbd29d4c49c</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileAttributeMatcher</name>
      <anchorfile>classGio_1_1FileAttributeMatcher.html</anchorfile>
      <anchor>a536f25adad206e53142ff7c1d64616b4</anchor>
      <arglist>(const FileAttributeMatcher &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>FileAttributeMatcher &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1FileAttributeMatcher.html</anchorfile>
      <anchor>aac9d5709d7c552450c4c0e87843fa699</anchor>
      <arglist>(const FileAttributeMatcher &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileAttributeMatcher &gt;</type>
      <name>create_difference</name>
      <anchorfile>classGio_1_1FileAttributeMatcher.html</anchorfile>
      <anchor>a7ee53d2a17a5f69449affdf84dfb8c94</anchor>
      <arglist>(const Glib::RefPtr&lt; const FileAttributeMatcher &gt; &amp;subtract) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matches</name>
      <anchorfile>classGio_1_1FileAttributeMatcher.html</anchorfile>
      <anchor>ae70f4432b1cccb4566326c6d8a52ffb1</anchor>
      <arglist>(const std::string &amp;attribute) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matches_only</name>
      <anchorfile>classGio_1_1FileAttributeMatcher.html</anchorfile>
      <anchor>a445b06fed1a5ef79117aeb0bc4be6cb0</anchor>
      <arglist>(const std::string &amp;attribute) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enumerate_namespace</name>
      <anchorfile>classGio_1_1FileAttributeMatcher.html</anchorfile>
      <anchor>ac0edeabc8f07048f8bb2ba96d84983b8</anchor>
      <arglist>(const std::string &amp;ns)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>enumerate_next</name>
      <anchorfile>classGio_1_1FileAttributeMatcher.html</anchorfile>
      <anchor>a18103e91422814f576ff4b339bb085da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>classGio_1_1FileAttributeMatcher.html</anchorfile>
      <anchor>adc43f15ad8812469bf2407b5547800c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; FileAttributeMatcher &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1FileAttributeMatcher.html</anchorfile>
      <anchor>a47b85316b6b6ce30841895ae6ef4f498</anchor>
      <arglist>(const std::string &amp;attributes=&quot;*&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classGio_1_1FileAttributeMatcher.html</anchorfile>
      <anchor>a7bd99c437bf29680182cce3410094c96</anchor>
      <arglist>(void *, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::FileAttributeMatcher &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1FileAttributeMatcher.html</anchorfile>
      <anchor>a55c8ef1a5445afd09cc530d7c4945b7b</anchor>
      <arglist>(GFileAttributeMatcher *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::FileEnumerator</name>
    <filename>classGio_1_1FileEnumerator.html</filename>
    <base>Glib::Object</base>
    <member kind="function">
      <type></type>
      <name>FileEnumerator</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>a0d839118b00abddcfc1a9916971f0efb</anchor>
      <arglist>(FileEnumerator &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FileEnumerator &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>a3e7946743c6c2f1cbf3d8b76581a57bc</anchor>
      <arglist>(FileEnumerator &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FileEnumerator</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>a99666f017ea1fea0934763731a643ed5</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GFileEnumerator *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>a7c4e1d7258796a85d5b473e08168bd8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GFileEnumerator *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>a0ed26d44a0533bf37602d45bc2fd3e20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GFileEnumerator *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>ac744c1c54800fb3764ea6ce5546f7937</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>next_file</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>a73b5814cb108be591316cedabe362800</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>next_file</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>a881873317d4a608d06405b3da3940e5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>close</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>a731c5e104949ecd082bcd6a2ada25641</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>close</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>ad3729d377a08f39e3f4fc44d5c37409f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_files_async</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>a78de4d8a6a97cc68fc236a69a730f033</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int num_files=1, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_files_async</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>ad51d86fbf6ebef0aed7f4321e1df6e79</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, int num_files=1, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ListHandle&lt; Glib::RefPtr&lt; FileInfo &gt; &gt;</type>
      <name>next_files_finish</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>ab012d7f4428713efadbd10571f314973</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close_async</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>a0c878331956c2b28d749f561dbf84287</anchor>
      <arglist>(int io_priority, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close_async</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>aab848a136da3b0880f23e9084544e4ae</anchor>
      <arglist>(int io_priority, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>close_finish</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>a8f87519e9368a1db2399c24649976057</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_closed</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>a5425a09a2c7d3ea0f460ade9d0d6fd87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_pending</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>adb42a24b7a79fcbbae7d16efd5b4eb2b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_pending</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>a666470d02974350df0ed75f94321eaae</anchor>
      <arglist>(bool pending=true)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; File &gt;</type>
      <name>get_container</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>a3ad9348edd27ff536e61ee6b87b0fd23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const File &gt;</type>
      <name>get_container</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>a0bc78c08bd1a6b57ccbb63899742e2e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; File &gt;</type>
      <name>get_child</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>a79ee27e734fe2a3af2c376fc95ea4f24</anchor>
      <arglist>(const Glib::RefPtr&lt; FileInfo &gt; &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const File &gt;</type>
      <name>get_child</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>a1b212bbebdc89294d648e6d7b502fa33</anchor>
      <arglist>(const Glib::RefPtr&lt; FileInfo &gt; &amp;info) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>afe99ce463bfe6cc0f0c6fc209def5d53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::FileEnumerator &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>aba2d802d7865e00771c69e44da54318a</anchor>
      <arglist>(GFileEnumerator *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::FileIcon</name>
    <filename>classGio_1_1FileIcon.html</filename>
    <base>Glib::Object</base>
    <base>Gio::LoadableIcon</base>
    <member kind="function">
      <type></type>
      <name>FileIcon</name>
      <anchorfile>classGio_1_1FileIcon.html</anchorfile>
      <anchor>aaf13940e1f3f61a0d8477827b4713c02</anchor>
      <arglist>(FileIcon &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FileIcon &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1FileIcon.html</anchorfile>
      <anchor>a0676acd7e3e7db54735c11d6b88ec178</anchor>
      <arglist>(FileIcon &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FileIcon</name>
      <anchorfile>classGio_1_1FileIcon.html</anchorfile>
      <anchor>aae9d2243bc968ced01a3adddbeffe13c</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GFileIcon *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileIcon.html</anchorfile>
      <anchor>a0461feec986f30a389d7db0bfbc55673</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GFileIcon *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileIcon.html</anchorfile>
      <anchor>a5f2f4f1fab38a59c4ae16bd73d9e7aca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GFileIcon *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1FileIcon.html</anchorfile>
      <anchor>ac56c21ee2b4cc36ba9b6d177fdc184a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; File &gt;</type>
      <name>get_file</name>
      <anchorfile>classGio_1_1FileIcon.html</anchorfile>
      <anchor>a91c091a48d9acadf0fa4ba5817459b8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const File &gt;</type>
      <name>get_file</name>
      <anchorfile>classGio_1_1FileIcon.html</anchorfile>
      <anchor>ab479249d3eac01b41c618a91c411d677</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; File &gt; &gt;</type>
      <name>property_file</name>
      <anchorfile>classGio_1_1FileIcon.html</anchorfile>
      <anchor>a4df7527b2165b1693bc0bc42663739b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1FileIcon.html</anchorfile>
      <anchor>a310571260d16ddc97ab0b4bc9e47a1b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; FileIcon &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1FileIcon.html</anchorfile>
      <anchor>a09c67bb60019f8a14015d55ebfb89e25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FileIcon</name>
      <anchorfile>classGio_1_1FileIcon.html</anchorfile>
      <anchor>a2637e26120b3abc4711be125e212a72b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::FileIcon &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1FileIcon.html</anchorfile>
      <anchor>a211fbcdf28b3b87440c75b2c1a0212dd</anchor>
      <arglist>(GFileIcon *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::FileInfo</name>
    <filename>classGio_1_1FileInfo.html</filename>
    <base>Glib::Object</base>
    <member kind="function">
      <type></type>
      <name>FileInfo</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a75870ed357fdf7febedd5241a6f66b71</anchor>
      <arglist>(FileInfo &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FileInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>aaa5e5fafe9c5f4fec4913135e2a60947</anchor>
      <arglist>(FileInfo &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FileInfo</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>afdf1992aa1733b03a751e91442827c15</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GFileInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>ae03eb9c62254cc8581e3ec757f8d98a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GFileInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a4f5ea3002e0fa2c3e36a128f0efaeaee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GFileInfo *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a4c85d7a363f3925102ae03442472ac7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileInfo</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a740057465d0744299ef0f118b7efe083</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>dup</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a837b82287a538d2e36d7c131efad57b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_into</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>ae14589b69ac21f6e5d60b5515cf5146f</anchor>
      <arglist>(Glib::RefPtr&lt; FileInfo &gt; &amp;dest_info) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_attribute</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a7e969201b8224bbfc14e239bb35bff5d</anchor>
      <arglist>(const std::string &amp;attribute) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_namespace</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a391fab1e4aae6befe1b7431c0cc6557b</anchor>
      <arglist>(const std::string &amp;name_space) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::StringArrayHandle</type>
      <name>list_attributes</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a21ea6212a7eea06001bf617a8be383d8</anchor>
      <arglist>(const std::string &amp;name_space) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::StringArrayHandle</type>
      <name>list_attributes</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>aca375d0ba4a93324642fb7cb771b1b09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FileAttributeType</type>
      <name>get_attribute_type</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>aed3c9289928cb94e36a42a96fa9782f3</anchor>
      <arglist>(const std::string &amp;attribute) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_attribute</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>ab36ffcf14c535c7fbbbb94907a3516c9</anchor>
      <arglist>(const std::string &amp;attribute)</arglist>
    </member>
    <member kind="function">
      <type>FileAttributeStatus</type>
      <name>get_attribute_status</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>aadcf48e265ed08c62e2bc57f6b56d967</anchor>
      <arglist>(const std::string &amp;attribute) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_attribute_string</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>afae322be18b4210bc5a27298739c29e1</anchor>
      <arglist>(const std::string &amp;attribute) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::ustring &gt;</type>
      <name>get_attribute_strings</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a1e448dd141baa8a2b5737f12f8dd93e7</anchor>
      <arglist>(const std::string &amp;attribute) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_attribute_as_string</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a5b6a875227a18260d343ed200935e1f6</anchor>
      <arglist>(const std::string &amp;attribute) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_attribute_byte_string</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a7c4075b7b38148da25952fac405389fb</anchor>
      <arglist>(const std::string &amp;attribute) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_attribute_boolean</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a8d69d66a29b6dbf1f59bc9dd7aa038a0</anchor>
      <arglist>(const std::string &amp;attribute) const</arglist>
    </member>
    <member kind="function">
      <type>guint32</type>
      <name>get_attribute_uint32</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a75771593b6724b330bb3f88538472751</anchor>
      <arglist>(const std::string &amp;attribute) const</arglist>
    </member>
    <member kind="function">
      <type>gint32</type>
      <name>get_attribute_int32</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>ace957b1d107a823739f2e97eb16c2c5b</anchor>
      <arglist>(const std::string &amp;attribute) const</arglist>
    </member>
    <member kind="function">
      <type>guint64</type>
      <name>get_attribute_uint64</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a1abbc4afdfa23bccba544e25ab34d6b1</anchor>
      <arglist>(const std::string &amp;attribute) const</arglist>
    </member>
    <member kind="function">
      <type>gint64</type>
      <name>get_attribute_int64</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a04c07829bd45ee8ada3766b941abe792</anchor>
      <arglist>(const std::string &amp;attribute) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Glib::Object &gt;</type>
      <name>get_attribute_object</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>ac74688ce67b43b5fbadc6d357e434e1a</anchor>
      <arglist>(const std::string &amp;attribute) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_attribute_status</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a23be459ab17337e7ce3bf595d1c49caa</anchor>
      <arglist>(const std::string &amp;attribute, FileAttributeStatus status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_attribute_string</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a1e606f4da36965161e1dca33cca4d356</anchor>
      <arglist>(const std::string &amp;attribute, const std::string &amp;attr_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_attribute_strings</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a7ca4e0eff88cb39997d062bb87c1a7e8</anchor>
      <arglist>(const std::string &amp;attribute, const std::vector&lt; Glib::ustring &gt; &amp;attr_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_attribute_byte_string</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a76af54b7bff8fb2059a24fe421fd695f</anchor>
      <arglist>(const std::string &amp;attribute, const std::string &amp;attr_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_attribute_boolean</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>aac9c93946c7e7fd05404763f6b4fc768</anchor>
      <arglist>(const std::string &amp;attribute, bool attr_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_attribute_uint32</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>acae23c362ceb3a9df2f0b4355a34c805</anchor>
      <arglist>(const std::string &amp;attribute, guint32 attr_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_attribute_int32</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a179852aee069dcaa0b038067947fdb18</anchor>
      <arglist>(const std::string &amp;attribute, gint32 attr_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_attribute_uint64</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>aa8116dd0baf75878247290ab382ba71e</anchor>
      <arglist>(const std::string &amp;attribute, guint64 attr_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_attribute_int64</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>afd81b823003ec5dd86fbaaec3486c52f</anchor>
      <arglist>(const std::string &amp;attribute, gint64 attr_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_attribute_object</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a8731a890f534730d780ba92b3407844e</anchor>
      <arglist>(const std::string &amp;attribute, const Glib::RefPtr&lt; Glib::Object &gt; &amp;attr_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_status</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>ac00eda5b1db8e5c7d3a756a43efe47fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::DateTime</type>
      <name>get_deletion_date</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a2022c1060e569b3edfbdd53e8b39bf9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FileType</type>
      <name>get_file_type</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a92b962e3a03c3e089ef6caa6d5f84aed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_hidden</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a68c6183de012506de88af00022684f48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_backup</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>ac9b11e752db34602d047c89b57e6215b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_symlink</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a70d6da12c62b31518e6898aa3aaf8834</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_name</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>aee48272502d2912c45cc8a646158f28b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_display_name</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a2d0db0ef20a3d7672907c15e93cd663e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_edit_name</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a075bcb38659cdac6ca8e885679b2dce6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Icon &gt;</type>
      <name>get_icon</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>ad835c26e3252232a437d1013a5ed9aa3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Icon &gt;</type>
      <name>get_icon</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>aa42ffa62f228d5c2b519960e3a6d2940</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Icon &gt;</type>
      <name>get_symbolic_icon</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>acb525fe0c1cb6b91483b7df5c37b5062</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Icon &gt;</type>
      <name>get_symbolic_icon</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>add6b9dc3809752fd6c2362f99c2d0ad1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_content_type</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>ac629a2392a8d660e61b7c85dc5c40212</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>goffset</type>
      <name>get_size</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>ac1cd6a4950b05d241fca390ded65772b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::TimeVal</type>
      <name>modification_time</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a603cfec368110ab9dcb196b0b1871040</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_symlink_target</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>aaa781003f1011239175db24952b58857</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_etag</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>ae1e5c44ef881feeeacb9e5ae73b008b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>gint32</type>
      <name>get_sort_order</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>ae0a49c6c4b213a8b3c3888b1f01e9d48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_attribute_mask</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>add9025ae3f25e5213ab8fba055a4e09d</anchor>
      <arglist>(const Glib::RefPtr&lt; FileAttributeMatcher &gt; &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unset_attribute_mask</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>afb9178c888fbf6fd2ef1344bc8523ba3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_file_type</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>ab3ceaaaf6112575fd1b9cd6c75112606</anchor>
      <arglist>(FileType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_is_hidden</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>ab66bea83d2c1a014c73e913b77b90772</anchor>
      <arglist>(bool hidden=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_is_symlink</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a04ac76c5e1ab72104db2b07014916c64</anchor>
      <arglist>(bool symlink=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>af2430c30058f424bbc71c342fd2e9cda</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_display_name</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a6c0171f42d0877023cfe574b77359b59</anchor>
      <arglist>(const std::string &amp;display_name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_edit_name</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a0aec971ea570c1946b8e57462e1bc9ce</anchor>
      <arglist>(const std::string &amp;edit_name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_icon</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a3bd4ac6face055102cd02c679056a16a</anchor>
      <arglist>(const Glib::RefPtr&lt; Icon &gt; &amp;icon)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_symbolic_icon</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a166b0739038a29aca63bc3dbf750a303</anchor>
      <arglist>(const Glib::RefPtr&lt; Icon &gt; &amp;icon)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_content_type</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a1a07b5776ff1a1a8ed8d942710df5688</anchor>
      <arglist>(const std::string &amp;content_type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_size</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>ac50fe95ac1dd596d44cd40225af223f5</anchor>
      <arglist>(goffset size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_modification_time</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a999893faef31be8d0989415852ec527e</anchor>
      <arglist>(const Glib::TimeVal &amp;mtime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_symlink_target</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>af0ca88a17c88c40b58890a68278528c4</anchor>
      <arglist>(const std::string &amp;symlink_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_sort_order</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>afec884c7bd2f655c7a3fe0122dfb4390</anchor>
      <arglist>(gint32 sort_order)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a60db6778f3f1cb3db54e6e58a184b9e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::FileInfo &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>aa08fd4d65078c227da321348eed9519d</anchor>
      <arglist>(GFileInfo *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::FileInputStream</name>
    <filename>classGio_1_1FileInputStream.html</filename>
    <base>Gio::InputStream</base>
    <base>Gio::Seekable</base>
    <member kind="function">
      <type></type>
      <name>FileInputStream</name>
      <anchorfile>classGio_1_1FileInputStream.html</anchorfile>
      <anchor>a52bec00bb03f9d5c92e13d5a648909de</anchor>
      <arglist>(FileInputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FileInputStream &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1FileInputStream.html</anchorfile>
      <anchor>ad638ab2886e77ec69b320b16ff30b680</anchor>
      <arglist>(FileInputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FileInputStream</name>
      <anchorfile>classGio_1_1FileInputStream.html</anchorfile>
      <anchor>a486b3a6b18a5b5029434aa2e45bfd234</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GFileInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileInputStream.html</anchorfile>
      <anchor>a5411e06810e06ad339d7a21257772219</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GFileInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileInputStream.html</anchorfile>
      <anchor>ae55c052b8da0160de32490f6b35801c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GFileInputStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1FileInputStream.html</anchorfile>
      <anchor>aa35ad981b6f18b1e5ece395970c5991b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>query_info</name>
      <anchorfile>classGio_1_1FileInputStream.html</anchorfile>
      <anchor>ae9cf87761484839f4ea53bc33064f189</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const std::string &amp;attributes=&quot;*&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>query_info</name>
      <anchorfile>classGio_1_1FileInputStream.html</anchorfile>
      <anchor>a6ff4fe91f63b1eb38cca93591ba1f263</anchor>
      <arglist>(const std::string &amp;attributes=&quot;*&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>query_info_async</name>
      <anchorfile>classGio_1_1FileInputStream.html</anchorfile>
      <anchor>a50c9554cfa15b88a1d30c7719569cc5f</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const std::string &amp;attributes=&quot;*&quot;, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>query_info_async</name>
      <anchorfile>classGio_1_1FileInputStream.html</anchorfile>
      <anchor>a21f82f427ab1e958308889b78308dcdf</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const std::string &amp;attributes=&quot;*&quot;, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>query_info_finish</name>
      <anchorfile>classGio_1_1FileInputStream.html</anchorfile>
      <anchor>a1c8e42e09d92c59b05d122eead3e3161</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1FileInputStream.html</anchorfile>
      <anchor>a396cc408fb62a174563a21f7120321e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::FileInputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1FileInputStream.html</anchorfile>
      <anchor>aa3ca60bf8d52cd8c7d2688e58d634a36</anchor>
      <arglist>(GFileInputStream *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::FileIOStream</name>
    <filename>classGio_1_1FileIOStream.html</filename>
    <base>Gio::IOStream</base>
    <base>Gio::Seekable</base>
    <member kind="function">
      <type></type>
      <name>FileIOStream</name>
      <anchorfile>classGio_1_1FileIOStream.html</anchorfile>
      <anchor>a0866ed204310ec34fd799872ef227b13</anchor>
      <arglist>(FileIOStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FileIOStream &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1FileIOStream.html</anchorfile>
      <anchor>ac3b24b3604ab628fbc1d00e1bbc77dc2</anchor>
      <arglist>(FileIOStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FileIOStream</name>
      <anchorfile>classGio_1_1FileIOStream.html</anchorfile>
      <anchor>a78c56c89f78a4f99b6f58db0624ba0cd</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GFileIOStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileIOStream.html</anchorfile>
      <anchor>a382fe1830e5e347db4ae0d941398c0df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GFileIOStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileIOStream.html</anchorfile>
      <anchor>aa56da71a9aa9bdcbb3710c121601954c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GFileIOStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1FileIOStream.html</anchorfile>
      <anchor>a2661e78434e66d48a54aa67ddd4d4e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>query_info</name>
      <anchorfile>classGio_1_1FileIOStream.html</anchorfile>
      <anchor>a11c3696bd12879c7554a8be1246ca069</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const std::string &amp;attributes=&quot;*&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>query_info</name>
      <anchorfile>classGio_1_1FileIOStream.html</anchorfile>
      <anchor>a1c4cefdd3b2ff134f01ecbc7a4439921</anchor>
      <arglist>(const std::string &amp;attributes=&quot;*&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>query_info_async</name>
      <anchorfile>classGio_1_1FileIOStream.html</anchorfile>
      <anchor>ae83afafd7a40cc116026af5452c26151</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const std::string &amp;attributes=&quot;*&quot;, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>query_info_async</name>
      <anchorfile>classGio_1_1FileIOStream.html</anchorfile>
      <anchor>aeafe3bd19e6cf993dd7a2bb4e27ebd4d</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const std::string &amp;attributes=&quot;*&quot;, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>query_info_finish</name>
      <anchorfile>classGio_1_1FileIOStream.html</anchorfile>
      <anchor>a9838bea653f37c9ff298e16a96ce11dd</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_etag</name>
      <anchorfile>classGio_1_1FileIOStream.html</anchorfile>
      <anchor>abed7f6096d433380f6aa9cb2e4702f9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1FileIOStream.html</anchorfile>
      <anchor>a52a9e11a62ca45bfb8b7bd5117d5f069</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::FileIOStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1FileIOStream.html</anchorfile>
      <anchor>a44679bcc0dadcf0eb3bf2691e51e7e98</anchor>
      <arglist>(GFileIOStream *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::FileMonitor</name>
    <filename>classGio_1_1FileMonitor.html</filename>
    <base>Glib::Object</base>
    <member kind="function">
      <type></type>
      <name>FileMonitor</name>
      <anchorfile>classGio_1_1FileMonitor.html</anchorfile>
      <anchor>a4af518bf8fc3e63cce785d35f484d437</anchor>
      <arglist>(FileMonitor &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FileMonitor &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1FileMonitor.html</anchorfile>
      <anchor>a990f57390a6120ec45714a892d232865</anchor>
      <arglist>(FileMonitor &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FileMonitor</name>
      <anchorfile>classGio_1_1FileMonitor.html</anchorfile>
      <anchor>a3106ebf8cc6e45c009bf83158d682d31</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GFileMonitor *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileMonitor.html</anchorfile>
      <anchor>a047a5032cf7905ecc37c6379e8c82f35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GFileMonitor *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileMonitor.html</anchorfile>
      <anchor>a2096465c4e4b10e06a411293d8226b2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GFileMonitor *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1FileMonitor.html</anchorfile>
      <anchor>a989efd770a3a68bc77f1917751feec9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cancel</name>
      <anchorfile>classGio_1_1FileMonitor.html</anchorfile>
      <anchor>ab6bdfc13b4a27521304c9be8aedec677</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_cancelled</name>
      <anchorfile>classGio_1_1FileMonitor.html</anchorfile>
      <anchor>af4ce0e92e83e3af64751d43dad9e744d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_rate_limit</name>
      <anchorfile>classGio_1_1FileMonitor.html</anchorfile>
      <anchor>a47b6ca4693b67efead6c8dde6d526b31</anchor>
      <arglist>(int limit_msecs)</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, const Glib::RefPtr&lt; File &gt; &amp;, const Glib::RefPtr&lt; File &gt; &amp;, FileMonitorEvent &gt;</type>
      <name>signal_changed</name>
      <anchorfile>classGio_1_1FileMonitor.html</anchorfile>
      <anchor>a932ab25b51f01edb2586729b056f76cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; int &gt;</type>
      <name>property_rate_limit</name>
      <anchorfile>classGio_1_1FileMonitor.html</anchorfile>
      <anchor>a0256afa44438302c92d8d2eecb7650f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; int &gt;</type>
      <name>property_rate_limit</name>
      <anchorfile>classGio_1_1FileMonitor.html</anchorfile>
      <anchor>a72e5a1ce075b7503c12cd48cf8be93ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_cancelled</name>
      <anchorfile>classGio_1_1FileMonitor.html</anchorfile>
      <anchor>a6a41ad5e00c0a3176fd3908963f8e7c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1FileMonitor.html</anchorfile>
      <anchor>a3ffca53a4e82649f8d9e2d91aced6ae2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_changed</name>
      <anchorfile>classGio_1_1FileMonitor.html</anchorfile>
      <anchor>a42c6d3679e90ad17504d3c0a5937da7c</anchor>
      <arglist>(const Glib::RefPtr&lt; File &gt; &amp;file, const Glib::RefPtr&lt; File &gt; &amp;other_file, FileMonitorEvent event_type)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::FileMonitor &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1FileMonitor.html</anchorfile>
      <anchor>a5ad2474eedfd1ae12f2c75003e6f26fe</anchor>
      <arglist>(GFileMonitor *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::FilenameCompleter</name>
    <filename>classGio_1_1FilenameCompleter.html</filename>
    <base>Glib::Object</base>
    <member kind="function">
      <type></type>
      <name>FilenameCompleter</name>
      <anchorfile>classGio_1_1FilenameCompleter.html</anchorfile>
      <anchor>ada3215abed83684ce7ea48c5841767ca</anchor>
      <arglist>(FilenameCompleter &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FilenameCompleter &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1FilenameCompleter.html</anchorfile>
      <anchor>a1f3554aa33cdc984b5cd6735f651b90c</anchor>
      <arglist>(FilenameCompleter &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FilenameCompleter</name>
      <anchorfile>classGio_1_1FilenameCompleter.html</anchorfile>
      <anchor>a1547adcac8ad779c1fc4f2db4266a837</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GFilenameCompleter *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FilenameCompleter.html</anchorfile>
      <anchor>a6fa2ba7f28935b557fac0dfe965fe916</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GFilenameCompleter *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FilenameCompleter.html</anchorfile>
      <anchor>a15a2bf2f687ca7eceef986e1a84bbdd3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GFilenameCompleter *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1FilenameCompleter.html</anchorfile>
      <anchor>ae069b04fba4a9fff00023476772a7b5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_completion_suffix</name>
      <anchorfile>classGio_1_1FilenameCompleter.html</anchorfile>
      <anchor>a48b057e210228f7b5ba5f5b15471a69b</anchor>
      <arglist>(const std::string &amp;initial_text) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::StringArrayHandle</type>
      <name>get_completions</name>
      <anchorfile>classGio_1_1FilenameCompleter.html</anchorfile>
      <anchor>a2dae408276bcbd82cad9e12e0510e1ec</anchor>
      <arglist>(const std::string &amp;initial_text) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_dirs_only</name>
      <anchorfile>classGio_1_1FilenameCompleter.html</anchorfile>
      <anchor>abe7160d315c69ed35cdd5e1a25cf06bc</anchor>
      <arglist>(bool dirs_only=true)</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void &gt;</type>
      <name>signal_got_completion_data</name>
      <anchorfile>classGio_1_1FilenameCompleter.html</anchorfile>
      <anchor>a2fbd5593bd00387fd0a7313e9591f3d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1FilenameCompleter.html</anchorfile>
      <anchor>a139fce914a636a7f8f8f962b71519bd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; FilenameCompleter &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1FilenameCompleter.html</anchorfile>
      <anchor>aeb7c3042c2f76a62f6806921bef56e89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FilenameCompleter</name>
      <anchorfile>classGio_1_1FilenameCompleter.html</anchorfile>
      <anchor>a1db98397daf75605c3a827f646ea98ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_got_completion_data</name>
      <anchorfile>classGio_1_1FilenameCompleter.html</anchorfile>
      <anchor>a092cefc4a3cbeff19f60ef75ebfc8b87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::FilenameCompleter &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1FilenameCompleter.html</anchorfile>
      <anchor>ad03881744458e4aa6308376f5aebd2b3</anchor>
      <arglist>(GFilenameCompleter *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::FileOutputStream</name>
    <filename>classGio_1_1FileOutputStream.html</filename>
    <base>Gio::OutputStream</base>
    <base>Gio::Seekable</base>
    <member kind="function">
      <type></type>
      <name>FileOutputStream</name>
      <anchorfile>classGio_1_1FileOutputStream.html</anchorfile>
      <anchor>a128056feea81f392823324d746bb3224</anchor>
      <arglist>(FileOutputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FileOutputStream &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1FileOutputStream.html</anchorfile>
      <anchor>a212816ed06df760b19a8e87459452cf6</anchor>
      <arglist>(FileOutputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FileOutputStream</name>
      <anchorfile>classGio_1_1FileOutputStream.html</anchorfile>
      <anchor>a80555e0e48b62ef89df9233b2ac2a24d</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GFileOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileOutputStream.html</anchorfile>
      <anchor>aa69b1c94c5a3a2e0002fc6cf5127fc70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GFileOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileOutputStream.html</anchorfile>
      <anchor>a6ec53da9d180fbc336b9c98e9d4b5f83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GFileOutputStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1FileOutputStream.html</anchorfile>
      <anchor>af536865a9ed17c3093ab67465fba908b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>query_info</name>
      <anchorfile>classGio_1_1FileOutputStream.html</anchorfile>
      <anchor>a660a0130611aad21965a3f74c2fe90cd</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const std::string &amp;attributes=&quot;*&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>query_info</name>
      <anchorfile>classGio_1_1FileOutputStream.html</anchorfile>
      <anchor>a9b67d7fa0b9309ca42dea8607d2ef3d5</anchor>
      <arglist>(const std::string &amp;attributes=&quot;*&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>query_info_async</name>
      <anchorfile>classGio_1_1FileOutputStream.html</anchorfile>
      <anchor>a926ddca8782aeb271560a058ee6554aa</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const std::string &amp;attributes=&quot;*&quot;, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>query_info_async</name>
      <anchorfile>classGio_1_1FileOutputStream.html</anchorfile>
      <anchor>aa9297d379f28510afd0d5dabba65a447</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const std::string &amp;attributes=&quot;*&quot;, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>query_info_finish</name>
      <anchorfile>classGio_1_1FileOutputStream.html</anchorfile>
      <anchor>aff73b62f94cc0be14f8271480aab6299</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_etag</name>
      <anchorfile>classGio_1_1FileOutputStream.html</anchorfile>
      <anchor>a0a6fdb9d687d0ae6eb92a1a952a4b822</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1FileOutputStream.html</anchorfile>
      <anchor>a94ffbc5e9da9b3ed5939ef645c6ecaf3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::FileOutputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1FileOutputStream.html</anchorfile>
      <anchor>a5fe0a7a8069a65b4a83b36f3a54b3142</anchor>
      <arglist>(GFileOutputStream *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::FilterInputStream</name>
    <filename>classGio_1_1FilterInputStream.html</filename>
    <base>Gio::InputStream</base>
    <member kind="function">
      <type></type>
      <name>FilterInputStream</name>
      <anchorfile>classGio_1_1FilterInputStream.html</anchorfile>
      <anchor>a26e1a05a9c12efdedfcad6aa627fc52f</anchor>
      <arglist>(FilterInputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FilterInputStream &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1FilterInputStream.html</anchorfile>
      <anchor>a6b2d9b2b852213ab8584de7a461ad5a0</anchor>
      <arglist>(FilterInputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FilterInputStream</name>
      <anchorfile>classGio_1_1FilterInputStream.html</anchorfile>
      <anchor>afc4a60fe6101afe769a8705d1306be8e</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GFilterInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FilterInputStream.html</anchorfile>
      <anchor>a6db43589745dcd172f4ca4082bc5d914</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GFilterInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FilterInputStream.html</anchorfile>
      <anchor>a22359bca6cca134f3c682bda964f7fec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GFilterInputStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1FilterInputStream.html</anchorfile>
      <anchor>a55ef3320e423245cc69066c90785328e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; InputStream &gt;</type>
      <name>get_base_stream</name>
      <anchorfile>classGio_1_1FilterInputStream.html</anchorfile>
      <anchor>aa0e6304d8ea21a17b3e6a0127e3e7530</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const InputStream &gt;</type>
      <name>get_base_stream</name>
      <anchorfile>classGio_1_1FilterInputStream.html</anchorfile>
      <anchor>af89d13481d9f2c76e76dfbbebe6df38e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_close_base_stream</name>
      <anchorfile>classGio_1_1FilterInputStream.html</anchorfile>
      <anchor>a1b271e45cea963e8dd74b42bcd54bcce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_close_base_stream</name>
      <anchorfile>classGio_1_1FilterInputStream.html</anchorfile>
      <anchor>a82e03517a6841b170c7e13fcf2f66920</anchor>
      <arglist>(bool close_base=true)</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; InputStream &gt; &gt;</type>
      <name>property_base_stream</name>
      <anchorfile>classGio_1_1FilterInputStream.html</anchorfile>
      <anchor>a6f5402e372dd70c6ce312561c8f4fc52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_close_base_stream</name>
      <anchorfile>classGio_1_1FilterInputStream.html</anchorfile>
      <anchor>a6667a12cd90f09d79252e0f76c5f9c16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_close_base_stream</name>
      <anchorfile>classGio_1_1FilterInputStream.html</anchorfile>
      <anchor>a4314fbea0d2670aa10318d886985e0b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1FilterInputStream.html</anchorfile>
      <anchor>ad5357b46433b56fa6ad18ccd5063e71c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FilterInputStream</name>
      <anchorfile>classGio_1_1FilterInputStream.html</anchorfile>
      <anchor>a2306fafa5bb1af333e921e0d80fd56d8</anchor>
      <arglist>(const Glib::RefPtr&lt; InputStream &gt; &amp;base_stream)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::FilterInputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1FilterInputStream.html</anchorfile>
      <anchor>a5f5a6b8c088b86f8671d9dfaed24ac70</anchor>
      <arglist>(GFilterInputStream *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::FilterOutputStream</name>
    <filename>classGio_1_1FilterOutputStream.html</filename>
    <base>Gio::OutputStream</base>
    <member kind="function">
      <type></type>
      <name>FilterOutputStream</name>
      <anchorfile>classGio_1_1FilterOutputStream.html</anchorfile>
      <anchor>a3283bed3bc9d6c83eeb099f6e5882f9f</anchor>
      <arglist>(FilterOutputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FilterOutputStream &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1FilterOutputStream.html</anchorfile>
      <anchor>a05025aa50a345024c0ad1fb57cc31686</anchor>
      <arglist>(FilterOutputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FilterOutputStream</name>
      <anchorfile>classGio_1_1FilterOutputStream.html</anchorfile>
      <anchor>a536a01cb6a1bd638e727b3bbf18d61cd</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GFilterOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FilterOutputStream.html</anchorfile>
      <anchor>a7cf09c946f16c1597e7ce038fd64f9ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GFilterOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FilterOutputStream.html</anchorfile>
      <anchor>ade73009a3fa7d449c4eb538af09d23af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GFilterOutputStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1FilterOutputStream.html</anchorfile>
      <anchor>ae0701328a1b8b2e71ba15dcdb83422b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; OutputStream &gt;</type>
      <name>get_base_stream</name>
      <anchorfile>classGio_1_1FilterOutputStream.html</anchorfile>
      <anchor>a135f41e0b5e9ad029d17efdce11e3fd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const OutputStream &gt;</type>
      <name>get_base_stream</name>
      <anchorfile>classGio_1_1FilterOutputStream.html</anchorfile>
      <anchor>a55e7cf99857b172b0c3222ebb89d4b52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_close_base_stream</name>
      <anchorfile>classGio_1_1FilterOutputStream.html</anchorfile>
      <anchor>ada55d189ad93361708986f714a57818a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_close_base_stream</name>
      <anchorfile>classGio_1_1FilterOutputStream.html</anchorfile>
      <anchor>ad02373553035aa1b1c3bb2bd578a24f6</anchor>
      <arglist>(bool close_base=true)</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; OutputStream &gt; &gt;</type>
      <name>property_base_stream</name>
      <anchorfile>classGio_1_1FilterOutputStream.html</anchorfile>
      <anchor>ab4a9523daae5b3c805e1e85d19794815</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_close_base_stream</name>
      <anchorfile>classGio_1_1FilterOutputStream.html</anchorfile>
      <anchor>ab548b0f0d65052b473b4b7a8011413d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1FilterOutputStream.html</anchorfile>
      <anchor>aec1234b0481c14d92b2be99644ef124e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FilterOutputStream</name>
      <anchorfile>classGio_1_1FilterOutputStream.html</anchorfile>
      <anchor>a3679cf95e98f6ba493f6269c09180521</anchor>
      <arglist>(const Glib::RefPtr&lt; OutputStream &gt; &amp;base_stream)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::FilterOutputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1FilterOutputStream.html</anchorfile>
      <anchor>ae070f4f975af2ac6beb39a5bef8d5f95</anchor>
      <arglist>(GFilterOutputStream *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::Icon</name>
    <filename>classGio_1_1Icon.html</filename>
    <base>Glib::Interface</base>
    <member kind="function">
      <type></type>
      <name>Icon</name>
      <anchorfile>classGio_1_1Icon.html</anchorfile>
      <anchor>ad678abb7b42088e445b8cea5dce26c5d</anchor>
      <arglist>(Icon &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Icon &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1Icon.html</anchorfile>
      <anchor>aa462f7a4c0c502556fb8227703fcf760</anchor>
      <arglist>(Icon &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Icon</name>
      <anchorfile>classGio_1_1Icon.html</anchorfile>
      <anchor>a26fb8d8226bc1b77afe0caaf79537d1f</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GIcon *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Icon.html</anchorfile>
      <anchor>a02ef784d9a07a205ce1d7daac39d2054</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GIcon *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Icon.html</anchorfile>
      <anchor>a444aad0130aeb2e2faf133159d056238</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>hash</name>
      <anchorfile>classGio_1_1Icon.html</anchorfile>
      <anchor>adb512e5e504414c2549dfcbea842659c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>classGio_1_1Icon.html</anchorfile>
      <anchor>adaeb44f57003c9f5952f328f23f530f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>classGio_1_1Icon.html</anchorfile>
      <anchor>a497a52d14b2af3802ef1fc48b55be625</anchor>
      <arglist>(const Glib::RefPtr&lt; Icon &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantBase</type>
      <name>serialize</name>
      <anchorfile>classGio_1_1Icon.html</anchorfile>
      <anchor>a0db0c499e98b60535fe1bdf4087d6b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1Icon.html</anchorfile>
      <anchor>abd37e490fdf4da67eb3bbe2561c16ee3</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Icon.html</anchorfile>
      <anchor>a04d158ce09690dfd7bb2a61303451fc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Icon &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1Icon.html</anchorfile>
      <anchor>a8ae9b8e7b8159620eea7f9215cac83ab</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Icon &gt;</type>
      <name>deserialize</name>
      <anchorfile>classGio_1_1Icon.html</anchorfile>
      <anchor>ae5b3faf70fef81dd153027cda17554a7</anchor>
      <arglist>(const Glib::VariantBase &amp;value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Icon</name>
      <anchorfile>classGio_1_1Icon.html</anchorfile>
      <anchor>a371ebc971db810d36edf00879f9ea1df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Icon &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Icon.html</anchorfile>
      <anchor>a9f6d4523888318e40c362de6eea23004</anchor>
      <arglist>(GIcon *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::InetAddress</name>
    <filename>classGio_1_1InetAddress.html</filename>
    <base>Glib::Object</base>
    <member kind="function">
      <type></type>
      <name>InetAddress</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a761de981eaa2542a696e8c5a8430d5df</anchor>
      <arglist>(InetAddress &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>InetAddress &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a787927b594835c36dddf5ff11a7b0c3a</anchor>
      <arglist>(InetAddress &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InetAddress</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a17a26c5dd2323e3cb3afbb36560e9506</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GInetAddress *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a814cf259fbe2075145372ff8f041e2fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GInetAddress *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>af11e97b2effece18b64d19b9c4054ea2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GInetAddress *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>ac5740ac33a8c1507165bfb24ad05867b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>address_equal</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a2d4bd86eda76a38c20269c3046889b4c</anchor>
      <arglist>(const Glib::RefPtr&lt; const InetAddress &gt; &amp;other_address) const</arglist>
    </member>
    <member kind="function">
      <type>const guint8 *</type>
      <name>to_bytes</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a89a1484640ead95028ecf452f261ad0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>to_string</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>ac68af8c3e760d7d5b417d6e0478dd639</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SocketFamily</type>
      <name>get_family</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a77611231d005686bb5c31ec1dc58efe6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_any</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>ad59d388b7cad79e8b2fd3668c91d265b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_link_local</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>aac40121516e5692ddba5c1e65ddc80df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_loopback</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a3bdc36912dbaec9d8233473b56a8d05d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_mc_global</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>aa4d03f8db1bdad48150459c4a6bb449a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_mc_link_local</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>aba9f234a39c00d5583213589c1620515</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_mc_node_local</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>ab0fa29733e3caf4a4c0b39e25844b689</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_mc_org_local</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>aff605caccfc236276f2b3d972aa4ab77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_mc_site_local</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>aab97f1826178b55e14ad0e76891b9bd7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_multicast</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a48dbe339905781028b443fb618cfc101</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_site_local</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a3aec0c57a1f1bf43ea463aa39c579155</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>gsize</type>
      <name>get_native_size</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a798aa141cbabcc8cc999431e272bb1be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; void *&gt;</type>
      <name>property_bytes</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a75a9c979ad7be93db89188edfb53ddb4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; SocketFamily &gt;</type>
      <name>property_family</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>afc9395edd2037407bbc85477c75ac4bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_is_any</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a6936fbf959b2e5db80abf85cf84830b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_is_link_local</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>ad3c5c4daa232c66b551e0988b80717d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_is_loopback</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a704ba5c3eb04c04d66ed7da6cda40db3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_is_mc_global</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a267085c635d1f400f8c55342684f85b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_is_mc_link_local</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a3be356b2ac1e835da7b900a21b6961be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_is_mc_node_local</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>ad8e7009d414dce957d3093f565ed6e40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_is_mc_org_local</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>af01a7ba996cba110c4dc54b0295c32f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_is_mc_site_local</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a6728e2a501ee1fd7e199fbbb865ac26a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_is_multicast</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>ae3b808ed5464e5d1cd657c7b028753c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_is_site_local</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a1ed24a9b4ab96a94d1018247bf856495</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a5eff31035172897b0d396208bf80628a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; InetAddress &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>ad9a5b29ab4211c5e6d03d7630d1f352e</anchor>
      <arglist>(const Glib::ustring &amp;string)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; InetAddress &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>ab34823f20a1719d0d4dd0b8908791196</anchor>
      <arglist>(const guint8 *bytes, SocketFamily family)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; InetAddress &gt;</type>
      <name>create_any</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a801b964256dd4934f58db81626e6f42a</anchor>
      <arglist>(SocketFamily family)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; InetAddress &gt;</type>
      <name>create_loopback</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>af78181b11c10d9d698d9a49cfa2136ed</anchor>
      <arglist>(SocketFamily family)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>InetAddress</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>aeca7299962f7b75793c493ff32d91abe</anchor>
      <arglist>(const guint8 *bytes, SocketFamily family)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::InetAddress &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>ab8ed0814ec989e9c9b07332b19958a01</anchor>
      <arglist>(GInetAddress *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::InetSocketAddress</name>
    <filename>classGio_1_1InetSocketAddress.html</filename>
    <base>Gio::SocketAddress</base>
    <member kind="function">
      <type></type>
      <name>InetSocketAddress</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>a022c5b97955d621639a4d3b95f5ff888</anchor>
      <arglist>(InetSocketAddress &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>InetSocketAddress &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>a0cbbdadcb7af5757a0b03e1394690959</anchor>
      <arglist>(InetSocketAddress &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InetSocketAddress</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>a63d87badc57fc16bad5909bfe0e349cb</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GInetSocketAddress *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>a2185ff490fa658c11854df16c41910dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GInetSocketAddress *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>adadbec718a4fc85519c701404b2f0584</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GInetSocketAddress *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>a0d165726f19e26d3c03a184510b6df2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; InetAddress &gt;</type>
      <name>get_address</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>a28a044f52e94263559a50197d4ddfd6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const InetAddress &gt;</type>
      <name>get_address</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>a14bd16b78af512fd4796275f47612e38</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>guint16</type>
      <name>get_port</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>a118007a37943f93782bedae198d379b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>guint32</type>
      <name>get_flowinfo</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>a56474b36e2613137e76d453dfb023f50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>guint32</type>
      <name>get_scope_id</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>aa2ac14d2d9e30d5e883685bc838ac410</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; InetAddress &gt; &gt;</type>
      <name>property_address</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>a3a84d241feec73e06b19b47ecc940e87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; guint16 &gt;</type>
      <name>property_port</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>a4dfa6df94db83a818678d0087b6cd5dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; guint32 &gt;</type>
      <name>property_flowinfo</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>a678e1b424fd152eac01c2ae9ea235b7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; guint32 &gt;</type>
      <name>property_scope_id</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>a3df368096dc7782730f6a2c09246de6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>a7fe192f0c08e62a5460a8ee8918d0ba7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; InetSocketAddress &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>a863fb8d260958e69d603e2903595a973</anchor>
      <arglist>(const Glib::RefPtr&lt; InetAddress &gt; &amp;address, guint16 port)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>InetSocketAddress</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>a54cf3e5885e7c14a26017ccdc5f552e8</anchor>
      <arglist>(const Glib::RefPtr&lt; InetAddress &gt; &amp;address, guint16 port)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::InetSocketAddress &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>a4498f65e8445567d4cacdc0a68437c33</anchor>
      <arglist>(GInetSocketAddress *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::Initable</name>
    <filename>classGio_1_1Initable.html</filename>
    <base>Glib::Interface</base>
    <member kind="function">
      <type></type>
      <name>Initable</name>
      <anchorfile>classGio_1_1Initable.html</anchorfile>
      <anchor>a80cb70756e778fe83023ab4f80706eed</anchor>
      <arglist>(Initable &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Initable &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1Initable.html</anchorfile>
      <anchor>a6b30589991f534cb7ffba2f12e5d359b</anchor>
      <arglist>(Initable &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Initable</name>
      <anchorfile>classGio_1_1Initable.html</anchorfile>
      <anchor>affc028638b8d8ba9da18d14e6d121c35</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GInitable *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Initable.html</anchorfile>
      <anchor>a90206d58591c674e03c5de57623bac18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GInitable *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Initable.html</anchorfile>
      <anchor>a8b67027b5f1502a631c7ef1064533bdc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1Initable.html</anchorfile>
      <anchor>a6b68b1a2c2ab02ed1f25887c7acd121c</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Initable.html</anchorfile>
      <anchor>a6a76f2678aa3641f7ded51813d9ead43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Initable</name>
      <anchorfile>classGio_1_1Initable.html</anchorfile>
      <anchor>a239fb2aa148d653d534db5581d72c348</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>classGio_1_1Initable.html</anchorfile>
      <anchor>a7dbee3b8e980bf52ae2a66e1523127a3</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>classGio_1_1Initable.html</anchorfile>
      <anchor>a5881cf9c259d5af218585b7ecde38464</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>init_vfunc</name>
      <anchorfile>classGio_1_1Initable.html</anchorfile>
      <anchor>a53c86a53352ecda8bca80d5132e4e99c</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, GError **error)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Initable &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Initable.html</anchorfile>
      <anchor>a9a2f7929de61e6b32a2317fe0ebde865</anchor>
      <arglist>(GInitable *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::InputStream</name>
    <filename>classGio_1_1InputStream.html</filename>
    <base>Glib::Object</base>
    <member kind="function">
      <type></type>
      <name>InputStream</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a28023142af94370f993180e120a6c4c6</anchor>
      <arglist>(InputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>InputStream &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a24acc8b43b115e06aa672ff1ba1848f6</anchor>
      <arglist>(InputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InputStream</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a3d7103f42638aa3a1b97029b759c979e</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a2ed1120b3d03a12086e7f0ed3946aba1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>adee6c7aee7232c118cff646c62e0c020</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GInputStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a28a9394b07e9183c0c79798ea344c65c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>read</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a49a1f4219f96c7fafdcf1ed12eb443e2</anchor>
      <arglist>(void *buffer, gsize count, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>read</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a42ab2486116d40f6ef828277befb508a</anchor>
      <arglist>(void *buffer, gsize count)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_all</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a1dc8a2babf32f93a0a5dccc0c39e0959</anchor>
      <arglist>(void *buffer, gsize count, gsize &amp;bytes_read, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_all</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a6da0fc57d1a5df7107370c67e84aa496</anchor>
      <arglist>(void *buffer, gsize count, gsize &amp;bytes_read)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Glib::Bytes &gt;</type>
      <name>read_bytes</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>af59e44aed65ee329e01d6ca6179e97b9</anchor>
      <arglist>(gsize count, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_bytes_async</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a9653d83a56cef6201286ff5f4b709050</anchor>
      <arglist>(gsize count, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_bytes_async</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>af70a7c9073f6a494c8fac975530130c9</anchor>
      <arglist>(gsize count, const SlotAsyncReady &amp;slot, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Glib::Bytes &gt;</type>
      <name>read_bytes_finish</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a0b38e525397cddd9ae4b2ebb395ba3b3</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>skip</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a17ea65f35c15043156db90af831a44a3</anchor>
      <arglist>(gsize count, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>skip</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a1ea9146d612c666168886734b79a5d65</anchor>
      <arglist>(gsize count)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>close</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a1b76b2503e607475f63731a886456e09</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>close</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a7a3202cf7014bcfb2c0a7f301448ae50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_async</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a5b7762ee3f3c571fbc59a0c9af6e879e</anchor>
      <arglist>(void *buffer, gsize count, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_async</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a05bea76fa9ac3c098a167d2b377e36a6</anchor>
      <arglist>(void *buffer, gsize count, const SlotAsyncReady &amp;slot, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>read_finish</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>ac089ab220e671ba0af2dd97f2405c0c5</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_all_async</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a53bcade80696b55e8cc2d681f75a5a6c</anchor>
      <arglist>(void *buffer, gsize count, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_all_async</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a5aaa7077beacffca6b4cccbf9d4f432a</anchor>
      <arglist>(void *buffer, gsize count, const SlotAsyncReady &amp;slot, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_all_finish</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>af59e759b782eebfa256d9116aa8baada</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result, gsize &amp;bytes_read)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>skip_async</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a1bf7a4a30005813b0a46e069215907a2</anchor>
      <arglist>(gsize count, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>skip_async</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a111e86dad4548394edcff16d7735d2d5</anchor>
      <arglist>(gsize count, const SlotAsyncReady &amp;slot, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>skip_finish</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a1522468bd203ab3082ab54e9eba68b03</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close_async</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>af66159778ee2d577e9df52063ced53bf</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close_async</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>ab5160982124f34ed6e475776acd126d2</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>gboolean</type>
      <name>close_finish</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>ae5a0d2c3ccf27661e374f151117a8fb7</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_closed</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>aa2c273459d77a6b1dfc17507d69f0ff6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_pending</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>abcbaaf2697e9a69ef1338be292a2ac4d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a0c4d454f8b892bcfc951740ddaa6f4da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>InputStream</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a14f2b745d957091a056365a94b4b7277</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>set_pending</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a8312a9bd42ae3756a1ace0fb8f41057a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clear_pending</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a9faed0424ed6a494af55ab2ccefee84a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::InputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>aec580b0fc1e0807d7ccba6cbb7e302db</anchor>
      <arglist>(GInputStream *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::IOStream</name>
    <filename>classGio_1_1IOStream.html</filename>
    <base>Glib::Object</base>
    <member kind="function">
      <type></type>
      <name>IOStream</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>a4395412ad295060cffbf860060ae386f</anchor>
      <arglist>(IOStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>IOStream &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>aca439b2e92b057abec3ee71054fba4cf</anchor>
      <arglist>(IOStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IOStream</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>a953f45dc10076cd2c4c4371bf2adcb49</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GIOStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>a6e8d13f8095555cecbe0d59f1542893f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GIOStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>a7a9496d0fa3fe4397ef84cdd5aca6c6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GIOStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>a632594c5b02e0311448e79f6d495c65a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>splice_async</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>a43e681134d2fd80d3c88ebc79fae1eae</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream2, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, IOStreamSpliceFlags flags=Gio::IO_STREAM_SPLICE_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>splice_async</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>ad883aab2d96422b0916befd71b73616e</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream2, const SlotAsyncReady &amp;slot, IOStreamSpliceFlags flags=Gio::IO_STREAM_SPLICE_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; InputStream &gt;</type>
      <name>get_input_stream</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>afab74f0f339afb505556f6cb8b8c2b45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; OutputStream &gt;</type>
      <name>get_output_stream</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>acdea8fc29d817070fa9cca124f398930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>close</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>ae22ea1e4e3cd6db48b5e012f35a2306d</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>close</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>a7d9c63eb525827d27f897d6823f719a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close_async</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>a289fe0ef58e44117952a2e01985afdd7</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close_async</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>a41451e389068b3a61245b43695186ee6</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>close_finish</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>a205a044f155178460336bd6efd05554c</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_closed</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>a3dca30d5780c66c128e646e331713bb0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_pending</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>a7e8d03c3ed36aeb5398a06bc0a8af75a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_pending</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>a7217e0c7ef1659a8b293a81e5b2e95e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_pending</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>ac15dc0ec5596a9bb5ee174ea70a2b59d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>afc95fae98d93047a351166770a19732e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>splice_finish</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>a75fe59f3909d44e704dbc6684e0b368e</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::IOStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>a13101385680c3857e7027d78e1f6259a</anchor>
      <arglist>(GIOStream *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::ListModel</name>
    <filename>classGio_1_1ListModel.html</filename>
    <base>Glib::Interface</base>
    <member kind="function">
      <type></type>
      <name>ListModel</name>
      <anchorfile>classGio_1_1ListModel.html</anchorfile>
      <anchor>a1c9d07af79dd9738d5429a01b7c0f635</anchor>
      <arglist>(ListModel &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ListModel &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1ListModel.html</anchorfile>
      <anchor>af7557bcb6ac1dcb02a3b20807a8e2320</anchor>
      <arglist>(ListModel &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ListModel</name>
      <anchorfile>classGio_1_1ListModel.html</anchorfile>
      <anchor>a42fc14d2965c8db216f85b1af36a9c66</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GListModel *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ListModel.html</anchorfile>
      <anchor>a9f48b40e8db4d2c81f8f995c2764d2f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GListModel *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ListModel.html</anchorfile>
      <anchor>acdd0dfbe07053ef069e88cb5ca1a0309</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GType</type>
      <name>get_item_type</name>
      <anchorfile>classGio_1_1ListModel.html</anchorfile>
      <anchor>a077daba38371c8e8f971fe9202647d30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>get_n_items</name>
      <anchorfile>classGio_1_1ListModel.html</anchorfile>
      <anchor>ac23d01ef62c4e280313ac96c73fe6188</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Glib::ObjectBase &gt;</type>
      <name>get_object</name>
      <anchorfile>classGio_1_1ListModel.html</anchorfile>
      <anchor>a4a1ae5479cc24ae566c6a1a352a13a27</anchor>
      <arglist>(guint position)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Glib::ObjectBase &gt;</type>
      <name>get_object</name>
      <anchorfile>classGio_1_1ListModel.html</anchorfile>
      <anchor>aeb32fa5ad931d73108db4a4e9b40d859</anchor>
      <arglist>(guint position) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, guint, guint, guint &gt;</type>
      <name>signal_items_changed</name>
      <anchorfile>classGio_1_1ListModel.html</anchorfile>
      <anchor>abe829c91828abe2012cc8c1e04fcf089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GType</type>
      <name>get_item_type_vfunc</name>
      <anchorfile>classGio_1_1ListModel.html</anchorfile>
      <anchor>a7724ae944add4b4c4841f0da82a6b1ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual guint</type>
      <name>get_n_items_vfunc</name>
      <anchorfile>classGio_1_1ListModel.html</anchorfile>
      <anchor>a13bde468fac45f9ed233deee0bdd44eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gpointer</type>
      <name>get_item_vfunc</name>
      <anchorfile>classGio_1_1ListModel.html</anchorfile>
      <anchor>a1833c3f9f79136e255c6a7a48b4fd817</anchor>
      <arglist>(guint position)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1ListModel.html</anchorfile>
      <anchor>a9d189b21d54f8d19351a77e517792f21</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1ListModel.html</anchorfile>
      <anchor>a1c20b42c1ea8fd1b0a2946848f9339b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ListModel</name>
      <anchorfile>classGio_1_1ListModel.html</anchorfile>
      <anchor>a6b9ef1615a25d6013114e42f81242a69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>items_changed</name>
      <anchorfile>classGio_1_1ListModel.html</anchorfile>
      <anchor>a32df8d7b424957a56ff9751decd89ae8</anchor>
      <arglist>(guint position, guint removed, guint added)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::ListModel &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1ListModel.html</anchorfile>
      <anchor>aff66ba330b55ccfa29d7a6da0c656277</anchor>
      <arglist>(GListModel *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::ListStore</name>
    <filename>classGio_1_1ListStore.html</filename>
    <templarg></templarg>
    <base>Gio::ListStoreBase</base>
    <member kind="typedef">
      <type>sigc::slot&lt; int, const Glib::RefPtr&lt; const T_item &gt; &amp;, const Glib::RefPtr&lt; const T_item &gt; &amp; &gt;</type>
      <name>SlotCompare</name>
      <anchorfile>classGio_1_1ListStore.html</anchorfile>
      <anchor>afda1e2150997da9023d9101f91f5385e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; T_item &gt;</type>
      <name>get_item</name>
      <anchorfile>classGio_1_1ListStore.html</anchorfile>
      <anchor>a128b04aae751da1592f6c30343c2182d</anchor>
      <arglist>(guint position)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const T_item &gt;</type>
      <name>get_item</name>
      <anchorfile>classGio_1_1ListStore.html</anchorfile>
      <anchor>a074569c755aa4e979bee4ebfef425235</anchor>
      <arglist>(guint position) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classGio_1_1ListStore.html</anchorfile>
      <anchor>a776e92833982436d9d446fe2a9974ad2</anchor>
      <arglist>(guint position, const Glib::RefPtr&lt; T_item &gt; &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>insert_sorted</name>
      <anchorfile>classGio_1_1ListStore.html</anchorfile>
      <anchor>a67dba30fc22a92cef4f166523e1d202c</anchor>
      <arglist>(const Glib::RefPtr&lt; T_item &gt; &amp;item, const SlotCompare &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classGio_1_1ListStore.html</anchorfile>
      <anchor>aac378ab61be80b48d2d6d5cda4b97185</anchor>
      <arglist>(const SlotCompare &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classGio_1_1ListStore.html</anchorfile>
      <anchor>a19b1216f8ae23de524d26d1fb429dce0</anchor>
      <arglist>(const Glib::RefPtr&lt; T_item &gt; &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>splice</name>
      <anchorfile>classGio_1_1ListStore.html</anchorfile>
      <anchor>a1e8f9aeafb040b3d6d4a246d352a0255</anchor>
      <arglist>(guint position, guint n_removals, const std::vector&lt; Glib::RefPtr&lt; T_item &gt;&gt; &amp;additions)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; ListStore &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1ListStore.html</anchorfile>
      <anchor>ae1e1d177881a2a1c787ac0df97efbf86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ListStore</name>
      <anchorfile>classGio_1_1ListStore.html</anchorfile>
      <anchor>a234545f7efe2d6cde8b457e341c5a684</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::ListStoreBase</name>
    <filename>classGio_1_1ListStoreBase.html</filename>
    <base>Glib::Object</base>
    <base>Gio::ListModel</base>
    <member kind="typedef">
      <type>sigc::slot&lt; int, const Glib::RefPtr&lt; const Glib::ObjectBase &gt; &amp;, const Glib::RefPtr&lt; const Glib::ObjectBase &gt; &amp; &gt;</type>
      <name>SlotCompare</name>
      <anchorfile>classGio_1_1ListStoreBase.html</anchorfile>
      <anchor>a519bbd240f14ae2649f9883ec663d4c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListStoreBase</name>
      <anchorfile>classGio_1_1ListStoreBase.html</anchorfile>
      <anchor>ab67c9e0eaf337b0ee9615273189a69e7</anchor>
      <arglist>(ListStoreBase &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ListStoreBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1ListStoreBase.html</anchorfile>
      <anchor>a2b90742b7fc94526eecc514245e0528c</anchor>
      <arglist>(ListStoreBase &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ListStoreBase</name>
      <anchorfile>classGio_1_1ListStoreBase.html</anchorfile>
      <anchor>a9b3bff2e355691330ec5b60d2aac3836</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GListStore *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ListStoreBase.html</anchorfile>
      <anchor>a0a32c140a7dbd6583b59e67d040712f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GListStore *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ListStoreBase.html</anchorfile>
      <anchor>a7a505f9421cfb961806f2e3cc19e205a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GListStore *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1ListStoreBase.html</anchorfile>
      <anchor>aa0880caf6a1ab9704980efcb69926d8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classGio_1_1ListStoreBase.html</anchorfile>
      <anchor>a5a4d7d2904664c427dfa36485dc1ac70</anchor>
      <arglist>(guint position, const Glib::RefPtr&lt; Glib::ObjectBase &gt; &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>insert_sorted</name>
      <anchorfile>classGio_1_1ListStoreBase.html</anchorfile>
      <anchor>afceac0ac58d01bb343488a654d3d72ea</anchor>
      <arglist>(const Glib::RefPtr&lt; Glib::ObjectBase &gt; &amp;item, const SlotCompare &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classGio_1_1ListStoreBase.html</anchorfile>
      <anchor>a6dfa066cedfa6699d63aba2ec829779f</anchor>
      <arglist>(const SlotCompare &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classGio_1_1ListStoreBase.html</anchorfile>
      <anchor>ade673ba5b72e9f3d66cf8c7f0e0b7aba</anchor>
      <arglist>(const Glib::RefPtr&lt; Glib::ObjectBase &gt; &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classGio_1_1ListStoreBase.html</anchorfile>
      <anchor>a8897811e2927f039b206fb54edce57dd</anchor>
      <arglist>(guint position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_all</name>
      <anchorfile>classGio_1_1ListStoreBase.html</anchorfile>
      <anchor>a5c5ea33935f3b91caa4f1d80f0f01811</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>splice</name>
      <anchorfile>classGio_1_1ListStoreBase.html</anchorfile>
      <anchor>a04188c7cb3e31ee2fb8c955dc358a6d8</anchor>
      <arglist>(guint position, guint n_removals, const std::vector&lt; Glib::RefPtr&lt; Glib::ObjectBase &gt;&gt; &amp;additions)</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; GType &gt;</type>
      <name>property_item_type</name>
      <anchorfile>classGio_1_1ListStoreBase.html</anchorfile>
      <anchor>ae326f08c9e160712b882f5baeb6a1910</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1ListStoreBase.html</anchorfile>
      <anchor>a130d7a9c0d4024acc4be39baf5802a25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; ListStoreBase &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1ListStoreBase.html</anchorfile>
      <anchor>a1ea7cb3446c89892e564e2b3f1418bbf</anchor>
      <arglist>(GType item_type)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ListStoreBase</name>
      <anchorfile>classGio_1_1ListStoreBase.html</anchorfile>
      <anchor>a97dc46e5f50c39d493d08101bece3906</anchor>
      <arglist>(GType item_type)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::ListStoreBase &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1ListStoreBase.html</anchorfile>
      <anchor>ac0396d9338dee71abb13f60cfcc7e0f5</anchor>
      <arglist>(GListStore *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::LoadableIcon</name>
    <filename>classGio_1_1LoadableIcon.html</filename>
    <base>Gio::Icon</base>
    <member kind="function">
      <type></type>
      <name>LoadableIcon</name>
      <anchorfile>classGio_1_1LoadableIcon.html</anchorfile>
      <anchor>af3396adb37572185ad69292fd0e105a9</anchor>
      <arglist>(LoadableIcon &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LoadableIcon &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1LoadableIcon.html</anchorfile>
      <anchor>a186da0e87feb7b4fa66a0ae96414414f</anchor>
      <arglist>(LoadableIcon &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LoadableIcon</name>
      <anchorfile>classGio_1_1LoadableIcon.html</anchorfile>
      <anchor>a167bff7af0f36ac1ce42717fb21f01f2</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GLoadableIcon *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1LoadableIcon.html</anchorfile>
      <anchor>aa590b3b76843c19f5dbf51448f30e9f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GLoadableIcon *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1LoadableIcon.html</anchorfile>
      <anchor>ae0a6c501d5a70776ee41b3d16705565c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; InputStream &gt;</type>
      <name>load</name>
      <anchorfile>classGio_1_1LoadableIcon.html</anchorfile>
      <anchor>af92f75fd1b6d4284e169c199a2c6b8c3</anchor>
      <arglist>(int size, Glib::ustring &amp;type, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; InputStream &gt;</type>
      <name>load</name>
      <anchorfile>classGio_1_1LoadableIcon.html</anchorfile>
      <anchor>acd3a877867f4ca2cbf5b1a5b059e2eb6</anchor>
      <arglist>(int size, Glib::ustring &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_async</name>
      <anchorfile>classGio_1_1LoadableIcon.html</anchorfile>
      <anchor>a0218104cdd576b7dde4846de9b997e41</anchor>
      <arglist>(int size, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_async</name>
      <anchorfile>classGio_1_1LoadableIcon.html</anchorfile>
      <anchor>a3e2f5cf5ef217e53e6dfcbd83cc553e1</anchor>
      <arglist>(int size, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1LoadableIcon.html</anchorfile>
      <anchor>aac15ee4e49c92f2822760cc774f908d8</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1LoadableIcon.html</anchorfile>
      <anchor>a73e373810087a0e2d13e47ab47c822c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LoadableIcon</name>
      <anchorfile>classGio_1_1LoadableIcon.html</anchorfile>
      <anchor>a6ace9bdbe5a19a4a488ad8d6ffb0e06e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::LoadableIcon &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1LoadableIcon.html</anchorfile>
      <anchor>afa55d29b9394247f8824820bb92e8e6b</anchor>
      <arglist>(GLoadableIcon *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::MemoryInputStream</name>
    <filename>classGio_1_1MemoryInputStream.html</filename>
    <base>Gio::InputStream</base>
    <base>Gio::Seekable</base>
    <member kind="typedef">
      <type>sigc::slot&lt; void, void * &gt;</type>
      <name>SlotDestroyData</name>
      <anchorfile>classGio_1_1MemoryInputStream.html</anchorfile>
      <anchor>aeec3e71d003e09d9551a3c325885cf1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MemoryInputStream</name>
      <anchorfile>classGio_1_1MemoryInputStream.html</anchorfile>
      <anchor>a9cc60588a7f55dd73202488454f38d81</anchor>
      <arglist>(MemoryInputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MemoryInputStream &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1MemoryInputStream.html</anchorfile>
      <anchor>a2c8fea43f720d6f66d01f1b5caf0df2a</anchor>
      <arglist>(MemoryInputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MemoryInputStream</name>
      <anchorfile>classGio_1_1MemoryInputStream.html</anchorfile>
      <anchor>aceb2b3516efdd6e98266e6c2c35b2f9b</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GMemoryInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1MemoryInputStream.html</anchorfile>
      <anchor>a076380153e01599446bd991e0985db69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GMemoryInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1MemoryInputStream.html</anchorfile>
      <anchor>aed27fa7bef80a4afb067c7d3880145c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GMemoryInputStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1MemoryInputStream.html</anchorfile>
      <anchor>af63cbdce2036e383cb7e77a7df83651c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_data</name>
      <anchorfile>classGio_1_1MemoryInputStream.html</anchorfile>
      <anchor>a483a0f4811f64a0a83204e22c227bf80</anchor>
      <arglist>(const std::string &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_data</name>
      <anchorfile>classGio_1_1MemoryInputStream.html</anchorfile>
      <anchor>a9700ab039b7d4654330f2786bd8786eb</anchor>
      <arglist>(const void *data, gssize len)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_data</name>
      <anchorfile>classGio_1_1MemoryInputStream.html</anchorfile>
      <anchor>aa26832ff7a8bce5cc15518d5a2f0a14b</anchor>
      <arglist>(const void *data, gssize len, GDestroyNotify destroy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_data</name>
      <anchorfile>classGio_1_1MemoryInputStream.html</anchorfile>
      <anchor>a5afddef83fb3c506a55caa0130825268</anchor>
      <arglist>(const void *data, gssize len, const SlotDestroyData &amp;destroy_slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_bytes</name>
      <anchorfile>classGio_1_1MemoryInputStream.html</anchorfile>
      <anchor>a03eeb3228eb4a03e4c0c975c89bd04ca</anchor>
      <arglist>(const Glib::RefPtr&lt; const Glib::Bytes &gt; &amp;bytes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1MemoryInputStream.html</anchorfile>
      <anchor>a20b123ac1fc94d3b8c531cb28ec37add</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; MemoryInputStream &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1MemoryInputStream.html</anchorfile>
      <anchor>adb6e55009e51b59fa19dcd69617cfda1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MemoryInputStream</name>
      <anchorfile>classGio_1_1MemoryInputStream.html</anchorfile>
      <anchor>a3878e7ba1b947b72a8ab835e2ff24473</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::MemoryInputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1MemoryInputStream.html</anchorfile>
      <anchor>a37bf0e5204e95253e4119ad954b3f7b9</anchor>
      <arglist>(GMemoryInputStream *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::MemoryOutputStream</name>
    <filename>classGio_1_1MemoryOutputStream.html</filename>
    <base>Gio::OutputStream</base>
    <base>Gio::Seekable</base>
    <member kind="function">
      <type></type>
      <name>MemoryOutputStream</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>a89a77d46dd5715125deec46aed1d30e6</anchor>
      <arglist>(MemoryOutputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MemoryOutputStream &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>a16355acd02e2b888e41c195493da5426</anchor>
      <arglist>(MemoryOutputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MemoryOutputStream</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>afcd153611b3c6898cbbad8b9494bfca5</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GMemoryOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>a3a52447ebfbc60722ced10d8aa625825</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GMemoryOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>a2ae08e8f19f6b497d4c55e8bb2eca989</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GMemoryOutputStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>aa6b728d48c0817347df70d41bd57708f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>get_data</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>af3260b7ddbda5b7eb0447de717c7fb67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>get_data</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>ab842bfd249547a3b2c6899b8a7d75123</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>steal_data</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>a35fc40bebe06f1b305795c9a44ba23f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>gsize</type>
      <name>get_size</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>a1e5fe0e54faff62b34a619fddc0745e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>gsize</type>
      <name>get_data_size</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>ad89a87c7b13eb5b9a1380cef1a8da6fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Glib::Bytes &gt;</type>
      <name>steal_as_bytes</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>a56d9ea009c1e3c0b3ecdfb87233d0c12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; void *&gt;</type>
      <name>property_data</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>abada54dd1dc7f18f65f061331b1d88b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; gulong &gt;</type>
      <name>property_data_size</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>a4b0f654a2a72c7c502bbb8108135fd1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; gulong &gt;</type>
      <name>property_size</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>a4518d0451f0a9f2d97fd0bd24ccc2fcd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>a5394efb6174ba62c48fc04efd31f1271</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; MemoryOutputStream &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>a14bf958ac2cae6326ff46f1e66b82d3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; MemoryOutputStream &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>a7348c98dc71c1ff04c404df77515011d</anchor>
      <arglist>(void *data, gsize size, GReallocFunc realloc_function, GDestroyNotify destroy_function)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MemoryOutputStream</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>ad36af035782933cf84c022090d40b4f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MemoryOutputStream</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>acdedb0b457edf81294061bef3289b9b4</anchor>
      <arglist>(void *data, gsize size, GReallocFunc realloc_function, GDestroyNotify destroy_function)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::MemoryOutputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>a294410b0d5c9b2d1a08dc9375338f187</anchor>
      <arglist>(GMemoryOutputStream *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::Menu</name>
    <filename>classGio_1_1Menu.html</filename>
    <base>Gio::MenuModel</base>
    <member kind="function">
      <type></type>
      <name>Menu</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>ad7a2de7eea3416618b1f9106b13b1513</anchor>
      <arglist>(Menu &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Menu &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a4c013e517c75308c42e8e96f59eb8ba8</anchor>
      <arglist>(Menu &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Menu</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a6e3802cda915600edabae1b00e21c6ac</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GMenu *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a929f4a1d842ee720a52a3c0389154ccd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GMenu *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>ae1cd32daaef12508d9cba0b333233be4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GMenu *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a7e42abd72d5abdd822ce6a0256750f92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeze</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a2368b3763316dc6644c6f55386feb7f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert_item</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a4d7fa8eb14f059503a9ee130a306e555</anchor>
      <arglist>(int position, const Glib::RefPtr&lt; MenuItem &gt; &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepend_item</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a85a974793a615ed9188cefa6bebc1a12</anchor>
      <arglist>(const Glib::RefPtr&lt; MenuItem &gt; &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append_item</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>ae633f3a93f25a8ad687da1b41863fac1</anchor>
      <arglist>(const Glib::RefPtr&lt; MenuItem &gt; &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a83a161993128b47345e86b227da5821e</anchor>
      <arglist>(int position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_all</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a2b4cdc6c85bec137d17eddf92a09c9f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a850db3f0691c4631c882853a235064ee</anchor>
      <arglist>(int position, const Glib::ustring &amp;label, const Glib::ustring &amp;detailed_action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a47dddd4957d585bdb979d06f01930d33</anchor>
      <arglist>(int position, const Glib::ustring &amp;label)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepend</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>ade54de0d1615c9a0099bca077c897c9b</anchor>
      <arglist>(const Glib::ustring &amp;label, const Glib::ustring &amp;detailed_action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepend</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a3944b9916e55e508cede3204cc365b70</anchor>
      <arglist>(const Glib::ustring &amp;label)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a0cf7e95764bcd539f11aaae1820278be</anchor>
      <arglist>(const Glib::ustring &amp;label, const Glib::ustring &amp;detailed_action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a16475a25c0b6fe6fe83a6beea1ce6f49</anchor>
      <arglist>(const Glib::ustring &amp;label)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert_section</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a2eba90ac2b9b7a0d5c1cf5cf4aea3109</anchor>
      <arglist>(int position, const Glib::ustring &amp;label, const Glib::RefPtr&lt; MenuModel &gt; &amp;section)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert_section</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a421da2fd681d904c52e5aec521577926</anchor>
      <arglist>(int position, const Glib::RefPtr&lt; MenuModel &gt; &amp;section)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepend_section</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>abf9e550519559f64a8f9b07cdd13a932</anchor>
      <arglist>(const Glib::ustring &amp;label, const Glib::RefPtr&lt; MenuModel &gt; &amp;section)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepend_section</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a84e31163b2b09bc07946db08bcfc3043</anchor>
      <arglist>(const Glib::RefPtr&lt; MenuModel &gt; &amp;section)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append_section</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>ab3fc029fff37abf97a46462c7c21412c</anchor>
      <arglist>(const Glib::ustring &amp;label, const Glib::RefPtr&lt; MenuModel &gt; &amp;section)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append_section</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a87c353b1713217ea39c1e7bc47ac0886</anchor>
      <arglist>(const Glib::RefPtr&lt; MenuModel &gt; &amp;section)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert_submenu</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a8f3ac0c4bc2c7101dae78a504b9e14ea</anchor>
      <arglist>(int position, const Glib::ustring &amp;label, const Glib::RefPtr&lt; MenuModel &gt; &amp;submenu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepend_submenu</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a671400b0cfc1153966372b101aa543c1</anchor>
      <arglist>(const Glib::ustring &amp;label, const Glib::RefPtr&lt; MenuModel &gt; &amp;submenu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append_submenu</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a895cbbba112cd0321fd3bac2314f5e19</anchor>
      <arglist>(const Glib::ustring &amp;label, const Glib::RefPtr&lt; MenuModel &gt; &amp;submenu)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a30a99f90e82c94204304b808e40c3a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Menu &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a5a1507929168dc50efbacae44af3ffb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Menu</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>aeb7862542979341cc01191b85726a826</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Menu &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a3aaa636051265b892b0c392699cb8a7e</anchor>
      <arglist>(GMenu *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::MenuAttributeIter</name>
    <filename>classGio_1_1MenuAttributeIter.html</filename>
    <base>Glib::Object</base>
    <member kind="function">
      <type></type>
      <name>MenuAttributeIter</name>
      <anchorfile>classGio_1_1MenuAttributeIter.html</anchorfile>
      <anchor>a36048350ab0db4909bfb99104b1c08f4</anchor>
      <arglist>(MenuAttributeIter &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MenuAttributeIter &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1MenuAttributeIter.html</anchorfile>
      <anchor>adc4b7e35b417e959aef022c3406cc3ff</anchor>
      <arglist>(MenuAttributeIter &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MenuAttributeIter</name>
      <anchorfile>classGio_1_1MenuAttributeIter.html</anchorfile>
      <anchor>aaf44b70d820f594c11f4d45028589ef7</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GMenuAttributeIter *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1MenuAttributeIter.html</anchorfile>
      <anchor>ad26eb0bcf9fa13bdbda556678457cff9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GMenuAttributeIter *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1MenuAttributeIter.html</anchorfile>
      <anchor>a0a55d1f95d1007651be111547f397f60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GMenuAttributeIter *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1MenuAttributeIter.html</anchorfile>
      <anchor>a070bf7635add9b14980dc3f705d1bfd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_next</name>
      <anchorfile>classGio_1_1MenuAttributeIter.html</anchorfile>
      <anchor>a809969cbb9da566e4d432cabb98e8597</anchor>
      <arglist>(Glib::ustring &amp;out_name, Glib::VariantBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_name</name>
      <anchorfile>classGio_1_1MenuAttributeIter.html</anchorfile>
      <anchor>ae6f729023aa69c2289b221a70255a976</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantBase</type>
      <name>get_value</name>
      <anchorfile>classGio_1_1MenuAttributeIter.html</anchorfile>
      <anchor>a25cb8fd694f5c65c080bbc3405114d33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Glib::VariantBase</type>
      <name>get_value</name>
      <anchorfile>classGio_1_1MenuAttributeIter.html</anchorfile>
      <anchor>a75f2438962d40c907b2e7230bfbca2b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next</name>
      <anchorfile>classGio_1_1MenuAttributeIter.html</anchorfile>
      <anchor>a698c1c012ae1c675a41d952469d794dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1MenuAttributeIter.html</anchorfile>
      <anchor>a1ef59bc349ab7eb026f33885332e2b47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MenuAttributeIter</name>
      <anchorfile>classGio_1_1MenuAttributeIter.html</anchorfile>
      <anchor>a857040ab829ed6ab6fdc8869f78afe6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::MenuAttributeIter &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1MenuAttributeIter.html</anchorfile>
      <anchor>acb20cc0c2e6df6f49884b0e74d8b559b</anchor>
      <arglist>(GMenuAttributeIter *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::MenuItem</name>
    <filename>classGio_1_1MenuItem.html</filename>
    <base>Glib::Object</base>
    <member kind="function">
      <type></type>
      <name>MenuItem</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>ac5b06e6f3cf7148ae4018bfd2885b4da</anchor>
      <arglist>(MenuItem &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MenuItem &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a4082efec759c67558451347ef2b52f36</anchor>
      <arglist>(MenuItem &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MenuItem</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>ad94b7c4739b9e7c210c6cde99ff74cc4</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GMenuItem *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a12ca5edb28f3bf7516bfb45236db02d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GMenuItem *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a49474d264839b4d5ce7907f7c0391118</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GMenuItem *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a6b214d265df9ef9a8452327fe79bae43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_attribute_value</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>aad911d89dbb48ac90f18e14faba2f3be</anchor>
      <arglist>(const Glib::ustring &amp;attribute, const Glib::VariantBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_attribute</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a5af6c5ee37b8ef1218587434ae3cf1b6</anchor>
      <arglist>(const Glib::ustring &amp;attribute, const Glib::VariantBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; MenuModel &gt;</type>
      <name>get_link</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a8625449f52402411f9d7391340ae606d</anchor>
      <arglist>(const Glib::ustring &amp;link)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const MenuModel &gt;</type>
      <name>get_link</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>ab2677a1c83530746cf189d827011a426</anchor>
      <arglist>(const Glib::ustring &amp;link) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_link</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>aaac02ded419000a186cfd376d65f9267</anchor>
      <arglist>(const Glib::ustring &amp;link, const Glib::RefPtr&lt; MenuModel &gt; &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a92948a899a3ceab9bb8008b37128e63d</anchor>
      <arglist>(const Glib::ustring &amp;label)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_submenu</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>ac3562d8a32bf6610e462bcbdafed5263</anchor>
      <arglist>(const Glib::RefPtr&lt; MenuModel &gt; &amp;submenu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_section</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a2361bda22895d8028023e51c6ddc9113</anchor>
      <arglist>(const Glib::RefPtr&lt; MenuModel &gt; &amp;section)</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantBase</type>
      <name>get_attribute</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a86efe29938a0fb58d97aac43d13c4b79</anchor>
      <arglist>(const Glib::ustring &amp;attribute, const Glib::VariantType &amp;expected_type) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantBase</type>
      <name>get_attribute</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>ab5b3a71423c16bd224558563691ce556</anchor>
      <arglist>(const Glib::ustring &amp;attribute) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantBase</type>
      <name>get_attribute_value</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a61476a7915db6b7b1d24ca6e6473797a</anchor>
      <arglist>(const Glib::ustring &amp;attribute, const Glib::VariantType &amp;expected_type) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantBase</type>
      <name>get_attribute_value</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a66dd494345a3ad63a06733ed73d27e15</anchor>
      <arglist>(const Glib::ustring &amp;attribute) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_action_and_target</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a2aa16d26522f85c676522dd8b3c0c7f7</anchor>
      <arglist>(const Glib::ustring &amp;action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_action</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a53f0a4dead4877377565f4cc7f2d76f9</anchor>
      <arglist>(const Glib::ustring &amp;action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unset_target</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a1094d0c94f886bd37c4ca631c50e2c6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unset_action_and_target</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a46de41b649a31272dc2b13fd69e96e5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_action_and_target</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a2f7175f1e5c5f132516956911f11fc0f</anchor>
      <arglist>(const Glib::ustring &amp;action, const Glib::VariantBase &amp;target_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_detailed_action</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>ae799faf2fb9fde82359468c1edef33d3</anchor>
      <arglist>(const Glib::ustring &amp;detailed_action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_icon</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>af6f3dd7fa08452e06e53751ad5947537</anchor>
      <arglist>(const Glib::RefPtr&lt; Icon &gt; &amp;icon)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unset_icon</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>ae1228a7693f6cd414b8beab4fe50c62c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>ac1d7557f96575ef4fcdc1ced749ae81e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; MenuItem &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a98b148e8ff40b4937a0494e671fad42a</anchor>
      <arglist>(const Glib::ustring &amp;label, const Glib::ustring &amp;detailed_action)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; MenuItem &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a0c47463cc423e29c91f38e4c8d84fa88</anchor>
      <arglist>(const Glib::ustring &amp;label, const Glib::RefPtr&lt; MenuModel &gt; &amp;submenu)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; MenuItem &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a08361e9a4036be549c802454aa9c656c</anchor>
      <arglist>(const Glib::RefPtr&lt; MenuModel &gt; &amp;submenu)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MenuItem</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a7811f82a7c5b2483c37667ef4517b7de</anchor>
      <arglist>(const Glib::ustring &amp;label=Glib::ustring(), const Glib::ustring &amp;detailed_action=Glib::ustring())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MenuItem</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a066cca32dbb3b49f985cdba0aba93ca6</anchor>
      <arglist>(const Glib::ustring &amp;label, const Glib::RefPtr&lt; MenuModel &gt; &amp;submenu)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MenuItem</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a10620c7394969858d88bd5611e5cc9a8</anchor>
      <arglist>(const Glib::RefPtr&lt; MenuModel &gt; &amp;submenu)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::MenuItem &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a923b0dcf6c58eef630f81fd8f6d9046b</anchor>
      <arglist>(GMenuItem *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::MenuLinkIter</name>
    <filename>classGio_1_1MenuLinkIter.html</filename>
    <base>Glib::Object</base>
    <member kind="function">
      <type></type>
      <name>MenuLinkIter</name>
      <anchorfile>classGio_1_1MenuLinkIter.html</anchorfile>
      <anchor>a270d8b5545e28ee56cfb9d1cfb51b4bb</anchor>
      <arglist>(MenuLinkIter &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MenuLinkIter &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1MenuLinkIter.html</anchorfile>
      <anchor>a43ea0c9875ce945bd9182dac13662a80</anchor>
      <arglist>(MenuLinkIter &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MenuLinkIter</name>
      <anchorfile>classGio_1_1MenuLinkIter.html</anchorfile>
      <anchor>a1e8b8159ff2b19236e21c3fc9f017625</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GMenuLinkIter *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1MenuLinkIter.html</anchorfile>
      <anchor>a173b3cfa9acd4f726d7e6d263ecd8bad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GMenuLinkIter *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1MenuLinkIter.html</anchorfile>
      <anchor>aecc700b2d84e93c69eaa1f292ef67bef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GMenuLinkIter *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1MenuLinkIter.html</anchorfile>
      <anchor>a020e2bf6116e6b571f32a8ca94457da3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_name</name>
      <anchorfile>classGio_1_1MenuLinkIter.html</anchorfile>
      <anchor>ad354c1eeb6180127dd2d3f1d690f8cf9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_next</name>
      <anchorfile>classGio_1_1MenuLinkIter.html</anchorfile>
      <anchor>acbcef4f47e5933e561f21f47ce1cb02b</anchor>
      <arglist>(Glib::ustring &amp;out_link, Glib::RefPtr&lt; MenuModel &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; MenuModel &gt;</type>
      <name>get_value</name>
      <anchorfile>classGio_1_1MenuLinkIter.html</anchorfile>
      <anchor>a3d8cc7062124baa117a4881ec4b5c9a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const MenuModel &gt;</type>
      <name>get_value</name>
      <anchorfile>classGio_1_1MenuLinkIter.html</anchorfile>
      <anchor>a8f852b67a280b2de421999600a182378</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next</name>
      <anchorfile>classGio_1_1MenuLinkIter.html</anchorfile>
      <anchor>ac41524672d20f2b0f725697713ae78da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1MenuLinkIter.html</anchorfile>
      <anchor>a7adc89d0fead8deb4887962c9ff68896</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MenuLinkIter</name>
      <anchorfile>classGio_1_1MenuLinkIter.html</anchorfile>
      <anchor>a98783ba6619bdc75a35e22b716844db5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::MenuLinkIter &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1MenuLinkIter.html</anchorfile>
      <anchor>a17688e9319c157ac32bd533aa04227d7</anchor>
      <arglist>(GMenuLinkIter *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::MenuModel</name>
    <filename>classGio_1_1MenuModel.html</filename>
    <base>Glib::Object</base>
    <member kind="function">
      <type></type>
      <name>MenuModel</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>ad53d2993582d792506a69cdabb403bde</anchor>
      <arglist>(MenuModel &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MenuModel &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>ada5dcccf71fac8c4708d841aeb235767</anchor>
      <arglist>(MenuModel &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MenuModel</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>a388351235b31a9b48b4141310dd83c79</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GMenuModel *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>aa09ec8d56a76f646e7133b6dd2271ced</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GMenuModel *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>ace595685d7ab39c5f9905d3a07ade0b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GMenuModel *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>ac75e5986055f0ec9cb56077cf533e44c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantBase</type>
      <name>get_item_attribute</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>a99090d7f9e7406e5bdc950f86b82f019</anchor>
      <arglist>(int item_index, MenuAttribute attribute, const Glib::VariantType &amp;expected_type)</arglist>
    </member>
    <member kind="function">
      <type>const Glib::VariantBase</type>
      <name>get_item_attribute</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>a2b8a742384b2771ee7e8514176c46d46</anchor>
      <arglist>(int item_index, MenuAttribute attribute, const Glib::VariantType &amp;expected_type) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; MenuModel &gt;</type>
      <name>get_item_link</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>aca233273e44374beeb579113560621b5</anchor>
      <arglist>(int item_index, MenuLink link)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const MenuModel &gt;</type>
      <name>get_item_link</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>a837382c21a69f6124f793b7ab371aa2e</anchor>
      <arglist>(int item_index, MenuLink link) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_mutable</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>a9532fa428f3983440a22f3c78508514d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_n_items</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>a02b9ede9c62bd49d3317db051427f1d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; MenuAttributeIter &gt;</type>
      <name>iterate_item_attributes</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>a074bfb4ed7c3b2a94000b62fdce6dfc0</anchor>
      <arglist>(int item_index)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const MenuAttributeIter &gt;</type>
      <name>iterate_item_attributes</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>a39da4e9178820d4456e5c8b6c006bd77</anchor>
      <arglist>(int item_index) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; MenuLinkIter &gt;</type>
      <name>iterate_item_links</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>a5abda335e54302c4e8285c41bf201e51</anchor>
      <arglist>(int item_index)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const MenuLinkIter &gt;</type>
      <name>iterate_item_links</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>a6fe79130282155eeecac9b9c5668c9d3</anchor>
      <arglist>(int item_index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>items_changed</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>a0b0c42bcd34312965430750a2f56071a</anchor>
      <arglist>(int position, int removed, int added)</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, int, int, int &gt;</type>
      <name>signal_items_changed</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>a931b0cf46d4a9036e8e70f21430f86ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>af19553f2244f8ad5a118751952b7a2b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MenuModel</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>a4a58a5d7ed0e2dd3fcab1f110f8cb6a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::MenuModel &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>aeaa4856722c5a84b7f287e8900b43fdd</anchor>
      <arglist>(GMenuModel *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::Mount</name>
    <filename>classGio_1_1Mount.html</filename>
    <base>Glib::Interface</base>
    <member kind="function">
      <type></type>
      <name>Mount</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a86f0dd44d1cc0606fd5921494c1008a3</anchor>
      <arglist>(Mount &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Mount &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a15e1bd38a4f5e031342ef35856d8f38d</anchor>
      <arglist>(Mount &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Mount</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>aa05d6b5f8b1aa4811ce585d0d7cda69c</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GMount *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>afdab4fd2377e912d2baef0cc6a825eca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GMount *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a36cffc9b22cbfc0b6eb782a0c7a4a3d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; File &gt;</type>
      <name>get_root</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>accf83f7b2599411cb82f5f4c0172db81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const File &gt;</type>
      <name>get_root</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>ad071a02f48f124c523f326cc5c338d85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_name</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>ad47322c65cfc1c635177f1a2349efe8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Icon &gt;</type>
      <name>get_icon</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>ae368f1d91fc927b809f27acce5aff58e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Icon &gt;</type>
      <name>get_icon</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a348fbfbdf6c758e793ec705111bcc83b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Icon &gt;</type>
      <name>get_symbolic_icon</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>adcab6c682190b8d8265af3df3d089c8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Icon &gt;</type>
      <name>get_symbolic_icon</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a78e5a21b7793fdd138e0324c15367f90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_uuid</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a48af479a34d3f1149bb387d64e989453</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Volume &gt;</type>
      <name>get_volume</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a9497eb3a3a928144f522489b5b432cad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Volume &gt;</type>
      <name>get_volume</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a3a72fcda5734f1461d45462d88d2357f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Drive &gt;</type>
      <name>get_drive</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>ab9b8889c7b8c8fdb885a46dad7419fed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Drive &gt;</type>
      <name>get_drive</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>ae2fd77700f59cbf7468036542b0042dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_unmount</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a81bf937b11f625df88e286409d7acc04</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_eject</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a297eb99a961fea57683d8f1d07f6bc75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unmount</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a6eb057d27f3729dc451d32e8c6bc8fa0</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unmount</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a99bb5452908456ece101cee94d58efe9</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unmount</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>aedbcd024f16a92c704261c17eb7b1cf6</anchor>
      <arglist>(MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unmount</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a4673333db9d066f1f0fef5e4b2d5bd2b</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unmount</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a833c71dbd0d5cfa222cec64cafaaf328</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const SlotAsyncReady &amp;slot, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unmount</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>af40b60bca3e9bc53496f0ac926a4db04</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unmount_finish</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a319db22009f052fb5d0c45596f203d4d</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remount</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>aae983acbd58daf68125f5129466d4de1</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;operation, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, MountMountFlags flags=MOUNT_MOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remount</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a088ae08b4bc3a8dc44c0e18aa2b438e3</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;operation, const SlotAsyncReady &amp;slot, MountMountFlags flags=MOUNT_MOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remount</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a2059d92df5b2cc36268545b3dbd2c171</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;operation, MountMountFlags flags=MOUNT_MOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remount</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a4ef4769ca5b2e9a55f8a1981b2cc051e</anchor>
      <arglist>(MountMountFlags flags=MOUNT_MOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remount_finish</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a5cb279b126e6086b5f0ae0957794f023</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a6bbacd6b5ab2251d8df9db538d6f0d60</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a3573df8a4d1d10dd321e2f46d9afc337</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a0fe94aae6876d196348f786c5e830b49</anchor>
      <arglist>(MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a8c2898b067f5651cb641c4375833f15b</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a9a27b41f48e3a00783b0d8ac313d0014</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const SlotAsyncReady &amp;slot, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>ac7ff80c7b83d251de9a8c47ce79e9e5b</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eject_finish</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>aee0c22ba1711f4d84d1eb0d2989c2d0d</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>guess_content_type</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a3ab56ac69c41c668990e91d7be2a2b73</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, bool force_rescan=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>guess_content_type</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a498994191262236c4bddf0b95df92642</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, bool force_rescan=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>guess_content_type</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>ada39b6385004f938c38ce14b0566756b</anchor>
      <arglist>(bool force_rescan=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>guess_content_type_sync</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a42de2d821060ef0f958ec176749ab595</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, bool force_rescan=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>guess_content_type_sync</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a7e6b4c96208fca788cedb49dbea89258</anchor>
      <arglist>(bool force_rescan=true)</arglist>
    </member>
    <member kind="function">
      <type>Glib::StringArrayHandle</type>
      <name>guess_content_type_finish</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a274064a160c15338580685a9e1603497</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_shadowed</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a5ee86d6a9dc0ce99512735c510038d37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shadow</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a1988ef61bd5316876ef434593a45f584</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unshadow</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>ab25d880d541247871be715e13fa2b39e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; File &gt;</type>
      <name>get_default_location</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a31be484aab5101a0ea508b8e3d085db1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_sort_key</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a58d2aec15e18dd18820de07856ee25e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void &gt;</type>
      <name>signal_changed</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a573d520895b090b109612afb58805238</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void &gt;</type>
      <name>signal_unmounted</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a9f1d4c8f69b5243c7371db0a34cdf742</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void &gt;</type>
      <name>signal_pre_unmount</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>ae5e22892c78e424414dbc480fc5e4c8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>aad5f6e7a513330f247f71c9475a3eec8</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a03ec69273177d0e9cd2c6802227deacc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Mount</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a43cb15d97a7f03f7a3385bf741708a46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_changed</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>adf264056921a09b1426625973fb1d182</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_unmounted</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>adc6f47efdfd20501692f82a2c94b7efa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Mount &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a4723a81c56625aa5920589115060812c</anchor>
      <arglist>(GMount *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::MountOperation</name>
    <filename>classGio_1_1MountOperation.html</filename>
    <base>Glib::Object</base>
    <member kind="function">
      <type></type>
      <name>MountOperation</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a8fba5782db8985184c88ad275141a578</anchor>
      <arglist>(MountOperation &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MountOperation &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a63c6d71106892ddc1cdc637f16135a8b</anchor>
      <arglist>(MountOperation &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MountOperation</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>ac5026b1a0042ef17769703b790f96728</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GMountOperation *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a580640ff16e8cd1cbd9d0ce4659daa7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GMountOperation *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a4856e9da37c637d12d969b06bacb8589</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GMountOperation *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a6e6feac74568a2eb7e6ca1a63122c31b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_username</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a64b96e8cc456c1eec7b35c0b7a7c45fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_username</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>ae9e313d9dca3421676c590cf50134d62</anchor>
      <arglist>(const Glib::ustring &amp;username)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_password</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a84218c2d29a759450b036e98955e8866</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_password</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a9df86e31c73fea9e438586fde8a92b70</anchor>
      <arglist>(const Glib::ustring &amp;password)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_anonymous</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a95725e3c1fe2ba5fa209b64bddb9753c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_anonymous</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>ad5a97dd24b05012c93211932880edc02</anchor>
      <arglist>(bool anonymous=true)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_domain</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a0e3acc23cba758d56425e5aced5a39fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_domain</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a09fd2984393678b8592b7a3d565c0307</anchor>
      <arglist>(const Glib::ustring &amp;domain)</arglist>
    </member>
    <member kind="function">
      <type>PasswordSave</type>
      <name>get_password_save</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a900e0f9485dd6cb6c82d712715cffae6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_password_save</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>adf1fbd975b639f2b099736f83d3f9bd0</anchor>
      <arglist>(PasswordSave save)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_choice</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a98b6422dea2135b0ce105992bca80e99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_choice</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a6fbd101a1db62e2f34b23b9fa5cca869</anchor>
      <arglist>(int choice)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reply</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a1f444eede759bae682091b8fc5f108d3</anchor>
      <arglist>(MountOperationResult result)</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, const Glib::ustring &amp;, const Glib::ustring &amp;, const Glib::ustring &amp;, AskPasswordFlags &gt;</type>
      <name>signal_ask_password</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a7755f55b42d9c357218f1ab3929472bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, const Glib::ustring &amp;, const Glib::StringArrayHandle &amp;&gt;</type>
      <name>signal_ask_question</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>ab3f3540675ded01fcab683fc15e6a574</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, MountOperationResult &gt;</type>
      <name>signal_reply</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>af9a9786e17b269f840065ef6291e742e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void &gt;</type>
      <name>signal_aborted</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a8596a8f3703feea0448286ef9aebc28e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, const Glib::ustring &amp;, gint64, gint64 &gt;</type>
      <name>signal_show_unmount_progress</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a47e6aa8299dfb9e3132729e104878edf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; Glib::ustring &gt;</type>
      <name>property_username</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a343d4ebfbef38f57a26b25ff86f21a8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_username</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a5804fadf94be491b689d91679ed308d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; Glib::ustring &gt;</type>
      <name>property_password</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a090c6c9ed3ded046b79cacbbda821c9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_password</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>add2a525e21177fc0d350b65b418115df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_anonymous</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a6da8f2f69cf4ea9fccde46f44addb88a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_anonymous</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>abe2ad1904ab967716979bdad66517a9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; Glib::ustring &gt;</type>
      <name>property_domain</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>ad3206fe2d96665bc187ff8a13e4b22fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_domain</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>ab2d42f65338f8ad63d683ba840d97c98</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; PasswordSave &gt;</type>
      <name>property_password_save</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a04c4d41b4075a04524aa00f3b4fd6fa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; PasswordSave &gt;</type>
      <name>property_password_save</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a1e8c5db93887a09e24ecc5bea8917070</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; int &gt;</type>
      <name>property_choice</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>aa54cb65cc8fc27eb4972931668aa151a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; int &gt;</type>
      <name>property_choice</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a77e9ae1937be11150bc98577bccf4040</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a06f645537aad67629edd4180e3321bca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; MountOperation &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a3e59fd19498a9be34bbb7462d87e2ca1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MountOperation</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a415e62c32b8d497d859e50da0c8431cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_ask_password</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a2bfee2a7879e75708a22cfb59e99280b</anchor>
      <arglist>(const Glib::ustring &amp;message, const Glib::ustring &amp;default_user, const Glib::ustring &amp;default_domain, AskPasswordFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_ask_question</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>af4d007e34e6f023de14a667aabfe3a39</anchor>
      <arglist>(const Glib::ustring &amp;message, const Glib::StringArrayHandle &amp;choices)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_reply</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a9480654f1624640c719ce260883c8f9e</anchor>
      <arglist>(MountOperationResult result)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::MountOperation &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a65da8ecee4b6b6cfd9e846ec6bc950fe</anchor>
      <arglist>(GMountOperation *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::NetworkAddress</name>
    <filename>classGio_1_1NetworkAddress.html</filename>
    <base>Glib::Object</base>
    <base>Gio::SocketConnectable</base>
    <member kind="function">
      <type></type>
      <name>NetworkAddress</name>
      <anchorfile>classGio_1_1NetworkAddress.html</anchorfile>
      <anchor>abea37bc68f1627d572a491c8c56d4263</anchor>
      <arglist>(NetworkAddress &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NetworkAddress &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1NetworkAddress.html</anchorfile>
      <anchor>a7b2c4b7d615bf6f42be60571d1316a1a</anchor>
      <arglist>(NetworkAddress &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NetworkAddress</name>
      <anchorfile>classGio_1_1NetworkAddress.html</anchorfile>
      <anchor>acb10ddf26202044a8bc44f24d30e5da7</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GNetworkAddress *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1NetworkAddress.html</anchorfile>
      <anchor>ac3bece6c2edb44d1346abd2a07995df9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GNetworkAddress *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1NetworkAddress.html</anchorfile>
      <anchor>a18aa7e5527c3646ccb387f495e94345a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GNetworkAddress *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1NetworkAddress.html</anchorfile>
      <anchor>aa38b8f4bb0392393ea1235f3adbe79e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_hostname</name>
      <anchorfile>classGio_1_1NetworkAddress.html</anchorfile>
      <anchor>a88b460d4e30c76e72ff5e6b785a32946</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>guint16</type>
      <name>get_port</name>
      <anchorfile>classGio_1_1NetworkAddress.html</anchorfile>
      <anchor>a961f48ed097015e4201cb59e604743e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_scheme</name>
      <anchorfile>classGio_1_1NetworkAddress.html</anchorfile>
      <anchor>a0874a5f2f16d8fd495158a7705b246f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; std::string &gt;</type>
      <name>property_hostname</name>
      <anchorfile>classGio_1_1NetworkAddress.html</anchorfile>
      <anchor>a5ee652531c5dfe403c4c30cad7ead853</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; guint &gt;</type>
      <name>property_port</name>
      <anchorfile>classGio_1_1NetworkAddress.html</anchorfile>
      <anchor>a5d6ece3a3996c9ad5ddb461fa17980e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; std::string &gt;</type>
      <name>property_scheme</name>
      <anchorfile>classGio_1_1NetworkAddress.html</anchorfile>
      <anchor>a747aecaa2de00e05a6b206e0f7e7a910</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1NetworkAddress.html</anchorfile>
      <anchor>adc8cd99b4c8e352a64eaecfa497bcdc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; NetworkAddress &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1NetworkAddress.html</anchorfile>
      <anchor>a30cc7b78902bb94a53b7eca98fbee083</anchor>
      <arglist>(const std::string &amp;hostname, guint16 port)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; NetworkAddress &gt;</type>
      <name>parse</name>
      <anchorfile>classGio_1_1NetworkAddress.html</anchorfile>
      <anchor>a0090a07db819bd872a1379cb6d6c635a</anchor>
      <arglist>(const std::string &amp;host_and_port, guint16 default_port)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::NetworkAddress &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1NetworkAddress.html</anchorfile>
      <anchor>a8283831783706b23dea2801e56bf1b1d</anchor>
      <arglist>(GNetworkAddress *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::NetworkMonitor</name>
    <filename>classGio_1_1NetworkMonitor.html</filename>
    <base>Glib::Interface</base>
    <member kind="function">
      <type></type>
      <name>NetworkMonitor</name>
      <anchorfile>classGio_1_1NetworkMonitor.html</anchorfile>
      <anchor>a9a1bab7192e096cd2a6d1227e815ef78</anchor>
      <arglist>(NetworkMonitor &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NetworkMonitor &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1NetworkMonitor.html</anchorfile>
      <anchor>a1cdadb32e14e8098c81ac25a3008d9dd</anchor>
      <arglist>(NetworkMonitor &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NetworkMonitor</name>
      <anchorfile>classGio_1_1NetworkMonitor.html</anchorfile>
      <anchor>aabd7895eb930f5013db16f1f44038dc3</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GNetworkMonitor *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1NetworkMonitor.html</anchorfile>
      <anchor>a10cd47f0e405c30e2d2b4d558dbb4bc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GNetworkMonitor *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1NetworkMonitor.html</anchorfile>
      <anchor>a03afab835e2f6f4a608a46a341863f70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_network_available</name>
      <anchorfile>classGio_1_1NetworkMonitor.html</anchorfile>
      <anchor>afb6ceada9759e744581492a7a58a9c22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_network_metered</name>
      <anchorfile>classGio_1_1NetworkMonitor.html</anchorfile>
      <anchor>ac4cfdb11bf69adbb682f6ba5e5549f48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NetworkConnectivity</type>
      <name>get_connectivity</name>
      <anchorfile>classGio_1_1NetworkMonitor.html</anchorfile>
      <anchor>aef8dc9f6b885c0cfdf2d12e7a04ae346</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_reach</name>
      <anchorfile>classGio_1_1NetworkMonitor.html</anchorfile>
      <anchor>af18fd14567a4ef6c6801c04fa84af21b</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketConnectable &gt; &amp;connectable, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_reach</name>
      <anchorfile>classGio_1_1NetworkMonitor.html</anchorfile>
      <anchor>a38c99342683547f6e74d44e2a06fb7d7</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketConnectable &gt; &amp;connectable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>can_reach_async</name>
      <anchorfile>classGio_1_1NetworkMonitor.html</anchorfile>
      <anchor>ad4884c987316b724e3bd4b9dfa947caa</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketConnectable &gt; &amp;connectable, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_reach_finish</name>
      <anchorfile>classGio_1_1NetworkMonitor.html</anchorfile>
      <anchor>a2322401bcee950cf1bff362ed9316aa3</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, bool &gt;</type>
      <name>signal_network_changed</name>
      <anchorfile>classGio_1_1NetworkMonitor.html</anchorfile>
      <anchor>a7209876420daf598812b07708d3c18c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_network_available</name>
      <anchorfile>classGio_1_1NetworkMonitor.html</anchorfile>
      <anchor>ab7779b3fe06a41dc9407588167a75e67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; NetworkConnectivity &gt;</type>
      <name>property_connectivity</name>
      <anchorfile>classGio_1_1NetworkMonitor.html</anchorfile>
      <anchor>a71980d92f042df07273d9405ffad111d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_network_metered</name>
      <anchorfile>classGio_1_1NetworkMonitor.html</anchorfile>
      <anchor>a9845009cb592e55f3d3c365401e65d82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1NetworkMonitor.html</anchorfile>
      <anchor>af1b0c5cc01b48caedcee1ffedd735cad</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1NetworkMonitor.html</anchorfile>
      <anchor>ad2389942373d655e84ec4995fbf3bdf3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; NetworkMonitor &gt;</type>
      <name>get_default</name>
      <anchorfile>classGio_1_1NetworkMonitor.html</anchorfile>
      <anchor>afee471919d1c793f50c3ac930d69c694</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NetworkMonitor</name>
      <anchorfile>classGio_1_1NetworkMonitor.html</anchorfile>
      <anchor>a1cd61a1b5c730f21147843800b9ba590</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_network_changed</name>
      <anchorfile>classGio_1_1NetworkMonitor.html</anchorfile>
      <anchor>a8959c0291cf6f8114c3c4e930e5566ab</anchor>
      <arglist>(bool available)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::NetworkMonitor &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1NetworkMonitor.html</anchorfile>
      <anchor>acc3b94705510c0fe1f6d1537b50a387a</anchor>
      <arglist>(GNetworkMonitor *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::NetworkService</name>
    <filename>classGio_1_1NetworkService.html</filename>
    <base>Glib::Object</base>
    <base>Gio::SocketConnectable</base>
    <member kind="function">
      <type></type>
      <name>NetworkService</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>af3650b97bfa030aaf771ed84722067d4</anchor>
      <arglist>(NetworkService &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NetworkService &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>ae0b478ab05255685e625df5b88a84391</anchor>
      <arglist>(NetworkService &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NetworkService</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>a092674d5dd36d6babd6360ac42ce41ad</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GNetworkService *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>a01c7acc26f88ba9b62cebecfadf0eb81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GNetworkService *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>a2b1dbba63db9c7a8f86bc84633ae5efa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GNetworkService *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>ac73f00e197b587678ea62ed430d7592c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_service</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>a536bf49da55bac96f0cc8d6021c6f1d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_protocol</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>a205fb4435cab92b8a9d6d67987c84570</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_domain</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>a807722dbe630b5bebde5f80eef585f63</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_scheme</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>a17a0fc0e2c1c676ec38b8831c6deb68f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_scheme</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>a84d94901aa012cd8d1594ccb1ebbed2c</anchor>
      <arglist>(const Glib::ustring &amp;scheme)</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_domain</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>a061aa2b5b0214e47c1f94215237f8062</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_protocol</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>aa05fdad1611e421e214573a3b53b143b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; Glib::ustring &gt;</type>
      <name>property_scheme</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>af6dc0c00c17461f1e49b6b3eb6b64680</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_scheme</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>a486c2fe316613e6afec1885ccfd114db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_service</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>a8d6c6a711f6eb802259f8fa4d5207f04</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>a92cefcdf90faf1a83f51bb68fdf8e5c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; NetworkService &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>a1e6e8639ee28297dbce656fa93cafe65</anchor>
      <arglist>(const Glib::ustring &amp;service, const Glib::ustring &amp;protocol, const Glib::ustring &amp;domain)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::NetworkService &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>ac0ea3336b85237336a8c8efeb4f864ec</anchor>
      <arglist>(GNetworkService *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::Notification</name>
    <filename>classGio_1_1Notification.html</filename>
    <base>Glib::Object</base>
    <member kind="function">
      <type></type>
      <name>Notification</name>
      <anchorfile>classGio_1_1Notification.html</anchorfile>
      <anchor>a318b5c69bfb29d999915270500ad353b</anchor>
      <arglist>(Notification &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Notification &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1Notification.html</anchorfile>
      <anchor>ada8f74b051e1b9b4ccf9dcee981449db</anchor>
      <arglist>(Notification &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Notification</name>
      <anchorfile>classGio_1_1Notification.html</anchorfile>
      <anchor>a2998fcfe89a6bf867a2697037e0b103c</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GNotification *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Notification.html</anchorfile>
      <anchor>adad17eef207216ffeaf10b1e3406f475</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GNotification *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Notification.html</anchorfile>
      <anchor>aa36063f87f1bb6ee159c9330ab4e1d5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GNotification *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1Notification.html</anchorfile>
      <anchor>a4f988d881d9b3e5dd0b95e3fbd44fcff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_title</name>
      <anchorfile>classGio_1_1Notification.html</anchorfile>
      <anchor>af12b1eca8a95158c235d12f14d50fb83</anchor>
      <arglist>(const Glib::ustring &amp;title)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_body</name>
      <anchorfile>classGio_1_1Notification.html</anchorfile>
      <anchor>ab67d95006097a4a80e7c2b034f7ecf94</anchor>
      <arglist>(const Glib::ustring &amp;body)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_icon</name>
      <anchorfile>classGio_1_1Notification.html</anchorfile>
      <anchor>a6bb5652cce58e4133c3e95c54b50ef61</anchor>
      <arglist>(const Glib::RefPtr&lt; Icon &gt; &amp;icon)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_urgent</name>
      <anchorfile>classGio_1_1Notification.html</anchorfile>
      <anchor>af8f36012b71a0b6b26759954bc208264</anchor>
      <arglist>(bool urgent=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_priority</name>
      <anchorfile>classGio_1_1Notification.html</anchorfile>
      <anchor>a9898adf8e942d5ea0cd77e2f990e8523</anchor>
      <arglist>(NotificationPriority priority=NOTIFICATION_PRIORITY_NORMAL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_button</name>
      <anchorfile>classGio_1_1Notification.html</anchorfile>
      <anchor>aabb1338b9fe64c423fcad7358a920441</anchor>
      <arglist>(const Glib::ustring &amp;label, const Glib::ustring &amp;detailed_action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_button</name>
      <anchorfile>classGio_1_1Notification.html</anchorfile>
      <anchor>aa3a2717c029dcc7f540777c7fb1cec9d</anchor>
      <arglist>(const Glib::ustring &amp;label, const Glib::ustring &amp;action, const T_Value &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_button_variant</name>
      <anchorfile>classGio_1_1Notification.html</anchorfile>
      <anchor>a4c11dede544b617946b2560a96e2c57a</anchor>
      <arglist>(const Glib::ustring &amp;label, const Glib::ustring &amp;action, const Glib::VariantBase &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_default_action</name>
      <anchorfile>classGio_1_1Notification.html</anchorfile>
      <anchor>a74903aefc8ca1230cfc514fc61ae5be4</anchor>
      <arglist>(const Glib::ustring &amp;detailed_action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_default_action</name>
      <anchorfile>classGio_1_1Notification.html</anchorfile>
      <anchor>aa539ee6b8f61c9e83e7325da723c1687</anchor>
      <arglist>(const Glib::ustring &amp;action, const T_Value &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_default_action_variant</name>
      <anchorfile>classGio_1_1Notification.html</anchorfile>
      <anchor>a4ddbe110e5ac1b30246051e9d5a79e93</anchor>
      <arglist>(const Glib::ustring &amp;action, const Glib::VariantBase &amp;target)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Notification.html</anchorfile>
      <anchor>ae97c070128a44260a83021495cde9b72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Notification &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1Notification.html</anchorfile>
      <anchor>a84abf2f3fe1728fcc9dd468f55900360</anchor>
      <arglist>(const Glib::ustring &amp;title)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Notification</name>
      <anchorfile>classGio_1_1Notification.html</anchorfile>
      <anchor>a0e992f6ca8b654ca9f29b411bc007eb8</anchor>
      <arglist>(const Glib::ustring &amp;title)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Notification &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Notification.html</anchorfile>
      <anchor>ace580b39e1f168297a21e4b76e944c0b</anchor>
      <arglist>(GNotification *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::OutputStream</name>
    <filename>classGio_1_1OutputStream.html</filename>
    <base>Glib::Object</base>
    <member kind="function">
      <type></type>
      <name>OutputStream</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a4f724d33acc96fe0343e58d2f8abe9d2</anchor>
      <arglist>(OutputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>OutputStream &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>af6a476601957c9b4f72f18594521d636</anchor>
      <arglist>(OutputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OutputStream</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a0ef2ab2c8fa86b5072d1b7669e8fb2f7</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>ac5a71a1f432f8ac2a53de2c66eb81d9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>aa298b3e539fccf90283002bc89f537cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GOutputStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>ad9128985ea683716db40d7831cb7075c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>write</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a0a714bc357db90c5e34f1d001446fe29</anchor>
      <arglist>(const void *buffer, gsize count, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>write</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a5037c7a24ba87c7e8f1992f7586f032c</anchor>
      <arglist>(const void *buffer, gsize count)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>write</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>aee589585890960b4c26c86865fe3f0b4</anchor>
      <arglist>(const std::string &amp;buffer, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>write</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>afa3cf9f1b7006b1f79d8e452616f3324</anchor>
      <arglist>(const std::string &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write_all</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>ac9ff8d59409bfdfdfd95643f3ee4c98d</anchor>
      <arglist>(const void *buffer, gsize count, gsize &amp;bytes_written, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write_all</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>aca15317cfd772d712b44147d378788b8</anchor>
      <arglist>(const void *buffer, gsize count, gsize &amp;bytes_written)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write_all</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>ac10263d00bf17a158d4aad207fbb2d64</anchor>
      <arglist>(const std::string &amp;buffer, gsize &amp;bytes_written, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write_all</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a9171833c0c7c88103afd3fc12efbcf17</anchor>
      <arglist>(const std::string &amp;buffer, gsize &amp;bytes_written)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>write_bytes</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>aaf334df7e398b30fe3b2ac081f31ae61</anchor>
      <arglist>(const Glib::RefPtr&lt; const Glib::Bytes &gt; &amp;bytes, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>write_bytes</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a4c44e35b548088bbaa949fe3fb93e3e5</anchor>
      <arglist>(const Glib::RefPtr&lt; const Glib::Bytes &gt; &amp;bytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_bytes_async</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a7dffae36ab85aef1d2c69a1c60a7f1e1</anchor>
      <arglist>(const Glib::RefPtr&lt; const Glib::Bytes &gt; &amp;bytes, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_bytes_async</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a6d0a0fb359543cfbca7495b39d6dcd29</anchor>
      <arglist>(const Glib::RefPtr&lt; const Glib::Bytes &gt; &amp;bytes, const SlotAsyncReady &amp;slot, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>write_bytes_finish</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a052f5bd01513a4c1c94e52d1174545ce</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>splice</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a080bff3f1f2017b4d4ff8343a5bfbf15</anchor>
      <arglist>(const Glib::RefPtr&lt; InputStream &gt; &amp;source, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, OutputStreamSpliceFlags flags=OUTPUT_STREAM_SPLICE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>splice</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>aaca5a5891175c7c66cb77e476bae1843</anchor>
      <arglist>(const Glib::RefPtr&lt; InputStream &gt; &amp;source, OutputStreamSpliceFlags flags=OUTPUT_STREAM_SPLICE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>flush</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a413a349600ecd6013d15f563d6c6fd85</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>flush</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a6bb81a11ef79dc8ffa9f5a275d2d6e0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>close</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a4fefad6d6b244924b4fe51c105d3805c</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>close</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>ac3e92678425dd530b22eaab97852ca23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_async</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a947eefdb85b9081348a1c0cc04be2eaa</anchor>
      <arglist>(const void *buffer, gsize count, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_async</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>aae0f58d27908beb35f24a88b6254107a</anchor>
      <arglist>(const void *buffer, gsize count, const SlotAsyncReady &amp;slot, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>write_finish</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>ac61dbaa1f910c14bf3beaadc0498065f</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_all_async</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a840b3c3ee939d4a54f0d2e6e67bdf991</anchor>
      <arglist>(const void *buffer, gsize count, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_all_async</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>af0af588c6467e57481a294a0ee36025d</anchor>
      <arglist>(const void *buffer, gsize count, const SlotAsyncReady &amp;slot, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write_all_finish</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a0912cee3bb1b905b88d5b94e848783b7</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result, gsize &amp;bytes_written)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>splice_async</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a4bfe08685268b2236362bce84ba1cc77</anchor>
      <arglist>(const Glib::RefPtr&lt; InputStream &gt; &amp;source, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, OutputStreamSpliceFlags flags=OUTPUT_STREAM_SPLICE_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>splice_async</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a85e95838d577180e11831b0f149e8f5c</anchor>
      <arglist>(const Glib::RefPtr&lt; InputStream &gt; &amp;source, const SlotAsyncReady &amp;slot, OutputStreamSpliceFlags flags=OUTPUT_STREAM_SPLICE_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>splice_finish</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a29461238b7b3cf9c2d6dde85b4a6a6ea</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush_async</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>ac76478281be9559cb0a924bcc4ead263</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush_async</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>aa82f241b6c72fef632eaf51b279b25ce</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>flush_finish</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>af2e8a3c48152c2fdc744a50016911a3a</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close_async</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a47fb0dbd7f88c9167dacd577dcd8c6c7</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close_async</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a92f6a9cc67bfa6a2356a031fb3f691c0</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>close_finish</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a8db5ee9e7a3a0c091eeebe960550e6f5</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_closed</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a80cbaadcd210761f94843d537d9eb369</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_closing</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a3528dc791da2d782a3ced2cdd2e7ada0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_pending</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a019a3434fee393966c8ea57a11133fca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a8212097d2d77d08108024b39604b0326</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>OutputStream</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>aaa8404936df97cea867675eb055a6aae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>set_pending</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a732a6b7d9a35e8603da919001213b8b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clear_pending</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>ad29eb82d51f183543ac0296346f64faf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::OutputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a96aad4c49fb938a88b75abe5339bef4f</anchor>
      <arglist>(GOutputStream *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::Permission</name>
    <filename>classGio_1_1Permission.html</filename>
    <base>Glib::Object</base>
    <member kind="function">
      <type></type>
      <name>Permission</name>
      <anchorfile>classGio_1_1Permission.html</anchorfile>
      <anchor>ade04e7ce21867c12151955310c448cb1</anchor>
      <arglist>(Permission &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Permission &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1Permission.html</anchorfile>
      <anchor>a6de8e5a7a5308fbf8b50ee8e9da1e754</anchor>
      <arglist>(Permission &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Permission</name>
      <anchorfile>classGio_1_1Permission.html</anchorfile>
      <anchor>a202a5aac74e1741ab03d756ebb8b9a20</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GPermission *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Permission.html</anchorfile>
      <anchor>a72b22a9597f996acae104c45fc960fbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GPermission *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Permission.html</anchorfile>
      <anchor>a1199d72af1006f0a48751bce5f7dafb2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GPermission *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1Permission.html</anchorfile>
      <anchor>ad239c70d1607f419e489687459d73ae3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>acquire</name>
      <anchorfile>classGio_1_1Permission.html</anchorfile>
      <anchor>a8e35502ce7f195aeb4b99ef03efc3d65</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>acquire</name>
      <anchorfile>classGio_1_1Permission.html</anchorfile>
      <anchor>a8da11eaad605de8d5fdf270b60d078ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acquire_async</name>
      <anchorfile>classGio_1_1Permission.html</anchorfile>
      <anchor>ae9bc42624e44c068bfba8eea912d1be9</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acquire_async</name>
      <anchorfile>classGio_1_1Permission.html</anchorfile>
      <anchor>af79bc628f37df342f95402fb2c0e329e</anchor>
      <arglist>(const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>acquire_finish</name>
      <anchorfile>classGio_1_1Permission.html</anchorfile>
      <anchor>a54b25597c86a6547e1d97d2897fd5486</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>release</name>
      <anchorfile>classGio_1_1Permission.html</anchorfile>
      <anchor>a96bed2605f66e5d41c7f431fa29577bc</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>release</name>
      <anchorfile>classGio_1_1Permission.html</anchorfile>
      <anchor>a599d0f206642b07ccf333d5e5bab8341</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release_async</name>
      <anchorfile>classGio_1_1Permission.html</anchorfile>
      <anchor>ae24e9bdf0c514d677ff72b82ecec3bf6</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release_async</name>
      <anchorfile>classGio_1_1Permission.html</anchorfile>
      <anchor>a4e674297df5e6a98b870c2775f94194e</anchor>
      <arglist>(const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>release_finish</name>
      <anchorfile>classGio_1_1Permission.html</anchorfile>
      <anchor>a41e1344df32fcd99dd5016a6cffa4d5a</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_allowed</name>
      <anchorfile>classGio_1_1Permission.html</anchorfile>
      <anchor>a16f3207f35616d2a0e74de893a27e8d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_can_acquire</name>
      <anchorfile>classGio_1_1Permission.html</anchorfile>
      <anchor>a25e7c62c09a913c995a4505e132066d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_can_release</name>
      <anchorfile>classGio_1_1Permission.html</anchorfile>
      <anchor>ad408160f1da5c2c9c35b86848969825f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_allowed</name>
      <anchorfile>classGio_1_1Permission.html</anchorfile>
      <anchor>a6730cc8348b7fa86320b5b4ce70e5ed4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_can_acquire</name>
      <anchorfile>classGio_1_1Permission.html</anchorfile>
      <anchor>a7527c270aba063119862bfd2aa48a6d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_can_release</name>
      <anchorfile>classGio_1_1Permission.html</anchorfile>
      <anchor>ad10ba74d48f37f02fef7993ec416272b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Permission.html</anchorfile>
      <anchor>adaa1953c0d4e3d834298ea3167650af7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Permission</name>
      <anchorfile>classGio_1_1Permission.html</anchorfile>
      <anchor>a126fefae82951abd327a018c1d3d9a3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>acquire_vfunc</name>
      <anchorfile>classGio_1_1Permission.html</anchorfile>
      <anchor>a8da9eda76aa0f09898da4de266916838</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>acquire_async_vfunc</name>
      <anchorfile>classGio_1_1Permission.html</anchorfile>
      <anchor>aec8dd7c14e5d2325447acfa049103ece</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>acquire_finish_vfunc</name>
      <anchorfile>classGio_1_1Permission.html</anchorfile>
      <anchor>a98e548265374c412ff6d1e444b924bd8</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>release_vfunc</name>
      <anchorfile>classGio_1_1Permission.html</anchorfile>
      <anchor>a7f5007d8988dcae7d76f7ac58d41b123</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>release_async_vfunc</name>
      <anchorfile>classGio_1_1Permission.html</anchorfile>
      <anchor>a1d576f21fd34723fbdf149fd85cff9ac</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>release_finish_vfunc</name>
      <anchorfile>classGio_1_1Permission.html</anchorfile>
      <anchor>a99cfd16c95626967c29db4351cafa73f</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>impl_update</name>
      <anchorfile>classGio_1_1Permission.html</anchorfile>
      <anchor>a4ee6a6cff3d2fcdb548235d0848e2a7e</anchor>
      <arglist>(bool allowed, bool can_acquire, bool can_release)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Permission &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Permission.html</anchorfile>
      <anchor>ac9e29ddf119ded94357bab5be6247ecb</anchor>
      <arglist>(GPermission *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::PollableInputStream</name>
    <filename>classGio_1_1PollableInputStream.html</filename>
    <base>Glib::Interface</base>
    <member kind="function">
      <type></type>
      <name>PollableInputStream</name>
      <anchorfile>classGio_1_1PollableInputStream.html</anchorfile>
      <anchor>a70e1b8f80e29bf158c66ac367ec67b98</anchor>
      <arglist>(PollableInputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PollableInputStream &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1PollableInputStream.html</anchorfile>
      <anchor>a9134aed48635b8dd971d431ac86dbd9f</anchor>
      <arglist>(PollableInputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PollableInputStream</name>
      <anchorfile>classGio_1_1PollableInputStream.html</anchorfile>
      <anchor>a551425a49bbe207d5aadb434b20521a2</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GPollableInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1PollableInputStream.html</anchorfile>
      <anchor>ae397a025e7818472f54b3dac909d0ae4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GPollableInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1PollableInputStream.html</anchorfile>
      <anchor>ac178ee00a2a5e81048de69ec44eae877</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_poll</name>
      <anchorfile>classGio_1_1PollableInputStream.html</anchorfile>
      <anchor>a5e69773ff208e9eb0e563d8eb70e4e40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_readable</name>
      <anchorfile>classGio_1_1PollableInputStream.html</anchorfile>
      <anchor>ada46ee646e10d376dd520d6f766de111</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>read_nonblocking</name>
      <anchorfile>classGio_1_1PollableInputStream.html</anchorfile>
      <anchor>a8eb0aa54e3a6cb3bb00d6a898139381a</anchor>
      <arglist>(void *buffer, gsize count, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>read_nonblocking</name>
      <anchorfile>classGio_1_1PollableInputStream.html</anchorfile>
      <anchor>a2d7130fc1b0291eb9531cb3b61052a8e</anchor>
      <arglist>(void *buffer, gsize count)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>can_poll_vfunc</name>
      <anchorfile>classGio_1_1PollableInputStream.html</anchorfile>
      <anchor>ac8fb657ac1d7cc88b1cfe42d5317bd80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_readable_vfunc</name>
      <anchorfile>classGio_1_1PollableInputStream.html</anchorfile>
      <anchor>aa72415f29e77f00a7160e12765a8f8af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gssize</type>
      <name>read_nonblocking_vfunc</name>
      <anchorfile>classGio_1_1PollableInputStream.html</anchorfile>
      <anchor>ac00544ec021330e5b8592a0071d183ad</anchor>
      <arglist>(void *buffer, gsize count)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1PollableInputStream.html</anchorfile>
      <anchor>a3f2d5350f4fa25919328d4911e816de4</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1PollableInputStream.html</anchorfile>
      <anchor>ad698362f2b1a62c3a35c74a04d196a97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PollableInputStream</name>
      <anchorfile>classGio_1_1PollableInputStream.html</anchorfile>
      <anchor>a823f9090b70e59716eca1e582aa8073c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::PollableInputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1PollableInputStream.html</anchorfile>
      <anchor>ac3af174b3ea79ce80fef958070db6b7f</anchor>
      <arglist>(GPollableInputStream *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::PollableOutputStream</name>
    <filename>classGio_1_1PollableOutputStream.html</filename>
    <base>Glib::Interface</base>
    <member kind="function">
      <type></type>
      <name>PollableOutputStream</name>
      <anchorfile>classGio_1_1PollableOutputStream.html</anchorfile>
      <anchor>a54fb8c9c734418320e30e07fa5ae16b3</anchor>
      <arglist>(PollableOutputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PollableOutputStream &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1PollableOutputStream.html</anchorfile>
      <anchor>a755cc836af386cb6521554edb424f6b9</anchor>
      <arglist>(PollableOutputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PollableOutputStream</name>
      <anchorfile>classGio_1_1PollableOutputStream.html</anchorfile>
      <anchor>af21bdebb3cfed958719ec9eb3f721d01</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GPollableOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1PollableOutputStream.html</anchorfile>
      <anchor>a1621ceb60a0cd7d69b7a83fa68db2930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GPollableOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1PollableOutputStream.html</anchorfile>
      <anchor>a88ac1f27b1391cbc89fa2db8fd3e9579</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_poll</name>
      <anchorfile>classGio_1_1PollableOutputStream.html</anchorfile>
      <anchor>a72f69899331edc00251fe7d2040ef192</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_writable</name>
      <anchorfile>classGio_1_1PollableOutputStream.html</anchorfile>
      <anchor>a0051a45d3ec722127437cbf2c71468fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>write_nonblocking</name>
      <anchorfile>classGio_1_1PollableOutputStream.html</anchorfile>
      <anchor>ac51562ebbcefb1820ca2de98bfbde720</anchor>
      <arglist>(const void *buffer, gsize count, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>write_nonblocking</name>
      <anchorfile>classGio_1_1PollableOutputStream.html</anchorfile>
      <anchor>a43f7a7991ae9ed11a6d4ef33c8dc7c1b</anchor>
      <arglist>(const void *buffer, gsize count)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>can_poll_vfunc</name>
      <anchorfile>classGio_1_1PollableOutputStream.html</anchorfile>
      <anchor>a659f0d8ab794fb85a7d2c76b6bb28828</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_writable_vfunc</name>
      <anchorfile>classGio_1_1PollableOutputStream.html</anchorfile>
      <anchor>a309f92ad6872af7f1d3d5abc825c3e07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gssize</type>
      <name>write_nonblocking_vfunc</name>
      <anchorfile>classGio_1_1PollableOutputStream.html</anchorfile>
      <anchor>acf75edfb4bcb6b5b989aa7ee3c64abb3</anchor>
      <arglist>(const void *buffer, gsize count)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1PollableOutputStream.html</anchorfile>
      <anchor>a41ee04b3c36236782359bae58c27d72c</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1PollableOutputStream.html</anchorfile>
      <anchor>ac31bacd234575604b6f61eaf42574bd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PollableOutputStream</name>
      <anchorfile>classGio_1_1PollableOutputStream.html</anchorfile>
      <anchor>a344a103165250271e2a51076f2a2f046</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::PollableOutputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1PollableOutputStream.html</anchorfile>
      <anchor>a6557b15ebf4139c32c90c2f626de57b9</anchor>
      <arglist>(GPollableOutputStream *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::Proxy</name>
    <filename>classGio_1_1Proxy.html</filename>
    <base>Glib::Interface</base>
    <member kind="function">
      <type></type>
      <name>Proxy</name>
      <anchorfile>classGio_1_1Proxy.html</anchorfile>
      <anchor>ac57b452ae20680598db159752c97ccdd</anchor>
      <arglist>(Proxy &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Proxy &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1Proxy.html</anchorfile>
      <anchor>a2377688b0104b58da0f5ef3425c1a543</anchor>
      <arglist>(Proxy &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Proxy</name>
      <anchorfile>classGio_1_1Proxy.html</anchorfile>
      <anchor>ab4c83ac8003f0777926b1e4a25632ef2</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GProxy *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Proxy.html</anchorfile>
      <anchor>a5d635bea4b7b93e6dfe4a9e0d50f569f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GProxy *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Proxy.html</anchorfile>
      <anchor>a44c33a6e8217efc908dc71278b09eaa8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; IOStream &gt;</type>
      <name>connect</name>
      <anchorfile>classGio_1_1Proxy.html</anchorfile>
      <anchor>a6b4fb0207d17c0118720f96ce79b3b05</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;connection, const Glib::RefPtr&lt; const ProxyAddress &gt; &amp;proxy_address, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_async</name>
      <anchorfile>classGio_1_1Proxy.html</anchorfile>
      <anchor>ac95ea8b9613b7f125baa2d96041d8397</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;connection, const Glib::RefPtr&lt; const ProxyAddress &gt; &amp;proxy_address, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_async</name>
      <anchorfile>classGio_1_1Proxy.html</anchorfile>
      <anchor>aa65146dc11e84e4ee09f0f78500d6279</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;connection, const Glib::RefPtr&lt; const ProxyAddress &gt; &amp;proxy_address, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; IOStream &gt;</type>
      <name>connect_finish</name>
      <anchorfile>classGio_1_1Proxy.html</anchorfile>
      <anchor>a14d0ba006367a41d64ae58deb8b2d074</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>supports_hostname</name>
      <anchorfile>classGio_1_1Proxy.html</anchorfile>
      <anchor>a1fca861d35670a07525a61494cc31a9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1Proxy.html</anchorfile>
      <anchor>a1922e1348160624161a7da73a12d401e</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Proxy.html</anchorfile>
      <anchor>a09cbe3afb8c91b76923d4903d0abb88c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Proxy &gt;</type>
      <name>get_default_for_protocol</name>
      <anchorfile>classGio_1_1Proxy.html</anchorfile>
      <anchor>a13d55cd6a30e21b62d96fab02138f2f0</anchor>
      <arglist>(const Glib::ustring &amp;protocol)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Proxy</name>
      <anchorfile>classGio_1_1Proxy.html</anchorfile>
      <anchor>aac8ea26a1e716bc0bca4d16dcaa4fe23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Proxy &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Proxy.html</anchorfile>
      <anchor>a2618cd487487871eff6e8ad5d2d3695b</anchor>
      <arglist>(GProxy *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::ProxyAddress</name>
    <filename>classGio_1_1ProxyAddress.html</filename>
    <base>Gio::InetSocketAddress</base>
    <member kind="function">
      <type></type>
      <name>ProxyAddress</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>a82d807aa7e0edf9eca7a9db75eb5a226</anchor>
      <arglist>(ProxyAddress &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ProxyAddress &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>a91427b73f18e16a03c7e7e6bec8be387</anchor>
      <arglist>(ProxyAddress &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ProxyAddress</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>a87bff62a24a355f64351f88d9d0e7052</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GProxyAddress *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>aa085bc6a03d6c8861c12bba387d395c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GProxyAddress *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>a35a4191e0bb69bed9545efc5e2b2461c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GProxyAddress *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>ae54b9556db86b4f13b2aef789685fcad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_protocol</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>a29e4a3ec41b44bfbdd84e293a150435e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_destination_protocol</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>a6e08014cd68b7a3e914644d52902709d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_destination_hostname</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>a4659d53a045fef897be678ecbe318754</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>guint16</type>
      <name>get_destination_port</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>a15d3f974c5126730367bfa3516e13b27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_username</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>a3202cbeb2870a7985de0e3a662167b79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_password</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>abad3fd953ffd22dc2c29adfbef4d6325</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_uri</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>a35417e3ef72b8ff0b225b6de7d94de6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_protocol</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>a484f23a2554d8c460f06762f023ad799</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_destination_protocol</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>a4413cfa507b07fe49ad452a434fb9b05</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_destination_hostname</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>aef978683ad5480053108cd2a70ab3ebb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_destination_port</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>a2f08a55228d0d50cfcdb498984365d9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_username</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>a61c1ab5006103dee24424bb79fdfe6db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_password</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>a9d9758196232779fe64d3d090596e9b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_uri</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>ac41088a1c9e94877c86ce28674284789</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>a816ba2a308f0ab60f694b3fda492075c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; ProxyAddress &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>a31cd08b2cce1b8a1d04af9a6e39db600</anchor>
      <arglist>(const Glib::RefPtr&lt; InetAddress &gt; &amp;address, guint16 port, const Glib::ustring &amp;protocol, const Glib::ustring &amp;destination_hostname, guint16 destination_port, const Glib::ustring &amp;username=Glib::ustring(), const Glib::ustring &amp;password=Glib::ustring())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ProxyAddress</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>af36bca5cb7e8bc4a8791600e7267b66b</anchor>
      <arglist>(const Glib::RefPtr&lt; InetAddress &gt; &amp;address, guint16 port, const Glib::ustring &amp;protocol, const Glib::ustring &amp;destination_hostname, guint16 destination_port, const Glib::ustring &amp;username=Glib::ustring(), const Glib::ustring &amp;password=Glib::ustring())</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::ProxyAddress &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>af5ac5530f123a7fc5a0720fb1a806e0b</anchor>
      <arglist>(GProxyAddress *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::ProxyResolver</name>
    <filename>classGio_1_1ProxyResolver.html</filename>
    <base>Glib::Interface</base>
    <member kind="function">
      <type></type>
      <name>ProxyResolver</name>
      <anchorfile>classGio_1_1ProxyResolver.html</anchorfile>
      <anchor>a84a9907929696ccc52d527da67342c94</anchor>
      <arglist>(ProxyResolver &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ProxyResolver &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1ProxyResolver.html</anchorfile>
      <anchor>a8cb4e30044021237f7bbb52abd36cd07</anchor>
      <arglist>(ProxyResolver &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ProxyResolver</name>
      <anchorfile>classGio_1_1ProxyResolver.html</anchorfile>
      <anchor>a5d38a6987606583b212b5099876c8344</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GProxyResolver *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ProxyResolver.html</anchorfile>
      <anchor>a3131a7a3022a4006769e0776c3eafc57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GProxyResolver *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ProxyResolver.html</anchorfile>
      <anchor>a55384f814f57a3d52c115fa7a67f3d4d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_supported</name>
      <anchorfile>classGio_1_1ProxyResolver.html</anchorfile>
      <anchor>acfa3509e4b51bb4c41d50e929e9e6cda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::ustring &gt;</type>
      <name>lookup</name>
      <anchorfile>classGio_1_1ProxyResolver.html</anchorfile>
      <anchor>a33219314d36a97ccf30bab58ec279e18</anchor>
      <arglist>(const Glib::ustring &amp;uri, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::ustring &gt;</type>
      <name>lookup</name>
      <anchorfile>classGio_1_1ProxyResolver.html</anchorfile>
      <anchor>abc8a97d206ad3e6562a2327322ba9369</anchor>
      <arglist>(const Glib::ustring &amp;uri)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_async</name>
      <anchorfile>classGio_1_1ProxyResolver.html</anchorfile>
      <anchor>a4fe46f67b2787252395103798a9891d2</anchor>
      <arglist>(const Glib::ustring &amp;uri, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_async</name>
      <anchorfile>classGio_1_1ProxyResolver.html</anchorfile>
      <anchor>ab46bc2b5f3672e11ea26c0289aea572e</anchor>
      <arglist>(const Glib::ustring &amp;uri, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::ustring &gt;</type>
      <name>lookup_finish</name>
      <anchorfile>classGio_1_1ProxyResolver.html</anchorfile>
      <anchor>ab1a31effc0f9384d7c8904c11fbd5668</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1ProxyResolver.html</anchorfile>
      <anchor>aa5f390c09142e4a6c8fd6bedf310f154</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1ProxyResolver.html</anchorfile>
      <anchor>a9bf948d2fbf6559b3c28223416b2fb5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; ProxyResolver &gt;</type>
      <name>get_default</name>
      <anchorfile>classGio_1_1ProxyResolver.html</anchorfile>
      <anchor>ac8cbc11eb57150f28dfc8f6046bb4648</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ProxyResolver</name>
      <anchorfile>classGio_1_1ProxyResolver.html</anchorfile>
      <anchor>a5884689d8072cb836fd1ddc6c09dc510</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::ProxyResolver &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1ProxyResolver.html</anchorfile>
      <anchor>a3f4b5af03af6650ce85eb1df6e50add6</anchor>
      <arglist>(GProxyResolver *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::RemoteActionGroup</name>
    <filename>classGio_1_1RemoteActionGroup.html</filename>
    <base>Glib::Interface</base>
    <member kind="function">
      <type></type>
      <name>RemoteActionGroup</name>
      <anchorfile>classGio_1_1RemoteActionGroup.html</anchorfile>
      <anchor>a2053c3ad447831ad9f4dffe27b42443f</anchor>
      <arglist>(RemoteActionGroup &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RemoteActionGroup &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1RemoteActionGroup.html</anchorfile>
      <anchor>a4f22eaae4949d2ef1be424e5ffd5624b</anchor>
      <arglist>(RemoteActionGroup &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RemoteActionGroup</name>
      <anchorfile>classGio_1_1RemoteActionGroup.html</anchorfile>
      <anchor>abdad8a9c2da551fac10497befd0e6359</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GRemoteActionGroup *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1RemoteActionGroup.html</anchorfile>
      <anchor>aa9e53402a7b3aaf8b27bc344cbc7e769</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GRemoteActionGroup *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1RemoteActionGroup.html</anchorfile>
      <anchor>a6932fe016913f8a3e99eb290e5d380a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activate_action</name>
      <anchorfile>classGio_1_1RemoteActionGroup.html</anchorfile>
      <anchor>a8e7d6bd31fe683dfd391911c0739f635</anchor>
      <arglist>(const Glib::ustring &amp;action_name, const Glib::VariantBase &amp;parameter, const Glib::VariantBase &amp;platform_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>change_action_state</name>
      <anchorfile>classGio_1_1RemoteActionGroup.html</anchorfile>
      <anchor>a50b57a393496744613ddb20ad951e510</anchor>
      <arglist>(const Glib::ustring &amp;action_name, const Glib::VariantBase &amp;value, const Glib::VariantBase &amp;platform_data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>activate_action_vfunc</name>
      <anchorfile>classGio_1_1RemoteActionGroup.html</anchorfile>
      <anchor>a03466a5b72dad8a24ded1b5b8825e5a5</anchor>
      <arglist>(const Glib::ustring &amp;action_name, const Glib::VariantBase &amp;parameter, const Glib::VariantBase &amp;platform_data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>change_action_state_vfunc</name>
      <anchorfile>classGio_1_1RemoteActionGroup.html</anchorfile>
      <anchor>a54a92949ab973e6589b6552a1c9f6542</anchor>
      <arglist>(const Glib::ustring &amp;action_name, const Glib::VariantBase &amp;value, const Glib::VariantBase &amp;platform_data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1RemoteActionGroup.html</anchorfile>
      <anchor>ad0514a7d8bbf26ed0221d4a1e5eaf68f</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1RemoteActionGroup.html</anchorfile>
      <anchor>aa12a0373fdd170185d2b238c911672b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RemoteActionGroup</name>
      <anchorfile>classGio_1_1RemoteActionGroup.html</anchorfile>
      <anchor>aaf64689f4e9d63c615535191d2f736ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::RemoteActionGroup &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1RemoteActionGroup.html</anchorfile>
      <anchor>a236fcb0eaef59a2d9231d05573a8f7bb</anchor>
      <arglist>(GRemoteActionGroup *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::Resolver</name>
    <filename>classGio_1_1Resolver.html</filename>
    <base>Glib::Object</base>
    <member kind="function">
      <type></type>
      <name>Resolver</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>a7472a6ee389c6a6f8e5416705884b28b</anchor>
      <arglist>(Resolver &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Resolver &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>a154b0ebc755e498d2f94d1f45ff9ec19</anchor>
      <arglist>(Resolver &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Resolver</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>ae807990f5dcc197996272ffdf734cd88</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GResolver *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>a4d323772493d0cf739816c80f08398d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GResolver *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>a260bb5fd0dca57b250059157429c38c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GResolver *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>ae1cf170f1700985b286238d5f1dcbab2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::ListHandle&lt; Glib::RefPtr&lt; InetAddress &gt; &gt;</type>
      <name>lookup_by_name</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>aea1576fa2684d9bca58a589098a8371e</anchor>
      <arglist>(const Glib::ustring &amp;hostname, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ListHandle&lt; Glib::RefPtr&lt; InetAddress &gt; &gt;</type>
      <name>lookup_by_name</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>a4aaf18d0bcc67d6d139d993b140a8b14</anchor>
      <arglist>(const Glib::ustring &amp;hostname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_by_name_async</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>a0130482bb442e3a006e06d57665c2318</anchor>
      <arglist>(const Glib::ustring &amp;hostname, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_by_name_async</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>ae38a0fc714443839c0bb3a0e40dcd082</anchor>
      <arglist>(const Glib::ustring &amp;hostname, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ListHandle&lt; Glib::RefPtr&lt; InetAddress &gt; &gt;</type>
      <name>lookup_by_name_finish</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>afaf6f9f003fd213ebecb893d60f14380</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>lookup_by_address</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>abb5740225148191d2e93d7a6b12caf23</anchor>
      <arglist>(const Glib::RefPtr&lt; InetAddress &gt; &amp;address, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>lookup_by_address</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>a81f793a31c8ddaa2bf26361721c3fd1c</anchor>
      <arglist>(const Glib::RefPtr&lt; InetAddress &gt; &amp;address)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_by_address_async</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>a3bfd36d312e60b748df35089d5126b4f</anchor>
      <arglist>(const Glib::RefPtr&lt; InetAddress &gt; &amp;address, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_by_address_async</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>a91d05a43f8083af54826fcb3303e0eba</anchor>
      <arglist>(const Glib::RefPtr&lt; InetAddress &gt; &amp;address, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>lookup_by_address_finish</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>ae127e4682bfb20ef0b292e7b98460762</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>ListHandle_SrvTarget</type>
      <name>lookup_service</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>aab5e246c4f14e55e079c8a280dd3de5b</anchor>
      <arglist>(const Glib::ustring &amp;service, const Glib::ustring &amp;protocol, const Glib::ustring &amp;domain, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>ListHandle_SrvTarget</type>
      <name>lookup_service</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>a3b131a66a7a7bd3e89713384ff2f6be3</anchor>
      <arglist>(const Glib::ustring &amp;service, const Glib::ustring &amp;protocol, const Glib::ustring &amp;domain)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_service_async</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>a49d103c02f6e0e8ad5d4e7abb1967ef0</anchor>
      <arglist>(const Glib::ustring &amp;service, const Glib::ustring &amp;protocol, const Glib::ustring &amp;domain, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_service_async</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>a58d46752ddd5305d811df4707c3ce4a7</anchor>
      <arglist>(const Glib::ustring &amp;service, const Glib::ustring &amp;protocol, const Glib::ustring &amp;domain, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>ListHandle_SrvTarget</type>
      <name>lookup_service_finish</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>aae68cb39415c9286474d92c7aeba2e47</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::VariantContainerBase &gt;</type>
      <name>lookup_records</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>a0977fbf517bd2b564c32f0aa59180a45</anchor>
      <arglist>(const Glib::ustring &amp;rrname, ResolverRecordType record_type, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::VariantContainerBase &gt;</type>
      <name>lookup_records</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>a0ccfae307c3490ca04047539b02adc9c</anchor>
      <arglist>(const Glib::ustring &amp;rrname, ResolverRecordType record_type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_records_async</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>a93ae3a79790b7cc59680bc096cd053c0</anchor>
      <arglist>(const Glib::ustring &amp;rrname, ResolverRecordType record_type, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_records_async</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>ac763d0f77c67aeba6bfa52fbdc0eb586</anchor>
      <arglist>(const Glib::ustring &amp;rrname, ResolverRecordType record_type, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::VariantContainerBase &gt;</type>
      <name>lookup_records_finish</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>a69b72b15a960fa5ab7ebe4ad25b0589f</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void &gt;</type>
      <name>signal_reload</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>a5597c49754609fcdf99f2964674b5684</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>aed43435bf27bf2108cb0ec6fb40ff6a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Resolver &gt;</type>
      <name>get_default</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>ac822ffe60ab0ce2acfdc85ccb908f6fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set_default</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>afbb1fb4f9edb0e553dbb61ca2437601c</anchor>
      <arglist>(const Glib::RefPtr&lt; Resolver &gt; &amp;resolver)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Resolver &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>aa710fc39dacfe0e34730487741d84fb9</anchor>
      <arglist>(GResolver *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::ResolverError</name>
    <filename>classGio_1_1ResolverError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumeration">
      <type></type>
      <name>Code</name>
      <anchorfile>classGio_1_1ResolverError.html</anchorfile>
      <anchor>a6afd83f5c3f01ba099e5b82b8501b6f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_FOUND</name>
      <anchorfile>classGio_1_1ResolverError.html</anchorfile>
      <anchor>a6afd83f5c3f01ba099e5b82b8501b6f2a2b8667fe152d2dc8a4f5598631e02028</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TEMPORARY_FAILURE</name>
      <anchorfile>classGio_1_1ResolverError.html</anchorfile>
      <anchor>a6afd83f5c3f01ba099e5b82b8501b6f2aa34214adc268a818b8b9a1505051a704</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTERNAL</name>
      <anchorfile>classGio_1_1ResolverError.html</anchorfile>
      <anchor>a6afd83f5c3f01ba099e5b82b8501b6f2accaa80784e45debcc241822aaa0b8a86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_FOUND</name>
      <anchorfile>classGio_1_1ResolverError.html</anchorfile>
      <anchor>a6afd83f5c3f01ba099e5b82b8501b6f2a2b8667fe152d2dc8a4f5598631e02028</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TEMPORARY_FAILURE</name>
      <anchorfile>classGio_1_1ResolverError.html</anchorfile>
      <anchor>a6afd83f5c3f01ba099e5b82b8501b6f2aa34214adc268a818b8b9a1505051a704</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTERNAL</name>
      <anchorfile>classGio_1_1ResolverError.html</anchorfile>
      <anchor>a6afd83f5c3f01ba099e5b82b8501b6f2accaa80784e45debcc241822aaa0b8a86</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResolverError</name>
      <anchorfile>classGio_1_1ResolverError.html</anchorfile>
      <anchor>a0d015ee9e313bfcd9a86414423f73fbb</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResolverError</name>
      <anchorfile>classGio_1_1ResolverError.html</anchorfile>
      <anchor>a70b6b6e5cef46494eca49d696afc2bd8</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGio_1_1ResolverError.html</anchorfile>
      <anchor>a57756893bbb2ab5d30f8e6572ca53eab</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::Resource</name>
    <filename>classGio_1_1Resource.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGio_1_1Resource.html</anchorfile>
      <anchor>a74e48c67265aa84e8b42aa94171a5802</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGio_1_1Resource.html</anchorfile>
      <anchor>a4d7b13f6d6c265ef7fa6a959f3bca179</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GResource *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Resource.html</anchorfile>
      <anchor>ab8b9f111f02fb26fb98e7b5658e1be7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GResource *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Resource.html</anchorfile>
      <anchor>a84082ad4592a2f7ea57e6b0f3cac7d30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GResource *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1Resource.html</anchorfile>
      <anchor>a277cd62b43446ebb11fdee6b0ece39e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Resource</name>
      <anchorfile>classGio_1_1Resource.html</anchorfile>
      <anchor>a4144120c003051f82c096bf353d5465a</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Resource</name>
      <anchorfile>classGio_1_1Resource.html</anchorfile>
      <anchor>a82bc5d7c85f4dacb151a918f51ae4973</anchor>
      <arglist>(const Resource &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Resource &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1Resource.html</anchorfile>
      <anchor>a012d40f2c73471154d639ca115196681</anchor>
      <arglist>(const Resource &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; InputStream &gt;</type>
      <name>open_stream</name>
      <anchorfile>classGio_1_1Resource.html</anchorfile>
      <anchor>a73152d7676cc04de2934a24cabcb4161</anchor>
      <arglist>(const std::string &amp;path, ResourceLookupFlags lookup_flags=RESOURCE_LOOKUP_FLAGS_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Glib::Bytes &gt;</type>
      <name>lookup_data</name>
      <anchorfile>classGio_1_1Resource.html</anchorfile>
      <anchor>ac65cdfb3ea7b4dad45520f69239f9875</anchor>
      <arglist>(const std::string &amp;path, ResourceLookupFlags lookup_flags=RESOURCE_LOOKUP_FLAGS_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>enumerate_children</name>
      <anchorfile>classGio_1_1Resource.html</anchorfile>
      <anchor>afd2494e2684d0965230a73b66b5cdb3c</anchor>
      <arglist>(const std::string &amp;path, ResourceLookupFlags lookup_flags=RESOURCE_LOOKUP_FLAGS_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_info</name>
      <anchorfile>classGio_1_1Resource.html</anchorfile>
      <anchor>a467fbb7706bd906804666e94a45649b0</anchor>
      <arglist>(const std::string &amp;path, gsize &amp;size, ResourceFlags &amp;flags, ResourceLookupFlags lookup_flags=RESOURCE_LOOKUP_FLAGS_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_file_exists</name>
      <anchorfile>classGio_1_1Resource.html</anchorfile>
      <anchor>aa0a8de17c77e42034c3c1f4b94b9b8e2</anchor>
      <arglist>(const std::string &amp;path, ResourceLookupFlags lookup_flags=RESOURCE_LOOKUP_FLAGS_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_file_exists_nothrow</name>
      <anchorfile>classGio_1_1Resource.html</anchorfile>
      <anchor>ac3c2d71024a65f4c363d4d890c2a5ce3</anchor>
      <arglist>(const std::string &amp;path, ResourceLookupFlags lookup_flags=RESOURCE_LOOKUP_FLAGS_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>register_global</name>
      <anchorfile>classGio_1_1Resource.html</anchorfile>
      <anchor>a3fb288bd1eadd14d912e57816af78d69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregister_global</name>
      <anchorfile>classGio_1_1Resource.html</anchorfile>
      <anchor>a7d733989f20583a9b507e5a6b55bf368</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Resource &gt;</type>
      <name>create_from_data</name>
      <anchorfile>classGio_1_1Resource.html</anchorfile>
      <anchor>a77e475a7d3d74d9a1ae6ab5495ba9cf7</anchor>
      <arglist>(const Glib::RefPtr&lt; const Glib::Bytes &gt; &amp;data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Resource &gt;</type>
      <name>create_from_file</name>
      <anchorfile>classGio_1_1Resource.html</anchorfile>
      <anchor>a5ae3ed2970753d16312c6491437c34a4</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; InputStream &gt;</type>
      <name>open_stream_global</name>
      <anchorfile>classGio_1_1Resource.html</anchorfile>
      <anchor>a086b7d2e2ddc80a8299f554e40c11bf3</anchor>
      <arglist>(const std::string &amp;path, ResourceLookupFlags lookup_flags=RESOURCE_LOOKUP_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; const Glib::Bytes &gt;</type>
      <name>lookup_data_global</name>
      <anchorfile>classGio_1_1Resource.html</anchorfile>
      <anchor>a4808bada1bdd91a0fea676278e228c86</anchor>
      <arglist>(const std::string &amp;path, ResourceLookupFlags lookup_flags=RESOURCE_LOOKUP_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; std::string &gt;</type>
      <name>enumerate_children_global</name>
      <anchorfile>classGio_1_1Resource.html</anchorfile>
      <anchor>a3fd0d76ecf982c02143adc3cb067c21d</anchor>
      <arglist>(const std::string &amp;path, ResourceLookupFlags lookup_flags=RESOURCE_LOOKUP_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>get_info_global</name>
      <anchorfile>classGio_1_1Resource.html</anchorfile>
      <anchor>ad896c96962241277862ecdf79d280e07</anchor>
      <arglist>(const std::string &amp;path, gsize &amp;size, ResourceFlags &amp;flags, ResourceLookupFlags lookup_flags=RESOURCE_LOOKUP_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>get_file_exists_global</name>
      <anchorfile>classGio_1_1Resource.html</anchorfile>
      <anchor>a3b8c541e40d3a0518cd8d60e194e1e4d</anchor>
      <arglist>(const std::string &amp;path, ResourceLookupFlags lookup_flags=RESOURCE_LOOKUP_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_file_exists_global_nothrow</name>
      <anchorfile>classGio_1_1Resource.html</anchorfile>
      <anchor>a11b64b575fbf26afec0a7bbf568caa8d</anchor>
      <arglist>(const std::string &amp;path, ResourceLookupFlags lookup_flags=RESOURCE_LOOKUP_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classGio_1_1Resource.html</anchorfile>
      <anchor>abe91e60f999a7559a2724a7a7d53fc81</anchor>
      <arglist>(void *, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Resource &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Resource.html</anchorfile>
      <anchor>a003261f7c75bd2a67e67486e5a5b90d1</anchor>
      <arglist>(GResource *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::ResourceError</name>
    <filename>classGio_1_1ResourceError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumeration">
      <type></type>
      <name>Code</name>
      <anchorfile>classGio_1_1ResourceError.html</anchorfile>
      <anchor>ad52695ecc4fc823c588771deeb6f9f20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_FOUND</name>
      <anchorfile>classGio_1_1ResourceError.html</anchorfile>
      <anchor>ad52695ecc4fc823c588771deeb6f9f20aacca710c264e830abae259975e9e4acc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTERNAL</name>
      <anchorfile>classGio_1_1ResourceError.html</anchorfile>
      <anchor>ad52695ecc4fc823c588771deeb6f9f20a52a10b8963128006f69b84cbce3d7614</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_FOUND</name>
      <anchorfile>classGio_1_1ResourceError.html</anchorfile>
      <anchor>ad52695ecc4fc823c588771deeb6f9f20aacca710c264e830abae259975e9e4acc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTERNAL</name>
      <anchorfile>classGio_1_1ResourceError.html</anchorfile>
      <anchor>ad52695ecc4fc823c588771deeb6f9f20a52a10b8963128006f69b84cbce3d7614</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResourceError</name>
      <anchorfile>classGio_1_1ResourceError.html</anchorfile>
      <anchor>ab2667ba9baeae522292bcc70a81b3e5c</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResourceError</name>
      <anchorfile>classGio_1_1ResourceError.html</anchorfile>
      <anchor>a1514e8d78c53b8e71b994ee31ea9f31b</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGio_1_1ResourceError.html</anchorfile>
      <anchor>af5c46ad04b328ec1fb12b4c3d50565e3</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::Seekable</name>
    <filename>classGio_1_1Seekable.html</filename>
    <base>Glib::Interface</base>
    <member kind="function">
      <type></type>
      <name>Seekable</name>
      <anchorfile>classGio_1_1Seekable.html</anchorfile>
      <anchor>ac643419efc3ff3b9e6475a90004f1c8e</anchor>
      <arglist>(Seekable &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Seekable &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1Seekable.html</anchorfile>
      <anchor>a49b9d67561f9966557a66a604a489c1b</anchor>
      <arglist>(Seekable &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Seekable</name>
      <anchorfile>classGio_1_1Seekable.html</anchorfile>
      <anchor>abd8546754ec95e2dc46a69d242b33a0b</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GSeekable *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Seekable.html</anchorfile>
      <anchor>a96176a5c51102b9a2d02f4555f2e048f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSeekable *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Seekable.html</anchorfile>
      <anchor>a964cacb73eabe0f1475d3f988bced9e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>goffset</type>
      <name>tell</name>
      <anchorfile>classGio_1_1Seekable.html</anchorfile>
      <anchor>aae403b3b2f5c3ddb0fb9625c9263f756</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_seek</name>
      <anchorfile>classGio_1_1Seekable.html</anchorfile>
      <anchor>a38bb14a1da546b2516a32f905ca0576d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seek</name>
      <anchorfile>classGio_1_1Seekable.html</anchorfile>
      <anchor>aa717d10e2322df67b488657add79c70b</anchor>
      <arglist>(goffset offset, Glib::SeekType type, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seek</name>
      <anchorfile>classGio_1_1Seekable.html</anchorfile>
      <anchor>a3404742af5d7855f6017578091f432cc</anchor>
      <arglist>(goffset offset, Glib::SeekType type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_truncate</name>
      <anchorfile>classGio_1_1Seekable.html</anchorfile>
      <anchor>a0751e0c96ebc8164a254fcdefb7f282a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>truncate</name>
      <anchorfile>classGio_1_1Seekable.html</anchorfile>
      <anchor>aaf0792e6281670ea411cd7c3ef981998</anchor>
      <arglist>(goffset offset, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>truncate</name>
      <anchorfile>classGio_1_1Seekable.html</anchorfile>
      <anchor>a4458c08f1486ce89f8a7f9b49f10eb13</anchor>
      <arglist>(goffset offset)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1Seekable.html</anchorfile>
      <anchor>ae8a94d31313527ff431cf49ba5af2bd8</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Seekable.html</anchorfile>
      <anchor>a7abea7847823d4c93e35481d657f7978</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Seekable</name>
      <anchorfile>classGio_1_1Seekable.html</anchorfile>
      <anchor>a9601b59f26a240348bd70ec68b1c4f1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Seekable &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Seekable.html</anchorfile>
      <anchor>a0756ddeb91dc62f76d8a380716ecd228</anchor>
      <arglist>(GSeekable *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::Settings</name>
    <filename>classGio_1_1Settings.html</filename>
    <base>Glib::Object</base>
    <member kind="function">
      <type></type>
      <name>Settings</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a47ff4a6bcb5e6229e94199aa9f3e3439</anchor>
      <arglist>(Settings &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Settings &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a149d06904f4df4e04496769452f300ad</anchor>
      <arglist>(Settings &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Settings</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>ac65aef89ef31fc4fc1296907c3194af0</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GSettings *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a1350e8f1b8a2f0f02c0e00d0cd7077d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSettings *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>ada3fbb6083f4a7632728c140948e3bc6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GSettings *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>ade0eeed443f1dfbc4b649bb294e445f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_value</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a3b98d9d71ac41b70f09caf6cb4341183</anchor>
      <arglist>(const Glib::ustring &amp;key, const Glib::VariantBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_value</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>ad4478dc279fd6a2ba85b94322cd52408</anchor>
      <arglist>(const Glib::ustring &amp;key, Glib::VariantBase &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_user_value</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a5ea2841d0630b2bbbd773d653f9b3c31</anchor>
      <arglist>(const Glib::ustring &amp;key, Glib::VariantBase &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_default_value</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a7cdcd3ab29b1995cff4b66b02a00de9b</anchor>
      <arglist>(const Glib::ustring &amp;key, Glib::VariantBase &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_int</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a215efcba16be0d415c6d0dc4ff706ed5</anchor>
      <arglist>(const Glib::ustring &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_int</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a7b252643c8ce35c7892cb0b831d67046</anchor>
      <arglist>(const Glib::ustring &amp;key, int value)</arglist>
    </member>
    <member kind="function">
      <type>gint64</type>
      <name>get_int64</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a3005dc39beed929a67d11faf5a7cf9df</anchor>
      <arglist>(const Glib::ustring &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_int64</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>ac16a2206a7efb04db95515447029fe68</anchor>
      <arglist>(const Glib::ustring &amp;key, gint64 value)</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>get_uint</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>aebd8d8a29331551457000ac5b0965ea6</anchor>
      <arglist>(const Glib::ustring &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_uiint</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a10284d1e3636cc50aece0268ac18be87</anchor>
      <arglist>(const Glib::ustring &amp;key, guint value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_uint</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>af654562bc45e2872f337ef5ec61bb83d</anchor>
      <arglist>(const Glib::ustring &amp;key, guint value)</arglist>
    </member>
    <member kind="function">
      <type>guint64</type>
      <name>get_uint64</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>ab7b30a55d0d24511680232d95431533a</anchor>
      <arglist>(const Glib::ustring &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_uint64</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a2193aec7e39c691ff77473d8e6261f88</anchor>
      <arglist>(const Glib::ustring &amp;key, guint64 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_boolean</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>ae7ccc3e7b41e38349d094fc4bb25ea96</anchor>
      <arglist>(const Glib::ustring &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_boolean</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a08d737b902c907b692894ab577c4142e</anchor>
      <arglist>(const Glib::ustring &amp;key, bool value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_string</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a3fe636c429b9494ee4a2b3b1c6ac0104</anchor>
      <arglist>(const Glib::ustring &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_string</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>ad1b4617d76cc9166e68bc849d22c5677</anchor>
      <arglist>(const Glib::ustring &amp;key, const Glib::ustring &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_double</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a73e3e4c3c5d62eaf23114a53481048c0</anchor>
      <arglist>(const Glib::ustring &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_double</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a81b1bebc7cbf6518aa13ab00bf9966d5</anchor>
      <arglist>(const Glib::ustring &amp;key, double value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::StringArrayHandle</type>
      <name>get_string_array</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>ab3c01695db8e26618ecbf6baeb1cf90a</anchor>
      <arglist>(const Glib::ustring &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_string_array</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a9e6e1bf8334f40cb76999a0678ac1b41</anchor>
      <arglist>(const Glib::ustring &amp;key, const Glib::StringArrayHandle &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_enum</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a06d14350a00cda2ea2658a02140b6736</anchor>
      <arglist>(const Glib::ustring &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_enum</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a7fe28dd8bb422f55471d636e6bc5b648</anchor>
      <arglist>(const Glib::ustring &amp;key, int value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_enum</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a4919c4cc8d0ef793b76f8b9c1b0c5ef5</anchor>
      <arglist>(const Glib::ustring &amp;key, int value)</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>get_flags</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>aacca9157cd6386e7b8a4feb9b345bce3</anchor>
      <arglist>(const Glib::ustring &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_flags</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a049877419a2d25a282ebbfd013bfea79</anchor>
      <arglist>(const Glib::ustring &amp;key, guint value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_flags</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a0fef4723561938d27fc27bd5c8b5329b</anchor>
      <arglist>(const Glib::ustring &amp;key, guint value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Settings &gt;</type>
      <name>get_child</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a98cfd433996d89d031108ca92e4d43d8</anchor>
      <arglist>(const Glib::ustring &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Settings &gt;</type>
      <name>get_child</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>addd46b17c9735fe62e65e31a0f06ac9c</anchor>
      <arglist>(const Glib::ustring &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_writable</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a1bf00bd707016cfcccc84504e1a2c379</anchor>
      <arglist>(const Glib::ustring &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delay</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a33b026961c111c7cb811dd8886bd10aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>ae1309ff09c69e278fbb9869219c3ac03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>revert</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>ac11529acbf1dd553e5f3ebc5c0125ecd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_has_unapplied</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a6f2e4404b9ce3e94ea2575d8fde2ef8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a8fe9b5174d02d36b6b8fdacb0b10a049</anchor>
      <arglist>(const Glib::ustring &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::ustring &gt;</type>
      <name>list_children</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>abb10e1cae6996ea9502bab55b3c6cbe9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::ustring &gt;</type>
      <name>list_keys</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a5bde70411685f05b4abe391ca2f464e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>range_check</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>af8a8b58a95a8c483a9769ecd3af2a80f</anchor>
      <arglist>(const Glib::ustring &amp;key, const Glib::VariantBase &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bind</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a39d962b3e73ec10608a3a744cb4255b4</anchor>
      <arglist>(const Glib::ustring &amp;key, Glib::ObjectBase *object, const Glib::ustring &amp;property, SettingsBindFlags flags=SETTINGS_BIND_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bind</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a893453b68172f5ecb6c008d2d642da3f</anchor>
      <arglist>(const Glib::ustring &amp;key, const Glib::PropertyProxy_Base &amp;property_proxy, SettingsBindFlags flags=SETTINGS_BIND_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bind_writable</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a47c913cd1ce8122d742911fa54896fa7</anchor>
      <arglist>(const Glib::ustring &amp;key, Glib::ObjectBase *object, const Glib::ustring &amp;property, bool inverted=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bind_writable</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>ac0da884631dc04c338287e475a5b93fe</anchor>
      <arglist>(const Glib::ustring &amp;key, const Glib::PropertyProxy_Base &amp;property_proxy, bool inverted=false)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Action &gt;</type>
      <name>create_action</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a03112726403e4b3b8d45f203d7307d6b</anchor>
      <arglist>(const Glib::ustring &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_delay_apply</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a6eddc7cbc976efac7469ee4d4f27e591</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_has_unapplied</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>aebba18275cb58f1a6230e37804e68dcf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; std::string &gt;</type>
      <name>property_path</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a9ea882dec6d3bbddb4567a96d37d647c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_schema</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a82bc87c7c45a81c0e9ae2b9b881ef63b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_schema_id</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a288a8a401f634959ed46818d223e2e1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, const Glib::ustring &amp;&gt;</type>
      <name>signal_changed</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a0b1c53ae0665aa0bb89af71c783c6694</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxyDetailedAnyType&lt; void, const Glib::ustring &amp;&gt;</type>
      <name>signal_changed</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a057407ed6ceeb7d4ae9887a86b499c96</anchor>
      <arglist>(const Glib::ustring &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; bool, GQuark &gt;</type>
      <name>signal_writable_change_event</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>aedaa3dd4d1b833e001cc2bfd225dc257</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, const Glib::ustring &amp;&gt;</type>
      <name>signal_writable_changed</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a29debfd4747768a9c1b4071dc19ad080</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxyDetailedAnyType&lt; void, const Glib::ustring &amp;&gt;</type>
      <name>signal_writable_changed</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a79382b62e35c4794c2b900c578f376fb</anchor>
      <arglist>(const Glib::ustring &amp;key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a47e88375019e4cbd035d8fd02d59e93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Settings &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a4b873240833bfc5afa42df0545869319</anchor>
      <arglist>(const Glib::ustring &amp;schema_id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Settings &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a9d70ff80260b8930c3620af4cd76157a</anchor>
      <arglist>(const Glib::ustring &amp;schema_id, const Glib::ustring &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; Glib::ustring &gt;</type>
      <name>list_schemas</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a78d4be25c912ac1f00028762ab92c409</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Settings</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>ae86e1ba3dbb6fc9f7675be8c03224565</anchor>
      <arglist>(const Glib::ustring &amp;schema_id)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Settings</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a13b61e3656046ad0e734776ff83a0e4f</anchor>
      <arglist>(const Glib::ustring &amp;schema_id, const Glib::ustring &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_changed</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a4e88dd069cb1aab8e39ca1c058e552ce</anchor>
      <arglist>(const Glib::ustring &amp;key)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>on_writable_change_event</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a39319fdcb5ba844a6d1150add60a1196</anchor>
      <arglist>(GQuark key)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_writable_changed</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a2428f5d4bf7c40753fc112412197c5cb</anchor>
      <arglist>(const Glib::ustring &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Settings &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>ae47167a74b09e7410bc6eadea3ba989c</anchor>
      <arglist>(GSettings *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::SettingsSchema</name>
    <filename>classGio_1_1SettingsSchema.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGio_1_1SettingsSchema.html</anchorfile>
      <anchor>afeda58b64c06430abeda79913f6e60cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGio_1_1SettingsSchema.html</anchorfile>
      <anchor>a75e9292018e87346801f098ec5ca8c94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GSettingsSchema *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SettingsSchema.html</anchorfile>
      <anchor>a2853d7cc9689efdb48872205be3292a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSettingsSchema *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SettingsSchema.html</anchorfile>
      <anchor>ae5c52ad0f930efc5b066eb5ccbc00632</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GSettingsSchema *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1SettingsSchema.html</anchorfile>
      <anchor>a9a8cee08a4ba56e29824a558986bddea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SettingsSchema</name>
      <anchorfile>classGio_1_1SettingsSchema.html</anchorfile>
      <anchor>aa506743fc060ba01bcce7b5bbfb007ae</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SettingsSchema</name>
      <anchorfile>classGio_1_1SettingsSchema.html</anchorfile>
      <anchor>af0600902e8c512e2ddf75b843049d232</anchor>
      <arglist>(const SettingsSchema &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>SettingsSchema &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1SettingsSchema.html</anchorfile>
      <anchor>a8d4d59862fff378dbf560d89e23f9975</anchor>
      <arglist>(const SettingsSchema &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_id</name>
      <anchorfile>classGio_1_1SettingsSchema.html</anchorfile>
      <anchor>abf191d069b6197bf2360a83e3e5b02bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_path</name>
      <anchorfile>classGio_1_1SettingsSchema.html</anchorfile>
      <anchor>abeb4a9637345e1c6aafd16b399651023</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SettingsSchemaKey &gt;</type>
      <name>get_key</name>
      <anchorfile>classGio_1_1SettingsSchema.html</anchorfile>
      <anchor>a4270831d58745a2f180279d198c1d546</anchor>
      <arglist>(const Glib::ustring &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const SettingsSchemaKey &gt;</type>
      <name>get_key</name>
      <anchorfile>classGio_1_1SettingsSchema.html</anchorfile>
      <anchor>acd0d949c41b2ea4d85071be6ee552a3e</anchor>
      <arglist>(const Glib::ustring &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_key</name>
      <anchorfile>classGio_1_1SettingsSchema.html</anchorfile>
      <anchor>ac80e54c17d154c90f9b4f76af1a2c359</anchor>
      <arglist>(const Glib::ustring &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::ustring &gt;</type>
      <name>list_keys</name>
      <anchorfile>classGio_1_1SettingsSchema.html</anchorfile>
      <anchor>ae371398be05e66c1fd22ccdfab939848</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::ustring &gt;</type>
      <name>list_children</name>
      <anchorfile>classGio_1_1SettingsSchema.html</anchorfile>
      <anchor>a15750cca433c903a007ee2081d9d4b6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classGio_1_1SettingsSchema.html</anchorfile>
      <anchor>a038d5671e74c21ba58f7c6ff3870f465</anchor>
      <arglist>(void *, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::SettingsSchema &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1SettingsSchema.html</anchorfile>
      <anchor>aca8d3a2bb32fb98c35db23434024ebbc</anchor>
      <arglist>(GSettingsSchema *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::SettingsSchemaKey</name>
    <filename>classGio_1_1SettingsSchemaKey.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGio_1_1SettingsSchemaKey.html</anchorfile>
      <anchor>a259816eebf50db8d7c1b1b1af7224301</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGio_1_1SettingsSchemaKey.html</anchorfile>
      <anchor>a592052fa9fe109be8f5a0a96bb3bfa59</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GSettingsSchemaKey *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SettingsSchemaKey.html</anchorfile>
      <anchor>aac1c28c0a94ea2100b51393537a02c24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSettingsSchemaKey *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SettingsSchemaKey.html</anchorfile>
      <anchor>aa8a1f84859b485c83f9b2e2fc107f790</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GSettingsSchemaKey *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1SettingsSchemaKey.html</anchorfile>
      <anchor>ad2cefe472d5cd6bd1622c44f734abb60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SettingsSchemaKey</name>
      <anchorfile>classGio_1_1SettingsSchemaKey.html</anchorfile>
      <anchor>a8abd5106b7e79d886cdbde3d15de5ee2</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SettingsSchemaKey</name>
      <anchorfile>classGio_1_1SettingsSchemaKey.html</anchorfile>
      <anchor>a485830f4351534e1975214be03c5df7d</anchor>
      <arglist>(const SettingsSchemaKey &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>SettingsSchemaKey &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1SettingsSchemaKey.html</anchorfile>
      <anchor>a02ff9012248450e1c53e1aa7436fcdd2</anchor>
      <arglist>(const SettingsSchemaKey &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_name</name>
      <anchorfile>classGio_1_1SettingsSchemaKey.html</anchorfile>
      <anchor>adab162cd73f701601fc42d5b3e52f5d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_summary</name>
      <anchorfile>classGio_1_1SettingsSchemaKey.html</anchorfile>
      <anchor>ade2aa6ddfc3dd5085d41bed42e75b615</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_description</name>
      <anchorfile>classGio_1_1SettingsSchemaKey.html</anchorfile>
      <anchor>a4abe9be9dcdb0f1434726e6ab3399767</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantType</type>
      <name>get_value_type</name>
      <anchorfile>classGio_1_1SettingsSchemaKey.html</anchorfile>
      <anchor>a008a00c1d50b86b1b887718652fb30e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantBase</type>
      <name>get_default_value</name>
      <anchorfile>classGio_1_1SettingsSchemaKey.html</anchorfile>
      <anchor>a34077a424d3814a42be650acce44c421</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantBase</type>
      <name>get_range</name>
      <anchorfile>classGio_1_1SettingsSchemaKey.html</anchorfile>
      <anchor>ab1e224434b2766b93cf3ee24cb3c873d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>range_check</name>
      <anchorfile>classGio_1_1SettingsSchemaKey.html</anchorfile>
      <anchor>ae28c27f5c544e86002a8331255ba1fc7</anchor>
      <arglist>(const Glib::VariantBase &amp;value) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classGio_1_1SettingsSchemaKey.html</anchorfile>
      <anchor>a07717cbb0b90ec28201162f809572de0</anchor>
      <arglist>(void *, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::SettingsSchemaKey &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1SettingsSchemaKey.html</anchorfile>
      <anchor>a453cc9cf9808f8487fa9dd13bd39aed7</anchor>
      <arglist>(GSettingsSchemaKey *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::SettingsSchemaSource</name>
    <filename>classGio_1_1SettingsSchemaSource.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGio_1_1SettingsSchemaSource.html</anchorfile>
      <anchor>a968dba59bbdc0ce7ad1ccebec4d51e12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGio_1_1SettingsSchemaSource.html</anchorfile>
      <anchor>a349a6e7756c00efa339a6a1e10e5b37b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GSettingsSchemaSource *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SettingsSchemaSource.html</anchorfile>
      <anchor>ade84bbc5ab14413ec6c59cd558d958d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSettingsSchemaSource *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SettingsSchemaSource.html</anchorfile>
      <anchor>ad4f42d3104ad283e2b49aae0c6bd33ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GSettingsSchemaSource *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1SettingsSchemaSource.html</anchorfile>
      <anchor>a572fd08a39e750990bb8d4d05b929acc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SettingsSchemaSource</name>
      <anchorfile>classGio_1_1SettingsSchemaSource.html</anchorfile>
      <anchor>aeca65e40a4de1f1bc5cddbfd0cd75a65</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SettingsSchemaSource</name>
      <anchorfile>classGio_1_1SettingsSchemaSource.html</anchorfile>
      <anchor>ae0d51ba4b5a03f87359838c5893706dc</anchor>
      <arglist>(const SettingsSchemaSource &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>SettingsSchemaSource &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1SettingsSchemaSource.html</anchorfile>
      <anchor>aeefe5c2c4357d652b8855b753d80f163</anchor>
      <arglist>(const SettingsSchemaSource &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SettingsSchema &gt;</type>
      <name>lookup</name>
      <anchorfile>classGio_1_1SettingsSchemaSource.html</anchorfile>
      <anchor>a1c4e545996bc435c60a9f5c1a630fe08</anchor>
      <arglist>(const Glib::ustring &amp;schema_id, bool recursive)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const SettingsSchema &gt;</type>
      <name>lookup</name>
      <anchorfile>classGio_1_1SettingsSchemaSource.html</anchorfile>
      <anchor>ace0df7f8b82b8030c130ee1e900a41b9</anchor>
      <arglist>(const Glib::ustring &amp;schema_id, bool recursive) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; SettingsSchemaSource &gt;</type>
      <name>get_default</name>
      <anchorfile>classGio_1_1SettingsSchemaSource.html</anchorfile>
      <anchor>a7b3969820364e5326bd6b0f4fdacc77d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classGio_1_1SettingsSchemaSource.html</anchorfile>
      <anchor>ae7b3228b9f1e555f15ca51db488fd7e1</anchor>
      <arglist>(void *, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::SettingsSchemaSource &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1SettingsSchemaSource.html</anchorfile>
      <anchor>a19d8ee30170642fa673bff5de24486d8</anchor>
      <arglist>(GSettingsSchemaSource *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::SignalSocket</name>
    <filename>classGio_1_1SignalSocket.html</filename>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGio_1_1SignalSocket.html</anchorfile>
      <anchor>ab45069dc0f789fa8696cd5f046095071</anchor>
      <arglist>(const sigc::slot&lt; bool, Glib::IOCondition &gt; &amp;slot, const Glib::RefPtr&lt; Socket &gt; &amp;socket, Glib::IOCondition condition, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable=Glib::RefPtr&lt; Cancellable &gt;(), int priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::SimpleAction</name>
    <filename>classGio_1_1SimpleAction.html</filename>
    <base>Glib::Object</base>
    <base>Gio::Action</base>
    <member kind="function">
      <type></type>
      <name>SimpleAction</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>aba5fb4f078c8c713acdc81dbf1587421</anchor>
      <arglist>(SimpleAction &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SimpleAction &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>ad258105ea72585a34ba5c88c97072b66</anchor>
      <arglist>(SimpleAction &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SimpleAction</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>a224957fabf280f7b7db22379172b4bea</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GSimpleAction *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>a5e6be51f3739bfc8f5d171ceead94835</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSimpleAction *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>a1b2e70d4d84765a6228fffd0ac3d35d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GSimpleAction *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>aa1037e01952aa51e1cfa4f7fc1c24a76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_enabled</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>ab6bd894ec5e4a8ccbc0522651d966532</anchor>
      <arglist>(bool enabled=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_state</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>a270254674eaa4433f7bab0b7719d0caf</anchor>
      <arglist>(const Glib::VariantBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_state_hint</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>aa6024873339c29fd23b58868b7da51b3</anchor>
      <arglist>(const Glib::VariantBase &amp;state_hint)</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_enabled</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>abcf2020650a46989c1f020c8cf5caaaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_enabled</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>a2ba1dd6c818fe18775be36b91e3d370c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_name</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>a48a08a8d50fb5036b017cfe46206e009</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::VariantType &gt;</type>
      <name>property_parameter_type</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>aad2dddff2c07c4684963737e39863ad6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; Glib::VariantBase &gt;</type>
      <name>property_state</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>a9363b36b85553d1c780b3fe3c2c0a83c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::VariantBase &gt;</type>
      <name>property_state</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>a0bd6eac74e72cd21a1c5af30d0ed8e4d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::VariantType &gt;</type>
      <name>property_state_type</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>ad3d09d2fdbc9db69084f3156f566002a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, const Glib::VariantBase &amp;&gt;</type>
      <name>signal_activate</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>addc52e1b624ce1ee3d408bdf58280b3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, const Glib::VariantBase &amp;&gt;</type>
      <name>signal_change_state</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>afeadbbab5698569fd6a992ad4e8e6b78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>a77db76b91c7cd2e7116ee27477887cfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; SimpleAction &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>ab49a8754f0d710f5064db95efaf5cd4f</anchor>
      <arglist>(const Glib::ustring &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; SimpleAction &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>a6f004f25a8075615b484c1ee9d1474c1</anchor>
      <arglist>(const Glib::ustring &amp;name, const Glib::VariantType &amp;parameter_type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; SimpleAction &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>a32d124c2ab4e5a91ac8fc533bf5a75d2</anchor>
      <arglist>(const Glib::ustring &amp;name, const Glib::VariantType &amp;parameter_type, const Glib::VariantBase &amp;state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; SimpleAction &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>a33bb44a59e9e565907a157abcbdd7e5e</anchor>
      <arglist>(const Glib::ustring &amp;name, const Glib::VariantBase &amp;state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; SimpleAction &gt;</type>
      <name>create_bool</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>ab5fbebee60193dc7dbce8fee519c5f22</anchor>
      <arglist>(const Glib::ustring &amp;name, bool state=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; SimpleAction &gt;</type>
      <name>create_radio_string</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>ab0665036f4e3e42d8f532f4f0110762d</anchor>
      <arglist>(const Glib::ustring &amp;name, const Glib::ustring &amp;initial_state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; SimpleAction &gt;</type>
      <name>create_radio_integer</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>abad35bc20c110bdbe0d116a603b183f0</anchor>
      <arglist>(const Glib::ustring &amp;name, gint32 initial_state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SimpleAction</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>a43949bc727a32442900ae8ea776bbb04</anchor>
      <arglist>(const Glib::ustring &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SimpleAction</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>a8fc5255c94f94fcca490715993054fee</anchor>
      <arglist>(const Glib::ustring &amp;name, const Glib::VariantBase &amp;state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SimpleAction</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>ab55f95d22c5850e735ab6ecb578c39c5</anchor>
      <arglist>(const Glib::ustring &amp;name, const Glib::VariantType &amp;parameter_type)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SimpleAction</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>ae896e3bd67b9795d07e60aa5b286d7e3</anchor>
      <arglist>(const Glib::ustring &amp;name, const Glib::VariantType &amp;parameter_type, const Glib::VariantBase &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::SimpleAction &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>ab0efbb7fc4ceb066f17c645163d3a215</anchor>
      <arglist>(GSimpleAction *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::SimpleActionGroup</name>
    <filename>classGio_1_1SimpleActionGroup.html</filename>
    <base>Glib::Object</base>
    <base>Gio::ActionGroup</base>
    <base>Gio::ActionMap</base>
    <member kind="function">
      <type></type>
      <name>SimpleActionGroup</name>
      <anchorfile>classGio_1_1SimpleActionGroup.html</anchorfile>
      <anchor>ab41d2e5b7ca5c30797147e074d6b50d0</anchor>
      <arglist>(SimpleActionGroup &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SimpleActionGroup &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1SimpleActionGroup.html</anchorfile>
      <anchor>a0e44ea24454c2675c78b867bf00c47fe</anchor>
      <arglist>(SimpleActionGroup &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SimpleActionGroup</name>
      <anchorfile>classGio_1_1SimpleActionGroup.html</anchorfile>
      <anchor>a50332dd6d282711e33cdb51104fb4376</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GSimpleActionGroup *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SimpleActionGroup.html</anchorfile>
      <anchor>a591885efdd0d5d9ff0bea5dc79751163</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSimpleActionGroup *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SimpleActionGroup.html</anchorfile>
      <anchor>a8e8df5315aaffb263bb789bbe6c2d029</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GSimpleActionGroup *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1SimpleActionGroup.html</anchorfile>
      <anchor>afa689dddfd869d0b7accbf1a9718aedb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Action &gt;</type>
      <name>lookup</name>
      <anchorfile>classGio_1_1SimpleActionGroup.html</anchorfile>
      <anchor>a3a6bc562ad3c2e3cd399c7887a360f54</anchor>
      <arglist>(const Glib::ustring &amp;action_name)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Action &gt;</type>
      <name>lookup</name>
      <anchorfile>classGio_1_1SimpleActionGroup.html</anchorfile>
      <anchor>aeb9949400907cde12f3f31c2ee07888a</anchor>
      <arglist>(const Glib::ustring &amp;action_name) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classGio_1_1SimpleActionGroup.html</anchorfile>
      <anchor>aec3a7fdf664a278dd054c8059626fe85</anchor>
      <arglist>(const Glib::RefPtr&lt; Action &gt; &amp;action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classGio_1_1SimpleActionGroup.html</anchorfile>
      <anchor>aaedc9271eedb80de5a7293e63f40a28d</anchor>
      <arglist>(const Glib::ustring &amp;action_name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1SimpleActionGroup.html</anchorfile>
      <anchor>a31fb0bb3cfe7f41b0ef7f267ff117529</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; SimpleActionGroup &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1SimpleActionGroup.html</anchorfile>
      <anchor>a8a0688cce9d424c41dfe66d225b65def</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SimpleActionGroup</name>
      <anchorfile>classGio_1_1SimpleActionGroup.html</anchorfile>
      <anchor>aedbedbc41fa7a74e864e5979de72b219</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::SimpleActionGroup &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1SimpleActionGroup.html</anchorfile>
      <anchor>aa6720d18094e26476a8c7f0cc62577c9</anchor>
      <arglist>(GSimpleActionGroup *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::SimpleIOStream</name>
    <filename>classGio_1_1SimpleIOStream.html</filename>
    <base>Gio::IOStream</base>
    <member kind="function">
      <type></type>
      <name>SimpleIOStream</name>
      <anchorfile>classGio_1_1SimpleIOStream.html</anchorfile>
      <anchor>a77170816132f77996f037c1814f8aef5</anchor>
      <arglist>(SimpleIOStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SimpleIOStream &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1SimpleIOStream.html</anchorfile>
      <anchor>a000ffc6245c723951fd4b953e15b773d</anchor>
      <arglist>(SimpleIOStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SimpleIOStream</name>
      <anchorfile>classGio_1_1SimpleIOStream.html</anchorfile>
      <anchor>a477f50b8c239d77946deb232563ba2f3</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GSimpleIOStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SimpleIOStream.html</anchorfile>
      <anchor>a998f1e0e0e679372e438751336f16716</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSimpleIOStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SimpleIOStream.html</anchorfile>
      <anchor>aaca570891d9bff6ca41035454823bf2b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GSimpleIOStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1SimpleIOStream.html</anchorfile>
      <anchor>ac2f317e134b1736c678fec55ac557bc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; InputStream &gt; &gt;</type>
      <name>property_input_stream</name>
      <anchorfile>classGio_1_1SimpleIOStream.html</anchorfile>
      <anchor>adc7c36fa99089028473da09d5098f66f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; OutputStream &gt; &gt;</type>
      <name>property_output_stream</name>
      <anchorfile>classGio_1_1SimpleIOStream.html</anchorfile>
      <anchor>a6335a4cd405a45ae3cf2851d4400a8de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1SimpleIOStream.html</anchorfile>
      <anchor>a518170c19b6adcbbe7ab31a90c9d1499</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; SimpleIOStream &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1SimpleIOStream.html</anchorfile>
      <anchor>af8774ede83199649411655ca3247ca35</anchor>
      <arglist>(const Glib::RefPtr&lt; InputStream &gt; &amp;input_stream, const Glib::RefPtr&lt; OutputStream &gt; &amp;output_stream)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SimpleIOStream</name>
      <anchorfile>classGio_1_1SimpleIOStream.html</anchorfile>
      <anchor>a6d3019a6fd606d79dcf93de1f7107449</anchor>
      <arglist>(const Glib::RefPtr&lt; InputStream &gt; &amp;input_stream, const Glib::RefPtr&lt; OutputStream &gt; &amp;output_stream)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::SimpleIOStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1SimpleIOStream.html</anchorfile>
      <anchor>a24eeb534d029eefe87f3cc7d9cde82d1</anchor>
      <arglist>(GSimpleIOStream *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::SimplePermission</name>
    <filename>classGio_1_1SimplePermission.html</filename>
    <base>Gio::Permission</base>
    <member kind="function">
      <type></type>
      <name>SimplePermission</name>
      <anchorfile>classGio_1_1SimplePermission.html</anchorfile>
      <anchor>a6d85e6a11f91e465309fe7399653e1fc</anchor>
      <arglist>(SimplePermission &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SimplePermission &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1SimplePermission.html</anchorfile>
      <anchor>a7f217fa080d9b3eded262006beba41a9</anchor>
      <arglist>(SimplePermission &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SimplePermission</name>
      <anchorfile>classGio_1_1SimplePermission.html</anchorfile>
      <anchor>ae765cf77c3632f58c8715e5c25f963d2</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GSimplePermission *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SimplePermission.html</anchorfile>
      <anchor>a930619561631b2af5554a21c860f15f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSimplePermission *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SimplePermission.html</anchorfile>
      <anchor>ace68b75b81b195914fdb3226930b95cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GSimplePermission *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1SimplePermission.html</anchorfile>
      <anchor>ad74d63f44d31e62825e64cd2ffa894bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1SimplePermission.html</anchorfile>
      <anchor>aedcb5578a1effa4b995ce34270a297af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; SimplePermission &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1SimplePermission.html</anchorfile>
      <anchor>a6c859f97ff152c1149af149b892885c6</anchor>
      <arglist>(bool allowed)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SimplePermission</name>
      <anchorfile>classGio_1_1SimplePermission.html</anchorfile>
      <anchor>ab19fd348ec9ff7053c1c1a5fa7b4547a</anchor>
      <arglist>(bool allowed)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::SimplePermission &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1SimplePermission.html</anchorfile>
      <anchor>aed091eaffb81141c8e36875e178722e1</anchor>
      <arglist>(GSimplePermission *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::Socket</name>
    <filename>classGio_1_1Socket.html</filename>
    <base>Glib::Object</base>
    <base>Gio::Initable</base>
    <member kind="function">
      <type></type>
      <name>Socket</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a87a644ad422b1b809acad72e38829fb1</anchor>
      <arglist>(Socket &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Socket &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>ab713c206146db8f718377e4cd3609c27</anchor>
      <arglist>(Socket &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Socket</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a41175831b614d34f1addca9e14406156</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GSocket *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a1d51f7bcd83450331d7261898e9007d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSocket *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a231c75a04b55adc55be7d8c0d9c77183</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GSocket *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>ae2fe06b1a579c40b596933da0ded4e37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bind</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a16044bba5924c183cff90f0a4cf47394</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketAddress &gt; &amp;address, bool allow_reuse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>listen</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>af16eed3fd42f3769b5e608f96db214fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Socket &gt;</type>
      <name>accept</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a137ae34a8f211eaed11f9a58ca6b3f5e</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Socket &gt;</type>
      <name>accept</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a4b6c036db4e484e6b7f0419962254888</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a9ab220f5714a6116d35e846b00f4ad23</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketAddress &gt; &amp;address, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a0828763fe472d46aed833fad30af1c0b</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketAddress &gt; &amp;address)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check_connect_result</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a06b68dc0948e6dfa158487c314f9a521</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>receive</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a742403f4d076ba9050a435d95fea5d1c</anchor>
      <arglist>(char *buffer, gsize size, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>receive</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a73463b7677ffdfddaced49bdf170b4b6</anchor>
      <arglist>(char *buffer, gsize size)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>receive_from</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a4d2d4382139553881ae139920e8db93e</anchor>
      <arglist>(Glib::RefPtr&lt; SocketAddress &gt; &amp;address, char *buffer, gsize size, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>receive_from</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a056fd2c3609971d5befcf2b4ccf51aa3</anchor>
      <arglist>(Glib::RefPtr&lt; SocketAddress &gt; &amp;address, char *buffer, gsize size)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>send</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>adc5c3145109841e0406150ad0b7f547c</anchor>
      <arglist>(const gchar *buffer, gsize size, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>send</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a986efa2a33528ce5aba0d7c6a7be1b65</anchor>
      <arglist>(const gchar *buffer, gsize size)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>send_to</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a8b2d4ff883535e696b6cdaacd730f729</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketAddress &gt; &amp;address, const char *buffer, gsize size, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>send_to</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a929c8c4e0c10a39d65358853e94d9c4f</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketAddress &gt; &amp;address, const char *buffer, gsize size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>aab30d39b9e73fef6401c76d1d4edc118</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_closed</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a7ac925f7e6592ad4a96afe0f75411a96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketSource &gt;</type>
      <name>create_source</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a048e7f79eec8a9a2d8c5cabeb0cdea34</anchor>
      <arglist>(Glib::IOCondition condition, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable=Glib::RefPtr&lt; Cancellable &gt;())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shutdown</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a4f685bc040e9e10abe093deec0719fd7</anchor>
      <arglist>(bool shutdown_read, bool shutdown_write)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_connected</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>aea9561511b77e652271705fbfdb2f8f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>get_available_bytes</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>aaf30f86fbb811e42d4b02025fecd365c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::IOCondition</type>
      <name>condition_check</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a86fdc5d814fd61abab15ec03c7da20ec</anchor>
      <arglist>(Glib::IOCondition condition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>condition_wait</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>aaae28fa63035c05396064f5f4bb4fc36</anchor>
      <arglist>(Glib::IOCondition condition, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>condition_wait</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a9ae420715a2050cc09112f178bae88ba</anchor>
      <arglist>(Glib::IOCondition condition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>condition_timed_wait</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>addb32e1cc859b9689bf10169dfd70a9c</anchor>
      <arglist>(Glib::IOCondition condition, gint64 timeout, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>condition_timed_wait</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a71a3736a74c730c76e7c9a1670c3fbdd</anchor>
      <arglist>(Glib::IOCondition condition, gint64 timeout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_listen_backlog</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>adc7b9d6cecc1c2234f9979b2ffb1b309</anchor>
      <arglist>(int backlog)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_listen_backlog</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a95018a13f9a9fa847c6d48d0eb8cf9bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_blocking</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a51d5a174441c255b69be9e809cdb96b3</anchor>
      <arglist>(bool blocking)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_blocking</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a9b1385ee685d568bb62c765a699375dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_keepalive</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a6cfac67927584ae7afe53006eebb06d7</anchor>
      <arglist>(bool keepalive)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_keepalive</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a9ca0e3b124bd5389aa16755b235d687a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SocketFamily</type>
      <name>get_family</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>abf1cc5dc604f37949bf7bcc10689e8b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_fd</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>af5ffd790264cd81d04f761a9ecb7d2eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketAddress &gt;</type>
      <name>get_local_address</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a88996ae15dc3cd3a58cc2899d9eac35b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketAddress &gt;</type>
      <name>get_remote_address</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a58756ed2c242d58af88d48f548fd902f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SocketProtocol</type>
      <name>get_protocol</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a635fcda9f26c66c0f420785b58e2c888</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SocketType</type>
      <name>get_socket_type</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>ae7af0980dee62c641209383524ee2821</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>speaks_ipv4</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a1039bcc577a10a74942a73b11903038a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Credentials &gt;</type>
      <name>get_credentials</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a2fcda0eba8fcb30bd020624ce3f14d8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Credentials &gt;</type>
      <name>get_credentials</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a655722a85f8d7d6bf46757ada61d2b68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>get_timeout</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>acaae24b5c8a808e0e79b87f42ef3d227</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_timeout</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>afe942e5157528b217d7af4a7839a9e7a</anchor>
      <arglist>(guint timeout)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>receive_with_blocking</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a812c649ac510471833c7e3bc82e79d26</anchor>
      <arglist>(gchar *buffer, gsize size, bool blocking, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable=Glib::RefPtr&lt; Cancellable &gt;())</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>send_with_blocking</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>ad350079b590c05387736a0fd21e6e0ec</anchor>
      <arglist>(gchar *buffer, gsize size, bool blocking, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable=Glib::RefPtr&lt; Cancellable &gt;())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_option</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>aa6f7bd247c757942337893e882bfbf54</anchor>
      <arglist>(int level, int optname, int &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_option</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a13116c8ad9db97e3c04a370a8a7ec7d3</anchor>
      <arglist>(int level, int optname, int value)</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>get_ttl</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>afdc6935f98f4791dbcb825cee311f954</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_ttl</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>afce7afa0966858f85979cbb884294007</anchor>
      <arglist>(guint ttl)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_broadcast</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>aa8410b947e0c980a40f1c09896d8a2df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_broadcast</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>aacaf83216c9c5c127b6b5f8de425db4c</anchor>
      <arglist>(bool broadcast)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_multicast_loopback</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a71b0a7439fffe300f2521449057f6391</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_multicast_loopback</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>af2e4493d31588bb9175b090a061dbd5d</anchor>
      <arglist>(bool loopback)</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>get_multicast_ttl</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a892ab22cc17b9af645af1279bddb86f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_multicast_ttl</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>ac946c14f5f92326c3f062f23ed1d5837</anchor>
      <arglist>(guint ttl)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>join_multicast_group</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>afded8c4757a4f2f8a89b6550e48531db</anchor>
      <arglist>(const Glib::RefPtr&lt; InetAddress &gt; &amp;group, bool source_specific, const std::string &amp;iface)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>join_multicast_group</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a8db138a424b8b2ab26d62a9ef2b29656</anchor>
      <arglist>(const Glib::RefPtr&lt; InetAddress &gt; &amp;group, bool source_specific)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>leave_multicast_group</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a5c7e7ee9703f5f92dafa0a49cc47ca91</anchor>
      <arglist>(const Glib::RefPtr&lt; InetAddress &gt; &amp;group, bool source_specific, const std::string &amp;iface)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>leave_multicast_group</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>ad6648bc6b4d15ac95903ff47bb8e140f</anchor>
      <arglist>(const Glib::RefPtr&lt; InetAddress &gt; &amp;group, bool source_specific)</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_blocking</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a33e80070bf40ed9bff3d6e82fd6bc403</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_blocking</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a9d8340a33555f8cebee59c2f33aee637</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; SocketFamily &gt;</type>
      <name>property_family</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>aed87581f441268e0458b4f5c47cb45f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; int &gt;</type>
      <name>property_fd</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>abdf0db22dd026c90325177acf6918f31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_keepalive</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>aab16cc7a80fbbf288732298017f21a5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_keepalive</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>ab9e967dba8d2dae16811dcbc9ce4b986</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; int &gt;</type>
      <name>property_listen_backlog</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a7c7ef3aff95f2f829af2d3ce2ef36836</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; int &gt;</type>
      <name>property_listen_backlog</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>adba6d2073ec41110046bb21cd0ac640e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; SocketAddress &gt; &gt;</type>
      <name>property_local_address</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a8d3fcf3a546425182a7f337166f7690d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; SocketAddress &gt; &gt;</type>
      <name>property_remote_address</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>ad0bf5f45b7c972b1e1a8c8a57fa7a1ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; guint &gt;</type>
      <name>property_timeout</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a4042172bae49d0a2721546e31141d572</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; guint &gt;</type>
      <name>property_timeout</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a98eabf4431c1a32302b08491fa74cba5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; SocketProtocol &gt;</type>
      <name>property_protocol</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>ae583d9659bc20a6baf834294b884a2ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_broadcast</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a870a59c1f58b2c4b28aa402e7c824cf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_broadcast</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>ae83d5265a9985499294ee9acb2acd7e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; SocketType &gt;</type>
      <name>property_type</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a1550690526c316c5906b744aad9e922a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; guint &gt;</type>
      <name>property_ttl</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>ab7c54b763b8637fb06f4c03c4796e1c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; guint &gt;</type>
      <name>property_ttl</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a662108af774734ce33bfe561873c37ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_multicast_loopback</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a067aa46a4f9950001e56a315f4313add</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_multicast_loopback</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a2a61ba0147412766fd7aaa3c81f60c1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; guint &gt;</type>
      <name>property_multicast_ttl</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a669af953e00f1041a0088e1da6c7787d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; guint &gt;</type>
      <name>property_multicast_ttl</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a2646af9e4aff5ec0a5f426d65b6dc806</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a175fe732c02ea3e861a86e6c7d690ba0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Socket &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>aad87b57121a04302e4d9b41c322f59ca</anchor>
      <arglist>(SocketFamily family, SocketType type, SocketProtocol protocol, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable=Glib::RefPtr&lt; Cancellable &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Socket &gt;</type>
      <name>create_from_fd</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a8d0268c13028a8e3eeb551ca14b83b8e</anchor>
      <arglist>(int fd, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable=Glib::RefPtr&lt; Cancellable &gt;())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Socket</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a9d2455e8d617dc7a828480d65db7b473</anchor>
      <arglist>(SocketFamily family, SocketType type, SocketProtocol protocol, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Socket</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a74d7c4338fcf53743f23926fccc8c6d6</anchor>
      <arglist>(int fd, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Socket &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a4b4f2145105f84580f0a2659a9e8e5db</anchor>
      <arglist>(GSocket *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::SocketAddress</name>
    <filename>classGio_1_1SocketAddress.html</filename>
    <base>Glib::Object</base>
    <base>Gio::SocketConnectable</base>
    <member kind="function">
      <type></type>
      <name>SocketAddress</name>
      <anchorfile>classGio_1_1SocketAddress.html</anchorfile>
      <anchor>acfe6210968300b6a5b7c7a535c4eb15f</anchor>
      <arglist>(SocketAddress &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SocketAddress &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1SocketAddress.html</anchorfile>
      <anchor>a2cec0ab76fc8407fbb9fd526dd2e2bc4</anchor>
      <arglist>(SocketAddress &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SocketAddress</name>
      <anchorfile>classGio_1_1SocketAddress.html</anchorfile>
      <anchor>ac99b5cc8dab75b6c6c1feb132d12ea24</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GSocketAddress *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SocketAddress.html</anchorfile>
      <anchor>a1f65b6f40eeb9a30eb613345be919eb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSocketAddress *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SocketAddress.html</anchorfile>
      <anchor>a8dfb7055f2d94196400e4b6a2640c299</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GSocketAddress *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1SocketAddress.html</anchorfile>
      <anchor>afe1a5b0091f024fa725ff31b88d01e7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SocketFamily</type>
      <name>get_family</name>
      <anchorfile>classGio_1_1SocketAddress.html</anchorfile>
      <anchor>a7bb4af495d47580dc95f8820fef1f57c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>to_native</name>
      <anchorfile>classGio_1_1SocketAddress.html</anchorfile>
      <anchor>adec995b9e46746a5d55b3c5af592ec44</anchor>
      <arglist>(gpointer dest, gsize destlen)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>get_native_size</name>
      <anchorfile>classGio_1_1SocketAddress.html</anchorfile>
      <anchor>a82fede69fea721479c0f1af04aa0dbb0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; SocketFamily &gt; &gt;</type>
      <name>property_family</name>
      <anchorfile>classGio_1_1SocketAddress.html</anchorfile>
      <anchor>a8a24244570744c3530b5b9d21a3f7edf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1SocketAddress.html</anchorfile>
      <anchor>a2efef6041d01dc632d1d044f0ca594ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; SocketAddress &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1SocketAddress.html</anchorfile>
      <anchor>a3d2233d8fc6b47668d38d4b450b5bae2</anchor>
      <arglist>(gpointer native, gsize len)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::SocketAddress &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1SocketAddress.html</anchorfile>
      <anchor>adf0c2a59f4fc452b8b8e81f86ed1dc43</anchor>
      <arglist>(GSocketAddress *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::SocketAddressEnumerator</name>
    <filename>classGio_1_1SocketAddressEnumerator.html</filename>
    <base>Glib::Object</base>
    <member kind="function">
      <type></type>
      <name>SocketAddressEnumerator</name>
      <anchorfile>classGio_1_1SocketAddressEnumerator.html</anchorfile>
      <anchor>a4a2fbd793653ea1bf9361ece109bdbfa</anchor>
      <arglist>(SocketAddressEnumerator &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SocketAddressEnumerator &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1SocketAddressEnumerator.html</anchorfile>
      <anchor>a9f432f9b62ac817483a83913428a9d35</anchor>
      <arglist>(SocketAddressEnumerator &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SocketAddressEnumerator</name>
      <anchorfile>classGio_1_1SocketAddressEnumerator.html</anchorfile>
      <anchor>a5b502ca0d14edc6958ef4e0f630df8ca</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GSocketAddressEnumerator *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SocketAddressEnumerator.html</anchorfile>
      <anchor>a4e72db226aa1d74293b99dc1af495d29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSocketAddressEnumerator *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SocketAddressEnumerator.html</anchorfile>
      <anchor>a4115b410891be72362d5b5c1d3a42fb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GSocketAddressEnumerator *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1SocketAddressEnumerator.html</anchorfile>
      <anchor>a38a1287d76bd77803c85439077dd019f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketAddress &gt;</type>
      <name>next</name>
      <anchorfile>classGio_1_1SocketAddressEnumerator.html</anchorfile>
      <anchor>a2aac35c9406f82a2c627e70d815ad4f9</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketAddress &gt;</type>
      <name>next</name>
      <anchorfile>classGio_1_1SocketAddressEnumerator.html</anchorfile>
      <anchor>a2a0ab29942c1516f22127aea2a184d09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_async</name>
      <anchorfile>classGio_1_1SocketAddressEnumerator.html</anchorfile>
      <anchor>aa8c329070a4465ccfce945bb2cb24bd1</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_async</name>
      <anchorfile>classGio_1_1SocketAddressEnumerator.html</anchorfile>
      <anchor>a5fccf3d959f7ea6cfab87ef3c751513f</anchor>
      <arglist>(const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketAddress &gt;</type>
      <name>next_finish</name>
      <anchorfile>classGio_1_1SocketAddressEnumerator.html</anchorfile>
      <anchor>ac125504ce63d7d6f562a197f85b4e174</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1SocketAddressEnumerator.html</anchorfile>
      <anchor>ab18dc61845312c7b34c9bd76914c1e26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::SocketAddressEnumerator &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1SocketAddressEnumerator.html</anchorfile>
      <anchor>a333f94acb7c1811f6c649de72427f9d0</anchor>
      <arglist>(GSocketAddressEnumerator *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::SocketClient</name>
    <filename>classGio_1_1SocketClient.html</filename>
    <base>Glib::Object</base>
    <member kind="function">
      <type></type>
      <name>SocketClient</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a5ebe726e9b0bebf28faf6ad12254c07b</anchor>
      <arglist>(SocketClient &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SocketClient &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a6f19041825ad8390141ea8b500b5d83c</anchor>
      <arglist>(SocketClient &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SocketClient</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a2c536c2aa980b23ce3250a45954005e1</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GSocketClient *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a0cab44f8d959f5561ce09db40f37fbab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSocketClient *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a16e81540c77a6816ede961e8be2d7b10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GSocketClient *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a740585d6674ed733071adb9e363eac97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SocketFamily</type>
      <name>get_family</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>ada317b370581b32ccb0c51befebeb876</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_family</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>abbb05b3692bd0a44edc3f97909c8a06b</anchor>
      <arglist>(SocketFamily family)</arglist>
    </member>
    <member kind="function">
      <type>SocketType</type>
      <name>get_socket_type</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a1582154fe971e4b823ee25c5d8467f85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_socket_type</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a48c627d9a69600bb5276a798c4f28bb9</anchor>
      <arglist>(SocketType type)</arglist>
    </member>
    <member kind="function">
      <type>SocketProtocol</type>
      <name>get_protocol</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>af08b96436f79d3a54fa42e7e8fb71449</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_protocol</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>af1dce19d3e7d03342df0fc59cc5fd180</anchor>
      <arglist>(SocketProtocol protocol)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketAddress &gt;</type>
      <name>get_local_address</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>aa86e32cfad979f41423cd5f188668761</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const SocketAddress &gt;</type>
      <name>get_local_address</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>ac37c81605e9594df960a5aa26d3da089</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_local_address</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a70fffdb258e88a89b193d55175a4ac11</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketAddress &gt; &amp;address)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>connect</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>adc4843134253e4164ff2a88d7157d941</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketConnectable &gt; &amp;connectable, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>connect</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a4fe4a6da1e0d5c257a0c403ed5d9ed29</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketConnectable &gt; &amp;connectable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>connect_to_host</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a3ccf9ffb7da2fda13c486db95190022d</anchor>
      <arglist>(const Glib::ustring &amp;host_and_port, guint16 default_port, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>connect_to_host</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>aa3690d023ef5323e4374e64876cf23d8</anchor>
      <arglist>(const Glib::ustring &amp;host_and_port, guint16 default_port)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>connect_to_service</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a2eb95cad0f24bd060e407bb9a03b4e29</anchor>
      <arglist>(const Glib::ustring &amp;domain, const Glib::ustring &amp;service, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>connect_to_service</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a5dd523c612cbfb762ffbc66e7186a6f9</anchor>
      <arglist>(const Glib::ustring &amp;domain, const Glib::ustring &amp;service)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>connect_to_uri</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>adc739baf06362ca1d8b9085c29824cd8</anchor>
      <arglist>(const Glib::ustring &amp;uri, guint16 default_port, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>connect_to_uri</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>ac5502c79d43617494e04797127d5c683</anchor>
      <arglist>(const Glib::ustring &amp;uri, guint16 default_port)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_async</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>ac72506d54e8b9a6a288e97890bd02428</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketConnectable &gt; &amp;connectable, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_async</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a1c61ed29ce5197e72b910701c2654f0c</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketConnectable &gt; &amp;connectable, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>connect_finish</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>ae72760264a73e7013cd6a44118246140</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_to_host_async</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>adecacab1a97c8293ff8181c234a7d140</anchor>
      <arglist>(const Glib::ustring &amp;host_and_port, guint16 default_port, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_to_host_async</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>ad8e0be1bed11128046292c5a8e3e6221</anchor>
      <arglist>(const Glib::ustring &amp;host_and_port, guint16 default_port, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>connect_to_host_finish</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a519e772e91e08afa019fefd41797f0cf</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_to_service_async</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a01c8e91e6b392a2bdd3185e6d272de76</anchor>
      <arglist>(const Glib::ustring &amp;domain, const Glib::ustring &amp;service, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_to_service_async</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>ac9c710b06b609593e6dada7c8c44e83d</anchor>
      <arglist>(const Glib::ustring &amp;domain, const Glib::ustring &amp;service, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>connect_to_service_finish</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>af3f1887916549a434a2b1dbde2271105</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_to_uri_async</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a709a799a21c527ba7601176baf70038f</anchor>
      <arglist>(const Glib::ustring &amp;uri, guint16 default_port, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_to_uri_async</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>ac2412d5e66650cb297edd285225a84d4</anchor>
      <arglist>(const Glib::ustring &amp;uri, guint16 default_port, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>connect_to_uri_finish</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a296f3843b3f97f54af128dbba393493e</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_enable_proxy</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a2629c3fb38c7c10f2ee85c06e0efe5f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_enable_proxy</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>afdb420ee91818235d2f71b47d9bf46c8</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_tls</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a9b0a6e434cf8b33dc0d64cee8e9ae939</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_tls</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a1edaace3d1a758c15865587a637cd87d</anchor>
      <arglist>(bool tls=true)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>get_tls_validation_flags</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a1c5f18d56530b9b7e959db849b6f94c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_tls_validation_flags</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>aa6370bbeb0d8cae3d5f94cbdc771ecf6</anchor>
      <arglist>(TlsCertificateFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; ProxyResolver &gt;</type>
      <name>get_proxy_resolver</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a17087c6c363f7032cf10a4517c1974c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const ProxyResolver &gt;</type>
      <name>get_proxy_resolver</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>aa2cb76393ed9359451a31fade86254af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_proxy_resolver</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>abe2cc96edf20951be0c4f4c99e968d3f</anchor>
      <arglist>(const Glib::RefPtr&lt; ProxyResolver &gt; &amp;proxy_resolver)</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>get_timeout</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a9045eaa47c74aa8154f207f52ed21054</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_timeout</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a2a7c116f20ac0f5a7cdaf94a85e65edf</anchor>
      <arglist>(guint timeout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_application_proxy</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>ad5f9c381dda58a443fd60fd1701b6394</anchor>
      <arglist>(const Glib::ustring &amp;protocol)</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; SocketFamily &gt;</type>
      <name>property_family</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a73d55745e562988f6b87cb96568d44cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; SocketFamily &gt;</type>
      <name>property_family</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>aa6a16dfece073fa27b8b94565202f412</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; Glib::RefPtr&lt; SocketAddress &gt; &gt;</type>
      <name>property_local_address</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>ab8e42af55ac48bc251f4651eb0ab304b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; SocketAddress &gt; &gt;</type>
      <name>property_local_address</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a0aa1a1b4effb78039d06ab3d3bef0ba3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; SocketProtocol &gt;</type>
      <name>property_protocol</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>aa49768f6f2dc562e084a089d88d95cfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; SocketProtocol &gt;</type>
      <name>property_protocol</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a6db808b084fa25505f5ab352ecb8e11d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; SocketType &gt;</type>
      <name>property_type</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a69a469d9b8359e75eed2fb471571e36c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; SocketType &gt;</type>
      <name>property_type</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a4c130efb405656013045cfc21d80018c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; guint &gt;</type>
      <name>property_timeout</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a818c87282371f18ad069fb854bf4714e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; guint &gt;</type>
      <name>property_timeout</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>ad77892cc7e942f2cedef480bbc2f843a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_enable_proxy</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a2255faa5d5cc95c219e302b137c96961</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_enable_proxy</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a4b8ec579b3838ceb2967d853eace68c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_tls</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a4e146291c1b78e10e21ff1ce97f758bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_tls</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a910fdd3a50c5e56565a7b451363d4e59</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; TlsCertificateFlags &gt;</type>
      <name>property_tls_validation_flags</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a7f8364b8b977e6137942e142f6359932</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; TlsCertificateFlags &gt;</type>
      <name>property_tls_validation_flags</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>ad3f2e1f187f2635ec033f8939b6f77fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; Glib::RefPtr&lt; ProxyResolver &gt; &gt;</type>
      <name>property_proxy_resolver</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a4c85a10089ccaba0d8430b7391157835</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; ProxyResolver &gt; &gt;</type>
      <name>property_proxy_resolver</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>aa6a99913df7d0bd19a4ac881970e7289</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, SocketClientEvent, const Glib::RefPtr&lt; SocketConnectable &gt; &amp;, const Glib::RefPtr&lt; IOStream &gt; &amp;&gt;</type>
      <name>signal_event</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a76284fff3d5553cc8b52ad7cea3284be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>abb49a30264aa90f05d7ba58da710711f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; SocketClient &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a769c130f5e7e5855892e47917a981b8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SocketClient</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>abb8de2a3854aae7741efae1093929fd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::SocketClient &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>afe64acd90030e7e0128470f329b62129</anchor>
      <arglist>(GSocketClient *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::SocketConnectable</name>
    <filename>classGio_1_1SocketConnectable.html</filename>
    <base>Glib::Interface</base>
    <member kind="function">
      <type></type>
      <name>SocketConnectable</name>
      <anchorfile>classGio_1_1SocketConnectable.html</anchorfile>
      <anchor>a3474089ff43130194d5c4da064190d60</anchor>
      <arglist>(SocketConnectable &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SocketConnectable &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1SocketConnectable.html</anchorfile>
      <anchor>a763034d80277e11d3e826f6446c0d0c1</anchor>
      <arglist>(SocketConnectable &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SocketConnectable</name>
      <anchorfile>classGio_1_1SocketConnectable.html</anchorfile>
      <anchor>aac87acd16806205d0b4bcd561c2efa08</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GSocketConnectable *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SocketConnectable.html</anchorfile>
      <anchor>a25988d9aeb115345500d09b282cf7023</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSocketConnectable *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SocketConnectable.html</anchorfile>
      <anchor>a218ba4aaf64dea7cbe5a33169a888fea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketAddressEnumerator &gt;</type>
      <name>enumerate</name>
      <anchorfile>classGio_1_1SocketConnectable.html</anchorfile>
      <anchor>a52dcce3726042d15225accd1413689aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const SocketAddressEnumerator &gt;</type>
      <name>enumerate</name>
      <anchorfile>classGio_1_1SocketConnectable.html</anchorfile>
      <anchor>a4d527d4246acf6912341847065296e59</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketAddressEnumerator &gt;</type>
      <name>proxy_enumerate</name>
      <anchorfile>classGio_1_1SocketConnectable.html</anchorfile>
      <anchor>a65568f0bfff650e6de156ae270537e7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const SocketAddressEnumerator &gt;</type>
      <name>proxy_enumerate</name>
      <anchorfile>classGio_1_1SocketConnectable.html</anchorfile>
      <anchor>ae14bfc5fc93baf43e547a11bec57d2dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>to_string</name>
      <anchorfile>classGio_1_1SocketConnectable.html</anchorfile>
      <anchor>ab08c104d6406d9b27acc044290bb1632</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1SocketConnectable.html</anchorfile>
      <anchor>ac5522339bc623835f4a7245205d2ce5c</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1SocketConnectable.html</anchorfile>
      <anchor>a063b80662cd354812d298720ca33b5bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SocketConnectable</name>
      <anchorfile>classGio_1_1SocketConnectable.html</anchorfile>
      <anchor>ac2ed148dfc1b3d946972498587baf43f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::SocketConnectable &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1SocketConnectable.html</anchorfile>
      <anchor>ad7c218506ae7370a57399d87d1ec1459</anchor>
      <arglist>(GSocketConnectable *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::SocketConnection</name>
    <filename>classGio_1_1SocketConnection.html</filename>
    <base>Gio::IOStream</base>
    <member kind="function">
      <type></type>
      <name>SocketConnection</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>a1381f8d7fe675075f7cbd0615db9c934</anchor>
      <arglist>(SocketConnection &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SocketConnection &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>a9fc753844e9029921ac78d0decc2dbf5</anchor>
      <arglist>(SocketConnection &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SocketConnection</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>a639bb90f575bfeb4f64717ac62f0fb43</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GSocketConnection *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>a64ee8c7b7af10f959e1ddf0badfdb5d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSocketConnection *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>a9200062b23daa966390e7ffd96351ce8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GSocketConnection *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>a8aaaeca771edee679c8550972add66ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connect</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>a609802003402b9d0dc7591dd44da9b6e</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketAddress &gt; &amp;address, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connect</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>ab52d690e15693ea6e7dab569d3c3a4a7</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketAddress &gt; &amp;address)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_async</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>adeff4ca3d9cd840eda3b0f90f9a8b361</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketAddress &gt; &amp;address, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_async</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>a7df5ec63793aeeb6c34ae9b6640ff24b</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketAddress &gt; &amp;address, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connect_finish</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>a5ab081e87b8a919c4e83796964a39004</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_connected</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>a028cf27c4c6b14cfef64f7d5d477ced5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Socket &gt;</type>
      <name>get_socket</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>ab5913458956df812371086bda641f512</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Socket &gt;</type>
      <name>get_socket</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>a8efe668dd85aa3a86468865de903bc29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketAddress &gt;</type>
      <name>get_local_address</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>a04953ff02f45951bc3d56ef5315a77bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const SocketAddress &gt;</type>
      <name>get_local_address</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>a8f6b5f13d2a3970658d0ad334a915be4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketAddress &gt;</type>
      <name>get_remote_address</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>a4c31833dcef2ca7ac5a87bfb87868a39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const SocketAddress &gt;</type>
      <name>get_remote_address</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>a31e4aa26d70959f001d7ee228e46c24d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; Socket &gt; &gt;</type>
      <name>property_socket</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>a208a25bb9bfdf414e25fee55d3eeec05</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>a2961ac9c441518cc25c8586ab8051e45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>aa1808bd3d8d8a069aefe0856d10a1345</anchor>
      <arglist>(const Glib::RefPtr&lt; Socket &gt; &amp;socket)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::SocketConnection &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>af05cf28021ec850be5c5d691d287a19b</anchor>
      <arglist>(GSocketConnection *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::SocketControlMessage</name>
    <filename>classGio_1_1SocketControlMessage.html</filename>
    <base>Glib::Object</base>
    <member kind="function">
      <type></type>
      <name>SocketControlMessage</name>
      <anchorfile>classGio_1_1SocketControlMessage.html</anchorfile>
      <anchor>a83fb8e506705baad644111473c269785</anchor>
      <arglist>(SocketControlMessage &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SocketControlMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1SocketControlMessage.html</anchorfile>
      <anchor>a88fe7cfa885aed75d027025138292a30</anchor>
      <arglist>(SocketControlMessage &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SocketControlMessage</name>
      <anchorfile>classGio_1_1SocketControlMessage.html</anchorfile>
      <anchor>a67c0150c9f2c49636405c9b2d197cfd1</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GSocketControlMessage *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SocketControlMessage.html</anchorfile>
      <anchor>a97e6e55c88c8f9b1f1a8f7e3af07c8da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSocketControlMessage *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SocketControlMessage.html</anchorfile>
      <anchor>a7f122fcd25a770edaefbbeaedf24e984</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GSocketControlMessage *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1SocketControlMessage.html</anchorfile>
      <anchor>a1065632f7968d8047a9783ec48a8fad7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_level</name>
      <anchorfile>classGio_1_1SocketControlMessage.html</anchorfile>
      <anchor>ad5f08b5c31290c1576f9f344a3e882c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_msg_type</name>
      <anchorfile>classGio_1_1SocketControlMessage.html</anchorfile>
      <anchor>aec7ec24ab632ccc1acd82c0c9a5c8000</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>gsize</type>
      <name>get_size</name>
      <anchorfile>classGio_1_1SocketControlMessage.html</anchorfile>
      <anchor>ab493546ed31c5262f4edf9d9ff362f27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classGio_1_1SocketControlMessage.html</anchorfile>
      <anchor>a2137251ce7cf980eb5cabb656de266c9</anchor>
      <arglist>(gpointer data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gsize</type>
      <name>get_size_vfunc</name>
      <anchorfile>classGio_1_1SocketControlMessage.html</anchorfile>
      <anchor>a10195337b42082788e3611320e728a0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_level_vfunc</name>
      <anchorfile>classGio_1_1SocketControlMessage.html</anchorfile>
      <anchor>a0096a12f580c43acc397418cbd53120f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_type_vfunc</name>
      <anchorfile>classGio_1_1SocketControlMessage.html</anchorfile>
      <anchor>aa8f26ef6a8cc87ceebbcc3fe2f479697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize_vfunc</name>
      <anchorfile>classGio_1_1SocketControlMessage.html</anchorfile>
      <anchor>ab24ab562d8b308ef103223ebee3ddd47</anchor>
      <arglist>(gpointer data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1SocketControlMessage.html</anchorfile>
      <anchor>aa1eb7a0012fad90911f0151c213a6768</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; SocketControlMessage &gt;</type>
      <name>deserialize</name>
      <anchorfile>classGio_1_1SocketControlMessage.html</anchorfile>
      <anchor>a9c31819203a5acceeed45129575b0f35</anchor>
      <arglist>(int level, int type, gsize size, gpointer data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SocketControlMessage</name>
      <anchorfile>classGio_1_1SocketControlMessage.html</anchorfile>
      <anchor>a166e0661cc74954dc20aaebb51a9cc71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::SocketControlMessage &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1SocketControlMessage.html</anchorfile>
      <anchor>a7435ea455d9fe22543d135da294db37f</anchor>
      <arglist>(GSocketControlMessage *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::SocketListener</name>
    <filename>classGio_1_1SocketListener.html</filename>
    <base>Glib::Object</base>
    <member kind="function">
      <type></type>
      <name>SocketListener</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a6d51fc6a280eae9df6561acd56e8801e</anchor>
      <arglist>(SocketListener &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SocketListener &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a4332f57f2586b50275143bde4c35236b</anchor>
      <arglist>(SocketListener &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SocketListener</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a806558936945f86bb7f765dd7c9d132d</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GSocketListener *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a112233a13be0e663a39b677d8c1a8952</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSocketListener *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>ab21362b540b77b0c7ff9409b1b6268e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GSocketListener *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a9cdd04703b826b397f73f0bbf6badf99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_backlog</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a1e0b34890d5475229a96696b3bc136c8</anchor>
      <arglist>(int listen_backlog)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add_socket</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>af14e9d38af77406d829fda8c1090c06b</anchor>
      <arglist>(const Glib::RefPtr&lt; Socket &gt; &amp;socket, const Glib::RefPtr&lt; Glib::Object &gt; &amp;source_object)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add_socket</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>aa24cb88b5d0e78505e533e65fb8e7dea</anchor>
      <arglist>(const Glib::RefPtr&lt; Socket &gt; &amp;socket)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add_address</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a478b171019370dee7059c4a8fdaf6ec2</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketAddress &gt; &amp;address, SocketType type, SocketProtocol protocol, const Glib::RefPtr&lt; Glib::Object &gt; &amp;source_object, Glib::RefPtr&lt; SocketAddress &gt; &amp;effective_address)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add_address</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a17961c5dff54d2d6e311c50d2c744bc1</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketAddress &gt; &amp;address, SocketType type, SocketProtocol protocol, Glib::RefPtr&lt; SocketAddress &gt; &amp;effective_address)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add_inet_port</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a3ccffa841f43c0df0f632eb54ad1b441</anchor>
      <arglist>(guint16 port, const Glib::RefPtr&lt; Glib::Object &gt; &amp;source_object)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add_inet_port</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a59491f0159709ed08cd71c55cb738def</anchor>
      <arglist>(guint16 port)</arglist>
    </member>
    <member kind="function">
      <type>guint16</type>
      <name>add_any_inet_port</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a7639ca25eb3efe301ba08df635c2fc37</anchor>
      <arglist>(const Glib::RefPtr&lt; Glib::Object &gt; &amp;source_object)</arglist>
    </member>
    <member kind="function">
      <type>guint16</type>
      <name>add_any_inet_port</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a8cf1d0491124ef2eb40de9a4392e973b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Socket &gt;</type>
      <name>accept_socket</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a5a9657d9840d3e9d85efb406bb2393d2</anchor>
      <arglist>(Glib::RefPtr&lt; Glib::Object &gt; &amp;source_object, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Socket &gt;</type>
      <name>accept_socket</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a3e79b5b10555b73e4359671cdb53e038</anchor>
      <arglist>(Glib::RefPtr&lt; Glib::Object &gt; &amp;source_object)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Socket &gt;</type>
      <name>accept_socket</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>ac1951a2d25a34ee2305e8d82ae45250f</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Socket &gt;</type>
      <name>accept_socket</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a7caaf5afa1bf47bce88db9322271f804</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accept_socket_async</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a8fcc271647a1aa8628d2b2e60dd53d16</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accept_socket_async</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>aac3928ba157107d4f7609d8686ae4c6e</anchor>
      <arglist>(const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Socket &gt;</type>
      <name>accept_socket_finish</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a8875402a2dd1c5b1705236fd89081b3c</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result, Glib::RefPtr&lt; Glib::Object &gt; &amp;source_object)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Socket &gt;</type>
      <name>accept_socket_finish</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>ad6aeb8c8c05167b47a1479e2cbf8453c</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>accept</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a9329c1c706b3e53e8afbf29b8b320a68</anchor>
      <arglist>(Glib::RefPtr&lt; Object &gt; &amp;source_object, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>accept</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>ae6658e2ae53b7108ee7f6b15dddbfa56</anchor>
      <arglist>(Glib::RefPtr&lt; Object &gt; &amp;source_object)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>accept</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a2a0508771a9423713be6bf642fd1a3c4</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>accept</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>ac06069d9d192be5fe770272f213bc9e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accept_async</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a671c1485ca21446d5e0d2e555c05fa21</anchor>
      <arglist>(const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accept_async</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a27c6ce168ebbebd3848b246d7b9ecb64</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>accept_finish</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>ad09943bd09686f6cba2a6ad661000592</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result, Glib::RefPtr&lt; Glib::Object &gt; &amp;source_object)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>accept_finish</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>ab9a973269f259350e38b7843dfa93aa5</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>aa6da0570259eeeee527757628dc0f351</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; int &gt;</type>
      <name>property_listen_backlog</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a272ea9e83e8ca5a33d9e5701a5d5e87e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; int &gt;</type>
      <name>property_listen_backlog</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a4944fdf39f572185a0e2545b07973907</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>aac0328f0c20a9444065d64b52299ab77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; SocketListener &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a9ccbd6cc071b99b9631a84e50f920c67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SocketListener</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>ac60f15482d07f3d1396f7aba35f03462</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::SocketListener &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>ad1255a07751ad4ab4cf8c76ffef73d7e</anchor>
      <arglist>(GSocketListener *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::SocketService</name>
    <filename>classGio_1_1SocketService.html</filename>
    <base>Gio::SocketListener</base>
    <member kind="function">
      <type></type>
      <name>SocketService</name>
      <anchorfile>classGio_1_1SocketService.html</anchorfile>
      <anchor>a729300291e6e24c45a3d6f82990b7201</anchor>
      <arglist>(SocketService &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SocketService &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1SocketService.html</anchorfile>
      <anchor>aeafa795d7bcd1751a8afd175883e693e</anchor>
      <arglist>(SocketService &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SocketService</name>
      <anchorfile>classGio_1_1SocketService.html</anchorfile>
      <anchor>a95527b463804bcb00ed0d73a200bbcbc</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GSocketService *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SocketService.html</anchorfile>
      <anchor>a6e08a8e365648d3b7b8d78e694f9e136</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSocketService *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SocketService.html</anchorfile>
      <anchor>aa4050868334dc9ff88ff806629f6de48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GSocketService *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1SocketService.html</anchorfile>
      <anchor>a02c4f3bec98ba70fd2cc2663227cc5d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classGio_1_1SocketService.html</anchorfile>
      <anchor>a6dfa1c48a8a600b19bd51c211086ebd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classGio_1_1SocketService.html</anchorfile>
      <anchor>aa7dd1c079cb8348dadfe0aae2fe17165</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_active</name>
      <anchorfile>classGio_1_1SocketService.html</anchorfile>
      <anchor>ab7a6caab3830da1b5aee21f412165ede</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; bool, const Glib::RefPtr&lt; SocketConnection &gt; &amp;, const Glib::RefPtr&lt; Glib::Object &gt; &amp;&gt;</type>
      <name>signal_incoming</name>
      <anchorfile>classGio_1_1SocketService.html</anchorfile>
      <anchor>a3ea72083c4a0b19768fef244d77a0483</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_active</name>
      <anchorfile>classGio_1_1SocketService.html</anchorfile>
      <anchor>ae163961e75058d80fe90f00a8491e0de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_active</name>
      <anchorfile>classGio_1_1SocketService.html</anchorfile>
      <anchor>a5b5365e52b50d3320fa0a45da57e9050</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1SocketService.html</anchorfile>
      <anchor>a157708420ed2a484dfd60f6cc130fa41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; SocketService &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1SocketService.html</anchorfile>
      <anchor>a40a2042eaff19ac07203edf3563770e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SocketService</name>
      <anchorfile>classGio_1_1SocketService.html</anchorfile>
      <anchor>a1c4e09eb82f5cebc40fc679359986999</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>on_incoming</name>
      <anchorfile>classGio_1_1SocketService.html</anchorfile>
      <anchor>abf31b054cf96e76b61b52d6db828474e</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketConnection &gt; &amp;connection, const Glib::RefPtr&lt; Glib::Object &gt; &amp;source_object)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::SocketService &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1SocketService.html</anchorfile>
      <anchor>af8d745c9fb106e7ae3d85e443e9b7424</anchor>
      <arglist>(GSocketService *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::SocketSource</name>
    <filename>classGio_1_1SocketSource.html</filename>
    <base>Glib::IOSource</base>
    <member kind="typedef">
      <type>Gio::SocketSource</type>
      <name>CppObjectType</name>
      <anchorfile>classGio_1_1SocketSource.html</anchorfile>
      <anchor>a45a5ca7691998c201bd408278138818c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; SocketSource &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1SocketSource.html</anchorfile>
      <anchor>a0d0648c6ef811f3cc42facb5fb8c5f0c</anchor>
      <arglist>(const Glib::RefPtr&lt; Socket &gt; &amp;socket, Glib::IOCondition condition, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable=Glib::RefPtr&lt; Cancellable &gt;())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SocketSource</name>
      <anchorfile>classGio_1_1SocketSource.html</anchorfile>
      <anchor>a448edefadda42afd775d6e8ac12855d7</anchor>
      <arglist>(const Glib::RefPtr&lt; Socket &gt; &amp;socket, Glib::IOCondition condition, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~SocketSource</name>
      <anchorfile>classGio_1_1SocketSource.html</anchorfile>
      <anchor>acfe50bf210b5267c8404814552405f7d</anchor>
      <arglist>() noexcept override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::SrvTarget</name>
    <filename>classGio_1_1SrvTarget.html</filename>
    <member kind="function">
      <type></type>
      <name>SrvTarget</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>a8aedab3176f67cfd04621cf50225cbaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SrvTarget</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>a2897e03425b8a29f8199b82bc30c683d</anchor>
      <arglist>(GSrvTarget *gobject, bool make_a_copy=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SrvTarget</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>a39893a5f54f11a7b7aaa1d534ddab141</anchor>
      <arglist>(const SrvTarget &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SrvTarget &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>a64c9981401d91fcfdd64e4f3f90de7d4</anchor>
      <arglist>(const SrvTarget &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SrvTarget</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>a80a16d9b89961f8f977d352871eae064</anchor>
      <arglist>(SrvTarget &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SrvTarget &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>a2c3ff35cb21dcd564e3702847143647a</anchor>
      <arglist>(SrvTarget &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SrvTarget</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>ad33858e34a80b6f38f58bad24f9848b7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>a13fdb07742106e154267a76b5c87ab92</anchor>
      <arglist>(SrvTarget &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>GSrvTarget *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>a6c3577ff466e24fde7da91dbb8267942</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSrvTarget *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>acbdf18f959f5bdd3e8c802e0875e6ad2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GSrvTarget *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>ae64dff2916fde48b1021fc298b1f41bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SrvTarget</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>a4c7ea721d35439712d77e031ef46c15e</anchor>
      <arglist>(const Glib::ustring &amp;hostname, guint16 port, guint16 priority, guint16 weight)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_hostname</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>a27a15eebc9912b07553f512884687d8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>guint16</type>
      <name>get_port</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>af11ea239f6e6718ce5a188f3a66ec633</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>guint16</type>
      <name>get_priority</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>af50e715123f35510559394637ef6a574</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>guint16</type>
      <name>get_weight</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>a683b4d00815c87d6bff7d19a5d3d85b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>a2a9daffe8284da566a4ec0a783761088</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GSrvTarget *</type>
      <name>gobject_</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>aca9c337827344ebc87400d400e1bd267</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>a78482307845912ae04768ae3b4e071aa</anchor>
      <arglist>(SrvTarget &amp;lhs, SrvTarget &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Gio::SrvTarget</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>ab09dd935751f2e15732c5f90d9c49cf8</anchor>
      <arglist>(GSrvTarget *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::TcpConnection</name>
    <filename>classGio_1_1TcpConnection.html</filename>
    <base>Gio::SocketConnection</base>
    <member kind="function">
      <type></type>
      <name>TcpConnection</name>
      <anchorfile>classGio_1_1TcpConnection.html</anchorfile>
      <anchor>ae2ff69ccd1fdfbf608b8b0d2d84bb735</anchor>
      <arglist>(TcpConnection &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TcpConnection &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1TcpConnection.html</anchorfile>
      <anchor>a9adba094759966ac1bc8165e014f3929</anchor>
      <arglist>(TcpConnection &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TcpConnection</name>
      <anchorfile>classGio_1_1TcpConnection.html</anchorfile>
      <anchor>a08ba2247d3a7e0210d0f28f4a8856c60</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GTcpConnection *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TcpConnection.html</anchorfile>
      <anchor>a508d386c8df898197a17111b751de117</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GTcpConnection *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TcpConnection.html</anchorfile>
      <anchor>a245dabbd87dae60714c1576947b119cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GTcpConnection *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1TcpConnection.html</anchorfile>
      <anchor>a20bf39e1c736ae833b61b28ae7782f11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_graceful_disconnect</name>
      <anchorfile>classGio_1_1TcpConnection.html</anchorfile>
      <anchor>af8ebdafdd65cdd474ecda7c6f57480c1</anchor>
      <arglist>(bool graceful_disconnect)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_graceful_disconnect</name>
      <anchorfile>classGio_1_1TcpConnection.html</anchorfile>
      <anchor>a72f218c13471dd7c76d752a1ad961f36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_graceful_disconnect</name>
      <anchorfile>classGio_1_1TcpConnection.html</anchorfile>
      <anchor>a8ba8f75e79336e4ffe0f15a7a2983bb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_graceful_disconnect</name>
      <anchorfile>classGio_1_1TcpConnection.html</anchorfile>
      <anchor>a80c2d52739eee9acb5795daf82d3017c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1TcpConnection.html</anchorfile>
      <anchor>a99aef59b4346899e7377399a35e78ad8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::TcpConnection &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1TcpConnection.html</anchorfile>
      <anchor>a49374d0d4787fd7904044cd68369f23b</anchor>
      <arglist>(GTcpConnection *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::TcpWrapperConnection</name>
    <filename>classGio_1_1TcpWrapperConnection.html</filename>
    <base>Gio::TcpConnection</base>
    <member kind="function">
      <type></type>
      <name>TcpWrapperConnection</name>
      <anchorfile>classGio_1_1TcpWrapperConnection.html</anchorfile>
      <anchor>aaa45265fa7ca277403e1d47040f0c8c3</anchor>
      <arglist>(TcpWrapperConnection &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TcpWrapperConnection &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1TcpWrapperConnection.html</anchorfile>
      <anchor>a0a7d9ddeaebb97fc23ba1cfef0ea1632</anchor>
      <arglist>(TcpWrapperConnection &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TcpWrapperConnection</name>
      <anchorfile>classGio_1_1TcpWrapperConnection.html</anchorfile>
      <anchor>a2c6631e08424758265ea1638c145a2e3</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GTcpWrapperConnection *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TcpWrapperConnection.html</anchorfile>
      <anchor>aa6d2b85a0868e0fa9b90ce3361f2e08a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GTcpWrapperConnection *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TcpWrapperConnection.html</anchorfile>
      <anchor>a5ee9c7dff17d3d2949b38d955bd96cac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GTcpWrapperConnection *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1TcpWrapperConnection.html</anchorfile>
      <anchor>ac6c93b7a954180ecce3a3abd89dec4ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TcpWrapperConnection</name>
      <anchorfile>classGio_1_1TcpWrapperConnection.html</anchorfile>
      <anchor>aed0e0ebe9c54d8040ec4bf8d5c599420</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;base_io_stream, const Glib::RefPtr&lt; Socket &gt; &amp;socket)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; IOStream &gt;</type>
      <name>get_base_io_stream</name>
      <anchorfile>classGio_1_1TcpWrapperConnection.html</anchorfile>
      <anchor>a9b37292174ad258ed4ad0b9e605cc8c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const IOStream &gt;</type>
      <name>get_base_io_stream</name>
      <anchorfile>classGio_1_1TcpWrapperConnection.html</anchorfile>
      <anchor>ad986218e49e142b4b0768aefe3b6cb97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; IOStream &gt; &gt;</type>
      <name>property_base_io_stream</name>
      <anchorfile>classGio_1_1TcpWrapperConnection.html</anchorfile>
      <anchor>a2171d001efb26961a403a84df9127d82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1TcpWrapperConnection.html</anchorfile>
      <anchor>aef0bdc3d6f51f8edc7c1be90c8cda4e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::TcpWrapperConnection &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1TcpWrapperConnection.html</anchorfile>
      <anchor>a6b864ca552abc3c5db45c8944e0aad60</anchor>
      <arglist>(GTcpWrapperConnection *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::ThemedIcon</name>
    <filename>classGio_1_1ThemedIcon.html</filename>
    <base>Glib::Object</base>
    <base>Gio::Icon</base>
    <member kind="function">
      <type></type>
      <name>ThemedIcon</name>
      <anchorfile>classGio_1_1ThemedIcon.html</anchorfile>
      <anchor>a9efbbbf4cd63b1706abb3171d85cc01d</anchor>
      <arglist>(ThemedIcon &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ThemedIcon &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1ThemedIcon.html</anchorfile>
      <anchor>a92e08f74bc515deecf55ed0b345f0723</anchor>
      <arglist>(ThemedIcon &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ThemedIcon</name>
      <anchorfile>classGio_1_1ThemedIcon.html</anchorfile>
      <anchor>a21a9c2ab71632bebe17d0df756f3bb7d</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GThemedIcon *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ThemedIcon.html</anchorfile>
      <anchor>aa179d9788f6a17df73a258c6f89049fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GThemedIcon *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ThemedIcon.html</anchorfile>
      <anchor>a5adc52e3f8488dfd01d5f0f619cfa293</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GThemedIcon *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1ThemedIcon.html</anchorfile>
      <anchor>a077eea103e0f5713697f55cb66243997</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepend_name</name>
      <anchorfile>classGio_1_1ThemedIcon.html</anchorfile>
      <anchor>aa61fe78bdd8512c138a3ec23c6fa32f6</anchor>
      <arglist>(const std::string &amp;iconname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append_name</name>
      <anchorfile>classGio_1_1ThemedIcon.html</anchorfile>
      <anchor>a15fb8158d3eede3d3aa4050fbdcbe124</anchor>
      <arglist>(const std::string &amp;iconname)</arglist>
    </member>
    <member kind="function">
      <type>Glib::StringArrayHandle</type>
      <name>get_names</name>
      <anchorfile>classGio_1_1ThemedIcon.html</anchorfile>
      <anchor>a97606a5deaa767f77fb6f8978b27c21c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; std::vector&lt; Glib::ustring &gt; &gt;</type>
      <name>property_names</name>
      <anchorfile>classGio_1_1ThemedIcon.html</anchorfile>
      <anchor>a1fb801e04aab89aaebea53a25a48b559</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_use_default_fallbacks</name>
      <anchorfile>classGio_1_1ThemedIcon.html</anchorfile>
      <anchor>a0118fe6f05f923d55779ae45eee2e773</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1ThemedIcon.html</anchorfile>
      <anchor>a6406441218f7d0308834b450bdfe6e10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; ThemedIcon &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1ThemedIcon.html</anchorfile>
      <anchor>a638a2690c54699b40aa26bdfcb0aceda</anchor>
      <arglist>(const std::string &amp;iconname, bool use_default_fallbacks=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThemedIcon</name>
      <anchorfile>classGio_1_1ThemedIcon.html</anchorfile>
      <anchor>a71f4652e1084e5418bc66b84bcef5431</anchor>
      <arglist>(const std::string &amp;iconname, bool use_default_fallbacks=false)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::ThemedIcon &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1ThemedIcon.html</anchorfile>
      <anchor>a6e1861d53d63b929cd84e012e704c396</anchor>
      <arglist>(GThemedIcon *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::ThreadedSocketService</name>
    <filename>classGio_1_1ThreadedSocketService.html</filename>
    <base>Gio::SocketService</base>
    <member kind="function">
      <type></type>
      <name>ThreadedSocketService</name>
      <anchorfile>classGio_1_1ThreadedSocketService.html</anchorfile>
      <anchor>aaa352eb4d018542831945f21d7b13818</anchor>
      <arglist>(ThreadedSocketService &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ThreadedSocketService &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1ThreadedSocketService.html</anchorfile>
      <anchor>a24c577988530d260db10f40b97da7a49</anchor>
      <arglist>(ThreadedSocketService &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ThreadedSocketService</name>
      <anchorfile>classGio_1_1ThreadedSocketService.html</anchorfile>
      <anchor>ac334e011a6be76762ae95f1ae5c1b006</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GThreadedSocketService *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ThreadedSocketService.html</anchorfile>
      <anchor>a96312b53e69f1f46fc6de0561dfaeef2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GThreadedSocketService *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ThreadedSocketService.html</anchorfile>
      <anchor>abaceedfc0bfc5033becef6ac7ff095c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GThreadedSocketService *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1ThreadedSocketService.html</anchorfile>
      <anchor>abe79abc5c8e85b5a5a7147060a145318</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; bool, const Glib::RefPtr&lt; SocketConnection &gt; &amp;, const Glib::RefPtr&lt; Glib::Object &gt; &amp;&gt;</type>
      <name>signal_run</name>
      <anchorfile>classGio_1_1ThreadedSocketService.html</anchorfile>
      <anchor>a2f4df8020e94407266e9c71e1670dafb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; int &gt;</type>
      <name>property_max_threads</name>
      <anchorfile>classGio_1_1ThreadedSocketService.html</anchorfile>
      <anchor>a0dc4d29ab5514ec1b7911713e91d5cf1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1ThreadedSocketService.html</anchorfile>
      <anchor>a637b8e2bf8c435df23f31527f2eb7cae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; ThreadedSocketService &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1ThreadedSocketService.html</anchorfile>
      <anchor>ae7418690132dfb019dd5c4b44281e3ea</anchor>
      <arglist>(int max_threads)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadedSocketService</name>
      <anchorfile>classGio_1_1ThreadedSocketService.html</anchorfile>
      <anchor>a4d4514d72b332558f58b8511bd64311d</anchor>
      <arglist>(int max_threads)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>on_run</name>
      <anchorfile>classGio_1_1ThreadedSocketService.html</anchorfile>
      <anchor>ac464e420a34995b48bba33ee8f8729b9</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketConnection &gt; &amp;connection, const Glib::RefPtr&lt; Glib::Object &gt; &amp;source_object)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::ThreadedSocketService &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1ThreadedSocketService.html</anchorfile>
      <anchor>a0456c34762034433f8d642659256fedb</anchor>
      <arglist>(GThreadedSocketService *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::TlsCertificate</name>
    <filename>classGio_1_1TlsCertificate.html</filename>
    <base>Glib::Object</base>
    <member kind="function">
      <type></type>
      <name>TlsCertificate</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>ad79abf4a850b90ff999c483eece56dd1</anchor>
      <arglist>(TlsCertificate &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificate &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>a26261155a1c731addec626d8edf35291</anchor>
      <arglist>(TlsCertificate &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TlsCertificate</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>a41dcf6847b2a51947caccc0a77488007</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GTlsCertificate *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>af366520e55fa9022e7695cedc04b5a81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GTlsCertificate *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>a201a700d3db9f000f82f1a8f04ab4db9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GTlsCertificate *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>ae7f559a234756723f5d7596a9eb9b9a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>get_issuer</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>ac1e0d94616caaab1a9a3e04ce880eaf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const TlsCertificate &gt;</type>
      <name>get_issuer</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>a8e7c27f66dc71b08c20c907e87888d5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>verify</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>ab57a3c3596136556346076c651f45222</anchor>
      <arglist>(const Glib::RefPtr&lt; const SocketConnectable &gt; &amp;identity, const Glib::RefPtr&lt; const TlsCertificate &gt; &amp;trusted_ca) const</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>verify</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>a563acbbf4b84f47f96d67e457897e7d1</anchor>
      <arglist>(const Glib::RefPtr&lt; const SocketConnectable &gt; &amp;identity) const</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>verify</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>a68e26a70cf2895ac72bba1422d113f70</anchor>
      <arglist>(const Glib::RefPtr&lt; const TlsCertificate &gt; &amp;trusted_ca) const</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>verify</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>acf8051c4f3374b70afc8a1ccf4b781f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_same</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>a095ef1191378341a491bd1e628cc69da</anchor>
      <arglist>(const Glib::RefPtr&lt; const TlsCertificate &gt; &amp;cert_two) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; Glib::ByteArray &gt; &gt;</type>
      <name>property_certificate</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>aaa594119b59574180cea7b439053bfe8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; std::string &gt;</type>
      <name>property_certificate_pem</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>a2115bf9b780a519d7ac13f786390dd30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; TlsCertificate &gt; &gt;</type>
      <name>property_issuer</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>ada0f1e6145d8895c1442f84b749097f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TlsCertificateFlags</type>
      <name>verify_vfunc</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>a3624312b90e9b1a2be6d9f4c168435f6</anchor>
      <arglist>(const Glib::RefPtr&lt; const SocketConnectable &gt; &amp;identity, const Glib::RefPtr&lt; const TlsCertificate &gt; &amp;trusted_ca) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>a11c6f8a43a88273e9dff0e6f6694d4d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>create_from_pem</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>a6b6e5c9ac63bf549f72f51bab91254d4</anchor>
      <arglist>(const std::string &amp;data, gssize length=-1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>a2d62a7c80d1af057d77cba63c161b2c2</anchor>
      <arglist>(const std::string &amp;file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>a126197114fe8a63e1dcc88d2d537d83f</anchor>
      <arglist>(const std::string &amp;cert_file, const std::string &amp;key_file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; Glib::RefPtr&lt; TlsCertificate &gt; &gt;</type>
      <name>create_list_from_file</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>a6292baeace775464ecd8bcb221cb521b</anchor>
      <arglist>(const std::string &amp;file)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TlsCertificate</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>a7f3d19a774cdecd0bfc7662681f555ae</anchor>
      <arglist>(const std::string &amp;data, gssize length)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TlsCertificate</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>ac053dbd350516c06cc0864d7500dae26</anchor>
      <arglist>(const std::string &amp;file)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TlsCertificate</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>a013deb6e01061b72f75982a4d404c2ee</anchor>
      <arglist>(const std::string &amp;cert_file, const std::string &amp;key_file)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::TlsCertificate &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>a2e3f6ad56cc84de8ba702b64d01d7488</anchor>
      <arglist>(GTlsCertificate *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::TlsClientConnection</name>
    <filename>classGio_1_1TlsClientConnection.html</filename>
    <base>Glib::Interface</base>
    <base>Gio::TlsConnection</base>
    <member kind="function">
      <type></type>
      <name>TlsClientConnection</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>a0bfac3aa970fbeb8be3085c325c17905</anchor>
      <arglist>(TlsClientConnection &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TlsClientConnection &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>aaf5e4738071d7309997b99b738c9a66f</anchor>
      <arglist>(TlsClientConnection &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TlsClientConnection</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>ad4d10a25fee184b1c46975ec7bed5ac6</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GTlsClientConnection *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>aa2a233454a4479e4a9eac541ddf71936</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GTlsClientConnection *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>a6eef3c1ae1a5582ac5b103f3420994ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_server_identity</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>aa9d14ae54d5d8b1cb0010b6ce74049f1</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketConnectable &gt; &amp;identity)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnectable &gt;</type>
      <name>get_server_identity</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>a09d92dd078b6004b838134b7848c90d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const SocketConnectable &gt;</type>
      <name>get_server_identity</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>a4a50aaf9890af07bbd9ea40fcfdd2d14</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_validation_flags</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>a11c531894de71c99f6026e27f460f931</anchor>
      <arglist>(TlsCertificateFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>get_validation_flags</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>a9c4a9ef251add342d6ef2e1613b40f74</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_ssl3</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>a07bd348af33af79bd2841be810fafae8</anchor>
      <arglist>(bool use_ssl3=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_use_ssl3</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>a2b239a8abaac09dd8bff55601e0cc708</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::RefPtr&lt; Glib::ByteArray &gt; &gt;</type>
      <name>get_accepted_cas</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>ad587343dfaa4555f2812dc68fe707930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::RefPtr&lt; const Glib::ByteArray &gt; &gt;</type>
      <name>get_accepted_cas</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>a43beed5d93b917aa635e5a0aaeaf5406</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_session_state</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>a3951a43f4c772143419b79f9eb20992b</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsClientConnection &gt; &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; std::vector&lt; Glib::RefPtr&lt; Glib::ByteArray &gt; &gt; &gt;</type>
      <name>property_accepted_cas</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>a454cb5513ba4cf6a1f9e072bbae6cffa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; Glib::RefPtr&lt; SocketConnectable &gt; &gt;</type>
      <name>property_server_identity</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>a95a599ae688a3337e86f97e464a78ded</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; SocketConnectable &gt; &gt;</type>
      <name>property_server_identity</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>ad79aa5bc6888571a99cda5d22358cbfc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_use_ssl3</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>ab763b6759e01ca340aaa3917aadad9da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_use_ssl3</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>a42718aa653deee278fcc0b9b9615e6f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; TlsCertificateFlags &gt;</type>
      <name>property_validation_flags</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>af82fabf3d65d03dc34f578e9267307f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; TlsCertificateFlags &gt;</type>
      <name>property_validation_flags</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>ab00974837031eb2663a5c804fc734ef5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>a86f36661c81dfbdafd70819c19e21e07</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>ac9410c59f26a69781ef9633b8a542637</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; TlsClientConnection &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>a13e93b92ffc6509cbf4fe7ba104d0a13</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;base_io_stream, const Glib::RefPtr&lt; const SocketConnectable &gt; &amp;server_identity)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; TlsClientConnection &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>a27e8c31d04317d5c90447b2b4ba6c116</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;base_io_stream)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TlsClientConnection</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>ad7662b3bd7d69c6307adeb82cbf15e72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::TlsClientConnection &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>ac1010b2a63ebf75a4415f2a68b30ac99</anchor>
      <arglist>(GTlsClientConnection *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::TlsConnection</name>
    <filename>classGio_1_1TlsConnection.html</filename>
    <base>Gio::IOStream</base>
    <member kind="function">
      <type></type>
      <name>TlsConnection</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a52d386594fa003999168ce12e23a58ca</anchor>
      <arglist>(TlsConnection &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TlsConnection &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>af691cf625b512017472aa02295ce932d</anchor>
      <arglist>(TlsConnection &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TlsConnection</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>afa02c4005b4f2b06b1514035e3199933</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GTlsConnection *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>ae513dda3f0487a37e1875c1fa3cb34ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GTlsConnection *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a14c42038b748282e60f72638362c2c91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GTlsConnection *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a4a94b2d51c0a2b977033525d2bf237d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_certificate</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a974de86a9b7dc775a6761b5f7f94d45d</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;certificate)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>get_certificate</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a09c073fa67f5a6c57227ab3b9897599a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const TlsCertificate &gt;</type>
      <name>get_certificate</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a82a3c056b98c4349fc35accedcacee89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>get_peer_certificate</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a949f32e398a0db3ff11a1ca064d0f42d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const TlsCertificate &gt;</type>
      <name>get_peer_certificate</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a51a098a4172e5f299c72d5606759346d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>get_peer_certificate_errors</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>ada9b03f625f46d45616305b0ab5b0d06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_require_close_notify</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>ac4f67ea320dfa95aa977230dafdc3a6e</anchor>
      <arglist>(bool require_close_notify=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_require_close_notify</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a906b7601d484be07b4143534de581a4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_rehandshake_mode</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a20ff315a64ffc0268843b103ea177ec1</anchor>
      <arglist>(TlsRehandshakeMode mode)</arglist>
    </member>
    <member kind="function">
      <type>TlsRehandshakeMode</type>
      <name>get_rehandshake_mode</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a7376684303a960b6c52fe51e7f97d545</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_system_certdb</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a0e0a8bb62da8f2e949618dab9628d969</anchor>
      <arglist>(bool use_system_certdb=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_use_system_certdb</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a8b9f7a449d533d501e3a4bd42eaf35e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; TlsDatabase &gt;</type>
      <name>get_database</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a41ccee6cf03993882901d7c4078a9837</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const TlsDatabase &gt;</type>
      <name>get_database</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a9e32a2aaa0c4d517249ddc4a890ac442</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_database</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a804e8d1f55047648954afa68b4f41573</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsDatabase &gt; &amp;database)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; TlsInteraction &gt;</type>
      <name>get_interaction</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a05d31ec8b010650a1a6ec40710e77e45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const TlsInteraction &gt;</type>
      <name>get_interaction</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>afa3faf368a79bb27c1999d67fd99326a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_interaction</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a3c655d74f49d3d6e3ee5fd76f2f4cee3</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handshake</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a09df03551eb0a51a9e27a69888e21eb9</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handshake</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>af21398df0db2c262d85f0c6e53490361</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handshake_async</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>aa526566be787e541f06aa9861449554e</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handshake_async</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>ab364be698a273fe9f2caaab24c7a66c7</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handshake_finish</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>abd49faefa24f86b5f5f02248eb8d1ca4</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emit_accept_certificate</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a56e06ceb75e2a006c3460e771a3f9711</anchor>
      <arglist>(const Glib::RefPtr&lt; const TlsCertificate &gt; &amp;peer_cert, TlsCertificateFlags errors)</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; IOStream &gt; &gt;</type>
      <name>property_base_io_stream</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a98b0d8efdc77d93f7c027c2bd5624660</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; Glib::RefPtr&lt; TlsCertificate &gt; &gt;</type>
      <name>property_certificate</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a04f7860540d388948206654f89940d22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; TlsCertificate &gt; &gt;</type>
      <name>property_certificate</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a0cedb54ef297d3fc445e8652180fee5c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; Glib::RefPtr&lt; TlsDatabase &gt; &gt;</type>
      <name>property_database</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a313d4c310935af531eff29c95b24bcf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; TlsDatabase &gt; &gt;</type>
      <name>property_database</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a0711466e8632c6d8ecdeb2e0f17d3def</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; Glib::RefPtr&lt; TlsInteraction &gt; &gt;</type>
      <name>property_interaction</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a1626c66d68bd76754f8b586fd7e5a0e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; TlsInteraction &gt; &gt;</type>
      <name>property_interaction</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a34ab158d6fe22438d38670cce2bb6211</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; TlsCertificate &gt; &gt;</type>
      <name>property_peer_certificate</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a1a37033939ede188459e9d2a43a37d5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; TlsCertificateFlags &gt;</type>
      <name>property_peer_certificate_errors</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a51090a42c85cb53cab7b4b13eb1eb7a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; TlsRehandshakeMode &gt;</type>
      <name>property_rehandshake_mode</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>ae1ed594a9d690b1e5a9d4be9cb6b027a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; TlsRehandshakeMode &gt;</type>
      <name>property_rehandshake_mode</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>af25d42230cffaada6a1be82ba60ea6af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_require_close_notify</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>afa8b1acb49b52aafd8d6a9f38edf425c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_require_close_notify</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a45b02af9b2b690f2799826a91337b07d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_use_system_certdb</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a2c08e6c8020b25ba4a1001788537839d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_use_system_certdb</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>ab1d6d026cbdb9f8be652f90c9e7025a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; bool, const Glib::RefPtr&lt; const TlsCertificate &gt; &amp;, TlsCertificateFlags &gt;</type>
      <name>signal_accept_certificate</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>ae34a1515c7e4ca880c92f94ab4c9880e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>handshake_vfunc</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a301aad50aa459b546016366bea097f5c</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handshake_async_vfunc</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>aeb5004a32047d0aebf418e8fc4cdf37a</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>handshake_finish_vfunc</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>aeef4191d4e1f29b8e614637d73c331e4</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a7cf79e95463df31be51b60c7220c38bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TlsConnection</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a6b6db22117969cc97d5cb3aac8c94aaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>on_accept_certificate</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a304409f5ffad261f31ee9bac45a52646</anchor>
      <arglist>(const Glib::RefPtr&lt; const TlsCertificate &gt; &amp;peer_cert, TlsCertificateFlags errors)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::TlsConnection &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>abe30f094769dc5934bdff8f6d05ed3f2</anchor>
      <arglist>(GTlsConnection *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::TlsDatabase</name>
    <filename>classGio_1_1TlsDatabase.html</filename>
    <base>Glib::Object</base>
    <member kind="function">
      <type></type>
      <name>TlsDatabase</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a5957db239b0c006a502717606451cc9e</anchor>
      <arglist>(TlsDatabase &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabase &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a4236e60a59fcbd2acad0a721cd239761</anchor>
      <arglist>(TlsDatabase &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TlsDatabase</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>abc6e53299fe6d9c2a9f7056de1e88e97</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GTlsDatabase *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a46ffc94af5d046249f0ec2f468d53047</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GTlsDatabase *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a92ba7bcbefcc384612b24c6342a5e17d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GTlsDatabase *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a89105b7f1c9e8d1244b6d728069ef836</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>verify_chain</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a96d4748d679e78fa3482efbdb76f1cb7</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, const Glib::RefPtr&lt; const SocketConnectable &gt; &amp;identity, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseVerifyFlags flags=TLS_DATABASE_VERIFY_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>verify_chain</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a7e3905445bdc32aaed1b4e321f1e0917</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, const Glib::RefPtr&lt; const SocketConnectable &gt; &amp;identity, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, TlsDatabaseVerifyFlags flags=TLS_DATABASE_VERIFY_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>verify_chain</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>ab54813150e7318a340069087ad5f8a8e</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, const Glib::RefPtr&lt; const SocketConnectable &gt; &amp;identity, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseVerifyFlags flags=TLS_DATABASE_VERIFY_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>verify_chain</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a0ff51e707f93ea28b1b310bbe51632f7</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, const Glib::RefPtr&lt; const SocketConnectable &gt; &amp;identity, TlsDatabaseVerifyFlags flags=TLS_DATABASE_VERIFY_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>verify_chain</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a0f82ae7202e38217c8ffe570169e82e4</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseVerifyFlags flags=TLS_DATABASE_VERIFY_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>verify_chain</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a639309e62fa11db1391383aed945b4b3</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, TlsDatabaseVerifyFlags flags=TLS_DATABASE_VERIFY_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>verify_chain</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>ae5b5f466e4a50ac17b39680df7756f35</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseVerifyFlags flags=TLS_DATABASE_VERIFY_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>verify_chain</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>ab08671a65695f39cbbb5c735198b0a46</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, TlsDatabaseVerifyFlags flags=TLS_DATABASE_VERIFY_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>verify_chain_async</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>af71596c32f99dabdd8f7828e086d2d4f</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, const Glib::RefPtr&lt; const SocketConnectable &gt; &amp;identity, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseVerifyFlags flags=TLS_DATABASE_VERIFY_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>verify_chain_async</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a34a200a23258b1df8926347041359950</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, const Glib::RefPtr&lt; const SocketConnectable &gt; &amp;identity, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const SlotAsyncReady &amp;slot, TlsDatabaseVerifyFlags flags=TLS_DATABASE_VERIFY_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>verify_chain_async</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a2e3f4d9ab01a446bcd283ba01bad2677</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, const Glib::RefPtr&lt; const SocketConnectable &gt; &amp;identity, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseVerifyFlags flags=TLS_DATABASE_VERIFY_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>verify_chain_async</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a974ffd9aa19fae66bbcadc4e09b22806</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, const Glib::RefPtr&lt; const SocketConnectable &gt; &amp;identity, const SlotAsyncReady &amp;slot, TlsDatabaseVerifyFlags flags=TLS_DATABASE_VERIFY_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>verify_chain_async</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a8c37df61fd502a08630f3e8550ccb539</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseVerifyFlags flags=TLS_DATABASE_VERIFY_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>verify_chain_async</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a723388d063ab571883f20c47c14936c8</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const SlotAsyncReady &amp;slot, TlsDatabaseVerifyFlags flags=TLS_DATABASE_VERIFY_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>verify_chain_async</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a495a76362fb8b10bc9856d91867685f5</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseVerifyFlags flags=TLS_DATABASE_VERIFY_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>verify_chain_async</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>ab833fbe7e71c774801541ac4a11bc393</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, const SlotAsyncReady &amp;slot, TlsDatabaseVerifyFlags flags=TLS_DATABASE_VERIFY_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>verify_chain_finish</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a9fdb774e63465320cd824622b45a7c68</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>lookup_certificate_issuer</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>aaf791c4ba14ac750dd80553e3db97e65</anchor>
      <arglist>(const Glib::RefPtr&lt; const TlsCertificate &gt; &amp;certificate, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>lookup_certificate_issuer</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a8c117297c443662c7344d2fe026f0840</anchor>
      <arglist>(const Glib::RefPtr&lt; const TlsCertificate &gt; &amp;certificate, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>lookup_certificate_issuer</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>ac7ee9f7f75d5351fbe01b6c35d7d047b</anchor>
      <arglist>(const Glib::RefPtr&lt; const TlsCertificate &gt; &amp;certificate, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>lookup_certificate_issuer</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>aaac01c43e0b0f38e06452ed7d25bd9cb</anchor>
      <arglist>(const Glib::RefPtr&lt; const TlsCertificate &gt; &amp;certificate, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const TlsCertificate &gt;</type>
      <name>lookup_certificate_issuer</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a0a74e6e2358caf76013c2a5d94aa5393</anchor>
      <arglist>(const Glib::RefPtr&lt; const TlsCertificate &gt; &amp;certificate, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const TlsCertificate &gt;</type>
      <name>lookup_certificate_issuer</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a185a64ed84753f8f3280d11409e3f26a</anchor>
      <arglist>(const Glib::RefPtr&lt; const TlsCertificate &gt; &amp;certificate, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const TlsCertificate &gt;</type>
      <name>lookup_certificate_issuer</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a8a8825de4cb8f4103f4f57ec6b5df9df</anchor>
      <arglist>(const Glib::RefPtr&lt; const TlsCertificate &gt; &amp;certificate, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const TlsCertificate &gt;</type>
      <name>lookup_certificate_issuer</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>ab125b512c0c918fc16c25fb40c5629a2</anchor>
      <arglist>(const Glib::RefPtr&lt; const TlsCertificate &gt; &amp;certificate, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_certificate_issuer_async</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a3a03d3ccaa01aa770a3ce58e5da9eafc</anchor>
      <arglist>(const Glib::RefPtr&lt; const TlsCertificate &gt; &amp;certificate, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_certificate_issuer_async</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a71439602495b95281b5fec3243558473</anchor>
      <arglist>(const Glib::RefPtr&lt; const TlsCertificate &gt; &amp;certificate, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const SlotAsyncReady &amp;slot, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_certificate_issuer_async</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>aef4b804fba8bb21b8e8cf3696fba460c</anchor>
      <arglist>(const Glib::RefPtr&lt; const TlsCertificate &gt; &amp;certificate, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_certificate_issuer_async</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a62d28c5b2b8f8561db796cfbd42409d6</anchor>
      <arglist>(const Glib::RefPtr&lt; const TlsCertificate &gt; &amp;certificate, const SlotAsyncReady &amp;slot, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>lookup_certificate_issuer_finish</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>ac2aaa0a87519609af6fc492d33dc29d5</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::RefPtr&lt; TlsCertificate &gt; &gt;</type>
      <name>lookup_certificates_issued_by</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a5847ab922e74871918c18f3365c91019</anchor>
      <arglist>(const Glib::RefPtr&lt; Glib::ByteArray &gt; &amp;issuer_raw_dn, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags=Gio::TLS_DATABASE_LOOKUP_NONE)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::RefPtr&lt; TlsCertificate &gt; &gt;</type>
      <name>lookup_certificates_issued_by</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>ae644551fd13815a97822b3c59bceaf42</anchor>
      <arglist>(const Glib::RefPtr&lt; Glib::ByteArray &gt; &amp;issuer_raw_dn, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, TlsDatabaseLookupFlags flags=Gio::TLS_DATABASE_LOOKUP_NONE)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::RefPtr&lt; TlsCertificate &gt; &gt;</type>
      <name>lookup_certificates_issued_by</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>af2ada1d58ea95c7374ef2b1c001a4791</anchor>
      <arglist>(const Glib::RefPtr&lt; Glib::ByteArray &gt; &amp;issuer_raw_dn, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags=Gio::TLS_DATABASE_LOOKUP_NONE)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::RefPtr&lt; TlsCertificate &gt; &gt;</type>
      <name>lookup_certificates_issued_by</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a5968d30bb745822c5dc4a66ac8f0cd76</anchor>
      <arglist>(const Glib::RefPtr&lt; Glib::ByteArray &gt; &amp;issuer_raw_dn, TlsDatabaseLookupFlags flags=Gio::TLS_DATABASE_LOOKUP_NONE)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::RefPtr&lt; const TlsCertificate &gt; &gt;</type>
      <name>lookup_certificates_issued_by</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a3c04974abf83b3784c466327e71a2c2b</anchor>
      <arglist>(const Glib::RefPtr&lt; Glib::ByteArray &gt; &amp;issuer_raw_dn, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags=Gio::TLS_DATABASE_LOOKUP_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::RefPtr&lt; const TlsCertificate &gt; &gt;</type>
      <name>lookup_certificates_issued_by</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a947f2fe684df420e9d203afc453406e1</anchor>
      <arglist>(const Glib::RefPtr&lt; Glib::ByteArray &gt; &amp;issuer_raw_dn, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, TlsDatabaseLookupFlags flags=Gio::TLS_DATABASE_LOOKUP_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::RefPtr&lt; const TlsCertificate &gt; &gt;</type>
      <name>lookup_certificates_issued_by</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>adf4b76e64fad8e30bb2182dc17f60c30</anchor>
      <arglist>(const Glib::RefPtr&lt; Glib::ByteArray &gt; &amp;issuer_raw_dn, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags=Gio::TLS_DATABASE_LOOKUP_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::RefPtr&lt; const TlsCertificate &gt; &gt;</type>
      <name>lookup_certificates_issued_by</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a7571eb65e3cba011d662809c9c7900b7</anchor>
      <arglist>(const Glib::RefPtr&lt; Glib::ByteArray &gt; &amp;issuer_raw_dn, TlsDatabaseLookupFlags flags=Gio::TLS_DATABASE_LOOKUP_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_certificates_issued_by_async</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a30b796abb1a6358aca0f316410dd0ea4</anchor>
      <arglist>(const Glib::RefPtr&lt; Glib::ByteArray &gt; &amp;issuer_raw_dn, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags=Gio::TLS_DATABASE_LOOKUP_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_certificates_issued_by_async</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>aa84a4a349f49e902cd687b1d14a06d50</anchor>
      <arglist>(const Glib::RefPtr&lt; Glib::ByteArray &gt; &amp;issuer_raw_dn, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const SlotAsyncReady &amp;slot, TlsDatabaseLookupFlags flags=Gio::TLS_DATABASE_LOOKUP_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_certificates_issued_by_async</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>aec0e140ac4771ca2b19dada6faa70758</anchor>
      <arglist>(const Glib::RefPtr&lt; Glib::ByteArray &gt; &amp;issuer_raw_dn, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags=Gio::TLS_DATABASE_LOOKUP_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_certificates_issued_by_async</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a5dc70871dfee927ff42b66221ac083b5</anchor>
      <arglist>(const Glib::RefPtr&lt; Glib::ByteArray &gt; &amp;issuer_raw_dn, const SlotAsyncReady &amp;slot, TlsDatabaseLookupFlags flags=Gio::TLS_DATABASE_LOOKUP_NONE)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::RefPtr&lt; TlsCertificate &gt; &gt;</type>
      <name>lookup_certificates_issued_by_finish</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a4d03487467372ad15d9af92d66a70e2d</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>create_certificate_handle</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a2ddfd636d657d292b67f6a19a4086f92</anchor>
      <arglist>(const Glib::RefPtr&lt; const TlsCertificate &gt; &amp;certificate) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>lookup_certificate_for_handle</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a6833015cec1024527413863ea47b3925</anchor>
      <arglist>(const Glib::ustring &amp;handle, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>lookup_certificate_for_handle</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a2e1424be24f1077258d7146aa335191c</anchor>
      <arglist>(const Glib::ustring &amp;handle, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>lookup_certificate_for_handle</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a7353c63da115ab459df2d9bf59f27de6</anchor>
      <arglist>(const Glib::ustring &amp;handle, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>lookup_certificate_for_handle</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a2697cad2dab28bd8809c634834739db8</anchor>
      <arglist>(const Glib::ustring &amp;handle, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const TlsCertificate &gt;</type>
      <name>lookup_certificate_for_handle</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a7971c39f8cb7ad213f9e32ed091a82ce</anchor>
      <arglist>(const Glib::ustring &amp;handle, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const TlsCertificate &gt;</type>
      <name>lookup_certificate_for_handle</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>abe2bf9bc27b7e4832cc1190600f67fca</anchor>
      <arglist>(const Glib::ustring &amp;handle, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const TlsCertificate &gt;</type>
      <name>lookup_certificate_for_handle</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a9173649c5a2dd547587af2b046af7e0a</anchor>
      <arglist>(const Glib::ustring &amp;handle, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const TlsCertificate &gt;</type>
      <name>lookup_certificate_for_handle</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>afe7164649aa4f5d2f8e786c1e49583a6</anchor>
      <arglist>(const Glib::ustring &amp;handle, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_certificate_for_handle_async</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a17085967a940d6aa52dc7f0683ad15c8</anchor>
      <arglist>(const Glib::ustring &amp;handle, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_certificate_for_handle_async</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a767cc0219e76658270dca54ec11b34e9</anchor>
      <arglist>(const Glib::ustring &amp;handle, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const SlotAsyncReady &amp;slot, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_certificate_for_handle_async</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a16bf765e4520a64bee51e6a3b7147865</anchor>
      <arglist>(const Glib::ustring &amp;handle, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_certificate_for_handle_async</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>aa25653523fa55cb5e1f2bee974ac6495</anchor>
      <arglist>(const Glib::ustring &amp;handle, const SlotAsyncReady &amp;slot, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>lookup_certificate_for_handle_finish</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a4718af01eca75c46ac73d7ea173071b5</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TlsCertificateFlags</type>
      <name>verify_chain_vfunc</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>acebfba5c7f1cbc816e74ba8b7791e517</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, const Glib::RefPtr&lt; const SocketConnectable &gt; &amp;identity, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseVerifyFlags flags) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>verify_chain_async_vfunc</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a5b5d0e937940d473c86cfe3b1945050d</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, const Glib::RefPtr&lt; const SocketConnectable &gt; &amp;identity, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseVerifyFlags flags) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TlsCertificateFlags</type>
      <name>verify_chain_finish_vfunc</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a716ce4d7da59829201cd6fbf5470ebbd</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::ustring</type>
      <name>create_certificate_handle_vfunc</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a636d79786082bc47cbdd71ea3b4493b3</anchor>
      <arglist>(const Glib::RefPtr&lt; const TlsCertificate &gt; &amp;certificate) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>lookup_certificate_for_handle_vfunc</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a54c2c1ff64fda3237a4552966eb5061a</anchor>
      <arglist>(const Glib::ustring &amp;handle, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lookup_certificate_for_handle_async_vfunc</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>aaa9fa8e49d4d24c305a2108aa06e0662</anchor>
      <arglist>(const Glib::ustring &amp;handle, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>lookup_certificate_for_handle_finish_vfunc</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a9941241f7bb05d3d1e9063a684479796</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>lookup_certificate_issuer_vfunc</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a3bd3f2fbd1211bc4b16948ec019d1868</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;certificate, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lookup_certificate_issuer_async_vfunc</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a9b15d1c8c09e964d48273095fd545209</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;certificate, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>lookup_certificate_issuer_finish_vfunc</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a7530659ca6e13169254e0291a3adf978</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; Glib::RefPtr&lt; TlsCertificate &gt; &gt;</type>
      <name>lookup_certificates_issued_by_vfunc</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a0543f3797a9ed9268930facfb7dd36f3</anchor>
      <arglist>(const Glib::RefPtr&lt; Glib::ByteArray &gt; &amp;issuer_raw_dn, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lookup_certificates_issued_by_async_vfunc</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a0998d23f955bd88e67680e023580d8f0</anchor>
      <arglist>(const Glib::RefPtr&lt; Glib::ByteArray &gt; &amp;issuer_raw_dn, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; Glib::RefPtr&lt; TlsCertificate &gt; &gt;</type>
      <name>lookup_certificates_issued_by_finish_vfunc</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>ab59ce8872c59c031c19dbbbaa8a3280f</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>ad93ee4852c961968c772afff9ab7089c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TlsDatabase</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a877f22992236317991c33049ad1a6c77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::TlsDatabase &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a908e93ce6a3e968441e9e5bb1fd1a19b</anchor>
      <arglist>(GTlsDatabase *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::TlsError</name>
    <filename>classGio_1_1TlsError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumeration">
      <type></type>
      <name>Code</name>
      <anchorfile>classGio_1_1TlsError.html</anchorfile>
      <anchor>a9371debadc39ed1101bb92f03e3bfe7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNAVAILABLE</name>
      <anchorfile>classGio_1_1TlsError.html</anchorfile>
      <anchor>a9371debadc39ed1101bb92f03e3bfe7da43429dba4134f5ac6cbc0dfd1f236d3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MISC</name>
      <anchorfile>classGio_1_1TlsError.html</anchorfile>
      <anchor>a9371debadc39ed1101bb92f03e3bfe7da4339f4e12b6a504523b6e35401489b4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_CERTIFICATE</name>
      <anchorfile>classGio_1_1TlsError.html</anchorfile>
      <anchor>a9371debadc39ed1101bb92f03e3bfe7da10a1de30f7e5678b3d22a2a1fe289365</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_TLS</name>
      <anchorfile>classGio_1_1TlsError.html</anchorfile>
      <anchor>a9371debadc39ed1101bb92f03e3bfe7da14fc204d1bafda33589ece0032263919</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HANDSHAKE</name>
      <anchorfile>classGio_1_1TlsError.html</anchorfile>
      <anchor>a9371debadc39ed1101bb92f03e3bfe7da4669f7fe36b58d16085088c5fb9cb6ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CERTIFICATE_REQUIRED</name>
      <anchorfile>classGio_1_1TlsError.html</anchorfile>
      <anchor>a9371debadc39ed1101bb92f03e3bfe7dabd75e575ff34736b897854ac4022c459</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDOFFILE</name>
      <anchorfile>classGio_1_1TlsError.html</anchorfile>
      <anchor>a9371debadc39ed1101bb92f03e3bfe7dafc624327d22ecd563c83e476e08412da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNAVAILABLE</name>
      <anchorfile>classGio_1_1TlsError.html</anchorfile>
      <anchor>a9371debadc39ed1101bb92f03e3bfe7da43429dba4134f5ac6cbc0dfd1f236d3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MISC</name>
      <anchorfile>classGio_1_1TlsError.html</anchorfile>
      <anchor>a9371debadc39ed1101bb92f03e3bfe7da4339f4e12b6a504523b6e35401489b4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_CERTIFICATE</name>
      <anchorfile>classGio_1_1TlsError.html</anchorfile>
      <anchor>a9371debadc39ed1101bb92f03e3bfe7da10a1de30f7e5678b3d22a2a1fe289365</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_TLS</name>
      <anchorfile>classGio_1_1TlsError.html</anchorfile>
      <anchor>a9371debadc39ed1101bb92f03e3bfe7da14fc204d1bafda33589ece0032263919</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HANDSHAKE</name>
      <anchorfile>classGio_1_1TlsError.html</anchorfile>
      <anchor>a9371debadc39ed1101bb92f03e3bfe7da4669f7fe36b58d16085088c5fb9cb6ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CERTIFICATE_REQUIRED</name>
      <anchorfile>classGio_1_1TlsError.html</anchorfile>
      <anchor>a9371debadc39ed1101bb92f03e3bfe7dabd75e575ff34736b897854ac4022c459</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDOFFILE</name>
      <anchorfile>classGio_1_1TlsError.html</anchorfile>
      <anchor>a9371debadc39ed1101bb92f03e3bfe7dafc624327d22ecd563c83e476e08412da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TlsError</name>
      <anchorfile>classGio_1_1TlsError.html</anchorfile>
      <anchor>a4651450fbddec4179c1cd4d5ae32df7b</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TlsError</name>
      <anchorfile>classGio_1_1TlsError.html</anchorfile>
      <anchor>ab8a32ebe5846e27ef3e096d247523c5d</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGio_1_1TlsError.html</anchorfile>
      <anchor>ae020e133f06852a78ffa994c273bb3c8</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::TlsInteraction</name>
    <filename>classGio_1_1TlsInteraction.html</filename>
    <base>Glib::Object</base>
    <member kind="function">
      <type></type>
      <name>TlsInteraction</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>a5174b4167c31222f348b17c94e645c44</anchor>
      <arglist>(TlsInteraction &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TlsInteraction &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>a963005af527b27acd98adfb010a0f76d</anchor>
      <arglist>(TlsInteraction &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TlsInteraction</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>a8efdc3c16ce20f3461b9ad50ace33768</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GTlsInteraction *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>aef5c75374b261165ee63adfd37fe0870</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GTlsInteraction *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>a3f818c80171f8869b6f1ad94633f6dc6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GTlsInteraction *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>a4860c864e43fbac7ab684bc83d1b80f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TlsInteractionResult</type>
      <name>ask_password</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>ad039f1e5e3380b5e18a9688c8e86c842</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsPassword &gt; &amp;password, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>TlsInteractionResult</type>
      <name>ask_password</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>ad3777be74f960cb9088b84ba165b5c65</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsPassword &gt; &amp;password)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ask_password_async</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>adb02855b2f545378e124e93b1533070a</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsPassword &gt; &amp;password, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ask_password_async</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>a96e0ef839e0455e2f53a06b6428a05b9</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsPassword &gt; &amp;password, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ask_password_async</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>a7b4d66b114e41459b191fe0d2a5d18e0</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsPassword &gt; &amp;password, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ask_password_async</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>a212378317f976bf3e15fe4fbc84841c7</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsPassword &gt; &amp;password)</arglist>
    </member>
    <member kind="function">
      <type>TlsInteractionResult</type>
      <name>ask_password_finish</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>aaebe7fb3af0f25de4802028ff64b1520</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>TlsInteractionResult</type>
      <name>invoke_ask_password</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>a8a8e339fcb9bb784d161413f8cbbbf69</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsPassword &gt; &amp;password, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>TlsInteractionResult</type>
      <name>invoke_ask_password</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>a7db91913a1cbb697782a2041797e9463</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsPassword &gt; &amp;password)</arglist>
    </member>
    <member kind="function">
      <type>TlsInteractionResult</type>
      <name>invoke_request_certificate</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>a8759118e8ae77645ed20bc3c631daa4a</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsConnection &gt; &amp;connection, TlsCertificateRequestFlags flags, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>TlsInteractionResult</type>
      <name>invoke_request_certificate</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>a6b3c48df67c5e6dcaceb8d04451a2865</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsConnection &gt; &amp;connection, TlsCertificateRequestFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>TlsInteractionResult</type>
      <name>request_certificate</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>acadf48ecb1d41063ba4d76fe187fd7d7</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsConnection &gt; &amp;connection, TlsCertificateRequestFlags flags, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>TlsInteractionResult</type>
      <name>request_certificate</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>aac1d3bbf94e858cce4eb61ca775dcf13</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsConnection &gt; &amp;connection, TlsCertificateRequestFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>request_certificate_async</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>a6d89d7710ba932d872827da697374665</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsConnection &gt; &amp;connection, TlsCertificateRequestFlags flags, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>request_certificate_async</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>a678d02cc95ccc8afe4e8d24761b06393</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsConnection &gt; &amp;connection, TlsCertificateRequestFlags flags, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>request_certificate_async</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>a85f6681e3dfefb6450c36dd954d6fd97</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsConnection &gt; &amp;connection, TlsCertificateRequestFlags flags, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>request_certificate_async</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>a3e89f7799fceb70807f01045ea350ada</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsConnection &gt; &amp;connection, TlsCertificateRequestFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>TlsInteractionResult</type>
      <name>request_certificate_finish</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>a3a87427b9243423768dccb1c0c292dea</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TlsInteractionResult</type>
      <name>ask_password_vfunc</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>af366896a7de624ee07395126fb210a47</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsPassword &gt; &amp;password, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ask_password_async_vfunc</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>ad656403cb500082ab0cbe5cb97911ed1</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsPassword &gt; &amp;password, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TlsInteractionResult</type>
      <name>ask_password_finish_vfunc</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>acb9d9a177cb29430295e1ad933924d58</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>a7cec0343c61089f8e2babcdef0573742</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TlsInteraction</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>aca4bb20749e78f17e699bd2269407263</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::TlsInteraction &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>aebb25ff82202624e649a490324d9d0cb</anchor>
      <arglist>(GTlsInteraction *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::TlsPassword</name>
    <filename>classGio_1_1TlsPassword.html</filename>
    <base>Glib::Object</base>
    <member kind="function">
      <type></type>
      <name>TlsPassword</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>a15c08d916fa2652df3b14a90fa640cde</anchor>
      <arglist>(TlsPassword &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TlsPassword &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>a51ca7c1ebb6ee0a109a290a17db39b19</anchor>
      <arglist>(TlsPassword &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TlsPassword</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>ab6f7dbfcb79629cfea23823e0cd7c86f</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GTlsPassword *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>afbe41a3733d1975e84bfe0325b2b2460</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GTlsPassword *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>a256de36ab874eaada577d46c2d8266b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GTlsPassword *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>af8829fb5aca1fd01df740e31e9b1a5b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const guchar *</type>
      <name>get_value</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>a4cdeafd3d53f3b944b12af479788c532</anchor>
      <arglist>(gsize &amp;length) const</arglist>
    </member>
    <member kind="function">
      <type>const guchar *</type>
      <name>get_value</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>a98528f77f6b7a3241a71066cdef56e8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>ada8e95baa74269804d1b413a73fd561b</anchor>
      <arglist>(const guchar *value, gssize length=-1)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_description</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>a0e3987abe2727741be3beaaa982bebb2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_description</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>a5fb9003ae744837b0568209c128dc5c0</anchor>
      <arglist>(const Glib::ustring &amp;description)</arglist>
    </member>
    <member kind="function">
      <type>TlsPasswordFlags</type>
      <name>get_flags</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>af0c1d5659f2e1876c90356216aba0847</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_flags</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>a039c02e89a4d7b564164018bd790ee70</anchor>
      <arglist>(TlsPasswordFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_warning</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>af94ed0b180809f693d26423cdc076bd9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_warning</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>a4d2aa6d47f9439ea2f93778045e7bc2a</anchor>
      <arglist>(const Glib::ustring &amp;warning)</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; Glib::ustring &gt;</type>
      <name>property_description</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>a68eba1b81aa7cd9bae512a8de5be2a2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_description</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>a5a99db07d5fe3ef91c7ea135d11ac7c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; TlsPasswordFlags &gt;</type>
      <name>property_flags</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>ae7626ffb8912ec455aa675e06adaf229</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; TlsPasswordFlags &gt;</type>
      <name>property_flags</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>a3db23923dd17257fb7b785a394b6d721</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; Glib::ustring &gt;</type>
      <name>property_warning</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>a950cd12856f1a390098f8ceee0697c67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_warning</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>a829d415c830b28e7cf1b4e8228116e24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const guchar *</type>
      <name>get_value_vfunc</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>a05b6b2d84be7e21884848b1c56e261d8</anchor>
      <arglist>(gsize &amp;length) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::ustring</type>
      <name>get_default_warning_vfunc</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>a179a2c5d6217794002d13d41b7000af5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>a66e96eac4452a8a591cd968693223ae1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; TlsPassword &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>a347bd04d416f1ffc094185d570668735</anchor>
      <arglist>(const Glib::ustring &amp;description, TlsPasswordFlags flags=Gio::TLS_PASSWORD_NONE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TlsPassword</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>ae8a1b859b351bc417229ecd0f1a6887c</anchor>
      <arglist>(const Glib::ustring &amp;description, TlsPasswordFlags flags=Gio::TLS_PASSWORD_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::TlsPassword &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>a50e99606b8aff44dcf8965b5651fa499</anchor>
      <arglist>(GTlsPassword *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::TlsServerConnection</name>
    <filename>classGio_1_1TlsServerConnection.html</filename>
    <base>Glib::Interface</base>
    <base>Gio::TlsConnection</base>
    <member kind="function">
      <type></type>
      <name>TlsServerConnection</name>
      <anchorfile>classGio_1_1TlsServerConnection.html</anchorfile>
      <anchor>a86267cd659a933e978eb17978c8b80ad</anchor>
      <arglist>(TlsServerConnection &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TlsServerConnection &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1TlsServerConnection.html</anchorfile>
      <anchor>abcf22932ed1e2a742eaceebb3b9ce366</anchor>
      <arglist>(TlsServerConnection &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TlsServerConnection</name>
      <anchorfile>classGio_1_1TlsServerConnection.html</anchorfile>
      <anchor>a6515530d01acbffb979c642f95c42627</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GTlsServerConnection *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TlsServerConnection.html</anchorfile>
      <anchor>a5a9ef06ab0c1d663f2c6409a16b0eaa9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GTlsServerConnection *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TlsServerConnection.html</anchorfile>
      <anchor>a41206ebf335765dd4db71324ac62d7c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; TlsAuthenticationMode &gt;</type>
      <name>property_authentication_mode</name>
      <anchorfile>classGio_1_1TlsServerConnection.html</anchorfile>
      <anchor>a3a5218b1fb51b5bac912b54faf0a3c34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; TlsAuthenticationMode &gt;</type>
      <name>property_authentication_mode</name>
      <anchorfile>classGio_1_1TlsServerConnection.html</anchorfile>
      <anchor>a959c11c08f67cd381ce52301dac10357</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1TlsServerConnection.html</anchorfile>
      <anchor>aad640ce0ed29c2fa0ad04e3fcbd8c188</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1TlsServerConnection.html</anchorfile>
      <anchor>a8537455b9ec962b867002fbd931c16fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; IOStream &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1TlsServerConnection.html</anchorfile>
      <anchor>a8358969dd6f3347cc50d802da6cf4314</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;base_io_stream, const Glib::RefPtr&lt; TlsCertificate &gt; &amp;certificate)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TlsServerConnection</name>
      <anchorfile>classGio_1_1TlsServerConnection.html</anchorfile>
      <anchor>abcf428ffb6736252e0c9a63d8cd5cb8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::TlsServerConnection &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1TlsServerConnection.html</anchorfile>
      <anchor>a987e9b5e8928fd28ef02e306560402d2</anchor>
      <arglist>(GTlsServerConnection *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::UnixConnection</name>
    <filename>classGio_1_1UnixConnection.html</filename>
    <base>Gio::SocketConnection</base>
    <member kind="function">
      <type></type>
      <name>UnixConnection</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>a3c3a41bf92eea9d20e56d530353cfe40</anchor>
      <arglist>(UnixConnection &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnixConnection &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>a887c59daddcc655af25c6c9f84b8c359</anchor>
      <arglist>(UnixConnection &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UnixConnection</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>a191c5183197e223b113de053cf63d84f</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GUnixConnection *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>a9aedb22a5a9706ae144b2d4d21f57a45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GUnixConnection *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>a78049530824ca474ce48c1226d89f635</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GUnixConnection *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>a1372a4da6cbecbad7a80dde274921024</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>send_fd</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>ab40d022ded6013f70072d3b69dad9b46</anchor>
      <arglist>(int fd, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>send_fd</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>a30e52f3f9e7d857d838c554c35b12a33</anchor>
      <arglist>(int fd)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>receive_fd</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>a33a49ee939a8232b9a41501bf5d90a88</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>receive_fd</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>a610d5ea35e1c73126d0fb5e2c24b7c82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Credentials &gt;</type>
      <name>receive_credentials</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>ad50ee58c1df7c351358e003c70e17d56</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Credentials &gt;</type>
      <name>receive_credentials</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>a87fba70bf896bdc80d6aa1945e52a9e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Credentials &gt;</type>
      <name>receive_credentials</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>a95a07bea7fe884532a434c41af17a7a6</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Credentials &gt;</type>
      <name>receive_credentials</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>ad8ef2c6cdc53a0373dcde7a98fefcea7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>receive_credentials_async</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>a764130a5beb5bfd313160492c4824506</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>receive_credentials_async</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>ac77e3729754f0b57ecd2a84d651d059a</anchor>
      <arglist>(const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Credentials &gt;</type>
      <name>receive_credentials_finish</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>a9e830b0705f8634e71c1db16e59f641c</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>send_credentials</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>abe2f3b0f09c25340816677fe34653c51</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>send_credentials</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>a41fd0afb1e3aec92b6bd9ee643dd9663</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_credentials_async</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>aca21b23f794135f59c19b7bb0ef5dcbe</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_credentials_async</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>aed2f979f698f7d59eee11522bdb86c0b</anchor>
      <arglist>(const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>send_credentials_finish</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>a1403ab9f18d1d036bd7cfe6466c02906</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>ad1879193e303385ce604d5b190f601f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::UnixConnection &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>ae45f6ec45d565efddc6215d44cc017d4</anchor>
      <arglist>(GUnixConnection *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::UnixCredentialsMessage</name>
    <filename>classGio_1_1UnixCredentialsMessage.html</filename>
    <base>Gio::SocketControlMessage</base>
    <member kind="function">
      <type></type>
      <name>UnixCredentialsMessage</name>
      <anchorfile>classGio_1_1UnixCredentialsMessage.html</anchorfile>
      <anchor>afd37d80d2444f8622c5734253ec9b7af</anchor>
      <arglist>(UnixCredentialsMessage &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnixCredentialsMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1UnixCredentialsMessage.html</anchorfile>
      <anchor>a1b7425d14343e9b128cb13ffab9d7fa6</anchor>
      <arglist>(UnixCredentialsMessage &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UnixCredentialsMessage</name>
      <anchorfile>classGio_1_1UnixCredentialsMessage.html</anchorfile>
      <anchor>add6e95cc63513e27912c7547ccdfacf3</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GUnixCredentialsMessage *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1UnixCredentialsMessage.html</anchorfile>
      <anchor>aeebce74d3e79d9cc2fab4ec5cf114206</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GUnixCredentialsMessage *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1UnixCredentialsMessage.html</anchorfile>
      <anchor>af357ca57d608c7ecd1cc6006dfa4d474</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GUnixCredentialsMessage *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1UnixCredentialsMessage.html</anchorfile>
      <anchor>ac68e4ef0dd2786ef1ca482504f14f496</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Credentials &gt;</type>
      <name>get_credentials</name>
      <anchorfile>classGio_1_1UnixCredentialsMessage.html</anchorfile>
      <anchor>a93647219a626d1b8d21687fd59b196e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Credentials &gt;</type>
      <name>get_credentials</name>
      <anchorfile>classGio_1_1UnixCredentialsMessage.html</anchorfile>
      <anchor>af731ebce704af7d2e5900b0db546ef7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; Credentials &gt; &gt;</type>
      <name>property_credentials</name>
      <anchorfile>classGio_1_1UnixCredentialsMessage.html</anchorfile>
      <anchor>a010cf393d12811a6251ea891c5c714c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1UnixCredentialsMessage.html</anchorfile>
      <anchor>aa318804b7690354e1759d6a6dead2f17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; UnixCredentialsMessage &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1UnixCredentialsMessage.html</anchorfile>
      <anchor>ab8eb09a8b771de8ca634e4e4780ac091</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; UnixCredentialsMessage &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1UnixCredentialsMessage.html</anchorfile>
      <anchor>accab1f2a5621f97eb320bb283b0a7c39</anchor>
      <arglist>(const Glib::RefPtr&lt; Credentials &gt; &amp;credentials)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>is_supported</name>
      <anchorfile>classGio_1_1UnixCredentialsMessage.html</anchorfile>
      <anchor>abdfe6efc4bf659ca9557ebbfbfdfc6c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>UnixCredentialsMessage</name>
      <anchorfile>classGio_1_1UnixCredentialsMessage.html</anchorfile>
      <anchor>af041e1e9b3e01ded2696f73d0d2da394</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>UnixCredentialsMessage</name>
      <anchorfile>classGio_1_1UnixCredentialsMessage.html</anchorfile>
      <anchor>a881bd0106fad4a555d0af457cc153458</anchor>
      <arglist>(const Glib::RefPtr&lt; Credentials &gt; &amp;credentials)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::UnixCredentialsMessage &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1UnixCredentialsMessage.html</anchorfile>
      <anchor>ac549c0849cc357cd39da842d53cf02fd</anchor>
      <arglist>(GUnixCredentialsMessage *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::UnixFDList</name>
    <filename>classGio_1_1UnixFDList.html</filename>
    <base>Glib::Object</base>
    <member kind="function">
      <type></type>
      <name>UnixFDList</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>a1bc7eb1346a63f25c7ede66362b4cd28</anchor>
      <arglist>(UnixFDList &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnixFDList &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>a7a81497f68ea08dd885e2ad811179e00</anchor>
      <arglist>(UnixFDList &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UnixFDList</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>ae9c5a208449b02719c218a671286ff3f</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GUnixFDList *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>a13369401ffc5804f1d08f21f8767efb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GUnixFDList *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>ad8b7e3e706306d2af2f4935434da4e93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GUnixFDList *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>aa584b34d376383010cbf72c999a39442</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_length</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>a91cda37d53b31eed199fb932d29e0363</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>aaad73564f98acc4cc9331a3f72281d6c</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>const Glib::ArrayHandle&lt; int &gt;</type>
      <name>peek_fds</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>a5d48c12ee182bf9666475b67211c4065</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; int &gt;</type>
      <name>steal_fds</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>a9167e4e9d3adf8f06405d4928b15b614</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>append</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>a8e99c050949497a05a6e65e8b2548101</anchor>
      <arglist>(int fd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>a550968e6a3d06ece445a5bb6974b3814</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; UnixFDList &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>ad8865d446428f2590a7393c54e655307</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; UnixFDList &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>a7095f1477818fa6cce563e1260933c5c</anchor>
      <arglist>(const Glib::ArrayHandle&lt; int &gt; &amp;fds)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; UnixFDList &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>aee6c787908674c69e6d39a859c08b7fb</anchor>
      <arglist>(const Glib::ArrayHandle&lt; int &gt; &amp;fds, int n_fds)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>UnixFDList</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>af994190fe054980701789befb81bbbc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>UnixFDList</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>a5b668c1766c02bb0a2661384695942cb</anchor>
      <arglist>(const Glib::ArrayHandle&lt; int &gt; &amp;fds)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>UnixFDList</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>a24759393f0445985fd7ddadbc9acd41d</anchor>
      <arglist>(const Glib::ArrayHandle&lt; int &gt; &amp;fds, int n_fds)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::UnixFDList &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>ac7c943cb9e8b46bfa4f6bae95569b7c7</anchor>
      <arglist>(GUnixFDList *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::UnixFDMessage</name>
    <filename>classGio_1_1UnixFDMessage.html</filename>
    <base>Gio::SocketControlMessage</base>
    <member kind="function">
      <type></type>
      <name>UnixFDMessage</name>
      <anchorfile>classGio_1_1UnixFDMessage.html</anchorfile>
      <anchor>a9c0ebaa5ec2603636a2eb6c3742ce9e7</anchor>
      <arglist>(UnixFDMessage &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnixFDMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1UnixFDMessage.html</anchorfile>
      <anchor>a36fa70846904bc1c4e0c43246128e308</anchor>
      <arglist>(UnixFDMessage &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UnixFDMessage</name>
      <anchorfile>classGio_1_1UnixFDMessage.html</anchorfile>
      <anchor>a022802023fbc2ca237cd0861b7d6d238</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GUnixFDMessage *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1UnixFDMessage.html</anchorfile>
      <anchor>ae6df3f6003202acb871dd6649ca8d073</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GUnixFDMessage *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1UnixFDMessage.html</anchorfile>
      <anchor>ac443d19a22f9786fb0784dbe6087f1ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GUnixFDMessage *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1UnixFDMessage.html</anchorfile>
      <anchor>a7d9b6c8bfa419d0010712b40c2a7aa4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; UnixFDList &gt;</type>
      <name>get_fd_list</name>
      <anchorfile>classGio_1_1UnixFDMessage.html</anchorfile>
      <anchor>aecf8e53af113ebfc1f47730f2910fdba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const UnixFDList &gt;</type>
      <name>get_fd_list</name>
      <anchorfile>classGio_1_1UnixFDMessage.html</anchorfile>
      <anchor>aa3bc67d6971d099fa43dc3aa3a7c993d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>append_fd</name>
      <anchorfile>classGio_1_1UnixFDMessage.html</anchorfile>
      <anchor>a7e3f1da81fe5c9a50592cceb30b7a167</anchor>
      <arglist>(int fd)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; int &gt;</type>
      <name>steal_fds</name>
      <anchorfile>classGio_1_1UnixFDMessage.html</anchorfile>
      <anchor>a22b7789635651e38f767f0018e447a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; UnixFDList &gt; &gt;</type>
      <name>property_fd_list</name>
      <anchorfile>classGio_1_1UnixFDMessage.html</anchorfile>
      <anchor>afaf09c634a695ea9ae4b6d1bacc0a7b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1UnixFDMessage.html</anchorfile>
      <anchor>a89044d58dc1a8e75fe9cd478138a7159</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; UnixFDMessage &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1UnixFDMessage.html</anchorfile>
      <anchor>a5195f6f4f5f27112269bbbd5a9996075</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; UnixFDMessage &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1UnixFDMessage.html</anchorfile>
      <anchor>a3fbc7ddfcfafe4fe966c2195a1a52d4e</anchor>
      <arglist>(const Glib::RefPtr&lt; UnixFDList &gt; &amp;fd_list)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>UnixFDMessage</name>
      <anchorfile>classGio_1_1UnixFDMessage.html</anchorfile>
      <anchor>a5a92924d8bd62f4ca79ce0f404d42fc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>UnixFDMessage</name>
      <anchorfile>classGio_1_1UnixFDMessage.html</anchorfile>
      <anchor>adb2b787dac2ad113ae51fa34ab5c1cc2</anchor>
      <arglist>(const Glib::RefPtr&lt; UnixFDList &gt; &amp;fd_list)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::UnixFDMessage &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1UnixFDMessage.html</anchorfile>
      <anchor>a25f3bfe7cde291aafaed41c70831e947</anchor>
      <arglist>(GUnixFDMessage *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::UnixInputStream</name>
    <filename>classGio_1_1UnixInputStream.html</filename>
    <base>Gio::InputStream</base>
    <member kind="function">
      <type></type>
      <name>UnixInputStream</name>
      <anchorfile>classGio_1_1UnixInputStream.html</anchorfile>
      <anchor>a9ae5be56ef55825e5824f542f5195a8c</anchor>
      <arglist>(UnixInputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnixInputStream &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1UnixInputStream.html</anchorfile>
      <anchor>a5b83cb48c6653901f78e1da3edb2448c</anchor>
      <arglist>(UnixInputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UnixInputStream</name>
      <anchorfile>classGio_1_1UnixInputStream.html</anchorfile>
      <anchor>a9e1e594fcbb655855611f1f3fff4fd0e</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GUnixInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1UnixInputStream.html</anchorfile>
      <anchor>aa0b863b654d38a9e10f7d7d49b82c5ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GUnixInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1UnixInputStream.html</anchorfile>
      <anchor>a7ecb3ee8bb232dca7db86e4ac251bb2b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GUnixInputStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1UnixInputStream.html</anchorfile>
      <anchor>a5f05de3f98b2dd8e7f0f2c5038fbc69f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_close_fd</name>
      <anchorfile>classGio_1_1UnixInputStream.html</anchorfile>
      <anchor>a86e845ad209749c3358634a58be66023</anchor>
      <arglist>(bool close_fd=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_close_fd</name>
      <anchorfile>classGio_1_1UnixInputStream.html</anchorfile>
      <anchor>a1d660e6d129bd968294ca5f3de7d50e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_fd</name>
      <anchorfile>classGio_1_1UnixInputStream.html</anchorfile>
      <anchor>ac93af8d9816c7599cce04928a5ca3c10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; int &gt;</type>
      <name>property_fd</name>
      <anchorfile>classGio_1_1UnixInputStream.html</anchorfile>
      <anchor>a4eb71476194ee3ff1f82bed4f6aaed2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_close_fd</name>
      <anchorfile>classGio_1_1UnixInputStream.html</anchorfile>
      <anchor>a166520025eb07ed03b1a1f5975eae663</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_close_fd</name>
      <anchorfile>classGio_1_1UnixInputStream.html</anchorfile>
      <anchor>adffd42625021fc42e99279033e658be7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1UnixInputStream.html</anchorfile>
      <anchor>ade314f3cd08f1c345d12da1e1d4e6505</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; UnixInputStream &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1UnixInputStream.html</anchorfile>
      <anchor>afa7800e1d9f83a7f6c9e89691ddccab5</anchor>
      <arglist>(int fd, bool close_fd)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>UnixInputStream</name>
      <anchorfile>classGio_1_1UnixInputStream.html</anchorfile>
      <anchor>a7df00cf2bbccab59d70af960eff25bf9</anchor>
      <arglist>(int fd, bool close_fd)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::UnixInputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1UnixInputStream.html</anchorfile>
      <anchor>a631c2896887d90e8fa13ac8132c9f5db</anchor>
      <arglist>(GUnixInputStream *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::UnixOutputStream</name>
    <filename>classGio_1_1UnixOutputStream.html</filename>
    <base>Gio::OutputStream</base>
    <member kind="function">
      <type></type>
      <name>UnixOutputStream</name>
      <anchorfile>classGio_1_1UnixOutputStream.html</anchorfile>
      <anchor>aa8cda94163b04f4e32bbda95de3d5d76</anchor>
      <arglist>(UnixOutputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnixOutputStream &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1UnixOutputStream.html</anchorfile>
      <anchor>a759d71847ef27d5e4492585a907a07cd</anchor>
      <arglist>(UnixOutputStream &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UnixOutputStream</name>
      <anchorfile>classGio_1_1UnixOutputStream.html</anchorfile>
      <anchor>a4d0443520838391858b5f8ef14af862d</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GUnixOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1UnixOutputStream.html</anchorfile>
      <anchor>ac22d258873e88661e29140587687d1d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GUnixOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1UnixOutputStream.html</anchorfile>
      <anchor>a823b6bf9e521f47e2814a58480b4cbc7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GUnixOutputStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1UnixOutputStream.html</anchorfile>
      <anchor>a9d24719266d36067e08320d597f84f0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_close_fd</name>
      <anchorfile>classGio_1_1UnixOutputStream.html</anchorfile>
      <anchor>a537abb20777901b37115aa527c791599</anchor>
      <arglist>(bool close_fd=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_close_fd</name>
      <anchorfile>classGio_1_1UnixOutputStream.html</anchorfile>
      <anchor>a553934095b869e6a41063b53eb597a59</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_fd</name>
      <anchorfile>classGio_1_1UnixOutputStream.html</anchorfile>
      <anchor>a8368ba2f20b0a0fda362c0a2b597f1b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; int &gt;</type>
      <name>property_fd</name>
      <anchorfile>classGio_1_1UnixOutputStream.html</anchorfile>
      <anchor>a7b96570370e645b6a50873e0be5777a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_close_fd</name>
      <anchorfile>classGio_1_1UnixOutputStream.html</anchorfile>
      <anchor>a5f6e2eba89e9dbeae020e9a0de6ed334</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_close_fd</name>
      <anchorfile>classGio_1_1UnixOutputStream.html</anchorfile>
      <anchor>aa1a83b95c9d5aeec4531a79b15b45e76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1UnixOutputStream.html</anchorfile>
      <anchor>a9d3c789cbcb4cddeb2cacd2320be47ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; UnixOutputStream &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1UnixOutputStream.html</anchorfile>
      <anchor>a95b6f82ae5e6dcc7019e825750db9c37</anchor>
      <arglist>(int fd, bool close_fd)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>UnixOutputStream</name>
      <anchorfile>classGio_1_1UnixOutputStream.html</anchorfile>
      <anchor>a846c3deb5eb713f50c5a04422f161623</anchor>
      <arglist>(int fd, bool close_fd)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::UnixOutputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1UnixOutputStream.html</anchorfile>
      <anchor>ad0dc702aab1a415385bf6225fc71388f</anchor>
      <arglist>(GUnixOutputStream *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::UnixSocketAddress</name>
    <filename>classGio_1_1UnixSocketAddress.html</filename>
    <base>Gio::SocketAddress</base>
    <member kind="function">
      <type></type>
      <name>UnixSocketAddress</name>
      <anchorfile>classGio_1_1UnixSocketAddress.html</anchorfile>
      <anchor>a085ce16690be7efd99c31dca6c843c6b</anchor>
      <arglist>(UnixSocketAddress &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnixSocketAddress &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1UnixSocketAddress.html</anchorfile>
      <anchor>a41234f8f95aebebaa8393b25ae99ee67</anchor>
      <arglist>(UnixSocketAddress &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UnixSocketAddress</name>
      <anchorfile>classGio_1_1UnixSocketAddress.html</anchorfile>
      <anchor>a848a343fb78178010f65da37d48fd77b</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GUnixSocketAddress *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1UnixSocketAddress.html</anchorfile>
      <anchor>a232d45537663124d0980a342ef82dca0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GUnixSocketAddress *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1UnixSocketAddress.html</anchorfile>
      <anchor>a15d8bc9a17743821ab1e96630d9c4067</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GUnixSocketAddress *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1UnixSocketAddress.html</anchorfile>
      <anchor>a8292a986bbaf74ddeef890bad8ad3d5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UnixSocketAddressType</type>
      <name>get_address_type</name>
      <anchorfile>classGio_1_1UnixSocketAddress.html</anchorfile>
      <anchor>aeb89b1babe9879f53ec5ca82c83eb42e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_path</name>
      <anchorfile>classGio_1_1UnixSocketAddress.html</anchorfile>
      <anchor>ac8078d32e1d654f49819bc0344e97b67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_abstract</name>
      <anchorfile>classGio_1_1UnixSocketAddress.html</anchorfile>
      <anchor>a2662adf5fe6a13bd37479472a025590b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; UnixSocketAddressType &gt;</type>
      <name>property_address_type</name>
      <anchorfile>classGio_1_1UnixSocketAddress.html</anchorfile>
      <anchor>a20413f5a5868eace46e5c7ee905368f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; std::string &gt;</type>
      <name>property_path</name>
      <anchorfile>classGio_1_1UnixSocketAddress.html</anchorfile>
      <anchor>a33bd5880afedb84318e26a5f48abe7db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; ByteArray &gt; &gt;</type>
      <name>property_path_as_array</name>
      <anchorfile>classGio_1_1UnixSocketAddress.html</anchorfile>
      <anchor>a3331adc2dae7c0cd4d91b18b810d3a9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1UnixSocketAddress.html</anchorfile>
      <anchor>abf7f76cf6c0170315cd6454d510b349c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; UnixSocketAddress &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1UnixSocketAddress.html</anchorfile>
      <anchor>adb8973f2cea0743cb2458df5b021fd02</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; UnixSocketAddress &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1UnixSocketAddress.html</anchorfile>
      <anchor>a52ccad01cc1ee5497554529cf48f66dc</anchor>
      <arglist>(const std::string &amp;path, UnixSocketAddressType type, int path_len=-1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>abstract_names_supported</name>
      <anchorfile>classGio_1_1UnixSocketAddress.html</anchorfile>
      <anchor>a9f4a9fe85d376f592b2c26f009e6e7c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>UnixSocketAddress</name>
      <anchorfile>classGio_1_1UnixSocketAddress.html</anchorfile>
      <anchor>acdd850b1798201bd86416da7b0c2312a</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::UnixSocketAddress &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1UnixSocketAddress.html</anchorfile>
      <anchor>a11a1d4422a281381af4fff2b98ae33ad</anchor>
      <arglist>(GUnixSocketAddress *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::Volume</name>
    <filename>classGio_1_1Volume.html</filename>
    <base>Glib::Interface</base>
    <member kind="function">
      <type></type>
      <name>Volume</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>aa4439a77d3b1b8ac53f27141885e8d0e</anchor>
      <arglist>(Volume &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Volume &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a5cef4a26d6c1a9e5d7dac33de63b0949</anchor>
      <arglist>(Volume &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Volume</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>aaf010e1908af88fe56f99d13620bc7d7</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GVolume *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>af75306117005b88b2c3f678d7a4e81fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GVolume *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a16dfce0450a7f665e95333b588c81e60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_name</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a0914a0e5a10cd8effc3e1f5338073216</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_uuid</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>af0aa87c704384543b5809a4a43b6a3c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Icon &gt;</type>
      <name>get_icon</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a1c127e8f75fc65bb5abedc810bae6448</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Icon &gt;</type>
      <name>get_icon</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a89c69ed9a68e0d0f72bf26099514f643</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Icon &gt;</type>
      <name>get_symbolic_icon</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>aee2f6e756f7489e58814bbe275574d60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Icon &gt;</type>
      <name>get_symbolic_icon</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>ad489f6ff509988fba6736afa7e87a61a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Drive &gt;</type>
      <name>get_drive</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a666ee0dc70e5f4aefa194d64c489dc5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Drive &gt;</type>
      <name>get_drive</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a45683620e0ff83c61e4882190c4ced5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Mount &gt;</type>
      <name>get_mount</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a24b406858eff715570864fc787520a42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Mount &gt;</type>
      <name>get_mount</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a8c1ad6f5b1241cadc088a1abcbb48cdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_mount</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a7ef9107dba2e2328dde92be47881a1d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_eject</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>adc66d66c54a093403d03198a57e66471</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>should_automount</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a50be695ffcf0c9955b30b72fd0022836</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mount</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a17599f8132a9c8a4ef9bfc0f5645033a</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, MountMountFlags flags=MOUNT_MOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mount</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>ab506f07856b214bbf09d52f76ba94501</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const SlotAsyncReady &amp;slot, MountMountFlags flags=MOUNT_MOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mount</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a4620147fca3f9de5bcba571415f47349</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, MountMountFlags flags=MOUNT_MOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mount</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>aa34ce25eeb35a5c86dcedd1db5104579</anchor>
      <arglist>(MountMountFlags flags=MOUNT_MOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mount_finish</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a76b89705e10164880792f17d6670f655</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>ac238638763e26aa3e838d9abc1dd63f7</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a7d9d20ce35aceb00c89d093e2e944c79</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a0eb78deac53941d4fe83e5b889cdf848</anchor>
      <arglist>(MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a9844d9de96e64d547b9f91c745abb8c6</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a7d520a329a66ee666955c0a85b5085ce</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const SlotAsyncReady &amp;slot, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a75cf0202b35942ab2c36dc9086704064</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eject_finish</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a0f7234208d822c48a732ac0a84362473</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_identifier</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>aa845ff7099cead269a935fec66907bc4</anchor>
      <arglist>(const std::string &amp;kind) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::StringArrayHandle</type>
      <name>enumerate_identifiers</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a0a7f9f07d8cc3d384004238ef6db6ce3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; File &gt;</type>
      <name>get_activation_root</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>adbf1a1ad7b49e483a0990a6d30765010</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const File &gt;</type>
      <name>get_activation_root</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a62663208e37d421ce66f3eb9cb2b6fdb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>sort_key</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>ad1a97bfea9c45db7e566f6a8be260a6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void &gt;</type>
      <name>signal_changed</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a5d405b005f7285fc738e5961c2dd9d0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void &gt;</type>
      <name>signal_removed</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>aac949ac09a155a34f1d61b670fec1056</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a284c9080be40b24012691302ec96568e</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a0a4cd8e115bbc28bf62d2b0997a3f267</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Volume</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a3e59a87b47c5e4f14d881ac9767d8c71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_changed</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a7a28465c703fbc59e85e62eb0ee53cc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_removed</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>ace7a6a8760d17f19f0620c4aeb255455</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Volume &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>ad88965901e2804959a1df827a721a547</anchor>
      <arglist>(GVolume *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::VolumeMonitor</name>
    <filename>classGio_1_1VolumeMonitor.html</filename>
    <base>Glib::Object</base>
    <member kind="function">
      <type></type>
      <name>VolumeMonitor</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a65975a0a4ef05070b569a480a680e663</anchor>
      <arglist>(VolumeMonitor &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>VolumeMonitor &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a32c1493600c09f115ee77d402af5131f</anchor>
      <arglist>(VolumeMonitor &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VolumeMonitor</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>ad034d7c8077ae218f622fc14b34c89f1</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GVolumeMonitor *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a26f35f4479293662897520eb7b06542e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GVolumeMonitor *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>adbd82ee8fde18d2d04e426915cec9416</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GVolumeMonitor *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a26c03982f6bebaaa15e5682e051e58c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::ListHandle&lt; Glib::RefPtr&lt; Drive &gt; &gt;</type>
      <name>get_connected_drives</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>ac4a5e2749a0439bd75779b2a6b6783da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::ListHandle&lt; Glib::RefPtr&lt; Volume &gt; &gt;</type>
      <name>get_volumes</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a3781089d1267a1663bc9120ab21db25a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::ListHandle&lt; Glib::RefPtr&lt; Mount &gt; &gt;</type>
      <name>get_mounts</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a93723d6d66d3349f0a958390cf9d02af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Volume &gt;</type>
      <name>get_volume_for_uuid</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a8ac52203cace8e352f1adce1fe7f385a</anchor>
      <arglist>(const std::string &amp;uuid)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Mount &gt;</type>
      <name>get_mount_for_uuid</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a379fa574824d12a68309d015e367171d</anchor>
      <arglist>(const std::string &amp;uuid)</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, const Glib::RefPtr&lt; Volume &gt; &amp;&gt;</type>
      <name>signal_volume_added</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a6b7ca93aede527cffb80d69cc1b1c332</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, const Glib::RefPtr&lt; Volume &gt; &amp;&gt;</type>
      <name>signal_volume_removed</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>ab139ff6e16858dd1858a9da238846fe3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, const Glib::RefPtr&lt; Volume &gt; &amp;&gt;</type>
      <name>signal_volume_changed</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>ab39f42f39378896ca06aa00b42d6607c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, const Glib::RefPtr&lt; Mount &gt; &amp;&gt;</type>
      <name>signal_mount_added</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a9c069fe03642040f579defed020693c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, const Glib::RefPtr&lt; Mount &gt; &amp;&gt;</type>
      <name>signal_mount_removed</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>af33a76d59f8e394687c72316a3e96d68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, const Glib::RefPtr&lt; Mount &gt; &amp;&gt;</type>
      <name>signal_mount_pre_unmount</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a3a31b1deee13b5613414b78f788aad7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, const Glib::RefPtr&lt; Mount &gt; &amp;&gt;</type>
      <name>signal_mount_changed</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a6e4cecd914f71c08c8f913bc50e4e416</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, const Glib::RefPtr&lt; Drive &gt; &amp;&gt;</type>
      <name>signal_drive_connected</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a1642023a873c24b1fa2e695a692ce0e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, const Glib::RefPtr&lt; Drive &gt; &amp;&gt;</type>
      <name>signal_drive_disconnected</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a46bdd85cfd6aca7c58ce948b3ffd760a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, const Glib::RefPtr&lt; Drive &gt; &amp;&gt;</type>
      <name>signal_drive_changed</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>aa09847b44c100fa0269d314c5e37da32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, const Glib::RefPtr&lt; Drive &gt; &amp;&gt;</type>
      <name>signal_drive_eject_button</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a53161abdac24ed4d951b3f2a275def9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy&lt; void, const Glib::RefPtr&lt; Drive &gt; &amp;&gt;</type>
      <name>signal_drive_stop_button</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>acef499bd2a6778462318e17bdd43a000</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>ab5d4bc612bc82b572ec88d66596cf1e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; VolumeMonitor &gt;</type>
      <name>get</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a25c516228d8ecedf40d45e82e4bbb3c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Volume &gt;</type>
      <name>adopt_orphan_mount</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>ad02559ca69412cc5e202302de3f37a95</anchor>
      <arglist>(const Glib::RefPtr&lt; Mount &gt; &amp;mount)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_volume_added</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>acedc14897e721109142ae5d5fdf4daf0</anchor>
      <arglist>(const Glib::RefPtr&lt; Volume &gt; &amp;volume)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_volume_removed</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>ae57c09c2c8e5322ae8f241c92cae5e5c</anchor>
      <arglist>(const Glib::RefPtr&lt; Volume &gt; &amp;volume)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_volume_changed</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a9838b33847a193882538a5ecfb5c8679</anchor>
      <arglist>(const Glib::RefPtr&lt; Volume &gt; &amp;volume)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_mount_added</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a5323ab624d89a6488cfd08aaf6ff248e</anchor>
      <arglist>(const Glib::RefPtr&lt; Mount &gt; &amp;mount)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_mount_removed</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>ad912e1894509b15010e87f242982bcf5</anchor>
      <arglist>(const Glib::RefPtr&lt; Mount &gt; &amp;mount)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_mount_pre_unmount</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>ac51d8587804a6c09cf1a4476a21bf318</anchor>
      <arglist>(const Glib::RefPtr&lt; Mount &gt; &amp;mount)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_mount_changed</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>aa20faca7436ee75febf9112b163e4d77</anchor>
      <arglist>(const Glib::RefPtr&lt; Mount &gt; &amp;mount)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_drive_connected</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a1c8095c8ab8bed1f8b09d97aedf2ef33</anchor>
      <arglist>(const Glib::RefPtr&lt; Drive &gt; &amp;drive)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_drive_disconnected</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a70cb85fac2f07bdec4f896e5e3d7716d</anchor>
      <arglist>(const Glib::RefPtr&lt; Drive &gt; &amp;drive)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_drive_changed</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a32f398cde4a82c609f5e60667f4a2afe</anchor>
      <arglist>(const Glib::RefPtr&lt; Drive &gt; &amp;drive)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::VolumeMonitor &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a6e2656255f0de0710b8c35524b67ec89</anchor>
      <arglist>(GVolumeMonitor *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::ZlibCompressor</name>
    <filename>classGio_1_1ZlibCompressor.html</filename>
    <base>Glib::Object</base>
    <base>Gio::Converter</base>
    <member kind="function">
      <type></type>
      <name>ZlibCompressor</name>
      <anchorfile>classGio_1_1ZlibCompressor.html</anchorfile>
      <anchor>afb2d2885bf4e955f3d93b06b5adf4257</anchor>
      <arglist>(ZlibCompressor &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ZlibCompressor &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1ZlibCompressor.html</anchorfile>
      <anchor>aea80ffe5ef3c608007585072bc08ca1a</anchor>
      <arglist>(ZlibCompressor &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ZlibCompressor</name>
      <anchorfile>classGio_1_1ZlibCompressor.html</anchorfile>
      <anchor>ac8b477498a57379eb5b3fe459e90701e</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GZlibCompressor *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ZlibCompressor.html</anchorfile>
      <anchor>a01ff54d8361b903e336aec6e92f522b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GZlibCompressor *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ZlibCompressor.html</anchorfile>
      <anchor>a6bc9a8ea3641d9d7f033de35df4ed316</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GZlibCompressor *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1ZlibCompressor.html</anchorfile>
      <anchor>a341bf71731daccaa3f42268ee7ba7a88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>get_file_info</name>
      <anchorfile>classGio_1_1ZlibCompressor.html</anchorfile>
      <anchor>a940e3fb8fcd8ba87b985dd95a7e9fe65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const FileInfo &gt;</type>
      <name>get_file_info</name>
      <anchorfile>classGio_1_1ZlibCompressor.html</anchorfile>
      <anchor>aa572d52525eb3ca8251fb2ddafe253cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_file_info</name>
      <anchorfile>classGio_1_1ZlibCompressor.html</anchorfile>
      <anchor>a45605429c55830369207c6d95217091a</anchor>
      <arglist>(const Glib::RefPtr&lt; FileInfo &gt; &amp;file_info)</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; Glib::RefPtr&lt; FileInfo &gt; &gt;</type>
      <name>property_file_info</name>
      <anchorfile>classGio_1_1ZlibCompressor.html</anchorfile>
      <anchor>a37f42567c805d02102511ee8fd467129</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; FileInfo &gt; &gt;</type>
      <name>property_file_info</name>
      <anchorfile>classGio_1_1ZlibCompressor.html</anchorfile>
      <anchor>a2919109f3149acb1a89e0fa517d4079c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; ZlibCompressorFormat &gt;</type>
      <name>property_format</name>
      <anchorfile>classGio_1_1ZlibCompressor.html</anchorfile>
      <anchor>a5e727995f65c0c2c68675a80f04436bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; int &gt;</type>
      <name>property_level</name>
      <anchorfile>classGio_1_1ZlibCompressor.html</anchorfile>
      <anchor>ade853c1aa6633df1789e7d4d690b9a7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1ZlibCompressor.html</anchorfile>
      <anchor>ad9b8d9c76918d09f2aaf2ee4597df15d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; ZlibCompressor &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1ZlibCompressor.html</anchorfile>
      <anchor>a63da0d5047391d705bca206df6cad675</anchor>
      <arglist>(ZlibCompressorFormat format, int level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ZlibCompressor</name>
      <anchorfile>classGio_1_1ZlibCompressor.html</anchorfile>
      <anchor>aeaa8829018f1b0078659a4b690db4c20</anchor>
      <arglist>(ZlibCompressorFormat format, int level)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::ZlibCompressor &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1ZlibCompressor.html</anchorfile>
      <anchor>a202281d829c51c16435d0f59e8cb1f91</anchor>
      <arglist>(GZlibCompressor *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::ZlibDecompressor</name>
    <filename>classGio_1_1ZlibDecompressor.html</filename>
    <base>Glib::Object</base>
    <base>Gio::Converter</base>
    <member kind="function">
      <type></type>
      <name>ZlibDecompressor</name>
      <anchorfile>classGio_1_1ZlibDecompressor.html</anchorfile>
      <anchor>a7c6119288a9b2904422105dc3f5978ac</anchor>
      <arglist>(ZlibDecompressor &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ZlibDecompressor &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1ZlibDecompressor.html</anchorfile>
      <anchor>a78d48bb1432aea867a519424306df2b8</anchor>
      <arglist>(ZlibDecompressor &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ZlibDecompressor</name>
      <anchorfile>classGio_1_1ZlibDecompressor.html</anchorfile>
      <anchor>a344f400ebafe61eb96ab4779faf29464</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GZlibDecompressor *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ZlibDecompressor.html</anchorfile>
      <anchor>a19fc90dbdda4ce9ca500e6816111e553</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GZlibDecompressor *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ZlibDecompressor.html</anchorfile>
      <anchor>a61f6e8590a5372feb64683207ab68bf9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GZlibDecompressor *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1ZlibDecompressor.html</anchorfile>
      <anchor>a0ba1589c3a5d99bcda9d3e21841cb66c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>get_file_info</name>
      <anchorfile>classGio_1_1ZlibDecompressor.html</anchorfile>
      <anchor>a5167b3cfeb8efb5e420d8808cdcd546c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const FileInfo &gt;</type>
      <name>get_file_info</name>
      <anchorfile>classGio_1_1ZlibDecompressor.html</anchorfile>
      <anchor>ae9022fc9e980027badd8c6a93c44d2f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; FileInfo &gt; &gt;</type>
      <name>property_file_info</name>
      <anchorfile>classGio_1_1ZlibDecompressor.html</anchorfile>
      <anchor>aa1495117997255dc28c51add5bbe0adc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; ZlibCompressorFormat &gt;</type>
      <name>property_format</name>
      <anchorfile>classGio_1_1ZlibDecompressor.html</anchorfile>
      <anchor>ac18151938d8db14d36f208b8cf2df150</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1ZlibDecompressor.html</anchorfile>
      <anchor>adbbb0696d82de70aa64cd7d6de79cdd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; ZlibDecompressor &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1ZlibDecompressor.html</anchorfile>
      <anchor>a4f967ab580874362e767807c947d43d0</anchor>
      <arglist>(ZlibCompressorFormat format)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ZlibDecompressor</name>
      <anchorfile>classGio_1_1ZlibDecompressor.html</anchorfile>
      <anchor>a5403fac899e309691d7b74408f71d6ab</anchor>
      <arglist>(ZlibCompressorFormat format)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::ZlibDecompressor &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1ZlibDecompressor.html</anchorfile>
      <anchor>a6afd05f9de3d453645c59edcaa415817</anchor>
      <arglist>(GZlibDecompressor *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ArrayHandle</name>
    <filename>classGlib_1_1ArrayHandle.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename Tr::CppType</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>afe4578c8838f3fc70e81ab85cf7e1bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>a4a93703150435d16f808252c89bd9fa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CppType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>a359fbb844d88b4b397fc10def34ff910</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>ad7f682e9d3efefa1861c71c0e1032ae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>ac5285961039bb8a8b23b8fc06438a94b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Container_Helpers::ArrayHandleIterator&lt; Tr &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>a83d897b752b7810fdb7243c0f6a12a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Container_Helpers::ArrayHandleIterator&lt; Tr &gt;</type>
      <name>iterator</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>a4c170b27ffa7af0d2e9ae3ae8c453679</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayHandle</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>a4a44a959d2d1efcce93d7461e1dd9d61</anchor>
      <arglist>(const Cont &amp;container)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayHandle</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>afd5d474d461196189ee41591da7f9483</anchor>
      <arglist>(const CType *array, std::size_t array_size, Glib::OwnershipType ownership)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayHandle</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>a9cdca99f478f47db5c317097d68d45b9</anchor>
      <arglist>(const CType *array, Glib::OwnershipType ownership)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayHandle</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>ac8a366a9b0b2f464f431a84228348931</anchor>
      <arglist>(const ArrayHandle&lt; T, Tr &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrayHandle</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>ae76c907d8b07e667c80ba3cb229b5062</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>a1c1704dc90f4b90ce546a02a1cbfafd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>a78964713547630e0d530073704b28ef3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::vector&lt; U &gt;</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>a50d8024d425c5c9a7c495fc3ea09ee32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::deque&lt; U &gt;</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>ac802d42b060c19b11a361c2b31e267a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::list&lt; U &gt;</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>a64052cf369acfcdcb1200095af858a38</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_to</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>a2489aec426683683960fe59fb66e13b3</anchor>
      <arglist>(Cont &amp;container) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>ad9dd3f008f3a078a027641e46a2377a2</anchor>
      <arglist>(Out pdest) const</arglist>
    </member>
    <member kind="function">
      <type>const CType *</type>
      <name>data</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>a3251eb3cfdff49441e4b51804bec13bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>a00b388e882616e24ef4f445824ee1b0d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>a6ac42f305a0b402a7dfd69cb3d572d3f</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ArrayHandle&lt; bool, Container_Helpers::TypeTraits&lt; bool &gt; &gt;</name>
    <filename>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</filename>
    <member kind="typedef">
      <type>ArrayHandle&lt; bool, Container_Helpers::TypeTraits&lt; bool &gt; &gt;</type>
      <name>Me</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>a44cbeeea6851a81bb8bb29ae8a323b5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container_Helpers::TypeTraits&lt; bool &gt;</type>
      <name>Tr</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>a544ff0fa9db03ecd55ff31ddaaf22a77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tr::CppType</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>a0fa0f640fd74e9039c9632ee515947e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>ad690533ca2d38599b1f2093d4695205c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CppType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>af129d8b658e95ca935d400a57ce69fe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>aca7c292a7447390903696a059a029d80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>ac65c474e1e6e83eb1654a678f0d3ef72</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Container_Helpers::ArrayHandleIterator&lt; Tr &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>af6d1703b63e35498e2a545905b16d39f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Container_Helpers::ArrayHandleIterator&lt; Tr &gt;</type>
      <name>iterator</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>a1cc85610f32e49731e76417e18448e61</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayHandle</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>a12d3aca4f7476aaab9d77375c55f5416</anchor>
      <arglist>(const Cont &amp;container)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayHandle</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>a76304a8bf776a4493bc139224d653b00</anchor>
      <arglist>(const CType *array, std::size_t array_size, Glib::OwnershipType ownership)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayHandle</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>a55a16600eb3a4a42645f0001319e77bf</anchor>
      <arglist>(const CType *array, Glib::OwnershipType ownership)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayHandle</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>a73455e5ddfac89c3b65f7b802068e0cd</anchor>
      <arglist>(const Me &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrayHandle</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>ab9b832f5fa4a1be4bdf8c50af75b058b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>ad873b7ea0792eaa38ef3a8e317f56557</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>a187de5795c1cbcba18a76c3b153d1f0d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::vector&lt; U &gt;</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>a5a733bae18fc0b3cc957c2c70d4144fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::deque&lt; U &gt;</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>a70ca9e307c0c571a10af6282c68aebe2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::list&lt; U &gt;</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>ad8c3657858780bbbfd13cb10bd4c3cb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_to</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>a454c9626ec4ec110394d8559664a59e0</anchor>
      <arglist>(Cont &amp;container) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>af220e7fc352f767d5b24b27cd086a4f9</anchor>
      <arglist>(Out pdest) const</arglist>
    </member>
    <member kind="function">
      <type>const CType *</type>
      <name>data</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>a3f75aa1ddc8810e009a59a8eaa139d4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>a9df1d0f5611e4e6b5c86bf168d2b8a2b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>a02f7ac814351fa3f5ae74fc0833f117f</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ArrayHandler</name>
    <filename>classGlib_1_1ArrayHandler.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1ArrayHandler.html</anchorfile>
      <anchor>a31c6620825585ea481480bd05f269a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1ArrayHandler.html</anchorfile>
      <anchor>a46fa52ea606521b8cf1293228108e5e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; CppType &gt;</type>
      <name>VectorType</name>
      <anchorfile>classGlib_1_1ArrayHandler.html</anchorfile>
      <anchor>a5f6f6030e6c738bce883a656d97b1fa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Glib::Container_Helpers::ArrayKeeper&lt; Tr &gt;</type>
      <name>ArrayKeeperType</name>
      <anchorfile>classGlib_1_1ArrayHandler.html</anchorfile>
      <anchor>a346c220b9a1ea29f9b4eb31f7d390e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Glib::Container_Helpers::ArrayIterator&lt; Tr &gt;</type>
      <name>ArrayIteratorType</name>
      <anchorfile>classGlib_1_1ArrayHandler.html</anchorfile>
      <anchor>a5feaeeefaf700b7f14d8f735f05da7e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VectorType</type>
      <name>array_to_vector</name>
      <anchorfile>classGlib_1_1ArrayHandler.html</anchorfile>
      <anchor>a628dad04617f6c1df11bc5992dd5348c</anchor>
      <arglist>(const CType *array, std::size_t array_size, Glib::OwnershipType ownership)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VectorType</type>
      <name>array_to_vector</name>
      <anchorfile>classGlib_1_1ArrayHandler.html</anchorfile>
      <anchor>a0c14a3bdfcd6c4eabcf39a7381a28439</anchor>
      <arglist>(const CType *array, Glib::OwnershipType ownership)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ArrayKeeperType</type>
      <name>vector_to_array</name>
      <anchorfile>classGlib_1_1ArrayHandler.html</anchorfile>
      <anchor>a563ad995495dd87c559f9c4c26f4c6f0</anchor>
      <arglist>(const VectorType &amp;vector)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ArrayHandler&lt; bool &gt;</name>
    <filename>classGlib_1_1ArrayHandler_3_01bool_01_4.html</filename>
    <member kind="typedef">
      <type>gboolean</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1ArrayHandler_3_01bool_01_4.html</anchorfile>
      <anchor>a26af36c9cad048498e9cffc772bfc707</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1ArrayHandler_3_01bool_01_4.html</anchorfile>
      <anchor>a818816edeac06b9df94cf0717558d3b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; bool &gt;</type>
      <name>VectorType</name>
      <anchorfile>classGlib_1_1ArrayHandler_3_01bool_01_4.html</anchorfile>
      <anchor>a74aa03f3cf9e81afd52fff80c9b64875</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Container_Helpers::ArrayKeeper&lt; Glib::Container_Helpers::TypeTraits&lt; bool &gt; &gt;</type>
      <name>ArrayKeeperType</name>
      <anchorfile>classGlib_1_1ArrayHandler_3_01bool_01_4.html</anchorfile>
      <anchor>af64ebc394a6996448cd927a7dd6dd0c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Container_Helpers::ArrayIterator&lt; Glib::Container_Helpers::TypeTraits&lt; bool &gt; &gt;</type>
      <name>ArrayIteratorType</name>
      <anchorfile>classGlib_1_1ArrayHandler_3_01bool_01_4.html</anchorfile>
      <anchor>a849fde9d4c8895b1b9807c63c39ce5ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VectorType</type>
      <name>array_to_vector</name>
      <anchorfile>classGlib_1_1ArrayHandler_3_01bool_01_4.html</anchorfile>
      <anchor>a56a19419a89c40047423a8dd1d5464cd</anchor>
      <arglist>(const CType *array, std::size_t array_size, Glib::OwnershipType ownership)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VectorType</type>
      <name>array_to_vector</name>
      <anchorfile>classGlib_1_1ArrayHandler_3_01bool_01_4.html</anchorfile>
      <anchor>a1cc169c72600c66215ff13452632e60d</anchor>
      <arglist>(const CType *array, Glib::OwnershipType ownership)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ArrayKeeperType</type>
      <name>vector_to_array</name>
      <anchorfile>classGlib_1_1ArrayHandler_3_01bool_01_4.html</anchorfile>
      <anchor>a9de28467fd9af32ad088da689e56911e</anchor>
      <arglist>(const VectorType &amp;vector)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::BalancedTree</name>
    <filename>classGlib_1_1BalancedTree.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>sigc::slot&lt; bool, const K &amp;, const V &amp; &gt;</type>
      <name>TraverseFunc</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>a264c26dea49ba58ee9695fbbed28d172</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; int, const K &amp;, const K &amp; &gt;</type>
      <name>CompareFunc</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>a080bdc7999aa79fb4b49b69ba68be562</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BalancedTree</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>a6ad3ee2e4c7a396e059171800f703e13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GTree *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>a3992ca9669a73f98167e988ce0ff4415</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GTree *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>a6462261c504247eca280a0ce9a0a2a3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>a80e50b78322d85f165ac2d6607ca9cb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>a6530fc006eec5d249a520be7e8bf4f20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>a1ff2e47b569956c2c8d19ba3f538346c</anchor>
      <arglist>(const K &amp;key, const V &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>a751401d64137e241cacfec8e05ea5971</anchor>
      <arglist>(const K &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>V *</type>
      <name>lookup</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>a1004e229bf2fccbd79b15a7f567a51e0</anchor>
      <arglist>(const K &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const V *</type>
      <name>lookup</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>a929a17bb221fdc108f82fc95a933c76c</anchor>
      <arglist>(const K &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>gint</type>
      <name>height</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>ab11038a1c12ad94535a91f26524d20d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>gint</type>
      <name>nnodes</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>ae8385cfafc7e1d6e8bfb0cef92bb8a6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>foreach</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>afc1dda04a0357e2f0af6a5f740a9655d</anchor>
      <arglist>(const TraverseFunc &amp;func) const</arglist>
    </member>
    <member kind="function">
      <type>V *</type>
      <name>search</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>a55668fb48bb53d3099084db1088c9495</anchor>
      <arglist>(const CompareFunc &amp;search_func, const K &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const V *</type>
      <name>search</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>a779f107b39f41167bb7af7ac6931a43f</anchor>
      <arglist>(const CompareFunc &amp;search_func, const K &amp;key) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; BalancedTree&lt; K, V &gt; &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>a346b8289fc878c1d9d3398e81800208e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; BalancedTree&lt; K, V &gt; &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>a225d6f1c845767474de9d024f9fa876a</anchor>
      <arglist>(const CompareFunc &amp;key_compare_slot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BalancedTree</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>a26c7764fe28c41b2527be4111ef76a59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BalancedTree</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>a8ded6a08615b93ef62b84418d5894499</anchor>
      <arglist>(const CompareFunc &amp;key_compare_slot_)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Binding</name>
    <filename>classGlib_1_1Binding.html</filename>
    <base>Glib::Object</base>
    <member kind="typedef">
      <type>sigc::slot&lt; bool, const GValue *, GValue * &gt;</type>
      <name>SlotTransform</name>
      <anchorfile>classGlib_1_1Binding.html</anchorfile>
      <anchor>a69547131bbbad9962bd2faa26880f2e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Binding</name>
      <anchorfile>classGlib_1_1Binding.html</anchorfile>
      <anchor>ad5b01ad1548d7db4de5ece69a550ff1b</anchor>
      <arglist>(Binding &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Binding &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Binding.html</anchorfile>
      <anchor>a9a548e56f44462d41288e79bb4df9151</anchor>
      <arglist>(Binding &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Binding</name>
      <anchorfile>classGlib_1_1Binding.html</anchorfile>
      <anchor>a49fbbc6d576edd751904753c09ffa07e</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GBinding *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Binding.html</anchorfile>
      <anchor>a1bf770e16eba836a789564e05778b3df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GBinding *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Binding.html</anchorfile>
      <anchor>a6197b19ffe8ca7f7b9bfb2ab3dcce0c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GBinding *</type>
      <name>gobj_copy</name>
      <anchorfile>classGlib_1_1Binding.html</anchorfile>
      <anchor>a65e918e4d3a8c3f74306778f91ab76ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Glib::ObjectBase &gt;</type>
      <name>get_source</name>
      <anchorfile>classGlib_1_1Binding.html</anchorfile>
      <anchor>a142237066ab33ac35204bb2719209f6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Glib::ObjectBase &gt;</type>
      <name>get_source</name>
      <anchorfile>classGlib_1_1Binding.html</anchorfile>
      <anchor>a8ffa90d178daad6ccd99b08cd9735a3c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_source_property</name>
      <anchorfile>classGlib_1_1Binding.html</anchorfile>
      <anchor>a56616fb9eba86afffcbc959fee374834</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Glib::ObjectBase &gt;</type>
      <name>get_target</name>
      <anchorfile>classGlib_1_1Binding.html</anchorfile>
      <anchor>ae3e414f1dae338526d4cd0dc8529e65c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Glib::ObjectBase &gt;</type>
      <name>get_target</name>
      <anchorfile>classGlib_1_1Binding.html</anchorfile>
      <anchor>a94af376f3077cfef798443d53b820f61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_target_property</name>
      <anchorfile>classGlib_1_1Binding.html</anchorfile>
      <anchor>a0b5b3f0fbbe00f90f6ad75bee8c93cf0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BindingFlags</type>
      <name>get_flags</name>
      <anchorfile>classGlib_1_1Binding.html</anchorfile>
      <anchor>adcc066f8fdd27165d9c3d5bf76659019</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unbind</name>
      <anchorfile>classGlib_1_1Binding.html</anchorfile>
      <anchor>af74951e7454e41a5331b5ba02cee4556</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::BindingFlags &gt;</type>
      <name>property_flags</name>
      <anchorfile>classGlib_1_1Binding.html</anchorfile>
      <anchor>a5d268a12ba0dabefd34cef18b356c44e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; Glib::ObjectBase &gt; &gt;</type>
      <name>property_source</name>
      <anchorfile>classGlib_1_1Binding.html</anchorfile>
      <anchor>ae86767d80b30b450cd3de0a9c12fd980</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_source_property</name>
      <anchorfile>classGlib_1_1Binding.html</anchorfile>
      <anchor>a63d864cacfcc0396e93ee7f05f9da400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; Glib::ObjectBase &gt; &gt;</type>
      <name>property_target</name>
      <anchorfile>classGlib_1_1Binding.html</anchorfile>
      <anchor>a3a4845274ef8700970e3b634db5e86c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_target_property</name>
      <anchorfile>classGlib_1_1Binding.html</anchorfile>
      <anchor>aa6b424b9d1aeccf76186065a95e6b41d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGlib_1_1Binding.html</anchorfile>
      <anchor>abe653979b54c7349bfac03a6bee39757</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Binding &gt;</type>
      <name>bind_property_value</name>
      <anchorfile>classGlib_1_1Binding.html</anchorfile>
      <anchor>a50e37f2cd8391aa06b846fa0e4356767</anchor>
      <arglist>(const PropertyProxy_Base &amp;source_property, const PropertyProxy_Base &amp;target_property, BindingFlags flags=BINDING_DEFAULT, const SlotTransform &amp;transform_to=SlotTransform(), const SlotTransform &amp;transform_from=SlotTransform())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Binding &gt;</type>
      <name>bind_property</name>
      <anchorfile>classGlib_1_1Binding.html</anchorfile>
      <anchor>a8408029cf0adfcff607ef8f3f4136b0b</anchor>
      <arglist>(const PropertyProxy_Base &amp;source_property, const PropertyProxy_Base &amp;target_property, BindingFlags flags=BINDING_DEFAULT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Binding &gt;</type>
      <name>bind_property</name>
      <anchorfile>classGlib_1_1Binding.html</anchorfile>
      <anchor>a456093a5d6201c35cb9fe9bcd61eae11</anchor>
      <arglist>(const PropertyProxy&lt; T_source &gt; &amp;source_property, const PropertyProxy&lt; T_target &gt; &amp;target_property, BindingFlags flags, const T_functor_to &amp;transform_to)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Binding &gt;</type>
      <name>bind_property</name>
      <anchorfile>classGlib_1_1Binding.html</anchorfile>
      <anchor>a42595e6cda4e2a5783d38ca92a085ab4</anchor>
      <arglist>(const PropertyProxy&lt; T_source &gt; &amp;source_property, const PropertyProxy_WriteOnly&lt; T_target &gt; &amp;target_property, BindingFlags flags, const T_functor_to &amp;transform_to)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Binding &gt;</type>
      <name>bind_property</name>
      <anchorfile>classGlib_1_1Binding.html</anchorfile>
      <anchor>a3e214ef755d361894cb53d14c7ab2ee7</anchor>
      <arglist>(const PropertyProxy_ReadOnly&lt; T_source &gt; &amp;source_property, const PropertyProxy&lt; T_target &gt; &amp;target_property, BindingFlags flags, const T_functor_to &amp;transform_to)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Binding &gt;</type>
      <name>bind_property</name>
      <anchorfile>classGlib_1_1Binding.html</anchorfile>
      <anchor>a8986878737757f21e4bf34e11d70dc5d</anchor>
      <arglist>(const PropertyProxy_ReadOnly&lt; T_source &gt; &amp;source_property, const PropertyProxy_WriteOnly&lt; T_target &gt; &amp;target_property, BindingFlags flags, const T_functor_to &amp;transform_to)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Binding &gt;</type>
      <name>bind_property</name>
      <anchorfile>classGlib_1_1Binding.html</anchorfile>
      <anchor>a6bed8a5c8b9548683ad3d52b0dbc706f</anchor>
      <arglist>(const PropertyProxy&lt; T_source &gt; &amp;source_property, const PropertyProxy&lt; T_target &gt; &amp;target_property, BindingFlags flags, const T_functor_to &amp;transform_to, const T_functor_from &amp;transform_from)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Glib::Binding &gt;</type>
      <name>wrap</name>
      <anchorfile>classGlib_1_1Binding.html</anchorfile>
      <anchor>af68801c0bf93a49e45593be87ffbee02</anchor>
      <arglist>(GBinding *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ByteArray</name>
    <filename>classGlib_1_1ByteArray.html</filename>
    <member kind="typedef">
      <type>sigc::slot&lt; int, const guint8 *, const guint8 * &gt;</type>
      <name>SlotCompare</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>a678a5be5a84fcdda890432d60dc84679</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>a7c8ae20f468ffc22bc9e482041658dc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>a52b47b9a0471d813f001e487cb591be9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GByteArray *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>af8e95da64dfe78b19784b00267f264cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GByteArray *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>a09f85d0111b37b2e74cabca3e8025e0d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GByteArray *</type>
      <name>gobj_copy</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>aabdc4909252be08426abe6a1043c793f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ByteArray</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>af59ef590ec9140286bf256d9dfedb281</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ByteArray</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>acd829681671420dd78775713ab972643</anchor>
      <arglist>(const ByteArray &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ByteArray &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>ac6d60c93ecae84c3e44b54a36f936794</anchor>
      <arglist>(const ByteArray &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; ByteArray &gt;</type>
      <name>append</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>a5bf314792ac5753ff0bc8d825f093a40</anchor>
      <arglist>(const guint8 *data, guint len)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; ByteArray &gt;</type>
      <name>prepend</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>aca57aae24d5ed23813d38abdae6af3ce</anchor>
      <arglist>(const guint8 *data, guint len)</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>size</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>a6ac8d6eedbe3d07fb35b338ac2376793</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>guint8 *</type>
      <name>get_data</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>ae6e9a064864b81d781ff0499da5912c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const guint8 *</type>
      <name>get_data</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>a476ee5d7e3fe8d5e376145395dc612ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; ByteArray &gt;</type>
      <name>remove_index</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>ad62b7f4de65f816560ba04cfe9b346a8</anchor>
      <arglist>(guint index)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; ByteArray &gt;</type>
      <name>remove_index_fast</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>a18377d30910414004a16010ec9c76a8c</anchor>
      <arglist>(guint index)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; ByteArray &gt;</type>
      <name>remove_range</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>a5c223288ca94990f6afabe344c0c3ae6</anchor>
      <arglist>(guint index, guint length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>af04d56e13e7d198440ecb62bb88c5c0f</anchor>
      <arglist>(const SlotCompare &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; ByteArray &gt;</type>
      <name>set_size</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>a75236ebc3491ebae5bf5e9f9dadb3341</anchor>
      <arglist>(guint length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; ByteArray &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>a12eec4a6cd60db3371ecc0dd93c6dd30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>aa75e7f74d050aac45806ddeb4d0b2e33</anchor>
      <arglist>(void *, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Glib::ByteArray &gt;</type>
      <name>wrap</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>aa99add90374a6f4c13eb5ab04ebe95c1</anchor>
      <arglist>(GByteArray *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Bytes</name>
    <filename>classGlib_1_1Bytes.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1Bytes.html</anchorfile>
      <anchor>ae8658a8c6fdfef04a65f5596a7081fc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGlib_1_1Bytes.html</anchorfile>
      <anchor>a03a0ff151d53dab28d041459b545c69e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GBytes *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Bytes.html</anchorfile>
      <anchor>aab7dbd47921abcdd9f9f1a336399842c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GBytes *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Bytes.html</anchorfile>
      <anchor>a09a78c95b6a36686612aef51abfc6fc1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GBytes *</type>
      <name>gobj_copy</name>
      <anchorfile>classGlib_1_1Bytes.html</anchorfile>
      <anchor>a3e9a0ed3abb425587132bdb1c8157b1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Bytes</name>
      <anchorfile>classGlib_1_1Bytes.html</anchorfile>
      <anchor>a3bd0089700df92f23b1c4bc91ace8bcf</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Bytes</name>
      <anchorfile>classGlib_1_1Bytes.html</anchorfile>
      <anchor>adc8fc824354b3b0e7199acd953f23abe</anchor>
      <arglist>(const Bytes &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Bytes &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Bytes.html</anchorfile>
      <anchor>adef04ea17dded7a2f3cb808e7608e055</anchor>
      <arglist>(const Bytes &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>gconstpointer</type>
      <name>get_data</name>
      <anchorfile>classGlib_1_1Bytes.html</anchorfile>
      <anchor>a06108e8419f87c8413f052f0f5fd9754</anchor>
      <arglist>(gsize &amp;size) const</arglist>
    </member>
    <member kind="function">
      <type>gsize</type>
      <name>get_size</name>
      <anchorfile>classGlib_1_1Bytes.html</anchorfile>
      <anchor>ad3ca4929eb6fe7c13b8b676c77a82223</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Glib::Bytes &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Bytes.html</anchorfile>
      <anchor>a8c8f1062871f4ff87a9514ef74308f07</anchor>
      <arglist>(gconstpointer data, gsize size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static guint</type>
      <name>hash</name>
      <anchorfile>classGlib_1_1Bytes.html</anchorfile>
      <anchor>a06410137748117467146b3c4d4d77c7c</anchor>
      <arglist>(gconstpointer bytes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>equal</name>
      <anchorfile>classGlib_1_1Bytes.html</anchorfile>
      <anchor>a6296b93981e010525d71c8b3f126ce65</anchor>
      <arglist>(gconstpointer bytes1, gconstpointer bytes2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static gint</type>
      <name>compare</name>
      <anchorfile>classGlib_1_1Bytes.html</anchorfile>
      <anchor>a2ea3d054c219ccde859316204b19426b</anchor>
      <arglist>(gconstpointer bytes1, gconstpointer bytes2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classGlib_1_1Bytes.html</anchorfile>
      <anchor>a4bce73ee3c5a2a9551587a8cf49d2c05</anchor>
      <arglist>(void *, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Glib::Bytes &gt;</type>
      <name>wrap</name>
      <anchorfile>classGlib_1_1Bytes.html</anchorfile>
      <anchor>a0de22eb5d159db98e1d035bc58a14cd9</anchor>
      <arglist>(GBytes *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Checksum</name>
    <filename>classGlib_1_1Checksum.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>ChecksumType</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga5d1c13a9d5c34bff7dd1e74654f282eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHECKSUM_MD5</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>ga5d1c13a9d5c34bff7dd1e74654f282ebaa22d278286ecebcc3bc58636a1aa909d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHECKSUM_SHA1</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>ga5d1c13a9d5c34bff7dd1e74654f282ebab2258b031ebb9a20477f4d564ac26e52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHECKSUM_SHA256</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>ga5d1c13a9d5c34bff7dd1e74654f282ebadc95ea210a79482241022fd0bb19c957</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHECKSUM_SHA512</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>ga5d1c13a9d5c34bff7dd1e74654f282eba7a4ed07c4b7a43431ac773c8485f871a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHECKSUM_SHA384</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>ga5d1c13a9d5c34bff7dd1e74654f282eba3a3a0a9a1e28931d9a01141e97eae091</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHECKSUM_MD5</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>ga5d1c13a9d5c34bff7dd1e74654f282ebaa22d278286ecebcc3bc58636a1aa909d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHECKSUM_SHA1</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>ga5d1c13a9d5c34bff7dd1e74654f282ebab2258b031ebb9a20477f4d564ac26e52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHECKSUM_SHA256</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>ga5d1c13a9d5c34bff7dd1e74654f282ebadc95ea210a79482241022fd0bb19c957</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHECKSUM_SHA512</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>ga5d1c13a9d5c34bff7dd1e74654f282eba7a4ed07c4b7a43431ac773c8485f871a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHECKSUM_SHA384</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>ga5d1c13a9d5c34bff7dd1e74654f282eba3a3a0a9a1e28931d9a01141e97eae091</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Checksum</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a218ef89e5467d6cb8b2687813b286ced</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Checksum</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a1c27c48e7c6ad69617b8480b8aca4531</anchor>
      <arglist>(GChecksum *castitem, bool make_a_copy=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Checksum</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a4839f2e9e33ac5bdb1cf696d8ecf4a10</anchor>
      <arglist>(const Checksum &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>Checksum &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a830ae51f3f4cb4a024d3303f88bc6dcc</anchor>
      <arglist>(const Checksum &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Checksum</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a9cc6cc0a06cc510be4d4508e961c684e</anchor>
      <arglist>(Checksum &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Checksum &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a8cb8be9cd08df2d812d62035848296ed</anchor>
      <arglist>(Checksum &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Checksum</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a6643625bfdfe1fdabf85df404198dabb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a650b113591fcbf08402c4ed32d22aee3</anchor>
      <arglist>(Checksum &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>GChecksum *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a5bebbdf1ef296503c0eb86493e675cc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GChecksum *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a8da94056edbcf54b68bafd2250022040</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GChecksum *</type>
      <name>gobj_copy</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a3ff223974dfdb31e7719f55d8c9a10a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Checksum</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a774f43a89f371e8c50b6ff1da56291d8</anchor>
      <arglist>(ChecksumType checksum_type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>afb05d38ccf0618def1d0daba870b7480</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a75343718b489251d1ea7ea417674b2b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a49c961d3ecf8a4c62bd2177c2e32ac79</anchor>
      <arglist>(const guchar *data, gsize length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a6fa8c44666e92d66a6af10495e2df67d</anchor>
      <arglist>(const std::string &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_digest</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a2352d77b8ada9529fd175fa0ad42c494</anchor>
      <arglist>(guint8 *buffer, gsize *digest_len) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_string</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>abd5bd06a1614ccc0f4d70cfc6025c1e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>compute_checksum</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a034ca483253820866082d6ac82f81a79</anchor>
      <arglist>(ChecksumType checksum_type, const guchar *data, gsize length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>compute_checksum</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>acfa10bceb4e7c8f7fb4f5782329a9a22</anchor>
      <arglist>(ChecksumType checksum_type, const std::string &amp;str)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static gssize</type>
      <name>get_length</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a2f288fe9e08a7ac4e4f81a6e1a957606</anchor>
      <arglist>(ChecksumType checksum_type)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GChecksum *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a7f5c4a8761c07e1062a8cb47d0b047b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a8c6efedf5cc68ee2fbd6dbeb054e15af</anchor>
      <arglist>(Checksum &amp;lhs, Checksum &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Glib::Checksum</type>
      <name>wrap</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>aede26bdadd5441f327f6b36ce9a9fbf1</anchor>
      <arglist>(GChecksum *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Cond</name>
    <filename>classGlib_1_1Cond.html</filename>
    <member kind="function">
      <type></type>
      <name>Cond</name>
      <anchorfile>classGlib_1_1Cond.html</anchorfile>
      <anchor>a2182b1171de3bdd0b97ab2f16d88a17a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cond</name>
      <anchorfile>classGlib_1_1Cond.html</anchorfile>
      <anchor>a7d7905a10db67d1e4752845591344bea</anchor>
      <arglist>(const Cond &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Cond &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Cond.html</anchorfile>
      <anchor>a662b5df479d63996c8819df6f44e4a71</anchor>
      <arglist>(const Cond &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Cond</name>
      <anchorfile>classGlib_1_1Cond.html</anchorfile>
      <anchor>a67919ec3f33e19185f72d9c1a0043605</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>signal</name>
      <anchorfile>classGlib_1_1Cond.html</anchorfile>
      <anchor>a072cb37a06a695b54370209bc3280f4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>broadcast</name>
      <anchorfile>classGlib_1_1Cond.html</anchorfile>
      <anchor>a2ed0ec9fc4e29140f8854a05bfb5df3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>classGlib_1_1Cond.html</anchorfile>
      <anchor>ae989bf2891954ff5ed745f447cdccf2a</anchor>
      <arglist>(Mutex &amp;mutex)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>timed_wait</name>
      <anchorfile>classGlib_1_1Cond.html</anchorfile>
      <anchor>acb37b09bf04ae36e30ec32c2f3d4af69</anchor>
      <arglist>(Mutex &amp;mutex, const Glib::TimeVal &amp;abs_time)</arglist>
    </member>
    <member kind="function">
      <type>GCond *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Cond.html</anchorfile>
      <anchor>a27a794031bc8a6c104db3b9977254c61</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Container_Helpers::ArrayHandleIterator</name>
    <filename>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename Tr::CppType</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>afc784f67ef25a41cb97de94d83376a2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>aac3d615564c78cdf61a6aebb06ee0846</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::random_access_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>aa01f3ca886394ce1a6257c39009d383c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CppType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>ab44729757ce78cae1aa23e5ae7c54fa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a94fc807cbc54ccdf34ff4e7e81f8f5e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a51f16e28d374cef9564f9281453715fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>pointer</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a279339885ab36d2e48fd04530f7f9955</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayHandleIterator</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a709ec1305f27a10ba5f1527e055231ac</anchor>
      <arglist>(const CType *pos)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator*</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>aaed4caae477bd6f5d606b9cfce70e812</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator[]</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a5f39e46a907779911c80644cc9a6d3bb</anchor>
      <arglist>(difference_type offset) const</arglist>
    </member>
    <member kind="function">
      <type>ArrayHandleIterator&lt; Tr &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a7af3c97787eb1f21de2ce787f5868dc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ArrayHandleIterator&lt; Tr &gt;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a367eb894a1d4ef9f294aa80babe3099f</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ArrayHandleIterator&lt; Tr &gt; &amp;</type>
      <name>operator--</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a7bd6570cc8c7581bc26cb8c10c2aa4b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ArrayHandleIterator&lt; Tr &gt;</type>
      <name>operator--</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a7656ddf477d74930f6b7ed4536cb6a20</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ArrayHandleIterator&lt; Tr &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a9aec914efc7f70a869a7784274ebf84b</anchor>
      <arglist>(difference_type rhs)</arglist>
    </member>
    <member kind="function">
      <type>ArrayHandleIterator&lt; Tr &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>aeaea65c60785bd648a91fd509fe7da42</anchor>
      <arglist>(difference_type rhs)</arglist>
    </member>
    <member kind="function">
      <type>const ArrayHandleIterator&lt; Tr &gt;</type>
      <name>operator+</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a7f95962467aacf0db2e22fe31d8eb112</anchor>
      <arglist>(difference_type rhs) const</arglist>
    </member>
    <member kind="function">
      <type>const ArrayHandleIterator&lt; Tr &gt;</type>
      <name>operator-</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a7b0f9235ec46edce858f03fb4565faa9</anchor>
      <arglist>(difference_type rhs) const</arglist>
    </member>
    <member kind="function">
      <type>difference_type</type>
      <name>operator-</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a100257096ee2bb79e256beffb95841c2</anchor>
      <arglist>(const ArrayHandleIterator&lt; Tr &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a1aed02db674dadce64cf0fcac5361789</anchor>
      <arglist>(const ArrayHandleIterator&lt; Tr &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>ad975eddced7f9074b8494409525399fe</anchor>
      <arglist>(const ArrayHandleIterator&lt; Tr &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a4a4b1bf87570d106843f733016946a30</anchor>
      <arglist>(const ArrayHandleIterator&lt; Tr &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a23a108e38fca2eb0691dce0c35eed71c</anchor>
      <arglist>(const ArrayHandleIterator&lt; Tr &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>aaf9718ab78fe53d7c2e1d296e0146a15</anchor>
      <arglist>(const ArrayHandleIterator&lt; Tr &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>ac4bfe81b8d4305fd8a36109e2426f719</anchor>
      <arglist>(const ArrayHandleIterator&lt; Tr &gt; &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Container_Helpers::ArrayIterator</name>
    <filename>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename Tr::CppType</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>a92e3d6cb2aea79f6903cd80bd68b5540</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>a4d209cfea417842ec491949e3e892e2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::random_access_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>a9db3c59232aa5060781e7b05ee98a418</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CppType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>ada9d64bab508860904a592f2437e9e72</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>ac1583862644f683d4a6ac0562ebe4ddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>a40ae45a805ceebfb3a60abeb88f7890c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>pointer</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>a94dbe150f73ea899243d0c19ff36281d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayIterator</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>affe9e7547aa9decb61c6cedb4ecbca7c</anchor>
      <arglist>(const CType *pos)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator*</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>acafb9e41cf5d765b485eee563ed52bc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator[]</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>ae396a6f4e62a84551efc7042ab752096</anchor>
      <arglist>(difference_type offset) const</arglist>
    </member>
    <member kind="function">
      <type>ArrayIterator&lt; Tr &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>a67f799767366b08a73e9e89ff2072dde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ArrayIterator&lt; Tr &gt;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>a27bf7d5709d26b17934a11d2e2c789d5</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ArrayIterator&lt; Tr &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>a690c81ce8119e94420dd4c356024fcb8</anchor>
      <arglist>(difference_type rhs)</arglist>
    </member>
    <member kind="function">
      <type>ArrayIterator&lt; Tr &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>a9bf5a3d1b8a3e92d48a439a74d92134b</anchor>
      <arglist>(difference_type rhs)</arglist>
    </member>
    <member kind="function">
      <type>const ArrayIterator&lt; Tr &gt;</type>
      <name>operator+</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>abc2982a73bed61676ec0ffdbd491e9e9</anchor>
      <arglist>(difference_type rhs) const</arglist>
    </member>
    <member kind="function">
      <type>const ArrayIterator&lt; Tr &gt;</type>
      <name>operator-</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>ad513d006d3cb733ddca6a9fa8214752c</anchor>
      <arglist>(difference_type rhs) const</arglist>
    </member>
    <member kind="function">
      <type>difference_type</type>
      <name>operator-</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>a7dbda3980c2ad78169530407b33916ad</anchor>
      <arglist>(const ArrayIterator&lt; Tr &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>ac01c4f49221674644a299c85e3ff4fba</anchor>
      <arglist>(const ArrayIterator&lt; Tr &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>ab331bf388e2ef1486133dc668a5093e2</anchor>
      <arglist>(const ArrayIterator&lt; Tr &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>a4a0888f5c07c376303a04bdc6070ab76</anchor>
      <arglist>(const ArrayIterator&lt; Tr &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>a81e74e187f6389b847dd249abea561a7</anchor>
      <arglist>(const ArrayIterator&lt; Tr &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>af8ae00a5e4d9692f2c48d42a1ee15275</anchor>
      <arglist>(const ArrayIterator&lt; Tr &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>a48f3c49854ec300e615082f330899bd5</anchor>
      <arglist>(const ArrayIterator&lt; Tr &gt; &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Container_Helpers::ArrayKeeper</name>
    <filename>classGlib_1_1Container__Helpers_1_1ArrayKeeper.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename Tr::CppType</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayKeeper.html</anchorfile>
      <anchor>a71580ea30bdbe2abdf09d90a99540411</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayKeeper.html</anchorfile>
      <anchor>a001e4008744d1bb974a31d6cb6237562</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayKeeper</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayKeeper.html</anchorfile>
      <anchor>a5aef24f8ff4c0f9d5e5b75f34ed5557e</anchor>
      <arglist>(const CType *array, std::size_t array_size, Glib::OwnershipType ownership)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayKeeper</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayKeeper.html</anchorfile>
      <anchor>a738365225944b868725261e4a6a78e19</anchor>
      <arglist>(const ArrayKeeper &amp;keeper)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrayKeeper</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayKeeper.html</anchorfile>
      <anchor>ac393065acda97ba912eacf78c1b68410</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>CType *</type>
      <name>data</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayKeeper.html</anchorfile>
      <anchor>a03bf7ce89df893278c187bf0f87cac8c</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Container_Helpers::GListKeeper</name>
    <filename>classGlib_1_1Container__Helpers_1_1GListKeeper.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename Tr::CppType</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1GListKeeper.html</anchorfile>
      <anchor>aa3aba7aa2f9a688181ee02e31d291e40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1GListKeeper.html</anchorfile>
      <anchor>a53b03e22c1995a71e360080fd3d053be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GListKeeper</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1GListKeeper.html</anchorfile>
      <anchor>a4207dc51d04222c557591b1c95efa0fc</anchor>
      <arglist>(const GList *glist, Glib::OwnershipType ownership)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GListKeeper</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1GListKeeper.html</anchorfile>
      <anchor>abddfd000ad4ba2a9e2b7cf0db8254690</anchor>
      <arglist>(const GListKeeper &amp;keeper)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GListKeeper</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1GListKeeper.html</anchorfile>
      <anchor>a2bd777b20e7aeb4a202f15e4b8a2ed37</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>GList *</type>
      <name>data</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1GListKeeper.html</anchorfile>
      <anchor>ad9a8feefba369409ba30ed4860754b14</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Container_Helpers::GSListKeeper</name>
    <filename>classGlib_1_1Container__Helpers_1_1GSListKeeper.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename Tr::CppType</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1GSListKeeper.html</anchorfile>
      <anchor>a20dec18e815a5fd60e0bffbdf0847b41</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1GSListKeeper.html</anchorfile>
      <anchor>a9d525c1f30530ac9c1775daa9c675ad0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GSListKeeper</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1GSListKeeper.html</anchorfile>
      <anchor>a56d04d54749cddddb44867817e6a9794</anchor>
      <arglist>(const GSList *gslist, Glib::OwnershipType ownership)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GSListKeeper</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1GSListKeeper.html</anchorfile>
      <anchor>a55b3a94dd66f6db1301130ff649d345d</anchor>
      <arglist>(const GSListKeeper &amp;keeper)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GSListKeeper</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1GSListKeeper.html</anchorfile>
      <anchor>ad3fd105efcefff28f79f17d7be59dbc2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>GSList *</type>
      <name>data</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1GSListKeeper.html</anchorfile>
      <anchor>a1044d7645c215c6f79388e91d47e448c</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Container_Helpers::ListHandleIterator</name>
    <filename>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename Tr::CppType</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>a623e16516907701e0dd48bf0c7e4e9d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>a545a1e0cf3602ce316d27e7b58349785</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::forward_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>a53eee69568b5b1b37156dc0e5243d527</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CppType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>af7ed93f729ff672b274b6b739207aa9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>ad2c31784fb8dad315fed9aa1026bda66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>a4d320d3cd2bf860ef39c72dee86cfdc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>pointer</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>afe6c2b49af034a4330bd58a1a459da21</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListHandleIterator</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>a84fef11f5e094c1bb93d42230d8ffccc</anchor>
      <arglist>(const GList *node)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator*</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>aac450b918735e43abe75d9d25c38a19f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ListHandleIterator&lt; Tr &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>a7cc9afbcb243ab911dbdeebfdb0109a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ListHandleIterator&lt; Tr &gt;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>af7a2724416fb63a7999e0bab08028b83</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>a27d14133a191275533bea264f806ad92</anchor>
      <arglist>(const ListHandleIterator&lt; Tr &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>ac1dd14a007f24c34d1301265e34a8e6d</anchor>
      <arglist>(const ListHandleIterator&lt; Tr &gt; &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Container_Helpers::ListIterator</name>
    <filename>classGlib_1_1Container__Helpers_1_1ListIterator.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename Tr::CppType</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListIterator.html</anchorfile>
      <anchor>aa9cf64a30bc0d5f1ebf17474bf792cde</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListIterator.html</anchorfile>
      <anchor>ae1a3264c5f99c34f802661ab1c602e5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::forward_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListIterator.html</anchorfile>
      <anchor>a91560339d3281b13516de766f062e080</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CppType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListIterator.html</anchorfile>
      <anchor>a7caaae92a38fc2c698f147420c19ca7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListIterator.html</anchorfile>
      <anchor>ae3cfddf6c4283e150e4a7f8360d0fce8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListIterator.html</anchorfile>
      <anchor>af35674ad4384b6c5b7d581ce936cc81c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>pointer</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListIterator.html</anchorfile>
      <anchor>afce8cd1032aed417d72c4e9023ec4878</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListIterator</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListIterator.html</anchorfile>
      <anchor>af75e072bb9bb5d978e9318d38d41e987</anchor>
      <arglist>(const GList *node)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator*</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListIterator.html</anchorfile>
      <anchor>ad15344f110091cfb7a071fee7d3e718b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; Tr &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListIterator.html</anchorfile>
      <anchor>a2f03bb91148b9ef9062775c15c0e6225</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ListIterator&lt; Tr &gt;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListIterator.html</anchorfile>
      <anchor>ae0e911e059a707e72f00d99995ea18da</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListIterator.html</anchorfile>
      <anchor>ac6c137f3d5d07a2f1a2dec58e5a2a110</anchor>
      <arglist>(const ListIterator&lt; Tr &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListIterator.html</anchorfile>
      <anchor>aecc19d04f6fc2fea73efd41b17ae0806</anchor>
      <arglist>(const ListIterator&lt; Tr &gt; &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Container_Helpers::SListHandleIterator</name>
    <filename>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename Tr::CppType</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>afcd3621de02b1da05f21dc7576e2e565</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>ac85fdd22ee70b543f583580e96bdb2c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::forward_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>a262c3cd6bd642b41ed7587a97f060993</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CppType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>a272ab34d0fb580c9fed65a919f5e5938</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>a257f08f2dfa8368b04209a82abebcac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>a1c40fa99e18707fece7f16d371856c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>pointer</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>a263033e4461db24e569f155f75276562</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SListHandleIterator</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>a400ac29db268beae7ef6ee53a9b12932</anchor>
      <arglist>(const GSList *node)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator*</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>a3d6a506f1e692de7182eccad6e8bf9dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SListHandleIterator&lt; Tr &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>a1dff0d5d688af87a8fd7494efac16b85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SListHandleIterator&lt; Tr &gt;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>a0d78b286f03a60cb52696d2c54eaa482</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>a850179a0e83d54d4a51c3530a774ff35</anchor>
      <arglist>(const SListHandleIterator&lt; Tr &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>a4774c9feb223026955ebbe054d18e97e</anchor>
      <arglist>(const SListHandleIterator&lt; Tr &gt; &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Container_Helpers::SListIterator</name>
    <filename>classGlib_1_1Container__Helpers_1_1SListIterator.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename Tr::CppType</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListIterator.html</anchorfile>
      <anchor>a40d387331bc377cf4a79dee1f4316802</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListIterator.html</anchorfile>
      <anchor>a43fb2e3f154f7e5bd274243a72202c70</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::forward_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListIterator.html</anchorfile>
      <anchor>aa0bf62a5a9a379755f911a99191f11e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CppType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListIterator.html</anchorfile>
      <anchor>ab7e4902da8cee793bdd7acf1d0dc5af0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListIterator.html</anchorfile>
      <anchor>a4a6060d13088dfced40965dc7327ab72</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListIterator.html</anchorfile>
      <anchor>ab2911a40a0cdde01c55a7def98509753</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>pointer</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListIterator.html</anchorfile>
      <anchor>aa6d556bde5076927eb80f68d5b3694b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SListIterator</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListIterator.html</anchorfile>
      <anchor>aad762f13c4389f707b53552097405d41</anchor>
      <arglist>(const GSList *node)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator*</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListIterator.html</anchorfile>
      <anchor>a82cbe19ce086c841b068f2de6c13d54e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SListIterator&lt; Tr &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListIterator.html</anchorfile>
      <anchor>ab3c2778ef489b7e01d6b7fe7c258391a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SListIterator&lt; Tr &gt;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListIterator.html</anchorfile>
      <anchor>a99d7fc56cee6d4d32f060551221e47e6</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListIterator.html</anchorfile>
      <anchor>a126cf924180b29d737492d3c6a5edeaf</anchor>
      <arglist>(const SListIterator&lt; Tr &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListIterator.html</anchorfile>
      <anchor>a5c27432e58ef675d6e5498146269a895</anchor>
      <arglist>(const SListIterator&lt; Tr &gt; &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Glib::Container_Helpers::TypeTraits</name>
    <filename>structGlib_1_1Container__Helpers_1_1TypeTraits.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>CppType</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits.html</anchorfile>
      <anchor>ac39defcbff96d083470d934698e3683f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>CType</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits.html</anchorfile>
      <anchor>ab206e0acb200a562535e2438d9bffd31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>CTypeNonConst</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits.html</anchorfile>
      <anchor>ad6eac995794290511874853d5706c0f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CType</type>
      <name>to_c_type</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits.html</anchorfile>
      <anchor>a3c7532f3fc3a23d440a3b1c9b4c5d569</anchor>
      <arglist>(const CppType &amp;item)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CppType</type>
      <name>to_cpp_type</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits.html</anchorfile>
      <anchor>a6b238c68d4ccf001b0448c229c2e95c3</anchor>
      <arglist>(const CType &amp;item)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>release_c_type</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits.html</anchorfile>
      <anchor>a2c83ea71bbe91a6edbcc0f5c364dadd3</anchor>
      <arglist>(const CType &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Glib::Container_Helpers::TypeTraits&lt; Glib::RefPtr&lt; Gio::Drive &gt; &gt;</name>
    <filename>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Drive_01_4_01_4.html</filename>
    <member kind="typedef">
      <type>Glib::RefPtr&lt; Gio::Drive &gt;</type>
      <name>CppType</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Drive_01_4_01_4.html</anchorfile>
      <anchor>a7f46d7974ab66549248274a395796d3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GDrive *</type>
      <name>CType</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Drive_01_4_01_4.html</anchorfile>
      <anchor>aab849e62f4f992da0ffdbdac3a961869</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GDrive *</type>
      <name>CTypeNonConst</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Drive_01_4_01_4.html</anchorfile>
      <anchor>ae2f4050b965f7c535e3e69d855236d25</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CType</type>
      <name>to_c_type</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Drive_01_4_01_4.html</anchorfile>
      <anchor>a39979c5275c9c8dcc114efc0b9fa2acc</anchor>
      <arglist>(const CppType &amp;item)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CppType</type>
      <name>to_cpp_type</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Drive_01_4_01_4.html</anchorfile>
      <anchor>a2d3459e328ec2c09086d98b58e6e0e73</anchor>
      <arglist>(const CType &amp;item)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>release_c_type</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Drive_01_4_01_4.html</anchorfile>
      <anchor>a2ba23e994f19d07f8beb7bf566842db5</anchor>
      <arglist>(CType item)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Glib::Container_Helpers::TypeTraits&lt; Glib::RefPtr&lt; Gio::File &gt; &gt;</name>
    <filename>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1File_01_4_01_4.html</filename>
    <member kind="typedef">
      <type>Glib::RefPtr&lt; Gio::File &gt;</type>
      <name>CppType</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1File_01_4_01_4.html</anchorfile>
      <anchor>a62bbbc8c24e533191f816f17fecba6c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GFile *</type>
      <name>CType</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1File_01_4_01_4.html</anchorfile>
      <anchor>af18567bad894b3fae34e900c20672115</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GFile *</type>
      <name>CTypeNonConst</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1File_01_4_01_4.html</anchorfile>
      <anchor>a5d0ab0968d77ef168216cde91d7acac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CType</type>
      <name>to_c_type</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1File_01_4_01_4.html</anchorfile>
      <anchor>a5ed75ac118201014697bba4563b92b09</anchor>
      <arglist>(const CppType &amp;item)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CppType</type>
      <name>to_cpp_type</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1File_01_4_01_4.html</anchorfile>
      <anchor>ad96b5b0c8e14d8a9907b883b71c0b866</anchor>
      <arglist>(const CType &amp;item)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>release_c_type</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1File_01_4_01_4.html</anchorfile>
      <anchor>a0499b2de3c3f92b15c7e73a0d08dc585</anchor>
      <arglist>(CType item)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Glib::Container_Helpers::TypeTraits&lt; Glib::RefPtr&lt; Gio::Mount &gt; &gt;</name>
    <filename>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Mount_01_4_01_4.html</filename>
    <member kind="typedef">
      <type>Glib::RefPtr&lt; Gio::Mount &gt;</type>
      <name>CppType</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Mount_01_4_01_4.html</anchorfile>
      <anchor>abc96290c37a1f78bd06e741f86f048cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GMount *</type>
      <name>CType</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Mount_01_4_01_4.html</anchorfile>
      <anchor>a433ef754a39d583b2b75188f26f01219</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GMount *</type>
      <name>CTypeNonConst</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Mount_01_4_01_4.html</anchorfile>
      <anchor>a5d32efae2f1a5c6c33b27180af8324a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CType</type>
      <name>to_c_type</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Mount_01_4_01_4.html</anchorfile>
      <anchor>ab5638c270c5876aa521d758318cdd239</anchor>
      <arglist>(const CppType &amp;item)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CppType</type>
      <name>to_cpp_type</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Mount_01_4_01_4.html</anchorfile>
      <anchor>aae55a6c1829d0f46e764a5a2513950f2</anchor>
      <arglist>(const CType &amp;item)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>release_c_type</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Mount_01_4_01_4.html</anchorfile>
      <anchor>abaa937fd38274773b5c41600c5b9e3a4</anchor>
      <arglist>(CType item)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Glib::Container_Helpers::TypeTraits&lt; Glib::RefPtr&lt; Gio::Volume &gt; &gt;</name>
    <filename>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Volume_01_4_01_4.html</filename>
    <member kind="typedef">
      <type>Glib::RefPtr&lt; Gio::Volume &gt;</type>
      <name>CppType</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Volume_01_4_01_4.html</anchorfile>
      <anchor>afeae89bfa5174acb5467491a3639ffd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GVolume *</type>
      <name>CType</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Volume_01_4_01_4.html</anchorfile>
      <anchor>abe120f8bdca698855f5d3abe3f7f82ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GVolume *</type>
      <name>CTypeNonConst</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Volume_01_4_01_4.html</anchorfile>
      <anchor>a6a29b38625091c4a7529b66c1307aa9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CType</type>
      <name>to_c_type</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Volume_01_4_01_4.html</anchorfile>
      <anchor>ab1bfc901853062c1538dd99fd979721e</anchor>
      <arglist>(const CppType &amp;item)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CppType</type>
      <name>to_cpp_type</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Volume_01_4_01_4.html</anchorfile>
      <anchor>a20856c33c26b630c1635dc226d59830a</anchor>
      <arglist>(const CType &amp;item)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>release_c_type</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Volume_01_4_01_4.html</anchorfile>
      <anchor>aa0d7950b93e2b3c9c04ad1458ec72886</anchor>
      <arglist>(CType item)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ConvertError</name>
    <filename>classGlib_1_1ConvertError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumeration">
      <type></type>
      <name>Code</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>aea4b79ac3149c1fcfcab32155e3561a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_CONVERSION</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>aea4b79ac3149c1fcfcab32155e3561a9aa8709c19293fcc2268bb94f954c3270b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ILLEGAL_SEQUENCE</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>aea4b79ac3149c1fcfcab32155e3561a9a78ad26d8d7b6f5dabfd812747508275e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>aea4b79ac3149c1fcfcab32155e3561a9a524094cf11090f1fb867377b610ea18c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARTIAL_INPUT</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>aea4b79ac3149c1fcfcab32155e3561a9adc0c28f2874c32775af10fe17d8a759f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_URI</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>aea4b79ac3149c1fcfcab32155e3561a9aeb7b776a181c04ac19786f644a588a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_ABSOLUTE_PATH</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>aea4b79ac3149c1fcfcab32155e3561a9a0e75360bea5f8bd367d438f38c797272</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_MEMORY</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>aea4b79ac3149c1fcfcab32155e3561a9a49b0bc3839008ac3f161b573044d0cf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EMBEDDED_NUL</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>aea4b79ac3149c1fcfcab32155e3561a9a77a5242d6c4124a27c8d27ff953097c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_CONVERSION</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>aea4b79ac3149c1fcfcab32155e3561a9aa8709c19293fcc2268bb94f954c3270b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ILLEGAL_SEQUENCE</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>aea4b79ac3149c1fcfcab32155e3561a9a78ad26d8d7b6f5dabfd812747508275e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>aea4b79ac3149c1fcfcab32155e3561a9a524094cf11090f1fb867377b610ea18c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARTIAL_INPUT</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>aea4b79ac3149c1fcfcab32155e3561a9adc0c28f2874c32775af10fe17d8a759f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_URI</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>aea4b79ac3149c1fcfcab32155e3561a9aeb7b776a181c04ac19786f644a588a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_ABSOLUTE_PATH</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>aea4b79ac3149c1fcfcab32155e3561a9a0e75360bea5f8bd367d438f38c797272</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_MEMORY</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>aea4b79ac3149c1fcfcab32155e3561a9a49b0bc3839008ac3f161b573044d0cf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EMBEDDED_NUL</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>aea4b79ac3149c1fcfcab32155e3561a9a77a5242d6c4124a27c8d27ff953097c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConvertError</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>a99da762bafb432b501a9adaa378e48e1</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConvertError</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>a1f91f82109b547d84c67b1e6e4abc863</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>a45ebaf11f1575300445006af035817db</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Date</name>
    <filename>classGlib_1_1Date.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Month</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_MONTH</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fab42b19485c354997ff99d0280d8883bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JANUARY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fa41f162c224a741223ef2a282a22f7612</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEBRUARY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fa6e58a73346cb200c19e1a2e8c6766c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MARCH</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031faa6f580fd1bf61b898baa203eab425ef9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APRIL</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fa1ae9ac1173f8c33acd183f4af21503e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fa8cb59e2c5f3f4c407f839648428e781b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JUNE</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fa45b980fffd2bca9caa454c0ff22d4668</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JULY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fa79d02809a794bfff2a3fee86d9029b68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AUGUST</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fa0f91e886e724ba8b2b78c4c109608806</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEPTEMBER</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fa6bb760f0b99884e88b05dd45361a8e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OCTOBER</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fad88f29a9fe61914cfba985c0d99caaf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOVEMBER</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fa8d76aafc0a7ccce22e224702332c02f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DECEMBER</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fa707720b95b5565ecc2082487cda63936</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Weekday</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga073c9f49a289b2036eb226bcdf16a2f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_WEEKDAY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga073c9f49a289b2036eb226bcdf16a2f1a209441f7cd5e544bd8715ebbd53cb578</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MONDAY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga073c9f49a289b2036eb226bcdf16a2f1aa910eb464873ddd2ac4b3f2975796275</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TUESDAY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga073c9f49a289b2036eb226bcdf16a2f1ad096dfc005da0574f708365aca840edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WEDNESDAY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga073c9f49a289b2036eb226bcdf16a2f1a6893621fdc75f8d2f9ab4aadbf00f94e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THURSDAY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga073c9f49a289b2036eb226bcdf16a2f1a94dc5538b8f75d17020925c582c66f88</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FRIDAY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga073c9f49a289b2036eb226bcdf16a2f1a94ba4c5d515872decaf2986ca953a8d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SATURDAY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga073c9f49a289b2036eb226bcdf16a2f1acad9946c6af8b8132a6264e14b5b51cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUNDAY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga073c9f49a289b2036eb226bcdf16a2f1a3fac85ddb897babe92ad1888cd325742</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DMY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gac803072d86bbc2ce1f7d558c94f41ae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DAY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>gac803072d86bbc2ce1f7d558c94f41ae1a560fa4f9a4733a4c043b3f279610f9d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MONTH</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>gac803072d86bbc2ce1f7d558c94f41ae1aba581b678d9b703faa5db3eb0d1713d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>YEAR</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>gac803072d86bbc2ce1f7d558c94f41ae1a9f9e923dc13c924a74987cf00250674e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>guint8</type>
      <name>Day</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a83823bb0261363d37e7579019797097c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>guint16</type>
      <name>Year</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a8f0d42567f1eddf4bde22c436643031b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_MONTH</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fab42b19485c354997ff99d0280d8883bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JANUARY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fa41f162c224a741223ef2a282a22f7612</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEBRUARY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fa6e58a73346cb200c19e1a2e8c6766c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MARCH</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031faa6f580fd1bf61b898baa203eab425ef9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APRIL</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fa1ae9ac1173f8c33acd183f4af21503e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fa8cb59e2c5f3f4c407f839648428e781b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JUNE</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fa45b980fffd2bca9caa454c0ff22d4668</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JULY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fa79d02809a794bfff2a3fee86d9029b68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AUGUST</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fa0f91e886e724ba8b2b78c4c109608806</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEPTEMBER</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fa6bb760f0b99884e88b05dd45361a8e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OCTOBER</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fad88f29a9fe61914cfba985c0d99caaf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOVEMBER</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fa8d76aafc0a7ccce22e224702332c02f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DECEMBER</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fa707720b95b5565ecc2082487cda63936</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_WEEKDAY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga073c9f49a289b2036eb226bcdf16a2f1a209441f7cd5e544bd8715ebbd53cb578</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MONDAY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga073c9f49a289b2036eb226bcdf16a2f1aa910eb464873ddd2ac4b3f2975796275</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TUESDAY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga073c9f49a289b2036eb226bcdf16a2f1ad096dfc005da0574f708365aca840edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WEDNESDAY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga073c9f49a289b2036eb226bcdf16a2f1a6893621fdc75f8d2f9ab4aadbf00f94e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THURSDAY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga073c9f49a289b2036eb226bcdf16a2f1a94dc5538b8f75d17020925c582c66f88</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FRIDAY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga073c9f49a289b2036eb226bcdf16a2f1a94ba4c5d515872decaf2986ca953a8d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SATURDAY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga073c9f49a289b2036eb226bcdf16a2f1acad9946c6af8b8132a6264e14b5b51cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUNDAY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga073c9f49a289b2036eb226bcdf16a2f1a3fac85ddb897babe92ad1888cd325742</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DAY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>gac803072d86bbc2ce1f7d558c94f41ae1a560fa4f9a4733a4c043b3f279610f9d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MONTH</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>gac803072d86bbc2ce1f7d558c94f41ae1aba581b678d9b703faa5db3eb0d1713d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>YEAR</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>gac803072d86bbc2ce1f7d558c94f41ae1a9f9e923dc13c924a74987cf00250674e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Date</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>addae9bb3e6075f950f548178289d31f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Date</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a23300306fa973791ba6effc8757ac98d</anchor>
      <arglist>(Day day, Month month, Year year)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Date</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a04f4564ec663684b7062152ca56f5677</anchor>
      <arglist>(guint32 julian_day)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Date</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a42ea48c26d515c1206704915b71b5076</anchor>
      <arglist>(const GDate &amp;castitem)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Date</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a0ac5c4a615593ca72f6f0600ad678974</anchor>
      <arglist>(const Date &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Date &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ac51254df32aab40dd14cd7f9f8d8a3ac</anchor>
      <arglist>(const Date &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>GDate *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a4df664ef8c919b45dafaf1f666635ad8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDate *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a5b265fcb3c755e986a505aef26769197</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a5e0612d9073939b783b6fffea9b66709</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_parse</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a6bd2cb5903074d5d99d8640d96e84ebb</anchor>
      <arglist>(const Glib::ustring &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_time</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a214e405c758a42707dc1e7408aa7a2af</anchor>
      <arglist>(GTime time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_time</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a6c56245f4145ed4fdf882ec3bca99dba</anchor>
      <arglist>(std::time_t timet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_time</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ab4bf594a78cd4270960c70705ec48328</anchor>
      <arglist>(const GTimeVal &amp;timeval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_time_current</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a094ddd3269d18d76077471647406742c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_month</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a0e64dc591b387cc4847bfe62f71ced5c</anchor>
      <arglist>(Month month)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_day</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a1caed2e61aa1f492cb0e0f9dc28ff9e8</anchor>
      <arglist>(Day day)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_year</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a207373a135e2b93be1f88b949d468ba8</anchor>
      <arglist>(Year year)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_dmy</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a83e9f483203116684bd59d7a2457605c</anchor>
      <arglist>(Day day, Month month, Year year)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_julian</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a3991f6de084bb84de962b81316b6323e</anchor>
      <arglist>(guint32 julian_day)</arglist>
    </member>
    <member kind="function">
      <type>Date &amp;</type>
      <name>add_days</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a47cdaca7f0a4fb99f21ca6f2c5f6b609</anchor>
      <arglist>(int n_days)</arglist>
    </member>
    <member kind="function">
      <type>Date &amp;</type>
      <name>subtract_days</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>aa811f0a4a953a9bd8e6623324a61a09a</anchor>
      <arglist>(int n_days)</arglist>
    </member>
    <member kind="function">
      <type>Date &amp;</type>
      <name>add_months</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a58c7a4bccf502bb9a9b10b1079a803ae</anchor>
      <arglist>(int n_months)</arglist>
    </member>
    <member kind="function">
      <type>Date &amp;</type>
      <name>subtract_months</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a543992d17cac03b125bcd2e5dbcbbcbf</anchor>
      <arglist>(int n_months)</arglist>
    </member>
    <member kind="function">
      <type>Date &amp;</type>
      <name>add_years</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a1ea49facb5ec94dbd6b22916da2616b4</anchor>
      <arglist>(int n_years)</arglist>
    </member>
    <member kind="function">
      <type>Date &amp;</type>
      <name>subtract_years</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ac06467e6b8d11f2cb6862142503e51af</anchor>
      <arglist>(int n_years)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>days_between</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>aa321cf7feff0e1740fa10b02ad9e9662</anchor>
      <arglist>(const Date &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a9596f630e1815271b3c682998411d74c</anchor>
      <arglist>(const Date &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>Date &amp;</type>
      <name>clamp</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>aeaf508be8686588e138ea33c1f193c84</anchor>
      <arglist>(const Date &amp;min_date, const Date &amp;max_date)</arglist>
    </member>
    <member kind="function">
      <type>Date &amp;</type>
      <name>clamp_min</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a0d54f26f46455523492785048c0e8f11</anchor>
      <arglist>(const Date &amp;min_date)</arglist>
    </member>
    <member kind="function">
      <type>Date &amp;</type>
      <name>clamp_max</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a88f3580d08fcd5a6f78247386a81cab9</anchor>
      <arglist>(const Date &amp;max_date)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>order</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>aa16d41a82334d8d83fb6dfbcedfc8214</anchor>
      <arglist>(Date &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Weekday</type>
      <name>get_weekday</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ae72959db77d709038046dc2aeec3017c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Month</type>
      <name>get_month</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a5ecc1b0a5f6ba121cfd633c7897503bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Year</type>
      <name>get_year</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ad3c4633c1cf8479b0c311c4a9bd21a68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Day</type>
      <name>get_day</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ae1aa415f7b801ee55bd5f4a5043eae32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>guint32</type>
      <name>get_julian</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>af269acec7ef01ada4f465c37eb268544</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_day_of_year</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>af167ad7d69706de9603dd84af8ef1d0d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_monday_week_of_year</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>aae315a156b4cbea2c5cb54873a4d62c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_sunday_week_of_year</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a3fbea727b3f80dacbac317cb56ef5859</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_iso8601_week_of_year</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ac6c5770080f2443b6f87bba05d36850f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_first_of_month</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a966fc132303dcf56922594aef766c22d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_last_of_month</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a640aa7cad5c010e8ea0429d4bcc5033b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>format_string</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ade271a538756703b305d10e2f4eea083</anchor>
      <arglist>(const Glib::ustring &amp;format) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>to_struct_tm</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a3ab85789529cd2bc68cbd7d066073ab1</anchor>
      <arglist>(struct tm &amp;dest) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>aff64de51c69c4405fb95467227f5efcc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static guint8</type>
      <name>get_days_in_month</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ac730164dfaafc48786e550a7d94831ce</anchor>
      <arglist>(Month month, Year year)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static guint8</type>
      <name>get_monday_weeks_in_year</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a2c9cb463927b05d4632dca5da920542f</anchor>
      <arglist>(Year year)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static guint8</type>
      <name>get_sunday_weeks_in_year</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ab670892479ab8b08a9523d14fbafef2d</anchor>
      <arglist>(Year year)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>is_leap_year</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a625818601b8b04e016b998ebd58294f1</anchor>
      <arglist>(Year year)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>valid_day</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a409a3205d2f1e138b88df36fe0d8b1a2</anchor>
      <arglist>(Day day)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>valid_month</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>aee1b51e0602590b7bbebd404ed72bbca</anchor>
      <arglist>(Month month)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>valid_year</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a7ebb66795ecaa06a721d851451fc73ff</anchor>
      <arglist>(Year year)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>valid_weekday</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a72f37e25f74705d8b7f735b0b8aed5cd</anchor>
      <arglist>(Weekday weekday)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>valid_julian</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a7b94ac5b14f4051054897c07cbb86656</anchor>
      <arglist>(guint32 julian_day)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>valid_dmy</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>acae6854623e46d783a0e19a5952871d1</anchor>
      <arglist>(Day day, Month month, Year year)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Day</type>
      <name>BAD_DAY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>af6341bae69196cb5099f1133b2225b53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Year</type>
      <name>BAD_YEAR</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a836394324fc168ffac64734f7930b548</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const guint32</type>
      <name>BAD_JULIAN</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a2b4f287c712949a7dbd7ca61f0098531</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a27425be265a0cc57e4f731825154ec4d</anchor>
      <arglist>(const Date &amp;lhs, const Date &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ad12683e4457513f4f834e13c4e7f72f8</anchor>
      <arglist>(const Date &amp;lhs, const Date &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a611ba98c72bec2ae82bbf086b81563ef</anchor>
      <arglist>(const Date &amp;lhs, const Date &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a4e4faf476e7d66ef88aaca8b11a60175</anchor>
      <arglist>(const Date &amp;lhs, const Date &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>acacb699d0fcffd2443c121586b7c22da</anchor>
      <arglist>(const Date &amp;lhs, const Date &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>aa72d3f6e17c7aab4d16e9e50b5069e1a</anchor>
      <arglist>(const Date &amp;lhs, const Date &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::DateTime</name>
    <filename>classGlib_1_1DateTime.html</filename>
    <member kind="function">
      <type></type>
      <name>DateTime</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a4466a00f72a591a9135ca7d851c4b5dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DateTime</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a378567d4313c1621325c72b3640800a4</anchor>
      <arglist>(GDateTime *castitem, bool make_a_copy=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DateTime</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>aba4ab77ceac92f8a0c7fd70bff8183f3</anchor>
      <arglist>(const DateTime &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>DateTime &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>ad4fb03d477fd3c930f06d7aa65a78c6a</anchor>
      <arglist>(const DateTime &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DateTime</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>ab0ccbd20c074aa4c15f7fd6bca617c82</anchor>
      <arglist>(DateTime &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DateTime &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>abdb89630b3e15388e497579bea578aaa</anchor>
      <arglist>(DateTime &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DateTime</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>aa401d6195b295ed26dc76c2d26bddc5e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a9f403b577a37b98ec802869a2d054b95</anchor>
      <arglist>(DateTime &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>GDateTime *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>aef6bffa86154c574827f3ef1b3a2012d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDateTime *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a9353408a07d6ac3d62629db22c5f9bdd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GDateTime *</type>
      <name>gobj_copy</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a7cae2a0890b61e1e2d09c64ef6199594</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DateTime</type>
      <name>add</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a45c81b190658e94fb321ea0df3b3b7e3</anchor>
      <arglist>(TimeSpan timespan) const</arglist>
    </member>
    <member kind="function">
      <type>DateTime</type>
      <name>add_years</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a1ebe8008830ec921fa12697363b6593d</anchor>
      <arglist>(int years) const</arglist>
    </member>
    <member kind="function">
      <type>DateTime</type>
      <name>add_months</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a0c9327d84a457428f0c5b8e2fef0d52d</anchor>
      <arglist>(int months) const</arglist>
    </member>
    <member kind="function">
      <type>DateTime</type>
      <name>add_weeks</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a0e60021f4f4602d5b81da7a0e6ef5e2a</anchor>
      <arglist>(int weeks) const</arglist>
    </member>
    <member kind="function">
      <type>DateTime</type>
      <name>add_days</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a3b84adc3f784c88d59d37e42f1ce66b7</anchor>
      <arglist>(int days) const</arglist>
    </member>
    <member kind="function">
      <type>DateTime</type>
      <name>add_hours</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a214ca1c71fc52a58a09870a420dd1444</anchor>
      <arglist>(int hours) const</arglist>
    </member>
    <member kind="function">
      <type>DateTime</type>
      <name>add_minutes</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a0cf0c8345bb6f0b0fe547aac9beb69a7</anchor>
      <arglist>(int minutes) const</arglist>
    </member>
    <member kind="function">
      <type>DateTime</type>
      <name>add_seconds</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a5cb16ca569fc64d03cfef6aab9399a8f</anchor>
      <arglist>(double seconds) const</arglist>
    </member>
    <member kind="function">
      <type>DateTime</type>
      <name>add_full</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a4ae003c2b8f064d7d1592cf6b2c6d1ec</anchor>
      <arglist>(int years, int months, int days, int hours, int minutes, double seconds) const</arglist>
    </member>
    <member kind="function">
      <type>TimeSpan</type>
      <name>difference</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a4f68f49c6cd6799f94d203f236507c3b</anchor>
      <arglist>(const DateTime &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a8a38cf7f117e712aa6f519e344088050</anchor>
      <arglist>(const DateTime &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>hash</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a4bc31f75ee05cd8d762fa9f3005ccab2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a7b31aa26564e1a6241ca9e31fc1af6a4</anchor>
      <arglist>(const DateTime &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_ymd</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a55246625342e2551abc275e69202d026</anchor>
      <arglist>(int &amp;year, int &amp;month, int &amp;day) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_year</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>aec8369d00170e6aace333e47bb65cb1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_month</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>ad7b0536d8588de47fc931aa6aef0fe40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_day_of_month</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a5d687cdda4215dad0d2b930e11447bd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_week_numbering_year</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a417e24f7899859c47b091c31b415fb49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_week_of_year</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a9ffa578e597a0e3997e73bc555b24520</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_day_of_week</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a0257a1c41ef6edb1fe4926be603c6645</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_day_of_year</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a286211ffc418a993ba291cfb1d5a0ae5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_hour</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>ae9cdaae4bcab4a8f1b4a2a5bab0c1df2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_minute</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a1fc08fef23c69681c706e0c9e3624472</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_second</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a01272fa37436a449ab9ed788afe3e5ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_microsecond</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a5e05bd804a73aeb821726c966060e32b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_seconds</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a8506b3bbf1125b9917a7428c80b2dd2d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>gint64</type>
      <name>to_unix</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a755cc76f81e7ffa3136fe5c0121ef856</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>to_timeval</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a7d78327e19654ea21e42c9685e098ab6</anchor>
      <arglist>(TimeVal &amp;tv) const</arglist>
    </member>
    <member kind="function">
      <type>TimeSpan</type>
      <name>get_utc_offset</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a4eb558bbd1b3dbabfbacb092d005ae5c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_timezone_abbreviation</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a2776c9c85f5ebdba7051a2c45d09ffb8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_daylight_savings</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a2650081259a2c8ba5749c460378fba12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DateTime</type>
      <name>to_timezone</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>accd23169043db4745b1c0522a9ff43f6</anchor>
      <arglist>(const TimeZone &amp;tz) const</arglist>
    </member>
    <member kind="function">
      <type>DateTime</type>
      <name>to_local</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a349cca3606b63804ed80ba3c2668f9f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DateTime</type>
      <name>to_utc</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a8710b31197d5c1f9a37c1df4502d2da1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>format</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a7795905c8db173a973f965a7f27c7f51</anchor>
      <arglist>(const Glib::ustring &amp;format_str) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DateTime</type>
      <name>create_now</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>ad48ba71c7573b26d636b125202843613</anchor>
      <arglist>(const TimeZone &amp;tz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DateTime</type>
      <name>create_now_local</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a15f3d384840951cbf993af14c7df0db8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DateTime</type>
      <name>create_now_utc</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a7fe96fc1d4eace42e2e45906717fc428</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DateTime</type>
      <name>create_now_local</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>abbeb5890f680e19af64d4d8ade4d6b33</anchor>
      <arglist>(gint64 t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DateTime</type>
      <name>create_now_utc</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a2823b34b5116ad5e2bde0ec3c1eb1c30</anchor>
      <arglist>(gint64 t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DateTime</type>
      <name>create_now_local</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a990034c6ead5c34c22a9e989c4a3e4e3</anchor>
      <arglist>(const TimeVal &amp;tv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DateTime</type>
      <name>create_now_utc</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>ac3be9be4892d8f20147f7a94e0488113</anchor>
      <arglist>(const TimeVal &amp;tv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DateTime</type>
      <name>create</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>aee0b3393970d11dc5533bf51233abb25</anchor>
      <arglist>(const TimeZone &amp;tz, int year, int month, int day, int hour, int minute, double seconds)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DateTime</type>
      <name>create_local</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a377401c243100e1172341c6747339c27</anchor>
      <arglist>(int year, int month, int day, int hour, int minute, double seconds)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DateTime</type>
      <name>create_utc</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a6c46434388bad186f4f53988d925e110</anchor>
      <arglist>(int year, int month, int day, int hour, int minute, double seconds)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GDateTime *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a89d0ade6e43a96039d52f666610e17c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a372c7ffb4ff2e0d25fe524048b8f23ce</anchor>
      <arglist>(DateTime &amp;lhs, DateTime &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Glib::DateTime</type>
      <name>wrap</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>ae0c5dfdc4615424386bbf46d1181580e</anchor>
      <arglist>(GDateTime *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::DBusObjectPathString</name>
    <filename>classGlib_1_1DBusObjectPathString.html</filename>
    <base>Glib::ustring</base>
  </compound>
  <compound kind="class">
    <name>Glib::DBusSignatureString</name>
    <filename>classGlib_1_1DBusSignatureString.html</filename>
    <base>Glib::ustring</base>
  </compound>
  <compound kind="class">
    <name>Glib::Dir</name>
    <filename>classGlib_1_1Dir.html</filename>
    <member kind="typedef">
      <type>DirIterator</type>
      <name>iterator</name>
      <anchorfile>classGlib_1_1Dir.html</anchorfile>
      <anchor>aa840f9068aeab9d814d284377412bda2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DirIterator</type>
      <name>const_iterator</name>
      <anchorfile>classGlib_1_1Dir.html</anchorfile>
      <anchor>ab2c899af8cd23844526393833ab78319</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dir</name>
      <anchorfile>classGlib_1_1Dir.html</anchorfile>
      <anchor>abbcedb96cc9cf9cdfa37ab7164631fe9</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dir</name>
      <anchorfile>classGlib_1_1Dir.html</anchorfile>
      <anchor>ac3947ed67171022e73776c1c326433ca</anchor>
      <arglist>(const Dir &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Dir &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Dir.html</anchorfile>
      <anchor>a668d1a0e4243ce82a1ce42885c7a6ccc</anchor>
      <arglist>(const Dir &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Dir</name>
      <anchorfile>classGlib_1_1Dir.html</anchorfile>
      <anchor>a8de43168d60f9ffc12842b6d277834de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>read_name</name>
      <anchorfile>classGlib_1_1Dir.html</anchorfile>
      <anchor>a0b7540337a31b10b5dd5775a46ff2f43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rewind</name>
      <anchorfile>classGlib_1_1Dir.html</anchorfile>
      <anchor>a13bc8d04aef36e4c77eb05710096ab26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classGlib_1_1Dir.html</anchorfile>
      <anchor>a9d648d71ee0ac37f57b478f8d43a3bf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DirIterator</type>
      <name>begin</name>
      <anchorfile>classGlib_1_1Dir.html</anchorfile>
      <anchor>ae5b5900d5f7838b2437f36609c30d7ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DirIterator</type>
      <name>end</name>
      <anchorfile>classGlib_1_1Dir.html</anchorfile>
      <anchor>aded8f8cb05e1aed5fb445569c44fff68</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::DirIterator</name>
    <filename>classGlib_1_1DirIterator.html</filename>
    <member kind="typedef">
      <type>std::input_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classGlib_1_1DirIterator.html</anchorfile>
      <anchor>a67db7ca7ce5696fe900df4f8428b2f67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1DirIterator.html</anchorfile>
      <anchor>a596bae950cfcfbb815029929b9394bae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1DirIterator.html</anchorfile>
      <anchor>aea087419248faa8fc677d88f6cac928e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1DirIterator.html</anchorfile>
      <anchor>aaa1742565a52c5f7facc17f90f0680fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>pointer</name>
      <anchorfile>classGlib_1_1DirIterator.html</anchorfile>
      <anchor>a40edc6b0e3915f39a58f068ae3246de9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DirIterator</name>
      <anchorfile>classGlib_1_1DirIterator.html</anchorfile>
      <anchor>a39fe47295f912691d1ba9e04fc4c6854</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>operator*</name>
      <anchorfile>classGlib_1_1DirIterator.html</anchorfile>
      <anchor>af61454b8098c362700c12aac4f46397c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DirIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1DirIterator.html</anchorfile>
      <anchor>a094d89e945942a29635cbb5e065a8f41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1DirIterator.html</anchorfile>
      <anchor>a369cb93241e49b7aa1229848e88c3f15</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1DirIterator.html</anchorfile>
      <anchor>aad1d465475ff554c346c6eabf6509442</anchor>
      <arglist>(const DirIterator &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1DirIterator.html</anchorfile>
      <anchor>ab11127d372792d9647ebac9f00cc247f</anchor>
      <arglist>(const DirIterator &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Dispatcher</name>
    <filename>classGlib_1_1Dispatcher.html</filename>
    <member kind="function">
      <type></type>
      <name>Dispatcher</name>
      <anchorfile>classGlib_1_1Dispatcher.html</anchorfile>
      <anchor>a1883255c63f36e1d218ccf3f1abfa992</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dispatcher</name>
      <anchorfile>classGlib_1_1Dispatcher.html</anchorfile>
      <anchor>a3595a55dc1ded7ab29bc12fc43eb9f52</anchor>
      <arglist>(const Dispatcher &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Dispatcher &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Dispatcher.html</anchorfile>
      <anchor>a3622fc7da1b70860b0cb3ac4abb55070</anchor>
      <arglist>(const Dispatcher &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dispatcher</name>
      <anchorfile>classGlib_1_1Dispatcher.html</anchorfile>
      <anchor>a14692fe3e39140fc164cbd03149a7ce1</anchor>
      <arglist>(const Glib::RefPtr&lt; MainContext &gt; &amp;context)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Dispatcher</name>
      <anchorfile>classGlib_1_1Dispatcher.html</anchorfile>
      <anchor>af9484ae270bc15667fff210165d5f1bd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classGlib_1_1Dispatcher.html</anchorfile>
      <anchor>a07b89c90f931db118c8c184d0615ce92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classGlib_1_1Dispatcher.html</anchorfile>
      <anchor>a4610275deedf1324bf71afde1c8c71ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1Dispatcher.html</anchorfile>
      <anchor>a63645395ac79c03b5ec9e81d8099dea7</anchor>
      <arglist>(const sigc::slot&lt; void &gt; &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1Dispatcher.html</anchorfile>
      <anchor>a2e486005033e1928bb1afc63fa2ec053</anchor>
      <arglist>(sigc::slot&lt; void &gt; &amp;&amp;slot)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Error</name>
    <filename>classGlib_1_1Error.html</filename>
    <base>Glib::Exception</base>
    <member kind="function">
      <type></type>
      <name>Error</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>a2639aeb2b6a6c43662cf17b8c88a122d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Error</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>a478576c835fb1d66e46076b4c2d19799</anchor>
      <arglist>(GQuark error_domain, int error_code, const Glib::ustring &amp;message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Error</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>a70257ceb030e4d9dd3ac9a6482830d24</anchor>
      <arglist>(GError *gobject, bool take_copy=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Error</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>a715ed79ccf7d2fa3a357014fc614a4a4</anchor>
      <arglist>(const Error &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Error &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>a6fd059d3c4d24c3f6a0f6999be41b138</anchor>
      <arglist>(const Error &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Error</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>aec934390eb92db0c3b335452363cbe5f</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>GQuark</type>
      <name>domain</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>a43118d62955ff3f56440c2ee5c7effb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>code</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>a6c9e6c60fdf637a0f938f1e4d23b6d0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>what</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>afbf91e86e5087a3ab861f705e5d16433</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matches</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>ab14b2b768a4719eebd3176394eb8acb1</anchor>
      <arglist>(GQuark error_domain, int error_code) const</arglist>
    </member>
    <member kind="function">
      <type>GError *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>a69e6636c8ed726b1468ed61c07d65816</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GError *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>a57dfafe0a8687f29afe298b8ad29dae7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GError *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>aaf45a78024403f011e31a73c1361c59a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Exception</name>
    <filename>classGlib_1_1Exception.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~Exception</name>
      <anchorfile>classGlib_1_1Exception.html</anchorfile>
      <anchor>a51fb593b3bb4bf81999d00516ff0a613</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Glib::ustring</type>
      <name>what</name>
      <anchorfile>classGlib_1_1Exception.html</anchorfile>
      <anchor>a2423c81571a101571751fe0a046beef0</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::FileError</name>
    <filename>classGlib_1_1FileError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumeration">
      <type></type>
      <name>Code</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXISTS</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba01ff8868a0b220c86c9324c99d3cd4fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IS_DIRECTORY</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0baff115ce7e218cc5a4aae85ec8890ab94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACCESS_DENIED</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0baa2e3135e38ebcc80a494528091ebd8de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NAME_TOO_LONG</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba8643f49fdab6a5ff782084c67135e1e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_SUCH_ENTITY</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0baeda2e83b22b1f6dc1da2694f1644e564</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_DIRECTORY</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0baa4f3b9115752cd9cf52a5b59f8909991</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_SUCH_DEVICE</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0babb6c725bc086a2d279e757457b030571</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_DEVICE</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0badd3c96afe2ba945bb3560e16a9b93d59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>READONLY_FILESYSTEM</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0babeea9fce53d4885b4051984276f15a8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TEXT_FILE_BUSY</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba7e4dc1f2fd34848b7bc3000c272e1372</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAULTY_ADDRESS</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0badc06f883f118f4890129663191c6c17f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SYMLINK_LOOP</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba162e633cd38eab5d522270c9a3ebcea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_SPACE_LEFT</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0bab01ef9f764fd9b893ce8642c41e767d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_ENOUGH_MEMORY</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba370079127964629a1632d9ddb9e1675e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOO_MANY_OPEN_FILES</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0bae6695b16a229d85ed7fe04998ded8e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TABLE_OVERFLOW</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba270fd5509672b5315c89ba895cf0a03b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_FILE_DESCRIPTOR</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba4fc249f01958f2637485f137984a2ef5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_ARGUMENT</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba9c342ad59c861942248c7c4f9856ffa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BROKEN_PIPE</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba7973f973a753e33f7334606a7b94a484</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRYAGAIN</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba394d8e382562d6a1d98eeb324f7bb3ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTERRUPTED</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0badddd41967fb43bd5299d7ca081e1fb2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba9f036a8ebefce2b3e4d6212a81391f41</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_OWNER</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0baa10eb3f9c67a9d359927839c800e9d62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOSYS</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0bae167a1dac9af46da8ba31ed4020c328f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba1ff00bae55bf88a6bd4f5c70b78324b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXISTS</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba01ff8868a0b220c86c9324c99d3cd4fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IS_DIRECTORY</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0baff115ce7e218cc5a4aae85ec8890ab94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACCESS_DENIED</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0baa2e3135e38ebcc80a494528091ebd8de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NAME_TOO_LONG</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba8643f49fdab6a5ff782084c67135e1e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_SUCH_ENTITY</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0baeda2e83b22b1f6dc1da2694f1644e564</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_DIRECTORY</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0baa4f3b9115752cd9cf52a5b59f8909991</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_SUCH_DEVICE</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0babb6c725bc086a2d279e757457b030571</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_DEVICE</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0badd3c96afe2ba945bb3560e16a9b93d59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>READONLY_FILESYSTEM</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0babeea9fce53d4885b4051984276f15a8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TEXT_FILE_BUSY</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba7e4dc1f2fd34848b7bc3000c272e1372</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAULTY_ADDRESS</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0badc06f883f118f4890129663191c6c17f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SYMLINK_LOOP</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba162e633cd38eab5d522270c9a3ebcea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_SPACE_LEFT</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0bab01ef9f764fd9b893ce8642c41e767d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_ENOUGH_MEMORY</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba370079127964629a1632d9ddb9e1675e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOO_MANY_OPEN_FILES</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0bae6695b16a229d85ed7fe04998ded8e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TABLE_OVERFLOW</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba270fd5509672b5315c89ba895cf0a03b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_FILE_DESCRIPTOR</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba4fc249f01958f2637485f137984a2ef5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_ARGUMENT</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba9c342ad59c861942248c7c4f9856ffa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BROKEN_PIPE</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba7973f973a753e33f7334606a7b94a484</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRYAGAIN</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba394d8e382562d6a1d98eeb324f7bb3ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTERRUPTED</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0badddd41967fb43bd5299d7ca081e1fb2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba9f036a8ebefce2b3e4d6212a81391f41</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_OWNER</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0baa10eb3f9c67a9d359927839c800e9d62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOSYS</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0bae167a1dac9af46da8ba31ed4020c328f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba1ff00bae55bf88a6bd4f5c70b78324b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileError</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0acf54ad7899f15d9dba10a42e551181</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileError</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>adc1bae15e4393814b23e7f0743a081cc</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>ade419827b95c4988d8689e3c8074619c</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::HelperList</name>
    <filename>classGlib_1_1HelperList.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>T_Child</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a1baa36917101753e08db9fb1d8678f64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a126d3c3b872d4454e112d924382bacb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a2d700e5fd7319719e12bc33f25c3d657</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_Iterator</type>
      <name>iterator</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>ac5cf32da4f1dbdbb3c34ca96479b12a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List_ConstIterator&lt; iterator &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a2a592f12e209202bcbd4f4be9f7b66ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List_ReverseIterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a274078a06f0af3e504497ce93e4ca56b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List_ConstIterator&lt; reverse_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a71783b31772e15493349d166ce48dfe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_CppElement</type>
      <name>element_type</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a3ff6410cb12356e8833f6237eb5297e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a9d37bf10a3096130597d06fd2a9f4e0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>aa385463d6d3a61217d9f4e9bf3beffb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HelperList</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>ac8e607070eb44e5a6e2d431260d1fff4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HelperList</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>aa6a1fdb8068c9a6ff8e42f626c521743</anchor>
      <arglist>(GObject *gp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HelperList</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a7fb318e5c0e551b54d0931a759c287f1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual iterator</type>
      <name>erase</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a4bee97685b3fc46d076721f82092f12b</anchor>
      <arglist>(iterator)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>erase</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a411996bdc0ef3623a1d0e1e0d307de4f</anchor>
      <arglist>(iterator start, iterator stop)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>remove</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a19373c8c69f4480a98208ed41a5ce176</anchor>
      <arglist>(const_reference)=0</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>acb0d68fda891a126b5de25f8f8c7f2c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a1804cd42b3665f7cc6d82a41080361ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a719bfa3471825fd4d5b7061504ed9e1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>ab9e537275fd961f09b7fa0c6670c973c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a8569a041346fb38b60eb2aec0662bb30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a96aa7050b117f7058190e5494ee3a590</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>abdd3320e7dbee4f5a242fdd67675d96a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a1c6d98170261d1b9c89d34ce359827f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a9724ef5c75c231a1b31b6220239e007f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a39776b33c3409e40202ea300f346103a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a95b51c26771b9411a7823cdf8b2d1405</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>front</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>ad72ff4b6f7a404fc73d0e8eb5f335bb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>back</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>ac0eea589cd749dfd06dbdcd984ca810b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a7c9c449ee38aea049f0badaaea093560</anchor>
      <arglist>(size_type l) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_front</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a28f275f049a351f9cc2bd4162de3ec6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a772423e892bd3ed57a11a544a0608b9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a9f7bc99c64db14a448d70db0c008eb71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GObject *</type>
      <name>gparent</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a3dc8d631ba89f7173882a50dd4dc03d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GObject *</type>
      <name>gparent</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>acd3b86c28d26396bbddddfb97ffd8ce4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual GList *&amp;</type>
      <name>glist</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a7ecdcc677de72ffe14d6c43ccc02ede8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>iterator</type>
      <name>begin_</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a7bc90165b095a142bce538e4ba4d45ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>iterator</type>
      <name>end_</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>ac9bfdf23be0a4c73f148b25d2980ca6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GObject *</type>
      <name>gparent_</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a48e04ecc5c170b9e84af28b8df046f2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::IConv</name>
    <filename>classGlib_1_1IConv.html</filename>
    <member kind="function">
      <type></type>
      <name>IConv</name>
      <anchorfile>classGlib_1_1IConv.html</anchorfile>
      <anchor>abb841f9db0731eb8cbc4ea2a8a5d23d5</anchor>
      <arglist>(const std::string &amp;to_codeset, const std::string &amp;from_codeset)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IConv</name>
      <anchorfile>classGlib_1_1IConv.html</anchorfile>
      <anchor>ae23299525cf67e1c2d4666b4e091f228</anchor>
      <arglist>(const IConv &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>IConv &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1IConv.html</anchorfile>
      <anchor>a65450c6f04bd3a0f69cd8360c58415d5</anchor>
      <arglist>(const IConv &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IConv</name>
      <anchorfile>classGlib_1_1IConv.html</anchorfile>
      <anchor>ad2722879e0465fec5d9f2c126a602557</anchor>
      <arglist>(GIConv gobject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IConv</name>
      <anchorfile>classGlib_1_1IConv.html</anchorfile>
      <anchor>ab56fc0ef68a7f7fee554728a16c6cba0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>iconv</name>
      <anchorfile>classGlib_1_1IConv.html</anchorfile>
      <anchor>a094ab3c0fe74ae49968fb7ddfc9372fc</anchor>
      <arglist>(char **inbuf, gsize *inbytes_left, char **outbuf, gsize *outbytes_left)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classGlib_1_1IConv.html</anchorfile>
      <anchor>ab0655474f54dd933d3f6959bdafffabe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>convert</name>
      <anchorfile>classGlib_1_1IConv.html</anchorfile>
      <anchor>a82af42360f040532ebd4b215dc89a59d</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>GIConv</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1IConv.html</anchorfile>
      <anchor>a12a8c09489388d1efcf9b70586307614</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::IdleSource</name>
    <filename>classGlib_1_1IdleSource.html</filename>
    <base>Glib::Source</base>
    <member kind="typedef">
      <type>Glib::IdleSource</type>
      <name>CppObjectType</name>
      <anchorfile>classGlib_1_1IdleSource.html</anchorfile>
      <anchor>a793e679257940e06274af20134361881</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1IdleSource.html</anchorfile>
      <anchor>aeac761cf8634206bf4e599ae468140e1</anchor>
      <arglist>(const sigc::slot&lt; bool &gt; &amp;slot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; IdleSource &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1IdleSource.html</anchorfile>
      <anchor>a2d60b73fff1919fb0b9022a4d9a0b148</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IdleSource</name>
      <anchorfile>classGlib_1_1IdleSource.html</anchorfile>
      <anchor>a4970d5053f39e3200ae09d15b7a9507f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~IdleSource</name>
      <anchorfile>classGlib_1_1IdleSource.html</anchorfile>
      <anchor>a823f0a69a46ccb1b863ca01f3c806d9d</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>prepare</name>
      <anchorfile>classGlib_1_1IdleSource.html</anchorfile>
      <anchor>a57142bc2f5f3e06d14340ed9b237a158</anchor>
      <arglist>(int &amp;timeout) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>check</name>
      <anchorfile>classGlib_1_1IdleSource.html</anchorfile>
      <anchor>a6780fc19d364ea219d2708df90520c42</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>dispatch</name>
      <anchorfile>classGlib_1_1IdleSource.html</anchorfile>
      <anchor>aff61cb1a1a1e08b2853b09c42865374a</anchor>
      <arglist>(sigc::slot_base *slot_data) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Interface</name>
    <filename>classGlib_1_1Interface.html</filename>
    <base virtualness="virtual">Glib::ObjectBase</base>
    <member kind="function">
      <type></type>
      <name>Interface</name>
      <anchorfile>classGlib_1_1Interface.html</anchorfile>
      <anchor>a3ab20f29c40967352d1bf2d88bfe11e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interface</name>
      <anchorfile>classGlib_1_1Interface.html</anchorfile>
      <anchor>a83337dc270f966539b9f46804460ab75</anchor>
      <arglist>(Interface &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Interface &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Interface.html</anchorfile>
      <anchor>a411d66c7467e749dbb2c4b31c4d518b5</anchor>
      <arglist>(Interface &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interface</name>
      <anchorfile>classGlib_1_1Interface.html</anchorfile>
      <anchor>ae05bf6a4ce0f0992c2ad01429d13f9f7</anchor>
      <arglist>(const Glib::Interface_Class &amp;interface_class)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interface</name>
      <anchorfile>classGlib_1_1Interface.html</anchorfile>
      <anchor>a00253b22a76f751f1627865451cbc404</anchor>
      <arglist>(GObject *castitem)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Interface</name>
      <anchorfile>classGlib_1_1Interface.html</anchorfile>
      <anchor>a3a158029af7ab7279e18ab84ad6f5ad5</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interface</name>
      <anchorfile>classGlib_1_1Interface.html</anchorfile>
      <anchor>a4bb27d294728f34452be66b4ec4cd757</anchor>
      <arglist>(const Interface &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Interface &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Interface.html</anchorfile>
      <anchor>acf322f95cef17aa4cc232d8ef25f2b42</anchor>
      <arglist>(const Interface &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>GObject *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Interface.html</anchorfile>
      <anchor>a969e9396f75132a9577428f4fa932d42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GObject *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Interface.html</anchorfile>
      <anchor>a4737c92fa9930b4f006ab8b3c9487504</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::IOChannel</name>
    <filename>classGlib_1_1IOChannel.html</filename>
    <base>sigc::trackable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IOChannel</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a0a6c1cddcf00c77c6ab99b096c86544f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>read</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>ae5878a4510f52f194f18c0743f6a9b5c</anchor>
      <arglist>(gunichar &amp;thechar)</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>read</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a1afb78d2e29a2f01a7034279a0c12636</anchor>
      <arglist>(char *buf, gsize count, gsize &amp;bytes_read)</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>read</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a4553088deea02ebea2ab7a9e2cff0a1c</anchor>
      <arglist>(Glib::ustring &amp;str, gsize count)</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>read_line</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a2950510fff168d5753ee1eb14714d67a</anchor>
      <arglist>(Glib::ustring &amp;line)</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>read_to_end</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a0d64e84ab360b3c83399c94076487df1</anchor>
      <arglist>(Glib::ustring &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>write</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>acacb5599be21f549911c6aca5f820fcf</anchor>
      <arglist>(const Glib::ustring &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>write</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a29114ed2bcb64b8af551271394968528</anchor>
      <arglist>(const char *buf, gssize count, gsize &amp;bytes_written)</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>write</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a5e0a187ff012b3b90c6d3d8593c18e92</anchor>
      <arglist>(gunichar unichar)</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>seek</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a65a5048c32ecde11827b5ae1973ee0b1</anchor>
      <arglist>(gint64 offset, SeekType type=SEEK_TYPE_SET)</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>flush</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>aba6702093bd1c58ea22231446ed2f6e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>close</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a074ce46305db3423879012c5b44dfe64</anchor>
      <arglist>(bool flush_pending=true)</arglist>
    </member>
    <member kind="function">
      <type>gsize</type>
      <name>get_buffer_size</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a97243f45d0cfb3af628cf424f81584e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_buffer_size</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a535767c92f2678e5e72051f6f4bc5326</anchor>
      <arglist>(gsize size)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags</type>
      <name>get_flags</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a99d02237d6c5ae473f08abe432f68007</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>set_flags</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>ab6c16c87c174d836247f47c2b87539fd</anchor>
      <arglist>(IOFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_buffered</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>abaf37b0d76cd41628fd0c41a674495de</anchor>
      <arglist>(bool buffered)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_buffered</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a128a2a99f636e8f903db2c3e70b32362</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IOCondition</type>
      <name>get_buffer_condition</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>aa98d587451f50eac5be6a8c259a52580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_close_on_unref</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>ac10d97cbb7199261463c26fc0633b38e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_close_on_unref</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a3f4fbc2a4c3670863fbf504d7fc96253</anchor>
      <arglist>(bool do_close)</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>set_encoding</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>ab1d3ae667bd425ef830929a67cf526e0</anchor>
      <arglist>(const std::string &amp;encoding=std::string())</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_encoding</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a788b40f4551101e784752490cc846a8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_line_term</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>ad42d03bdd0288cf5517737a73f7268b3</anchor>
      <arglist>(const std::string &amp;term=std::string())</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_line_term</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>ab929f038fa073ab3a13d245e3d426482</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; IOSource &gt;</type>
      <name>create_watch</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a755c88fe8c78dc0727b5686fc62b736c</anchor>
      <arglist>(IOCondition condition)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>ad90d34c330d6c99a469c1e0892782eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unreference</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a42cb82fdfd21e23c42549a7d002f3fbd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GIOChannel *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>ab05ed8535a51b04749e11386c845a581</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GIOChannel *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a55145bc4fd0ba565f77448bcb10846c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; IOChannel &gt;</type>
      <name>create_from_file</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>ac175ea1fd6ef84ac3758ca57b42b7f33</anchor>
      <arglist>(const std::string &amp;filename, const std::string &amp;mode)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; IOChannel &gt;</type>
      <name>create_from_fd</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a078698e18f61bb75fe3fd33d82970f5d</anchor>
      <arglist>(int fd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; IOChannel &gt;</type>
      <name>create_from_win32_fd</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a1a22bd01752d233c23babdef800c0d87</anchor>
      <arglist>(int fd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; IOChannel &gt;</type>
      <name>create_from_win32_socket</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a087946554b86d42f1cd72277fd1b0530</anchor>
      <arglist>(int socket)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IOChannel</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>aded3d9a998914bcac0b3f1aef1eeb974</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IOStatus</type>
      <name>read_vfunc</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>abfb4faa07e80b86f21b0f18f0b8606cd</anchor>
      <arglist>(char *buf, gsize count, gsize &amp;bytes_read)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IOStatus</type>
      <name>write_vfunc</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a4ed5372da9d4ad3465012fc2317507b5</anchor>
      <arglist>(const char *buf, gsize count, gsize &amp;bytes_written)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IOStatus</type>
      <name>seek_vfunc</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a781de88aec2c032d05f74402779665f3</anchor>
      <arglist>(gint64 offset, SeekType type)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IOStatus</type>
      <name>close_vfunc</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a735b70808acbb542b04bf55b0133927e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IOStatus</type>
      <name>set_flags_vfunc</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>af8f690f1e0a8945b75ad7be4949e44cf</anchor>
      <arglist>(IOFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IOFlags</type>
      <name>get_flags_vfunc</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>ae3326db3877358b563de11fb3dd8367f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Glib::RefPtr&lt; Glib::Source &gt;</type>
      <name>create_watch_vfunc</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a128f2bfd977617a6a1a7e4a7fbe6aa5b</anchor>
      <arglist>(IOCondition cond)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GIOChannel *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a6683e47c0d78492b83d7021288d9b6d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::IOChannelError</name>
    <filename>classGlib_1_1IOChannelError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumeration">
      <type></type>
      <name>Code</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TOO_BIG</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03a32f641b0109aab961e74e34f5007c4d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_ARGUMENT</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03aa1e431160b8e2b5ffeaa254ee30d5ed8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03a80bc902e0a233bd94f6d437eac3c22f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IS_DIRECTORY</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03aacd683565a124212c4ac1a42b43059e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_SPACE_LEFT</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03adc34a5d603c531c25f6f90cbe1856fe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_SUCH_DEVICE</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03acd7faf2c83487d46b4f15e91041e87f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OVERFLOWN</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03a32a8d0d0d58fdf7b920173fb09348e1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BROKEN_PIPE</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03a4e6f26d3a7146396c9853eef44b48ba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03ad6983f91256f627498cfec140698192c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TOO_BIG</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03a32f641b0109aab961e74e34f5007c4d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_ARGUMENT</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03aa1e431160b8e2b5ffeaa254ee30d5ed8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03a80bc902e0a233bd94f6d437eac3c22f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IS_DIRECTORY</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03aacd683565a124212c4ac1a42b43059e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_SPACE_LEFT</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03adc34a5d603c531c25f6f90cbe1856fe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_SUCH_DEVICE</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03acd7faf2c83487d46b4f15e91041e87f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OVERFLOWN</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03a32a8d0d0d58fdf7b920173fb09348e1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BROKEN_PIPE</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03a4e6f26d3a7146396c9853eef44b48ba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03ad6983f91256f627498cfec140698192c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IOChannelError</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>ae1314f05ecea3220020d19b2823f545f</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IOChannelError</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>ab78f3d7ead385cf0ab1738686028c10d</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a5e0c4228894f592b4b348478b869792c</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::IOSource</name>
    <filename>classGlib_1_1IOSource.html</filename>
    <base>Glib::Source</base>
    <member kind="typedef">
      <type>Glib::IOSource</type>
      <name>CppObjectType</name>
      <anchorfile>classGlib_1_1IOSource.html</anchorfile>
      <anchor>a3ab8cfcb1e6354cb9c95e80e31765faf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1IOSource.html</anchorfile>
      <anchor>a2fc25e8e5d5ff2a1388226b92a6d7164</anchor>
      <arglist>(const sigc::slot&lt; bool, IOCondition &gt; &amp;slot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; IOSource &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1IOSource.html</anchorfile>
      <anchor>af1a1b508f2aa7399a6a4256891bd2afb</anchor>
      <arglist>(PollFD::fd_t fd, IOCondition condition)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; IOSource &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1IOSource.html</anchorfile>
      <anchor>ae47864cf6220de79dc9902719917750e</anchor>
      <arglist>(const Glib::RefPtr&lt; IOChannel &gt; &amp;channel, IOCondition condition)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IOSource</name>
      <anchorfile>classGlib_1_1IOSource.html</anchorfile>
      <anchor>ad0a23c806856edc1a63c4d07ad0c0697</anchor>
      <arglist>(PollFD::fd_t fd, IOCondition condition)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IOSource</name>
      <anchorfile>classGlib_1_1IOSource.html</anchorfile>
      <anchor>ac6f9fd1ae2a5767e84bfb948419a168e</anchor>
      <arglist>(const Glib::RefPtr&lt; IOChannel &gt; &amp;channel, IOCondition condition)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IOSource</name>
      <anchorfile>classGlib_1_1IOSource.html</anchorfile>
      <anchor>adb3f65738543803c2d123bc9df9483dc</anchor>
      <arglist>(GSource *cast_item, GSourceFunc callback_func)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~IOSource</name>
      <anchorfile>classGlib_1_1IOSource.html</anchorfile>
      <anchor>abf70d65b4a1e6a9ee095a9069ceea684</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>prepare</name>
      <anchorfile>classGlib_1_1IOSource.html</anchorfile>
      <anchor>a3adc1860bfe7bb88d8b0713dbd429c81</anchor>
      <arglist>(int &amp;timeout) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>check</name>
      <anchorfile>classGlib_1_1IOSource.html</anchorfile>
      <anchor>aa47994d650de7717857f2c30dd04fef7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>dispatch</name>
      <anchorfile>classGlib_1_1IOSource.html</anchorfile>
      <anchor>a5a87276335d7e0788130b7a8696fa911</anchor>
      <arglist>(sigc::slot_base *slot) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::KeyFile</name>
    <filename>classGlib_1_1KeyFile.html</filename>
    <member kind="function">
      <type></type>
      <name>KeyFile</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a574f57c39fa7627d0d38ee6660173cb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyFile</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a2eeb4324f28adb5ad09964236027d0e6</anchor>
      <arglist>(const KeyFile &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>KeyFile &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>aae098a2f131c37f0f7d5d7a25553f0a3</anchor>
      <arglist>(const KeyFile &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyFile</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a71de9ed01aea247ff6114fb94b2e3e51</anchor>
      <arglist>(KeyFile &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>KeyFile &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a0e9c614cbd688bd295a25dbda74a8496</anchor>
      <arglist>(KeyFile &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~KeyFile</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a76fdf6f57ba9719b92eadd883c27a3d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyFile</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>ad9c90566b014ba59f545e9a663e6d34d</anchor>
      <arglist>(GKeyFile *castitem, bool takes_ownership=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_from_file</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a11c10834517b2e91881c6a3638daaf66</anchor>
      <arglist>(const std::string &amp;file, KeyFileFlags flags=Glib::KEY_FILE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_from_data</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a22113e3fdfa834fc688e6429b2e6332f</anchor>
      <arglist>(const Glib::ustring &amp;data, KeyFileFlags flags=Glib::KEY_FILE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_from_dirs</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a92109cf1e159da164c329dfdb875bd1c</anchor>
      <arglist>(const std::string &amp;file, const Glib::ArrayHandle&lt; std::string &gt; &amp;search_dirs, Glib::ArrayHandle&lt; std::string &gt; &amp;full_path, KeyFileFlags flags=Glib::KEY_FILE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_from_dirs</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a421274b7a0681616f116b854ac02d3db</anchor>
      <arglist>(const std::string &amp;file, const Glib::ArrayHandle&lt; std::string &gt; &amp;search_dirs, std::string &amp;full_path, KeyFileFlags flags=Glib::KEY_FILE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_from_data_dirs</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a53221a7f8720157e1ef6e635260570b8</anchor>
      <arglist>(const std::string &amp;file, std::string &amp;full_path, KeyFileFlags flags=Glib::KEY_FILE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>to_data</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>acb65a298d161691468cdb7add19b00e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>save_to_file</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a618c821711d3dd4bff81cbe14182038e</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_start_group</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a9543e5f45fe894e1bd73df9b1c4633c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; Glib::ustring &gt;</type>
      <name>get_groups</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>ae947fd45e62ec88791e91b49d35e19e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; Glib::ustring &gt;</type>
      <name>get_keys</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a87dab95d16f68b1813d9c94436b90105</anchor>
      <arglist>(const Glib::ustring &amp;group_name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_group</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>ad96ec2095394b8233945dd59126e2295</anchor>
      <arglist>(const Glib::ustring &amp;group_name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_key</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a5a424112f81082c3b8530ac422708fec</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_value</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>ab68d1d04f60cdbf682ae3340ee75d552</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_string</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a6fb873b9695a1d1eabb24ebad177e8a7</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_locale_string</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>ac46374e63746f844bfd66e4784aa4cff</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_locale_string</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>ae23c14483dee95d0b8e33e989d4e0284</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, const Glib::ustring &amp;locale) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_boolean</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a5a720d86a1357af56473a40bf1cfbab2</anchor>
      <arglist>(const Glib::ustring &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_boolean</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a288b61dbcd700940ec230aaf7de11ebe</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_integer</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>aa7d5c0d6c8140f14e884d8190bd2e595</anchor>
      <arglist>(const Glib::ustring &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_integer</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>ada31f5ffdb1c00bed051928834e2da9c</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>gint64</type>
      <name>get_int64</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a4668bcd55b56263f37019866302b6a22</anchor>
      <arglist>(const Glib::ustring &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>gint64</type>
      <name>get_int64</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>ad78bbb8604e041f6abefb660f0dc2287</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>guint64</type>
      <name>get_uint64</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>afd50f3be45500643cb9b0987bd524fc6</anchor>
      <arglist>(const Glib::ustring &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>guint64</type>
      <name>get_uint64</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a915c3b9c5c71661641670c4b91981ec8</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_double</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a97f43d8ba2c1d0836939137504ebf13f</anchor>
      <arglist>(const Glib::ustring &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_double</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>acd7ea4534f51fe85018ea68f36da74bc</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_double</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a2437f94f6c1f56de2de338445008651c</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_double</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a44f05daea63a1188cae854ca77228355</anchor>
      <arglist>(const Glib::ustring &amp;key, double value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; Glib::ustring &gt;</type>
      <name>get_string_list</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>acb521b8c652211ce5643ecd76bc42cef</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; Glib::ustring &gt;</type>
      <name>get_locale_string_list</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>af31793d9ec4afa7885cd34d58abc31f0</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; Glib::ustring &gt;</type>
      <name>get_locale_string_list</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a6f6235ce126604bf878722d3325bd35c</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, const Glib::ustring &amp;locale) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; bool &gt;</type>
      <name>get_boolean_list</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>abb203a60f10aeafa61a09365fcf284a6</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; int &gt;</type>
      <name>get_integer_list</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>ac6ebdc7cb9d26fa2f4a422d089e496f0</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; double &gt;</type>
      <name>get_double_list</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>ae6fbe597b3ad16ba7113fb54c5b0f0e6</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_comment</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>ad07968c854fb501960210417302935b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_comment</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a2ce0c1aef58cca689137e1b906ebd0e0</anchor>
      <arglist>(const Glib::ustring &amp;group_name) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_comment</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a7558f90b72aff725f53d01552229e7e0</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_list_separator</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>aed087a7066145f1859710b89dbef1ccb</anchor>
      <arglist>(gchar separator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a38bf60f9bdd209d28ae818e7dee6ea17</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, const Glib::ustring &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_string</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a16cd249a1929d637432883848947f253</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, const Glib::ustring &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_locale_string</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a231e36c66336a198d4c55df81b93b711</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, const Glib::ustring &amp;locale, const Glib::ustring &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_boolean</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>aab1b3899063e934ac72ba1be1a77c4a0</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_integer</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a8f61f47a667f07108023930bcefc1400</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, int value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_int64</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a97a7170561a1b353af36d55e613a0540</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, gint64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_uint64</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a18fad32f7e289001ec53796909be024b</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, guint64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_string_list</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>ace8cc2079068c4620c6498d7d831feff</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, const Glib::ArrayHandle&lt; Glib::ustring &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_locale_string_list</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a7b6c776cf8b5f5cbe5a9fa6bf343b8e4</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, const Glib::ustring &amp;locale, const Glib::ArrayHandle&lt; Glib::ustring &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_boolean_list</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a54b27ca6e8158558ba10d538673e6663</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, const Glib::ArrayHandle&lt; bool &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_integer_list</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a374ea5bbcd271412366aa5fc5bab0f1a</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, const Glib::ArrayHandle&lt; int &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_double_list</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a9af3496d225b0638df1ed633c435fad0</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, const Glib::ArrayHandle&lt; double &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_comment</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>ac06f9d12cbc755feba6a3a11f34bac01</anchor>
      <arglist>(const Glib::ustring &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_comment</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a0f1562adaf4ab68a34de7594391c1032</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_comment</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a03c7baab6e892e6a9917761f5200378a</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, const Glib::ustring &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_comment</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a0cdfad92274b403f45b75954eb167d64</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_key</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a0cc1601e227a57603997ddda9d6bc6e1</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_group</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>af6fceaccb2cd166d6039dae0552900dd</anchor>
      <arglist>(const Glib::ustring &amp;group_name)</arglist>
    </member>
    <member kind="function">
      <type>GKeyFile *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a456abd71e420eb7e211ba909f275e5e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GKeyFile *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a6924acfec7f748804484bb39516c3b93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GKeyFile *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a468dd6c8997d3b2e0e59b65174e603b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>owns_gobject_</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a5479765ba8e50cbd94beef60f65212b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::KeyFileError</name>
    <filename>classGlib_1_1KeyFileError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumeration">
      <type></type>
      <name>Code</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>aa3cd76f47263fa75421227221563be52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_ENCODING</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>aa3cd76f47263fa75421227221563be52a4fc90f0b8215c1a776074a9b811303f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARSE</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>aa3cd76f47263fa75421227221563be52a1a76690b59845eddab32bc79058289d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_FOUND</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>aa3cd76f47263fa75421227221563be52af7259a1c186e3fec15cccf5a74bde8d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KEY_NOT_FOUND</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>aa3cd76f47263fa75421227221563be52ab792b51c61c4f346499cf99fc2a77bf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GROUP_NOT_FOUND</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>aa3cd76f47263fa75421227221563be52a95354e82f6ca3510eb23f483a72a5b53</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_VALUE</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>aa3cd76f47263fa75421227221563be52abe33eebc1321861a5ddd669cfdb9db31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_ENCODING</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>aa3cd76f47263fa75421227221563be52a4fc90f0b8215c1a776074a9b811303f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARSE</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>aa3cd76f47263fa75421227221563be52a1a76690b59845eddab32bc79058289d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_FOUND</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>aa3cd76f47263fa75421227221563be52af7259a1c186e3fec15cccf5a74bde8d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KEY_NOT_FOUND</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>aa3cd76f47263fa75421227221563be52ab792b51c61c4f346499cf99fc2a77bf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GROUP_NOT_FOUND</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>aa3cd76f47263fa75421227221563be52a95354e82f6ca3510eb23f483a72a5b53</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_VALUE</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>aa3cd76f47263fa75421227221563be52abe33eebc1321861a5ddd669cfdb9db31</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyFileError</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>aecd9898aacf14a6d8b1f7965e04f227a</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyFileError</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>a064f4a933c5c53a16ddb919609f5ddaa</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>a8f004117b26875e67f84d449b788b016</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ListHandle</name>
    <filename>classGlib_1_1ListHandle.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename Tr::CppType</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>a5446b0a372bc91bd093a9ef90f027255</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>a65e57d6418cb163b55b269e6de93c953</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CppType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>ad8ae5781366d8267b9fd06386c80b87a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>a670a10742c5f2fd87605cde6586f3fb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>a3531536dcaf9a63bbe5be4f863e5f791</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Container_Helpers::ListHandleIterator&lt; Tr &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>a74746902e298fc5287d22bdcd0cb7378</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Container_Helpers::ListHandleIterator&lt; Tr &gt;</type>
      <name>iterator</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>affa368849bf881562d690ecefcf3d8e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListHandle</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>a0f9a98f5c1eb08aad145a204de80f586</anchor>
      <arglist>(const Cont &amp;container)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListHandle</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>a36115ce113139df07308f2800f3eb2de</anchor>
      <arglist>(GList *glist, Glib::OwnershipType ownership)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListHandle</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>aa07b040bd5462d9f4693a2b32baa212a</anchor>
      <arglist>(const ListHandle&lt; T, Tr &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ListHandle</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>a3612348868ee4d37f72c52316667cfb8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>a57113d2229789b46519dd317c9974aa2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>a097db2a5e7fecfd5a3284d928243359f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::vector&lt; U &gt;</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>a8f5059c971ac43801449938aa29a97a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::deque&lt; U &gt;</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>a8a049a7eb679ab80f8c548c18a6c25cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::list&lt; U &gt;</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>aaa059de7b066e2ff6907348399259fe3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_to</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>a11503fabd66ec9c728feb8a948f7fd70</anchor>
      <arglist>(Cont &amp;container) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>a26a8bb293d42e19d5e7e35eb27ce1c2d</anchor>
      <arglist>(Out pdest) const</arglist>
    </member>
    <member kind="function">
      <type>GList *</type>
      <name>data</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>ae912fc8bd30d34ddf996251261300533</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>abed720c4369e35e07b0b1ca7fbbd7d9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>a3f10c1704a910414ad837451feaa6b78</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ListHandler</name>
    <filename>classGlib_1_1ListHandler.html</filename>
    <templarg>T</templarg>
    <templarg>Tr</templarg>
    <member kind="typedef">
      <type>typename Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1ListHandler.html</anchorfile>
      <anchor>a98bdbd04ddec672fdf7df65d498f91b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1ListHandler.html</anchorfile>
      <anchor>a9fafa91fa1a4afd5038dcb5a35dc425e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; CppType &gt;</type>
      <name>VectorType</name>
      <anchorfile>classGlib_1_1ListHandler.html</anchorfile>
      <anchor>a92524cb98ea6d50293e483ea2340af12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Glib::Container_Helpers::GListKeeper&lt; Tr &gt;</type>
      <name>GListKeeperType</name>
      <anchorfile>classGlib_1_1ListHandler.html</anchorfile>
      <anchor>a7833be5371659c1f5eac7fa925069436</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Glib::Container_Helpers::ListIterator&lt; Tr &gt;</type>
      <name>ListIteratorType</name>
      <anchorfile>classGlib_1_1ListHandler.html</anchorfile>
      <anchor>a3501a0a0eb97c5029368e3f9a41bf3d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VectorType</type>
      <name>list_to_vector</name>
      <anchorfile>classGlib_1_1ListHandler.html</anchorfile>
      <anchor>abd40edd4565d7b425021821d32e54aad</anchor>
      <arglist>(GList *glist, Glib::OwnershipType ownership)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GListKeeperType</type>
      <name>vector_to_list</name>
      <anchorfile>classGlib_1_1ListHandler.html</anchorfile>
      <anchor>aa3f1c38cb301fa89706d517744b813a1</anchor>
      <arglist>(const VectorType &amp;vector)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::MainContext</name>
    <filename>classGlib_1_1MainContext.html</filename>
    <member kind="typedef">
      <type>Glib::MainContext</type>
      <name>CppObjectType</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a9d00f1f72f13112f5f3f92131440ecc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GMainContext</type>
      <name>BaseObjectType</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>abe4bb57732aa1301e45a0a676cbfc079</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MainContext</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a8eaedd89e2b7404ea364b2f8b4dfa0af</anchor>
      <arglist>(const MainContext &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type>MainContext &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a112cc935c448383449b568056d806db6</anchor>
      <arglist>(const MainContext &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iteration</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>afde2e29315da1239af998f1826ad5e88</anchor>
      <arglist>(bool may_block)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pending</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>acf4631ab57318f39f3e15d98ac1aaa5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wakeup</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a5a5e60018f7549f064e71b34b1668020</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>acquire</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>aa92ee9cfb192aa5eb6c2aa0841068bbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wait</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a68c3d19af76d4b32aeae9d2e4f5c230f</anchor>
      <arglist>(Glib::Cond &amp;cond, Glib::Mutex &amp;mutex)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wait</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>abbb4cc661f4f5773138a733f4a2ed156</anchor>
      <arglist>(Glib::Threads::Cond &amp;cond, Glib::Threads::Mutex &amp;mutex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>ace2d9cdfa27cbe30026932de0526f730</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>prepare</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>af6d1fccb3c1f5aab758d5eb1b3c15d6a</anchor>
      <arglist>(int &amp;priority)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>prepare</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>abd1bdf8fcb0130152237e87942c89ee1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>query</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a49e8976cec1ae4f5b5c30feea6094927</anchor>
      <arglist>(int max_priority, int &amp;timeout, std::vector&lt; PollFD &gt; &amp;fds)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>check</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a8061ef816d51cc27372f016c683cc513</anchor>
      <arglist>(int max_priority, std::vector&lt; PollFD &gt; &amp;fds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispatch</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a5c1f06dbac3bbf771c25ce76af0d4880</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_poll_func</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>ad8383c8f1a1a03b904f9be608ad8eaaf</anchor>
      <arglist>(GPollFunc poll_func)</arglist>
    </member>
    <member kind="function">
      <type>GPollFunc</type>
      <name>get_poll_func</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a34a0b1e31173e163f11053dbcf21b84c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_poll</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a7cdbe7d102a781b6aded3cdda45fef34</anchor>
      <arglist>(PollFD &amp;fd, int priority)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_poll</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a33ea2db49dd93739599d19756c251627</anchor>
      <arglist>(PollFD &amp;fd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invoke</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>ab51154582ff342993ff27fa0024ab38f</anchor>
      <arglist>(const sigc::slot&lt; bool &gt; &amp;slot, int priority=PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>SignalTimeout</type>
      <name>signal_timeout</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>adf307c9028858449e932f5fff100d432</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SignalIdle</type>
      <name>signal_idle</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a2a12990fb67f7b5c1ed61e36952dd827</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SignalIO</type>
      <name>signal_io</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a8c8a4283456eb9036cc09dc3aaf203dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SignalChildWatch</type>
      <name>signal_child_watch</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>ab646f19ce79faa35d97e8af93e6ca6d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>ae152285f41828d272c02ebe683c0d0d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a612d2ceca28cb1a7e41283bb8d7f798f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GMainContext *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a0fbf5178aca208161051097f034d3694</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GMainContext *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>ad9bda857b2cb48321b92ea26302a19b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GMainContext *</type>
      <name>gobj_copy</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a48ea5601091628af19ab583979064b6b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; MainContext &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a31bd96bf707a21c8a3003337dd3af9c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; MainContext &gt;</type>
      <name>get_default</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a1502cbed045a9fb27d18c6975e1d255d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; MainContext &gt;</type>
      <name>wrap</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>ga043c5714afbad2745b27301dd58470a4</anchor>
      <arglist>(GMainContext *gobject, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::MainLoop</name>
    <filename>classGlib_1_1MainLoop.html</filename>
    <member kind="typedef">
      <type>Glib::MainLoop</type>
      <name>CppObjectType</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>ae7021d15507eaff01c941b3d6714a7bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GMainLoop</type>
      <name>BaseObjectType</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>a0462e3a79ddf8626c98c6d571105be9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>a4cc8eeba5dd463189737f859974ae158</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quit</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>ae1a76ab4fe58b23ec8238d6aa40cbab9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_running</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>a9dca351bd77e00412f5e73eacc41c5fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; MainContext &gt;</type>
      <name>get_context</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>a37b86faf3ae28cfa49c15b73b15a24f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>ada693cc033a9c93362535c1a2ffaf2e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>a4a4978d4c69054035a2c1db86a5f1c5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GMainLoop *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>aa53b9c0c885e28390b45e83aef4b2934</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GMainLoop *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>adb698ce51d48a3c08b2930a5b5bfc46e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GMainLoop *</type>
      <name>gobj_copy</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>ab553e32eab47fb1a868672256ddb061c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; MainLoop &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>a37a1dcf3cb167cf02260111f533d0b5b</anchor>
      <arglist>(bool is_running=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; MainLoop &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>ab02f157ce27cd8aa5592eabc739ccdec</anchor>
      <arglist>(const Glib::RefPtr&lt; MainContext &gt; &amp;context, bool is_running=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>depth</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>a023045e5b0069af8260e721fde21f4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; MainLoop &gt;</type>
      <name>wrap</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>ga22ea72cda4ef327ca03fb72d6a3bea89</anchor>
      <arglist>(GMainLoop *gobject, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Markup::AttributeKeyLess</name>
    <filename>classGlib_1_1Markup_1_1AttributeKeyLess.html</filename>
    <member kind="typedef">
      <type>Glib::ustring</type>
      <name>first_argument_type</name>
      <anchorfile>classGlib_1_1Markup_1_1AttributeKeyLess.html</anchorfile>
      <anchor>a16e058ee147bdca4eeee37c69d47a368</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::ustring</type>
      <name>second_argument_type</name>
      <anchorfile>classGlib_1_1Markup_1_1AttributeKeyLess.html</anchorfile>
      <anchor>a959a4f1a2d8fde18c43143b6f769b856</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>result_type</name>
      <anchorfile>classGlib_1_1Markup_1_1AttributeKeyLess.html</anchorfile>
      <anchor>aa640c46e68bcaa011cee7f72284f3b33</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classGlib_1_1Markup_1_1AttributeKeyLess.html</anchorfile>
      <anchor>a35cd8c502cfd5fd2ff95d52087daf099</anchor>
      <arglist>(const Glib::ustring &amp;lhs, const Glib::ustring &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Markup::ParseContext</name>
    <filename>classGlib_1_1Markup_1_1ParseContext.html</filename>
    <base>sigc::trackable</base>
    <member kind="function">
      <type></type>
      <name>ParseContext</name>
      <anchorfile>classGlib_1_1Markup_1_1ParseContext.html</anchorfile>
      <anchor>a550fecdf32455c57fb84e8de8b53ef78</anchor>
      <arglist>(Parser &amp;parser, ParseFlags flags=ParseFlags(0))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParseContext</name>
      <anchorfile>classGlib_1_1Markup_1_1ParseContext.html</anchorfile>
      <anchor>aab85707caea165e45134db53c1391056</anchor>
      <arglist>(const ParseContext &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ParseContext &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Markup_1_1ParseContext.html</anchorfile>
      <anchor>a98e496a2fa09a99d8c5596b70ee159b3</anchor>
      <arglist>(const ParseContext &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParseContext</name>
      <anchorfile>classGlib_1_1Markup_1_1ParseContext.html</anchorfile>
      <anchor>a2a8d2f92de9f264a06f13bb7808aec31</anchor>
      <arglist>(ParseContext &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ParseContext &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Markup_1_1ParseContext.html</anchorfile>
      <anchor>a016cffa79f2296f81925c14466ad311e</anchor>
      <arglist>(ParseContext &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParseContext</name>
      <anchorfile>classGlib_1_1Markup_1_1ParseContext.html</anchorfile>
      <anchor>af549ca123bac2ddafc27980dc03d86e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>classGlib_1_1Markup_1_1ParseContext.html</anchorfile>
      <anchor>a1158f306b9d7211d97fa02fdfbfddf50</anchor>
      <arglist>(const Glib::ustring &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>classGlib_1_1Markup_1_1ParseContext.html</anchorfile>
      <anchor>ae173b1cb8e2c9e9a5ef288006ccdbda7</anchor>
      <arglist>(const char *text_begin, const char *text_end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>end_parse</name>
      <anchorfile>classGlib_1_1Markup_1_1ParseContext.html</anchorfile>
      <anchor>acd4b854317c6c562f55e0595f62aafb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_element</name>
      <anchorfile>classGlib_1_1Markup_1_1ParseContext.html</anchorfile>
      <anchor>a71d8aee79f786196d17d7ab629bbb862</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_line_number</name>
      <anchorfile>classGlib_1_1Markup_1_1ParseContext.html</anchorfile>
      <anchor>aaca36b39ce300a39712be02ab8d3390e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_char_number</name>
      <anchorfile>classGlib_1_1Markup_1_1ParseContext.html</anchorfile>
      <anchor>a617cc9bf2e2f59d1322df0e6cc5fb46f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Parser *</type>
      <name>get_parser</name>
      <anchorfile>classGlib_1_1Markup_1_1ParseContext.html</anchorfile>
      <anchor>a4dcbfbf2ba04a4014378bc9b74bab281</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parser *</type>
      <name>get_parser</name>
      <anchorfile>classGlib_1_1Markup_1_1ParseContext.html</anchorfile>
      <anchor>ad1851c6f2b98c422b775f59546b75528</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Markup::Parser</name>
    <filename>classGlib_1_1Markup_1_1Parser.html</filename>
    <base>sigc::trackable</base>
    <member kind="typedef">
      <type>std::map&lt; Glib::ustring, Glib::ustring, Glib::Markup::AttributeKeyLess &gt;</type>
      <name>AttributeMap</name>
      <anchorfile>classGlib_1_1Markup_1_1Parser.html</anchorfile>
      <anchor>a65bc2af877b64b3077f8635ef81213dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~Parser</name>
      <anchorfile>classGlib_1_1Markup_1_1Parser.html</anchorfile>
      <anchor>a9932a9141e04ece2d063dad4eefa0380</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Parser</name>
      <anchorfile>classGlib_1_1Markup_1_1Parser.html</anchorfile>
      <anchor>ab36908e49f4d711f0490837f4d1cdfe7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Parser</name>
      <anchorfile>classGlib_1_1Markup_1_1Parser.html</anchorfile>
      <anchor>ae2e78c3648e09c27d1669cfecce04512</anchor>
      <arglist>(const Parser &amp;)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Parser &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Markup_1_1Parser.html</anchorfile>
      <anchor>ae280e679437c3171de938d5f32e2f617</anchor>
      <arglist>(const Parser &amp;)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Parser</name>
      <anchorfile>classGlib_1_1Markup_1_1Parser.html</anchorfile>
      <anchor>af253691b2e94f89b795c2003eb88e35c</anchor>
      <arglist>(Parser &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Parser &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Markup_1_1Parser.html</anchorfile>
      <anchor>a2cd16386aad076de304d1f59fec2df64</anchor>
      <arglist>(Parser &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_start_element</name>
      <anchorfile>classGlib_1_1Markup_1_1Parser.html</anchorfile>
      <anchor>ae6d6ae3c4f3aab7c2ee22a079fcb7915</anchor>
      <arglist>(ParseContext &amp;context, const Glib::ustring &amp;element_name, const AttributeMap &amp;attributes)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_end_element</name>
      <anchorfile>classGlib_1_1Markup_1_1Parser.html</anchorfile>
      <anchor>ac0917070686ec7dc72d544feeda24942</anchor>
      <arglist>(ParseContext &amp;context, const Glib::ustring &amp;element_name)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_text</name>
      <anchorfile>classGlib_1_1Markup_1_1Parser.html</anchorfile>
      <anchor>a481ae1c7007fe49e968bfc4393b9ad3d</anchor>
      <arglist>(ParseContext &amp;context, const Glib::ustring &amp;text)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_passthrough</name>
      <anchorfile>classGlib_1_1Markup_1_1Parser.html</anchorfile>
      <anchor>a2f01a92bf1571497c23cfc38137751a5</anchor>
      <arglist>(ParseContext &amp;context, const Glib::ustring &amp;passthrough_text)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_error</name>
      <anchorfile>classGlib_1_1Markup_1_1Parser.html</anchorfile>
      <anchor>addad19d661fea6b71fa0a88cb677b3cc</anchor>
      <arglist>(ParseContext &amp;context, const MarkupError &amp;error)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::MarkupError</name>
    <filename>classGlib_1_1MarkupError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumeration">
      <type></type>
      <name>Code</name>
      <anchorfile>classGlib_1_1MarkupError.html</anchorfile>
      <anchor>a1422c4a583441bbe490b8ed47d7fe1a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_UTF8</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>ga1422c4a583441bbe490b8ed47d7fe1a7a30c6a6f1fcf9249db2692abc39b34c48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EMPTY</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>ga1422c4a583441bbe490b8ed47d7fe1a7a5b3981a2a475d8b0ab4481c931c816dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARSE</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>ga1422c4a583441bbe490b8ed47d7fe1a7adb7227e7bfab9c3409b7f5ce7da8075c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_ELEMENT</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>ga1422c4a583441bbe490b8ed47d7fe1a7a2a63efd807b6e40451b57e128b34d9f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_ATTRIBUTE</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>ga1422c4a583441bbe490b8ed47d7fe1a7aef0a541fa2885ffc56d0703a55afa735</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_CONTENT</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>ga1422c4a583441bbe490b8ed47d7fe1a7a4051754fb4e8f11408fe06445e99761e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MISSING_ATTRIBUTE</name>
      <anchorfile>classGlib_1_1MarkupError.html</anchorfile>
      <anchor>a1422c4a583441bbe490b8ed47d7fe1a7a4870ffe207c8dea8a6eedce9d1402c10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_UTF8</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>ga1422c4a583441bbe490b8ed47d7fe1a7a30c6a6f1fcf9249db2692abc39b34c48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EMPTY</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>ga1422c4a583441bbe490b8ed47d7fe1a7a5b3981a2a475d8b0ab4481c931c816dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARSE</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>ga1422c4a583441bbe490b8ed47d7fe1a7adb7227e7bfab9c3409b7f5ce7da8075c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_ELEMENT</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>ga1422c4a583441bbe490b8ed47d7fe1a7a2a63efd807b6e40451b57e128b34d9f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_ATTRIBUTE</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>ga1422c4a583441bbe490b8ed47d7fe1a7aef0a541fa2885ffc56d0703a55afa735</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_CONTENT</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>ga1422c4a583441bbe490b8ed47d7fe1a7a4051754fb4e8f11408fe06445e99761e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MISSING_ATTRIBUTE</name>
      <anchorfile>classGlib_1_1MarkupError.html</anchorfile>
      <anchor>a1422c4a583441bbe490b8ed47d7fe1a7a4870ffe207c8dea8a6eedce9d1402c10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MarkupError</name>
      <anchorfile>classGlib_1_1MarkupError.html</anchorfile>
      <anchor>a6ae004c83ba5b4a32b3d7df5aa17dd19</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MarkupError</name>
      <anchorfile>classGlib_1_1MarkupError.html</anchorfile>
      <anchor>aa5324bf1f53adf5fed4be252709a1e05</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGlib_1_1MarkupError.html</anchorfile>
      <anchor>a4feb0ebdb305a97de515273bed890529</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::MatchInfo</name>
    <filename>classGlib_1_1MatchInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>MatchInfo</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>a605c6230ebe86112dbe175c41dc24439</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatchInfo</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>aabd63716145ab9997faf5fc074c35c51</anchor>
      <arglist>(GMatchInfo *castitem, bool take_the_ownership=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatchInfo</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>a9b57b2df92f6cc4787c1e8c37a80d076</anchor>
      <arglist>(const MatchInfo &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type>MatchInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>a5620225fb1d3a70cb952502a5c5e32da</anchor>
      <arglist>(const MatchInfo &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatchInfo</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>ac014eedc2e3d93c45aaedb85d58d2d25</anchor>
      <arglist>(MatchInfo &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MatchInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>a973a3f9edda6a82d2e5aa0e7710d648c</anchor>
      <arglist>(MatchInfo &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatchInfo</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>a804a1eee88368392e859e29ed3240016</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GMatchInfo *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>adea5b17c9746bef9e0cdb90a17a87cad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GMatchInfo *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>a32b2eca1dbda8166fccdd2f0a48b60bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Regex &gt;</type>
      <name>get_regex</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>a039847559f658ce78697cfcebed5a10b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Regex &gt;</type>
      <name>get_regex</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>ad1378b59d31a8f082289f395069af8c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_string</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>adaab09d2692a07942dc6122b8f813b1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matches</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>a3ccbb0f4ab7d4eb3ec81471585c568f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>a28d78ac3e2e82907534ca2dadb28108f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_match_count</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>ad06642a0018a26acfa3ba93bc653cc22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_partial_match</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>ad583e456ee8067d9f10757f4df77838f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>expand_references</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>ad851eed313f1a78753447920a053124c</anchor>
      <arglist>(const Glib::ustring &amp;string_to_expand)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>fetch</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>aea45397443944b5c4beac2bc19fe5a99</anchor>
      <arglist>(int match_num)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fetch_pos</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>a59b2852b02e4c8a6300790793611ee44</anchor>
      <arglist>(int match_num, int &amp;start_pos, int &amp;end_pos)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>fetch_named</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>ad599df8b8c141c3216db92a3c2e817d7</anchor>
      <arglist>(const Glib::ustring &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fetch_named_pos</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>a225c431a626d47343c63680534329be1</anchor>
      <arglist>(const Glib::ustring &amp;name, int &amp;start_pos, int &amp;end_pos)</arglist>
    </member>
    <member kind="function">
      <type>Glib::StringArrayHandle</type>
      <name>fetch_all</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>a0a67cb709a290fa830e25a7d5bb8c491</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_gobject</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>aa689c9b63c4f58316e65f9b7a688ab1f</anchor>
      <arglist>(GMatchInfo *castitem, bool take_ownership=true)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GMatchInfo *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>a97b0386692c38045ce3a3ad3349abf8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>take_ownership</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>a76ffcd817000f97214a1a83d5f39a092</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Regex</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>a1f6f7620b7d2218c6c2a6a47f432ea6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Module</name>
    <filename>classGlib_1_1Module.html</filename>
    <member kind="function">
      <type></type>
      <name>Module</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>a43a926bb46ae0ccc4d63217fcc0f31cd</anchor>
      <arglist>(const std::string &amp;file_name, ModuleFlags flags=ModuleFlags(0))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Module</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>a6a5f5c2bbabd94fca2d99bd0ab684959</anchor>
      <arglist>(const Module &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Module &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>ab3997ab22d9cfc3391025ab120677447</anchor>
      <arglist>(const Module &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Module</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>aabf47e1a8d38c9aaddb8bbf13b5a998f</anchor>
      <arglist>(Module &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Module &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>ac61a126d9bdfd77cc91eaf66fc42b4aa</anchor>
      <arglist>(Module &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Module</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>a2b0353fc01a57653c0c60774efde274a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>a8e8b5f66f5a1030ccfc72eb002d28bfe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>make_resident</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>af10c2ab1a24763db0702782d4928c06f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_symbol</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>a75e051b2b161c43c670a68da48977b27</anchor>
      <arglist>(const std::string &amp;symbol_name, void *&amp;symbol) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_name</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>a70f5db099baa77eb6b448cf793230db3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GModule *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>ac3b1db2a5e4dcb2771ce7376ab207951</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GModule *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>aca8878fe9a83b54df45ccbe7f8fa4159</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_supported</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>ad135ce3f9e6b8b7441bd4ca8da2099fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>get_last_error</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>a40669f490a2e90d7c39ede58a7ef5c2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>build_path</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>a5ea64e82147d3ba9edb75f71dfffc87c</anchor>
      <arglist>(const std::string &amp;directory, const std::string &amp;module_name)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GModule *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>a12a777846a059ffc8277ba2f196cb68e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Mutex</name>
    <filename>classGlib_1_1Mutex.html</filename>
    <class kind="class">Glib::Mutex::Lock</class>
    <member kind="function">
      <type></type>
      <name>Mutex</name>
      <anchorfile>classGlib_1_1Mutex.html</anchorfile>
      <anchor>a0e529e72691cbab324f7c70110d95031</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mutex</name>
      <anchorfile>classGlib_1_1Mutex.html</anchorfile>
      <anchor>ad35c70894c232a2d4f1046c423b55982</anchor>
      <arglist>(const Mutex &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Mutex &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Mutex.html</anchorfile>
      <anchor>aeb9c61f6d2c0d53b0dc4a901ca7a1e61</anchor>
      <arglist>(const Mutex &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Mutex</name>
      <anchorfile>classGlib_1_1Mutex.html</anchorfile>
      <anchor>ac1a701f93ad62d97f9c34e98b6b3f7be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>classGlib_1_1Mutex.html</anchorfile>
      <anchor>abd565d2c03dbd7526729b8e56ecc675e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trylock</name>
      <anchorfile>classGlib_1_1Mutex.html</anchorfile>
      <anchor>aa564c753a2e51994c3faee2b1d8c903c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>classGlib_1_1Mutex.html</anchorfile>
      <anchor>a254d550a0e2197d46fa7268475f19824</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GMutex *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Mutex.html</anchorfile>
      <anchor>affe6aea5c5044a51422dd08f2dc06d98</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Mutex::Lock</name>
    <filename>classGlib_1_1Mutex_1_1Lock.html</filename>
    <member kind="function">
      <type></type>
      <name>Lock</name>
      <anchorfile>classGlib_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>ab203085bd7e2fa065f2e770ff501882e</anchor>
      <arglist>(Mutex &amp;mutex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lock</name>
      <anchorfile>classGlib_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>a613aa058601c9f05d5663cfc005093a8</anchor>
      <arglist>(Mutex &amp;mutex, NotLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lock</name>
      <anchorfile>classGlib_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>ae795f9ed3b07389eb856be7610362cde</anchor>
      <arglist>(Mutex &amp;mutex, TryLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Lock</name>
      <anchorfile>classGlib_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>a84f0589eee0654ec60f6773ca9336752</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acquire</name>
      <anchorfile>classGlib_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>a1f892502061ae908452f7eb0ac920065</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>try_acquire</name>
      <anchorfile>classGlib_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>af2c4e590e2c7f3820df5a4fa8293f280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classGlib_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>ac5bfb4e0c5adf5787c5d5570acc1a25c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>locked</name>
      <anchorfile>classGlib_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>a4dceaabdbe0c6d1caa61869102b7fd6f</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::NodeTree</name>
    <filename>classGlib_1_1NodeTree.html</filename>
    <templarg></templarg>
    <member kind="enumeration">
      <type></type>
      <name>TraverseFlags</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gad11179d39a4991e5b09f145d594a450e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAVERSE_LEAVES</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggad11179d39a4991e5b09f145d594a450ea7da8793fdd0c433870a5e6c2e3152898</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAVERSE_NON_LEAVES</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggad11179d39a4991e5b09f145d594a450ea6473ae1f054172ae349d01003fabf37f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAVERSE_ALL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggad11179d39a4991e5b09f145d594a450ea1be75d605b0c93ca7932110467536670</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAVERSE_MASK</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggad11179d39a4991e5b09f145d594a450ea6832c7b45443db4eed6f4cfbd3c04b69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; bool, NodeTree&lt; T &gt; &amp; &gt;</type>
      <name>TraverseFunc</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a4ac30c5e3140bf48cc572a391e6169bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void, NodeTree&lt; T &gt; &amp; &gt;</type>
      <name>ForeachFunc</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a2ec9935fad44739a6e4f051939812ef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAVERSE_LEAVES</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggad11179d39a4991e5b09f145d594a450ea7da8793fdd0c433870a5e6c2e3152898</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAVERSE_NON_LEAVES</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggad11179d39a4991e5b09f145d594a450ea6473ae1f054172ae349d01003fabf37f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAVERSE_ALL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggad11179d39a4991e5b09f145d594a450ea1be75d605b0c93ca7932110467536670</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAVERSE_MASK</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggad11179d39a4991e5b09f145d594a450ea6832c7b45443db4eed6f4cfbd3c04b69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeTree</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a24d62b0424afc56cef69022c36bb16c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeTree</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>aa3909f3fe31329f176925791bbe368fb</anchor>
      <arglist>(const T &amp;the_data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeTree</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a5c27a9b91aa532347e463f3629d20dd6</anchor>
      <arglist>(const NodeTree&lt; T &gt; &amp;node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NodeTree</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a106a3ec5b9d0e0368aa43b4ef9bbe93e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>af265f6f216ea9209cec39992dd0b6175</anchor>
      <arglist>(const NodeTree&lt; T &gt; &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>GNode *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a7571a3bcf836821859f83406179921d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GNode *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a79204c4824ddd98b1b228d5f3fb639c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; &amp;</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a664b7930de8a3d5b2f9f691d6a5d2e44</anchor>
      <arglist>(int position, NodeTree&lt; T &gt; &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; &amp;</type>
      <name>insert_before</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a6c0185ff53ce6f0b6574b4b93c706a29</anchor>
      <arglist>(NodeTree&lt; T &gt; &amp;sibling, NodeTree&lt; T &gt; &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; &amp;</type>
      <name>insert_after</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a3217b1e57993a335daa02b7728385d32</anchor>
      <arglist>(NodeTree&lt; T &gt; &amp;sibling, NodeTree&lt; T &gt; &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; &amp;</type>
      <name>append</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a65a5e8732e2b140233eb1450ab6f35d4</anchor>
      <arglist>(NodeTree&lt; T &gt; &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; &amp;</type>
      <name>prepend</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>ac6d84033181fdbe1d84491bf505d6a5b</anchor>
      <arglist>(NodeTree&lt; T &gt; &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; *</type>
      <name>insert_data</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a988e1fd1fa5a91ac794ea859db7bcc85</anchor>
      <arglist>(int position, const T &amp;the_data)</arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; *</type>
      <name>insert_data_before</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>aaa93210a10a5c3c3b31b728997354f81</anchor>
      <arglist>(NodeTree&lt; T &gt; &amp;sibling, const T &amp;the_data)</arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; *</type>
      <name>append_data</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>ac8d7b7ce8b478dfd87b8227e621b943c</anchor>
      <arglist>(const T &amp;the_data)</arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; *</type>
      <name>prepend_data</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a2db3f440692e02d717bd9a4ec3b6604a</anchor>
      <arglist>(const T &amp;the_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverse_children</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a125bbad27e6950b6d399b9746c9ffb60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; *</type>
      <name>get_root</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>af0b6480bbb3d432db077c8a5a1682135</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const NodeTree&lt; T &gt; *</type>
      <name>get_root</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>ab9ff9f72ba622c70a4fb86e85abc4140</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>traverse</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a88164f3d6446ba63db1c7e633d1f042d</anchor>
      <arglist>(const TraverseFunc &amp;func, TraverseType order=TRAVERSE_IN_ORDER, TraverseFlags flags=TRAVERSE_ALL, int max_depth=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>foreach</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>ac4dae53c67e86593c5533e86a39a7c42</anchor>
      <arglist>(const ForeachFunc &amp;func, TraverseFlags flags=TRAVERSE_ALL)</arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; *</type>
      <name>find_child</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a7a553e458203bcc295bafc07c3662e9c</anchor>
      <arglist>(const T &amp;the_data, TraverseFlags flags=TRAVERSE_ALL)</arglist>
    </member>
    <member kind="function">
      <type>const NodeTree&lt; T &gt; *</type>
      <name>find_child</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a02c9685f50e67b6495a114b35647363b</anchor>
      <arglist>(const T &amp;the_data, TraverseFlags flags=TRAVERSE_ALL) const</arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; *</type>
      <name>find</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a2b7691f32ba16f902124c6c72110d1c5</anchor>
      <arglist>(const T &amp;the_data, TraverseType order=TRAVERSE_IN_ORDER, TraverseFlags flags=TRAVERSE_ALL)</arglist>
    </member>
    <member kind="function">
      <type>const NodeTree&lt; T &gt; *</type>
      <name>find</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>aa29d0eb083fa192a5715d09081b9daa2</anchor>
      <arglist>(const T &amp;the_data, TraverseType order=TRAVERSE_IN_ORDER, TraverseFlags flags=TRAVERSE_ALL) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>child_index</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a59fd4d44ec020b284c85e8ed362abfa2</anchor>
      <arglist>(const T &amp;the_data) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>child_position</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a0bdeba7cd3ab4d8edd985c5fbb624849</anchor>
      <arglist>(const NodeTree&lt; T &gt; &amp;child) const</arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; *</type>
      <name>first_child</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>ab64b292bd177d3d513125953141e3de9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const NodeTree&lt; T &gt; *</type>
      <name>first_child</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a0e75a3b1c293cb1092c2e2dc53acafd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; *</type>
      <name>last_child</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a1ac3c8a683876db6aeb8834baeff29ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const NodeTree&lt; T &gt; *</type>
      <name>last_child</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a2611bea3bcae542fe8ee7cd27c3b0f9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; *</type>
      <name>nth_child</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>ae956914aaa5bba966934bab270f9ee82</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>const NodeTree&lt; T &gt; *</type>
      <name>nth_child</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a8594dd900e23eabf3809e9eda71a1f96</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; *</type>
      <name>first_sibling</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a2021001eee1ff423ec2f0a759170e4fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const NodeTree&lt; T &gt; *</type>
      <name>first_sibling</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a10ab733782982ea970c9d7c0190df83e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; *</type>
      <name>prev_sibling</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a6ed1973b99c794b1e52fdcb2fc41ba19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const NodeTree&lt; T &gt; *</type>
      <name>prev_sibling</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a45284799e0100ad144c114740093a115</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; *</type>
      <name>next_sibling</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a7b973fa140f0a392edf1d9f562c6809a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const NodeTree&lt; T &gt; *</type>
      <name>next_sibling</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a313d62a1eeb33bf67473c9980015f4b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; *</type>
      <name>last_sibling</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a958c88a651bacc95d5ec944bc96df580</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const NodeTree&lt; T &gt; *</type>
      <name>last_sibling</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>abe133a3d0a95bc58898f233b0758e611</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_leaf</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a6db591b00c6b0919a31923a514537d3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_root</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a6850d714664de7b659c5284017314e52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>depth</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a62ba8a4424b492054e4952b0ffb26970</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>node_count</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a1f40dc7a5831e3a0c62a23d8c0357e17</anchor>
      <arglist>(TraverseFlags flags=TRAVERSE_ALL) const</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>child_count</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a631fe16eddf3f5686dcee6b89acffe09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_ancestor</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>ae609145435fb0dab1e7d661c1514cd76</anchor>
      <arglist>(const NodeTree&lt; T &gt; &amp;descendant) const</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>get_max_height</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>ad76a360f0c077fed74a66882cb88590f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlink</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a63d3fec697451d006c61f3b64df22c78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>data</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>ae6159ff89698b40fea479cbafdc4f067</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>data</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a0075ee0e432ff8b12b46b6300fa7e5d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NodeTree&lt; T &gt; *</type>
      <name>parent</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a4503c06f9f714e561f135f4532123e80</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Object</name>
    <filename>classGlib_1_1Object.html</filename>
    <base virtualness="virtual">Glib::ObjectBase</base>
    <member kind="typedef">
      <type>void(*)(gpointer data)</type>
      <name>DestroyNotify</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>a969836f7bf4fec78eb50a1d790304d82</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Object</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>a0127f43140e01d6a6731d42f9419be27</anchor>
      <arglist>(const Object &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Object &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>a7081561a5684709718fdf8c1875c56c0</anchor>
      <arglist>(const Object &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Object</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>a473ee068b40d5c949cee2c721d720c9a</anchor>
      <arglist>(Object &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Object &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>a2855131d475e54294dc34573f12ca9a0</anchor>
      <arglist>(Object &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>get_data</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>a0e6581bcbcc6197cca07df24bb91c492</anchor>
      <arglist>(const QueryQuark &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_data</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>afff7a375a862f3f899daaa99710122fa</anchor>
      <arglist>(const Quark &amp;key, void *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_data</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>a1febe3bae2dd71756e98e523cd33c1b4</anchor>
      <arglist>(const Quark &amp;key, void *data, DestroyNotify notify)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_data</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>aada5b50844bda7ee02bed0ae2a715c00</anchor>
      <arglist>(const QueryQuark &amp;quark)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>steal_data</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>ab454f71bd74403b0cc46d3cbbedd6b0e</anchor>
      <arglist>(const QueryQuark &amp;quark)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Object</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>ad43f7c5ad0336e1eb3af622392a112eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Object</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>a6d72588496bd7ac03f72420021fb94a5</anchor>
      <arglist>(const Glib::ConstructParams &amp;construct_params)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Object</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>a6f490eeaeb71db673c36799a0f729be5</anchor>
      <arglist>(GObject *castitem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~Object</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>a07e5bddabe8d60f751e157f0a41ce265</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Glib::Object &gt;</type>
      <name>wrap</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>ae4dea9a8dc611d6e4400a5b6a3cb4e7f</anchor>
      <arglist>(GObject *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ObjectBase</name>
    <filename>classGlib_1_1ObjectBase.html</filename>
    <base virtualness="virtual">sigc::trackable</base>
    <member kind="function">
      <type></type>
      <name>ObjectBase</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>aaf0e140e7192dcecddd9f57c46825434</anchor>
      <arglist>(const ObjectBase &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ObjectBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>a15f8834a320eac98dc1c1b8a9a2fd4c1</anchor>
      <arglist>(const ObjectBase &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_property_value</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>aab599d3eec4b4a9ddc95ccdc6100053d</anchor>
      <arglist>(const Glib::ustring &amp;property_name, const Glib::ValueBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_property_value</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>a068db9877f35d20af339d40be339dafe</anchor>
      <arglist>(const Glib::ustring &amp;property_name, Glib::ValueBase &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_property</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>ad37844f7ea2c0091a22d011e04c48820</anchor>
      <arglist>(const Glib::ustring &amp;property_name, const PropertyType &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_property</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>a9748be779dfaa04b45d6f2659dc05316</anchor>
      <arglist>(const Glib::ustring &amp;property_name, PropertyType &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_property_changed</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>adc6c1e8f094275114d6e2c3ef3a33f98</anchor>
      <arglist>(const Glib::ustring &amp;property_name, const sigc::slot&lt; void &gt; &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_property_changed</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>a9fff4abb6ecc939866a6ff5d32808221</anchor>
      <arglist>(const Glib::ustring &amp;property_name, sigc::slot&lt; void &gt; &amp;&amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect_property_changed_with_return</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>a896d7773c00bd2dcd310c861282ee8d1</anchor>
      <arglist>(const Glib::ustring &amp;property_name, const sigc::slot&lt; void &gt; &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect_property_changed_with_return</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>a00f0e2119fbb42efe42d66b8188a0daf</anchor>
      <arglist>(const Glib::ustring &amp;property_name, sigc::slot&lt; void &gt; &amp;&amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeze_notify</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>a6e9e13b75f116c20212d318204ce8ea3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>thaw_notify</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>a1bd8ea7bd8c4084ade6b3c27dddf06a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>ada6a3c2a9b050d3285bac59287b3559f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unreference</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>ad7948b31b97a978062557a765534790c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GObject *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>a4c6efc18be8cb9c56e58fc0bd20fafbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GObject *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>a2b7010748d60e770e9e0b3d65c100cf2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GObject *</type>
      <name>gobj_copy</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>a4f9a2b4640a4a4c0c21cdecd98f84b1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ObjectBase</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>a27d3451d9ca28d6a2f00838d7c56d545</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ObjectBase</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>ad4ef18214894c6874579313ab21d1018</anchor>
      <arglist>(const char *custom_type_name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ObjectBase</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>a3d59b4d85b0ee72a727e6b2e1b31a2ff</anchor>
      <arglist>(const std::type_info &amp;custom_type_info)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ObjectBase</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>a7e2e177061f6a6e09c4cf3da49c6dfd3</anchor>
      <arglist>(ObjectBase &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ObjectBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>a2e968f118314ba4d5debfd2850d18003</anchor>
      <arglist>(ObjectBase &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual</type>
      <name>~ObjectBase</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>ae56ec45e9ebeaacf24be4fb54ed2eea3</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>a3faafb14c4f0ca60fbf0f5f5c4d549d0</anchor>
      <arglist>(GObject *castitem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize_move</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>a44ddc123cd98ed0083aa06364365c8d3</anchor>
      <arglist>(GObject *castitem, Glib::ObjectBase *previous_wrapper)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::OptionContext</name>
    <filename>classGlib_1_1OptionContext.html</filename>
    <member kind="typedef">
      <type>sigc::slot&lt; Glib::ustring, const Glib::ustring &amp; &gt;</type>
      <name>SlotTranslate</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>a836b6cc193c8b5b2bab0c8a938bcba9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionContext</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>ad313150579fe7f769f1c5863f8867eab</anchor>
      <arglist>(const Glib::ustring &amp;parameter_string=Glib::ustring())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionContext</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>ae84b2223d374cf0756af7a08e6df811f</anchor>
      <arglist>(GOptionContext *castitem, bool take_ownership=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionContext</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>a617dba4224289c92cfb6e69005b65501</anchor>
      <arglist>(OptionContext &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>OptionContext &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>a845b821df8934ff459a454233042aa69</anchor>
      <arglist>(OptionContext &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OptionContext</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>a5871acd083020c408dcd2d399f981fd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_help_enabled</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>ae31d88f6e0c9a3211af390e0d3f976c6</anchor>
      <arglist>(bool help_enabled=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_help_enabled</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>afa24110423a1e8722afeb5ec0254f57a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_ignore_unknown_options</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>a022f6c50d608b2fabdf7287caf588d73</anchor>
      <arglist>(bool ignore_unknown=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_ignore_unknown_options</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>abef0d91866a1475953950b44d74e7256</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_strict_posix</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>a348f5861f7ec2bdf7e9f707469bf58a0</anchor>
      <arglist>(bool strict_posix=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_strict_posix</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>afce7cf00e9a61949873bd4924a635db9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parse</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>a08ab225e3a4be10364f32948a6532726</anchor>
      <arglist>(int &amp;argc, char **&amp;argv)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parse</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>a04b835ea562e10f28f5a2c6fda7637c3</anchor>
      <arglist>(char **&amp;argv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_group</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>a2c81f14e99f9c84406f200286673b14e</anchor>
      <arglist>(OptionGroup &amp;group)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_main_group</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>ae6d57268ad6a1f05c5d6175ab8e11181</anchor>
      <arglist>(OptionGroup &amp;group)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_help</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>a3b2342d7b6ff2baf6be8112446a5002a</anchor>
      <arglist>(bool main_help, const OptionGroup &amp;group) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_help</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>a7365c6adc6613cece69265548cad0c02</anchor>
      <arglist>(bool main_help=true) const</arglist>
    </member>
    <member kind="function">
      <type>GOptionContext *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>af87e77207d4a437598f485fe0e7294e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GOptionContext *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>a9a6b773cc24aca2bcc66c4025d7ef06b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_summary</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>abb126e75fdbd6ad904918313117fbeee</anchor>
      <arglist>(const Glib::ustring &amp;summary)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_summary</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>ade29ec4606a14727d78c0ca9de67eaba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_description</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>a3d89734e8546a0e6051320a79ccf0816</anchor>
      <arglist>(const Glib::ustring &amp;description)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_description</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>a68e797d2c7f0b48c5cca605bf5086eec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_translation_domain</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>a579ef7926ca89106eea5b3832eb5db15</anchor>
      <arglist>(const Glib::ustring &amp;domain)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_translate_func</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>acbb334944cbe596a7c1e51baa05b9adf</anchor>
      <arglist>(const SlotTranslate &amp;slot)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GOptionContext *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>ae5f0ab1971db754356144f720fa47ded</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>has_ownership_</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>aaf708c17aa94584e258cffd53b6344c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::OptionEntry</name>
    <filename>classGlib_1_1OptionEntry.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Flags</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a5b550ab1ac9884bcc614653c9cf98280</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLAG_HIDDEN</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a5b550ab1ac9884bcc614653c9cf98280adfc734d486122379ef2c37d9e8861644</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLAG_IN_MAIN</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a5b550ab1ac9884bcc614653c9cf98280ab8f1e9721d33857527515dbadd3f822f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLAG_REVERSE</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a5b550ab1ac9884bcc614653c9cf98280a24a4642bdefb942e56482f6b7d05561e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLAG_NO_ARG</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a5b550ab1ac9884bcc614653c9cf98280a69aead0991d1cd5b29cd394c8174f25d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLAG_FILENAME</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a5b550ab1ac9884bcc614653c9cf98280abc30a617bee9b427293fdfc13f546955</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLAG_OPTIONAL_ARG</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a5b550ab1ac9884bcc614653c9cf98280ae7b4fc1fd7b9f41c6a91c48c8978e4ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLAG_NOALIAS</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a5b550ab1ac9884bcc614653c9cf98280a9672830777db41b709ca74252f3afd27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLAG_HIDDEN</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a5b550ab1ac9884bcc614653c9cf98280adfc734d486122379ef2c37d9e8861644</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLAG_IN_MAIN</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a5b550ab1ac9884bcc614653c9cf98280ab8f1e9721d33857527515dbadd3f822f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLAG_REVERSE</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a5b550ab1ac9884bcc614653c9cf98280a24a4642bdefb942e56482f6b7d05561e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLAG_NO_ARG</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a5b550ab1ac9884bcc614653c9cf98280a69aead0991d1cd5b29cd394c8174f25d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLAG_FILENAME</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a5b550ab1ac9884bcc614653c9cf98280abc30a617bee9b427293fdfc13f546955</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLAG_OPTIONAL_ARG</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a5b550ab1ac9884bcc614653c9cf98280ae7b4fc1fd7b9f41c6a91c48c8978e4ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLAG_NOALIAS</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a5b550ab1ac9884bcc614653c9cf98280a9672830777db41b709ca74252f3afd27</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionEntry</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>aaeec52f8bd17268b8bba6e4746def3c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionEntry</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>afa83c0423e913e528cb073b850bdf06a</anchor>
      <arglist>(const OptionEntry &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionEntry</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>ab45f295b7df27edae6bf7cc9d101c533</anchor>
      <arglist>(OptionEntry &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>OptionEntry &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>acc3778ce061bc80e6dd6428b6e470edb</anchor>
      <arglist>(OptionEntry &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OptionEntry</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a8f84e2bdc3577ed1c1a2cb7e344eca0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OptionEntry &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>ae3070f22bf99398c42b51b71e44f8a7b</anchor>
      <arglist>(const OptionEntry &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_long_name</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a25cee642ffae81d259d160a9e4b85674</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_long_name</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a31a2a6dbb9cf995a5583fc5d18724ecd</anchor>
      <arglist>(const Glib::ustring &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>gchar</type>
      <name>get_short_name</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>ac17d390a60e18f806af9194e59e55a2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_short_name</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>ac4e352caaf4a977dbbaf3352eed2e6fb</anchor>
      <arglist>(const gchar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_flags</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a7c911f9dbc13388e749959d42a0b7b2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_flags</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a99ab7ba877bae068713085810d908e20</anchor>
      <arglist>(const int &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_description</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>afa3455a4074c46dbbf26f726333e99ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_description</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a62bc509cca2829535c1e65db5100fc05</anchor>
      <arglist>(const Glib::ustring &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_arg_description</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a61e1372fdb033cc70302cdf3d035ced2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_arg_description</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>ab9f1af6b5c5a8425dd357ccc07262eb2</anchor>
      <arglist>(const Glib::ustring &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>GOptionEntry *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a2c861668e4a9d4601e5b95ed05d05bc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GOptionEntry *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a2ac51e0879e806aff923c1bbcb31807f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>enum Glib::OptionEntry::Flags</type>
      <name>GOptionFlags</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a309fc51cdc8e6815b034e8255a4e7852</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GOptionEntry *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>ae69569ab0df3c4f00261d7b5d3230721</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::OptionError</name>
    <filename>classGlib_1_1OptionError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumeration">
      <type></type>
      <name>Code</name>
      <anchorfile>classGlib_1_1OptionError.html</anchorfile>
      <anchor>a3ea5eb98a6e3179cf30c61aec0f92e0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_OPTION</name>
      <anchorfile>classGlib_1_1OptionError.html</anchorfile>
      <anchor>a3ea5eb98a6e3179cf30c61aec0f92e0fa192119844073854cc7553bd3d4fbc7d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_VALUE</name>
      <anchorfile>classGlib_1_1OptionError.html</anchorfile>
      <anchor>a3ea5eb98a6e3179cf30c61aec0f92e0fa2de0112f0a9199f6cccea8bed8a15ed4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchorfile>classGlib_1_1OptionError.html</anchorfile>
      <anchor>a3ea5eb98a6e3179cf30c61aec0f92e0fa8204758ea074f0a7ce42a1bf8162d8e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_OPTION</name>
      <anchorfile>classGlib_1_1OptionError.html</anchorfile>
      <anchor>a3ea5eb98a6e3179cf30c61aec0f92e0fa192119844073854cc7553bd3d4fbc7d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_VALUE</name>
      <anchorfile>classGlib_1_1OptionError.html</anchorfile>
      <anchor>a3ea5eb98a6e3179cf30c61aec0f92e0fa2de0112f0a9199f6cccea8bed8a15ed4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchorfile>classGlib_1_1OptionError.html</anchorfile>
      <anchor>a3ea5eb98a6e3179cf30c61aec0f92e0fa8204758ea074f0a7ce42a1bf8162d8e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionError</name>
      <anchorfile>classGlib_1_1OptionError.html</anchorfile>
      <anchor>abcab818ae38ae2a190b74c04f7a62794</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionError</name>
      <anchorfile>classGlib_1_1OptionError.html</anchorfile>
      <anchor>ace45974f225f53b08db04bb455c05b1f</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGlib_1_1OptionError.html</anchorfile>
      <anchor>a141e5029130c9d33d37679b653e2a098</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::OptionGroup</name>
    <filename>classGlib_1_1OptionGroup.html</filename>
    <member kind="typedef">
      <type>sigc::slot&lt; Glib::ustring, const Glib::ustring &amp; &gt;</type>
      <name>SlotTranslate</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>a482b41d52318dc7efeba799b4e96aca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; bool, const Glib::ustring &amp;, const Glib::ustring &amp;, bool &gt;</type>
      <name>SlotOptionArgString</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>acb289ddf03f658fb374cd5ee86e94a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; bool, const Glib::ustring &amp;, const std::string &amp;, bool &gt;</type>
      <name>SlotOptionArgFilename</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>a6ff7dce25c4266aedd7c2fcc941f5284</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Glib::ustring &gt;</type>
      <name>vecustrings</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>a8134096169ca097413795bf36d744b7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>vecstrings</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>a3f16057fa87fd919a44ee18fdd20fecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionGroup</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>ade69f722319b9fa89f310ffecc8f59b5</anchor>
      <arglist>(const Glib::ustring &amp;name, const Glib::ustring &amp;description, const Glib::ustring &amp;help_description=Glib::ustring())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionGroup</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>aabf5a3a067f992f0fd400bf7906c2f76</anchor>
      <arglist>(GOptionGroup *castitem)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionGroup</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>af2502ded2d2d2e8943f02fe0fd2bb7dc</anchor>
      <arglist>(OptionGroup &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>OptionGroup &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>a33f23a4ded8e96fe104f2b91fe857202</anchor>
      <arglist>(OptionGroup &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OptionGroup</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>a101d202836391404add68fe65d7d9767</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>on_pre_parse</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>aaa9f099207de7735453997ad6234c8b8</anchor>
      <arglist>(OptionContext &amp;context, OptionGroup &amp;group)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>on_post_parse</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>abe8a3bc20f23cbc677c042773b6a092f</anchor>
      <arglist>(OptionContext &amp;context, OptionGroup &amp;group)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>on_error</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>a7cdff34c14d75c57e265a416925bad0f</anchor>
      <arglist>(OptionContext &amp;context, OptionGroup &amp;group)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_entry</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>abe772a54bbad294d847b77349e86c8e9</anchor>
      <arglist>(const OptionEntry &amp;entry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_entry</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>a21c7501faad777f5fcd0b61d7c4d5395</anchor>
      <arglist>(const OptionEntry &amp;entry, bool &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_entry</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>a6d9cf49759c1162a0b6b37284aa62494</anchor>
      <arglist>(const OptionEntry &amp;entry, int &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_entry</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>af7741ffa0cec2c9d53ed3db902616a49</anchor>
      <arglist>(const OptionEntry &amp;entry, double &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_entry</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>ab30d8b251e06607e8d2ca062609477f3</anchor>
      <arglist>(const OptionEntry &amp;entry, Glib::ustring &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_entry_filename</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>a533fdd3d3360a9d3766dcaa60f184aee</anchor>
      <arglist>(const OptionEntry &amp;entry, std::string &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_entry</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>af198c0dd532f1635aec904282109f130</anchor>
      <arglist>(const OptionEntry &amp;entry, vecustrings &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_entry_filename</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>af983b4762a0ceb7fc884f75ad5234ef8</anchor>
      <arglist>(const OptionEntry &amp;entry, vecstrings &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_entry</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>a8619d19917397044c857c4bdf7e05cf5</anchor>
      <arglist>(const OptionEntry &amp;entry, const SlotOptionArgString &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_entry_filename</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>a518bd89309591b0189cfab7d7a3965c3</anchor>
      <arglist>(const OptionEntry &amp;entry, const SlotOptionArgFilename &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_translate_func</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>a6cbd659fca7f64f630c294310eeeef39</anchor>
      <arglist>(const SlotTranslate &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_translation_domain</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>ade081f34243662912f557521f7175606</anchor>
      <arglist>(const Glib::ustring &amp;domain)</arglist>
    </member>
    <member kind="function">
      <type>GOptionGroup *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>afdf7f68b05a285cc5096a2a342d48bf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GOptionGroup *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>a39764ada7cd4c632e4eb4e09341dcf3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GOptionGroup *</type>
      <name>gobj_give_ownership</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>a675828be7840ff47c049a700297516e6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::PatternSpec</name>
    <filename>classGlib_1_1PatternSpec.html</filename>
    <member kind="function">
      <type></type>
      <name>PatternSpec</name>
      <anchorfile>classGlib_1_1PatternSpec.html</anchorfile>
      <anchor>afc18aa40675afcdf3e62c6f5ac4d67e9</anchor>
      <arglist>(const Glib::ustring &amp;pattern)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PatternSpec</name>
      <anchorfile>classGlib_1_1PatternSpec.html</anchorfile>
      <anchor>ab8c5ce3d5297d01f0db9055bfa61d9fa</anchor>
      <arglist>(GPatternSpec *gobject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PatternSpec</name>
      <anchorfile>classGlib_1_1PatternSpec.html</anchorfile>
      <anchor>ab6be8de8faeee3410d938dcb55076082</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PatternSpec</name>
      <anchorfile>classGlib_1_1PatternSpec.html</anchorfile>
      <anchor>ac692cb7b9a239cc975e9ec0678e90dea</anchor>
      <arglist>(const PatternSpec &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>PatternSpec &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1PatternSpec.html</anchorfile>
      <anchor>ad36c41cd250bb8011ff18a5f531bbf08</anchor>
      <arglist>(const PatternSpec &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>match</name>
      <anchorfile>classGlib_1_1PatternSpec.html</anchorfile>
      <anchor>ae14da608eb899aa5a9dbf610b739597a</anchor>
      <arglist>(const Glib::ustring &amp;str) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>match</name>
      <anchorfile>classGlib_1_1PatternSpec.html</anchorfile>
      <anchor>a855e543332214850960689405d82f375</anchor>
      <arglist>(const Glib::ustring &amp;str, const Glib::ustring &amp;str_reversed) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1PatternSpec.html</anchorfile>
      <anchor>af096664f11d0216a9ff03f23bb24ff02</anchor>
      <arglist>(const PatternSpec &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1PatternSpec.html</anchorfile>
      <anchor>afab99bb265991b7b1397668c97965bbd</anchor>
      <arglist>(const PatternSpec &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>GPatternSpec *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1PatternSpec.html</anchorfile>
      <anchor>a6c01de7b965dd5bbe2bdce8527ac9af5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GPatternSpec *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1PatternSpec.html</anchorfile>
      <anchor>aa54ed092a1fbd6672908d9f741525f26</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::PollFD</name>
    <filename>classGlib_1_1PollFD.html</filename>
    <member kind="typedef">
      <type>decltype(GPollFD::fd)</type>
      <name>fd_t</name>
      <anchorfile>classGlib_1_1PollFD.html</anchorfile>
      <anchor>a51443c2c2c2cf4a4ec49d58e81a01a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PollFD</name>
      <anchorfile>classGlib_1_1PollFD.html</anchorfile>
      <anchor>a7ae711b0cc1ce1b0cd467381955dc62e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PollFD</name>
      <anchorfile>classGlib_1_1PollFD.html</anchorfile>
      <anchor>a5c91100a8052486a1ac89d8e1d9a326a</anchor>
      <arglist>(fd_t fd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PollFD</name>
      <anchorfile>classGlib_1_1PollFD.html</anchorfile>
      <anchor>a9818afc982a434f43e9296223c62bdb7</anchor>
      <arglist>(fd_t fd, IOCondition events)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_fd</name>
      <anchorfile>classGlib_1_1PollFD.html</anchorfile>
      <anchor>a2bd1f7dd66ac639969885af199071b53</anchor>
      <arglist>(fd_t fd)</arglist>
    </member>
    <member kind="function">
      <type>fd_t</type>
      <name>get_fd</name>
      <anchorfile>classGlib_1_1PollFD.html</anchorfile>
      <anchor>af887810782b6415e71b36aa3813150c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_events</name>
      <anchorfile>classGlib_1_1PollFD.html</anchorfile>
      <anchor>a0ff97568715e76d4cc57f8099f0c2b38</anchor>
      <arglist>(IOCondition events)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition</type>
      <name>get_events</name>
      <anchorfile>classGlib_1_1PollFD.html</anchorfile>
      <anchor>a0bb079c3002e1038243f74eeae395f34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_revents</name>
      <anchorfile>classGlib_1_1PollFD.html</anchorfile>
      <anchor>a6cdd3635d279b0ec322dca7604e692c9</anchor>
      <arglist>(IOCondition revents)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition</type>
      <name>get_revents</name>
      <anchorfile>classGlib_1_1PollFD.html</anchorfile>
      <anchor>a432ae52fc5fea9d684c23d5f321fe5f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GPollFD *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1PollFD.html</anchorfile>
      <anchor>a2ecf367bcde791507e699bac3a38bb1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GPollFD *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1PollFD.html</anchorfile>
      <anchor>a103a2f6de3238fedb2d7bdaf931fdf5d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Private</name>
    <filename>classGlib_1_1Private.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>void(*)(void *)</type>
      <name>DestructorFunc</name>
      <anchorfile>classGlib_1_1Private.html</anchorfile>
      <anchor>aebd116bc829533cf046a34b5db047d56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Private</name>
      <anchorfile>classGlib_1_1Private.html</anchorfile>
      <anchor>a89cc6e64ea054565b5608530869196c7</anchor>
      <arglist>(const Private&lt; T &gt; &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Private&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Private.html</anchorfile>
      <anchor>aad6529681e114ebab1d0f96c31461e78</anchor>
      <arglist>(const Private&lt; T &gt; &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Private</name>
      <anchorfile>classGlib_1_1Private.html</anchorfile>
      <anchor>a398953b6c89edf91b5b1be28f453006d</anchor>
      <arglist>(DestructorFunc destructor_func=&amp;Private&lt; T &gt;::delete_ptr)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Private.html</anchorfile>
      <anchor>a7d643790e7724ef7f63ca0b2f9309768</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Private.html</anchorfile>
      <anchor>a7e4636b15cd3f43010fadea300791dd2</anchor>
      <arglist>(T *data)</arglist>
    </member>
    <member kind="function">
      <type>GPrivate *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Private.html</anchorfile>
      <anchor>abc4b19a17ca795b2878b5fd5a14f6fc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>delete_ptr</name>
      <anchorfile>classGlib_1_1Private.html</anchorfile>
      <anchor>ac98db7269b43438fb45313092ee80cb6</anchor>
      <arglist>(void *data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Property</name>
    <filename>classGlib_1_1Property.html</filename>
    <templarg>T</templarg>
    <base>Glib::PropertyBase</base>
    <member kind="typedef">
      <type>T</type>
      <name>PropertyType</name>
      <anchorfile>classGlib_1_1Property.html</anchorfile>
      <anchor>a641a8d8d87c23316ba190d1aae1c3c02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Value&lt; T &gt;</type>
      <name>ValueType</name>
      <anchorfile>classGlib_1_1Property.html</anchorfile>
      <anchor>aefb77581463227e27c2bfdc2c3edf663</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Property</name>
      <anchorfile>classGlib_1_1Property.html</anchorfile>
      <anchor>a3a9605f1efc1c170059804bed07a41ac</anchor>
      <arglist>(Glib::Object &amp;object, const Glib::ustring &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Property</name>
      <anchorfile>classGlib_1_1Property.html</anchorfile>
      <anchor>a9bd490d36e1068ba4c1225d941530603</anchor>
      <arglist>(Glib::Object &amp;object, const Glib::ustring &amp;name, const PropertyType &amp;default_value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Property</name>
      <anchorfile>classGlib_1_1Property.html</anchorfile>
      <anchor>a8b7421fd5be8e40be6dc4e96d230e0cd</anchor>
      <arglist>(Glib::Object &amp;object, const Glib::ustring &amp;name, const Glib::ustring &amp;nick, const Glib::ustring &amp;blurb, Glib::ParamFlags flags)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Property</name>
      <anchorfile>classGlib_1_1Property.html</anchorfile>
      <anchor>af382cc7482a042796cb764b898529ccd</anchor>
      <arglist>(Glib::Object &amp;object, const Glib::ustring &amp;name, const PropertyType &amp;default_value, const Glib::ustring &amp;nick, const Glib::ustring &amp;blurb, Glib::ParamFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classGlib_1_1Property.html</anchorfile>
      <anchor>a19fbb8ff9bad70974e28e487284a48db</anchor>
      <arglist>(const PropertyType &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>PropertyType</type>
      <name>get_value</name>
      <anchorfile>classGlib_1_1Property.html</anchorfile>
      <anchor>a733cef0befbf92fd2d31670d9618f641</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Property&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Property.html</anchorfile>
      <anchor>a07169f608d8d53833c305da5936a922e</anchor>
      <arglist>(const PropertyType &amp;data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator PropertyType</name>
      <anchorfile>classGlib_1_1Property.html</anchorfile>
      <anchor>ab1533103b19348ec0329405939ec0dc2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; T &gt;</type>
      <name>get_proxy</name>
      <anchorfile>classGlib_1_1Property.html</anchorfile>
      <anchor>a50f48c982d6d2fbd1fcf60bd6965a34f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Property_ReadOnly</name>
    <filename>classGlib_1_1Property__ReadOnly.html</filename>
    <templarg></templarg>
    <base>Glib::PropertyBase</base>
    <member kind="typedef">
      <type>T</type>
      <name>PropertyType</name>
      <anchorfile>classGlib_1_1Property__ReadOnly.html</anchorfile>
      <anchor>ac9391f4f69f1b4a8e2158b917af45371</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Value&lt; T &gt;</type>
      <name>ValueType</name>
      <anchorfile>classGlib_1_1Property__ReadOnly.html</anchorfile>
      <anchor>a803e397e8a05186d703114d804550dc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Property_ReadOnly</name>
      <anchorfile>classGlib_1_1Property__ReadOnly.html</anchorfile>
      <anchor>a2e5173f88faac33a1fa0543bc09dd1a2</anchor>
      <arglist>(Glib::Object &amp;object, const Glib::ustring &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Property_ReadOnly</name>
      <anchorfile>classGlib_1_1Property__ReadOnly.html</anchorfile>
      <anchor>acf64d964d89d367330619cd1559e155f</anchor>
      <arglist>(Glib::Object &amp;object, const Glib::ustring &amp;name, const PropertyType &amp;default_value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Property_ReadOnly</name>
      <anchorfile>classGlib_1_1Property__ReadOnly.html</anchorfile>
      <anchor>a4821627a35e562575c415c1801ef6299</anchor>
      <arglist>(Glib::Object &amp;object, const Glib::ustring &amp;name, const Glib::ustring &amp;nick, const Glib::ustring &amp;blurb, Glib::ParamFlags flags)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Property_ReadOnly</name>
      <anchorfile>classGlib_1_1Property__ReadOnly.html</anchorfile>
      <anchor>ac28fe56b82e6bfa7d3bbd7730fb22b90</anchor>
      <arglist>(Glib::Object &amp;object, const Glib::ustring &amp;name, const PropertyType &amp;default_value, const Glib::ustring &amp;nick, const Glib::ustring &amp;blurb, Glib::ParamFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>PropertyType</type>
      <name>get_value</name>
      <anchorfile>classGlib_1_1Property__ReadOnly.html</anchorfile>
      <anchor>ae23d4886913d9cec59f136ba2997e5d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator PropertyType</name>
      <anchorfile>classGlib_1_1Property__ReadOnly.html</anchorfile>
      <anchor>aa277cd07ea9f7ffbec1d73400738c657</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; T &gt;</type>
      <name>get_proxy</name>
      <anchorfile>classGlib_1_1Property__ReadOnly.html</anchorfile>
      <anchor>a2818eba4438755a4c439f5cc6e9ec5d4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Property_WriteOnly</name>
    <filename>classGlib_1_1Property__WriteOnly.html</filename>
    <templarg></templarg>
    <base>Glib::PropertyBase</base>
    <member kind="typedef">
      <type>T</type>
      <name>PropertyType</name>
      <anchorfile>classGlib_1_1Property__WriteOnly.html</anchorfile>
      <anchor>a58ede2fa1e3982cfaf68eea745395982</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Value&lt; T &gt;</type>
      <name>ValueType</name>
      <anchorfile>classGlib_1_1Property__WriteOnly.html</anchorfile>
      <anchor>a7c1f1e2b527fd628d202241ec73ffcee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Property_WriteOnly</name>
      <anchorfile>classGlib_1_1Property__WriteOnly.html</anchorfile>
      <anchor>ad4f333bf8fd39f433430f2ff72f70551</anchor>
      <arglist>(Glib::Object &amp;object, const Glib::ustring &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Property_WriteOnly</name>
      <anchorfile>classGlib_1_1Property__WriteOnly.html</anchorfile>
      <anchor>aa3dbb9b2b2dc7bc1edc98966beffe339</anchor>
      <arglist>(Glib::Object &amp;object, const Glib::ustring &amp;name, const PropertyType &amp;default_value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Property_WriteOnly</name>
      <anchorfile>classGlib_1_1Property__WriteOnly.html</anchorfile>
      <anchor>ac302110c870e8f4ff53a746560526ed5</anchor>
      <arglist>(Glib::Object &amp;object, const Glib::ustring &amp;name, const Glib::ustring &amp;nick, const Glib::ustring &amp;blurb, Glib::ParamFlags flags)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Property_WriteOnly</name>
      <anchorfile>classGlib_1_1Property__WriteOnly.html</anchorfile>
      <anchor>aa5c28aec756c3f3b669ff36f68de3bae</anchor>
      <arglist>(Glib::Object &amp;object, const Glib::ustring &amp;name, const PropertyType &amp;default_value, const Glib::ustring &amp;nick, const Glib::ustring &amp;blurb, Glib::ParamFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classGlib_1_1Property__WriteOnly.html</anchorfile>
      <anchor>a3ed28e45b8d12dceabe2ec3cc9888747</anchor>
      <arglist>(const PropertyType &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>Property_WriteOnly&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Property__WriteOnly.html</anchorfile>
      <anchor>a373f809d183e9843f65500b8fce05a5b</anchor>
      <arglist>(const PropertyType &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_WriteOnly&lt; T &gt;</type>
      <name>get_proxy</name>
      <anchorfile>classGlib_1_1Property__WriteOnly.html</anchorfile>
      <anchor>a5ba225ff3e850f0215615c4634ddab73</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::PropertyBase</name>
    <filename>classGlib_1_1PropertyBase.html</filename>
    <member kind="function">
      <type></type>
      <name>PropertyBase</name>
      <anchorfile>classGlib_1_1PropertyBase.html</anchorfile>
      <anchor>a7cf88a19d24b3ea2deb0c4360be3a7bd</anchor>
      <arglist>(const PropertyBase &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>PropertyBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1PropertyBase.html</anchorfile>
      <anchor>a56aea52827ff5768b9a2fcf0cb92c28c</anchor>
      <arglist>(const PropertyBase &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_name</name>
      <anchorfile>classGlib_1_1PropertyBase.html</anchorfile>
      <anchor>af161a47c2a095fa5599263d141635664</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_nick</name>
      <anchorfile>classGlib_1_1PropertyBase.html</anchorfile>
      <anchor>a248073ed035cb0ed5cc71e1424d6f597</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_blurb</name>
      <anchorfile>classGlib_1_1PropertyBase.html</anchorfile>
      <anchor>af458c79f67fe1ca9b80d943d512d425e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>notify</name>
      <anchorfile>classGlib_1_1PropertyBase.html</anchorfile>
      <anchor>ada1c2294c7b3b159af8b5dad1ad02c16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PropertyBase</name>
      <anchorfile>classGlib_1_1PropertyBase.html</anchorfile>
      <anchor>aa6c0b97d8561766b8f4a9f5a183c9f00</anchor>
      <arglist>(Glib::Object &amp;object, GType value_type)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~PropertyBase</name>
      <anchorfile>classGlib_1_1PropertyBase.html</anchorfile>
      <anchor>a71e3756ad32d5a6d284d9ed96cec4878</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>lookup_property</name>
      <anchorfile>classGlib_1_1PropertyBase.html</anchorfile>
      <anchor>a4a0e9de0bb457270b6c307d14e9c5a02</anchor>
      <arglist>(const Glib::ustring &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>install_property</name>
      <anchorfile>classGlib_1_1PropertyBase.html</anchorfile>
      <anchor>a5d63e95270aa1aa16f9a9c896897184c</anchor>
      <arglist>(GParamSpec *param_spec)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>get_name_internal</name>
      <anchorfile>classGlib_1_1PropertyBase.html</anchorfile>
      <anchor>a84bc1a13325de2203875137bd7681c99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Glib::Object *</type>
      <name>object_</name>
      <anchorfile>classGlib_1_1PropertyBase.html</anchorfile>
      <anchor>a7191a31bd5cb2665947378ea58b3a4ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Glib::ValueBase</type>
      <name>value_</name>
      <anchorfile>classGlib_1_1PropertyBase.html</anchorfile>
      <anchor>a82bc5e296e19c2d7e42a0b78fb5f2062</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GParamSpec *</type>
      <name>param_spec_</name>
      <anchorfile>classGlib_1_1PropertyBase.html</anchorfile>
      <anchor>a227edf3035194bbb6f161c4ae9a74280</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::PropertyProxy</name>
    <filename>classGlib_1_1PropertyProxy.html</filename>
    <templarg></templarg>
    <base>Glib::PropertyProxy_Base</base>
    <member kind="typedef">
      <type>T</type>
      <name>PropertyType</name>
      <anchorfile>classGlib_1_1PropertyProxy.html</anchorfile>
      <anchor>aabcd5af96ce123bcb38a4674a997403e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyProxy</name>
      <anchorfile>classGlib_1_1PropertyProxy.html</anchorfile>
      <anchor>af8353d01e3ae6134eaceaf900ffb84b9</anchor>
      <arglist>(ObjectBase *obj, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classGlib_1_1PropertyProxy.html</anchorfile>
      <anchor>aff4eb140b4f4da0488c4387c1047ad82</anchor>
      <arglist>(const PropertyType &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>PropertyType</type>
      <name>get_value</name>
      <anchorfile>classGlib_1_1PropertyProxy.html</anchorfile>
      <anchor>a5e4eba8fcfc95e51b4993148c4055fba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_value</name>
      <anchorfile>classGlib_1_1PropertyProxy.html</anchorfile>
      <anchor>a4ea1719ff572be400fdce1f3257fdf59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PropertyProxy&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1PropertyProxy.html</anchorfile>
      <anchor>add4490830382a8173acf097dffffd92e</anchor>
      <arglist>(const PropertyType &amp;data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator PropertyType</name>
      <anchorfile>classGlib_1_1PropertyProxy.html</anchorfile>
      <anchor>a9368e3ff5d03fb7d19d50ea61d4937f7</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::PropertyProxy_Base</name>
    <filename>classGlib_1_1PropertyProxy__Base.html</filename>
    <member kind="function">
      <type></type>
      <name>PropertyProxy_Base</name>
      <anchorfile>classGlib_1_1PropertyProxy__Base.html</anchorfile>
      <anchor>a249bf7fbed57d8feca6280747e85cd35</anchor>
      <arglist>(ObjectBase *obj, const char *property_name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyProxy_Base</name>
      <anchorfile>classGlib_1_1PropertyProxy__Base.html</anchorfile>
      <anchor>ad21a12ef0a572caec3b160561f60e8ee</anchor>
      <arglist>(const PropertyProxy_Base &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SignalProxyProperty</type>
      <name>signal_changed</name>
      <anchorfile>classGlib_1_1PropertyProxy__Base.html</anchorfile>
      <anchor>a19357ed2e9492700e37215edb81fd071</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ObjectBase *</type>
      <name>get_object</name>
      <anchorfile>classGlib_1_1PropertyProxy__Base.html</anchorfile>
      <anchor>a18c25029fd2ae0ad1487b98c2cffff6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_name</name>
      <anchorfile>classGlib_1_1PropertyProxy__Base.html</anchorfile>
      <anchor>a27c056266d3748004ebde2ed37bd4388</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_property_</name>
      <anchorfile>classGlib_1_1PropertyProxy__Base.html</anchorfile>
      <anchor>a062bab7773ae2e9666a26fb6426003d2</anchor>
      <arglist>(const Glib::ValueBase &amp;value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>get_property_</name>
      <anchorfile>classGlib_1_1PropertyProxy__Base.html</anchorfile>
      <anchor>a39351fb99b21348e397fee8013b4ff40</anchor>
      <arglist>(Glib::ValueBase &amp;value) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset_property_</name>
      <anchorfile>classGlib_1_1PropertyProxy__Base.html</anchorfile>
      <anchor>a2551363499a510336507194725de6c43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ObjectBase *</type>
      <name>obj_</name>
      <anchorfile>classGlib_1_1PropertyProxy__Base.html</anchorfile>
      <anchor>ae027890146dbc4acfa49634e7c44cce9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>property_name_</name>
      <anchorfile>classGlib_1_1PropertyProxy__Base.html</anchorfile>
      <anchor>af76cdd8c35935963d0f9d5975e81a726</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::PropertyProxy_ReadOnly</name>
    <filename>classGlib_1_1PropertyProxy__ReadOnly.html</filename>
    <templarg></templarg>
    <base>Glib::PropertyProxy_Base</base>
    <member kind="typedef">
      <type>T</type>
      <name>PropertyType</name>
      <anchorfile>classGlib_1_1PropertyProxy__ReadOnly.html</anchorfile>
      <anchor>ae795c520abe060a0ab7284f664754c20</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyProxy_ReadOnly</name>
      <anchorfile>classGlib_1_1PropertyProxy__ReadOnly.html</anchorfile>
      <anchor>a49910fa712bce1cd0ae51e6728f9619f</anchor>
      <arglist>(const ObjectBase *obj, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>PropertyType</type>
      <name>get_value</name>
      <anchorfile>classGlib_1_1PropertyProxy__ReadOnly.html</anchorfile>
      <anchor>af3ca38431585ea039f8e30b1d9b2ba20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator PropertyType</name>
      <anchorfile>classGlib_1_1PropertyProxy__ReadOnly.html</anchorfile>
      <anchor>a93513514f89b1eefb3ce1f81026366ad</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::PropertyProxy_WriteOnly</name>
    <filename>classGlib_1_1PropertyProxy__WriteOnly.html</filename>
    <templarg></templarg>
    <base>Glib::PropertyProxy_Base</base>
    <member kind="typedef">
      <type>T</type>
      <name>PropertyType</name>
      <anchorfile>classGlib_1_1PropertyProxy__WriteOnly.html</anchorfile>
      <anchor>ad6888fbf4de06458376d607548ed19ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyProxy_WriteOnly</name>
      <anchorfile>classGlib_1_1PropertyProxy__WriteOnly.html</anchorfile>
      <anchor>aa8fc4a6944fa92745e6db12f8a102e04</anchor>
      <arglist>(ObjectBase *obj, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classGlib_1_1PropertyProxy__WriteOnly.html</anchorfile>
      <anchor>a30500a1c44729093af1e5e9b1110b80a</anchor>
      <arglist>(const PropertyType &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_value</name>
      <anchorfile>classGlib_1_1PropertyProxy__WriteOnly.html</anchorfile>
      <anchor>a000abcd69676eeb0afefd671e4670c28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PropertyProxy_WriteOnly&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1PropertyProxy__WriteOnly.html</anchorfile>
      <anchor>aa62bc22fa9389657d8562d375b616401</anchor>
      <arglist>(const PropertyType &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Quark</name>
    <filename>classGlib_1_1Quark.html</filename>
    <base>Glib::QueryQuark</base>
    <member kind="function">
      <type></type>
      <name>Quark</name>
      <anchorfile>classGlib_1_1Quark.html</anchorfile>
      <anchor>a951c36a3aeeba482e72e7ee1e1af1d3f</anchor>
      <arglist>(const ustring &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quark</name>
      <anchorfile>classGlib_1_1Quark.html</anchorfile>
      <anchor>a6b629a0d8f6a4ba0da254b180cab4cc4</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Quark</name>
      <anchorfile>classGlib_1_1Quark.html</anchorfile>
      <anchor>a2326c184b1abd3b070c6c0609d34eff3</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::QueryQuark</name>
    <filename>classGlib_1_1QueryQuark.html</filename>
    <member kind="function">
      <type></type>
      <name>QueryQuark</name>
      <anchorfile>classGlib_1_1QueryQuark.html</anchorfile>
      <anchor>a4373d14f457d6fa855ba8856ab2aa7a3</anchor>
      <arglist>(const GQuark &amp;q)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QueryQuark</name>
      <anchorfile>classGlib_1_1QueryQuark.html</anchorfile>
      <anchor>af9aec4964064bfc5729d3c1dea64bfc2</anchor>
      <arglist>(const ustring &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QueryQuark</name>
      <anchorfile>classGlib_1_1QueryQuark.html</anchorfile>
      <anchor>a689ea595339a8aa820889679566dad9c</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~QueryQuark</name>
      <anchorfile>classGlib_1_1QueryQuark.html</anchorfile>
      <anchor>abe2c8cbcb845d961a34bb1ae441025ff</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>QueryQuark &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1QueryQuark.html</anchorfile>
      <anchor>a38371df4b4b7b1f8a507cb5005926a4b</anchor>
      <arglist>(const QueryQuark &amp;q)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ustring</name>
      <anchorfile>classGlib_1_1QueryQuark.html</anchorfile>
      <anchor>a13975445cb1b5bcd1d4abf1d18d8f225</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator GQuark</name>
      <anchorfile>classGlib_1_1QueryQuark.html</anchorfile>
      <anchor>af867d074d8a150affe71fe466565fe9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GQuark</type>
      <name>id</name>
      <anchorfile>classGlib_1_1QueryQuark.html</anchorfile>
      <anchor>a30f4d5d6b66dc017234f71147f46ec12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1QueryQuark.html</anchorfile>
      <anchor>a9230b9306682910da0eb4c8b6109ea69</anchor>
      <arglist>(const QueryQuark &amp;a, const QueryQuark &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1QueryQuark.html</anchorfile>
      <anchor>a5fb42accd107c962baf7524a3b1bc41e</anchor>
      <arglist>(const QueryQuark &amp;a, const QueryQuark &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Rand</name>
    <filename>classGlib_1_1Rand.html</filename>
    <member kind="function">
      <type></type>
      <name>Rand</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>a61110e0e8ef1566076feacdb4d472f78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rand</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>acec64f502eee6193abc892e85c0c4577</anchor>
      <arglist>(guint32 seed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Rand</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>aca321428aa2e52967f7151231ba72765</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rand</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>a913a3e90be86ed1d786b04e15c0a4174</anchor>
      <arglist>(const Rand &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Rand &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>aacc0b2553f4426b54ad6f14899150946</anchor>
      <arglist>(const Rand &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_seed</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>a4a545e4f20bd7e603c14d46c17d3fe4f</anchor>
      <arglist>(guint32 seed)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_bool</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>a4d90f1e3ef59d0b071efa0445b6fb469</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>guint32</type>
      <name>get_int</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>a22cefc85a2eb30bfcae6180a5ff33338</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>gint32</type>
      <name>get_int_range</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>a182b9a36db153d316baf5efb1ece9fd7</anchor>
      <arglist>(gint32 begin, gint32 end)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_double</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>ae439c4403f696ee326c2569386e99819</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_double_range</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>a997d49286a48fdc484f643bf665bef86</anchor>
      <arglist>(double begin, double end)</arglist>
    </member>
    <member kind="function">
      <type>GRand *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>a9e0662cd37ac942a23d434ae8fe861e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GRand *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>aab6aa6079774bae4acf4e733bc9418f2</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::RecMutex</name>
    <filename>classGlib_1_1RecMutex.html</filename>
    <base>Glib::StaticRecMutex</base>
    <class kind="class">Glib::RecMutex::Lock</class>
    <member kind="function">
      <type></type>
      <name>RecMutex</name>
      <anchorfile>classGlib_1_1RecMutex.html</anchorfile>
      <anchor>a91462697c0142d75e0b6fe7c3ddb751a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RecMutex</name>
      <anchorfile>classGlib_1_1RecMutex.html</anchorfile>
      <anchor>adee3de2eb61684af89e311ab6b940473</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::RecMutex::Lock</name>
    <filename>classGlib_1_1RecMutex_1_1Lock.html</filename>
    <member kind="function">
      <type></type>
      <name>Lock</name>
      <anchorfile>classGlib_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>a7648e1bd74aa9c4a3eadcee85790d24e</anchor>
      <arglist>(RecMutex &amp;mutex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lock</name>
      <anchorfile>classGlib_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>a8c1f4e93c943c7778b525b3e0911ef91</anchor>
      <arglist>(RecMutex &amp;mutex, NotLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lock</name>
      <anchorfile>classGlib_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>a128643b7286fe5ef281c05955991d74c</anchor>
      <arglist>(RecMutex &amp;mutex, TryLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lock</name>
      <anchorfile>classGlib_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>ace4fccfcd2e25a480d64d1a0c6b8cd00</anchor>
      <arglist>(const RecMutex::Lock &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>RecMutex::Lock &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>a84203e3b70227610bc3126f4d2aa55ed</anchor>
      <arglist>(const RecMutex::Lock &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Lock</name>
      <anchorfile>classGlib_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>a71c88960ca417bd926a5a037f6f1808c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acquire</name>
      <anchorfile>classGlib_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>abcdab81c9e753579247652bca0cb4116</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>try_acquire</name>
      <anchorfile>classGlib_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>a47ee33f9ea131e215acb8eaa5f47b4c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classGlib_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>a480a9e87a8e8ce59faf09487ded6bdcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>locked</name>
      <anchorfile>classGlib_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>a9785d1b937233b30f9a0ced6e87d5b20</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::RefPtr</name>
    <filename>classGlib_1_1RefPtr.html</filename>
    <templarg>T_CppObject</templarg>
    <member kind="function">
      <type></type>
      <name>RefPtr</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a6480d43dd798b464a891512a009941db</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RefPtr</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a54f4e0a8d9e9c43f24401b2f6b86a603</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RefPtr</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>acdf73e61308125396b52a2958e12f95c</anchor>
      <arglist>(T_CppObject *pCppObject) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RefPtr</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a195df4e7f4920b6b5551cd60a01cfd6a</anchor>
      <arglist>(const RefPtr &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RefPtr</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a5d76f021d8ccf4007677fb8e89d52e55</anchor>
      <arglist>(RefPtr &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RefPtr</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a1902543f0fd5d8452f8d5b981c3c67c3</anchor>
      <arglist>(RefPtr&lt; T_CastFrom &gt; &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RefPtr</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a82f11c3a103d408bec0e5d5b4ce82d2f</anchor>
      <arglist>(const RefPtr&lt; T_CastFrom &gt; &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a9f4b6aa7e32da1ddd23b62ec1cd5612a</anchor>
      <arglist>(RefPtr &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RefPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>ad86e607d719edad0e299ad35280b0e0a</anchor>
      <arglist>(const RefPtr &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RefPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a77136312c9be3da471c180a1ea748789</anchor>
      <arglist>(RefPtr &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RefPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>ab71bdf6723f7579f161e166b10fe3a27</anchor>
      <arglist>(RefPtr&lt; T_CastFrom &gt; &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RefPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a0cf223b2b86f13d6979d70af585fdb54</anchor>
      <arglist>(const RefPtr&lt; T_CastFrom &gt; &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a31836a72b774062f41f31e183b1e8b3e</anchor>
      <arglist>(const RefPtr &amp;src) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>ade68fc2a3cdb54e51b0f136aee95c074</anchor>
      <arglist>(const RefPtr &amp;src) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T_CppObject *</type>
      <name>operator-&gt;</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a3ed0dc52f9d3281c68411464873b7e70</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T_CppObject *</type>
      <name>get</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a70e4b28aa8c0d43b471725b7d537b254</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a3380c5bf96be5865902c7d083c59cd69</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a25a4af311f73f168683043f1f61768a4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>ad3f3ef5f5246d813f3094a2b24765414</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>T_CppObject *</type>
      <name>release</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a2f478f3642aa47734b72a0ff02f00c40</anchor>
      <arglist>() noexcept G_GNUC_WARN_UNUSED_RESULT</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>afedfc8b62d3a6b9f98491ddb78a646dd</anchor>
      <arglist>(const RefPtr &amp;src) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a1cc644501088568bc1bdc7d5e7bb437f</anchor>
      <arglist>(const RefPtr &amp;src) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a598238b539c0c8411984d125b968fd34</anchor>
      <arglist>(const RefPtr &amp;src) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>af3e00dd7fc7088b47323b8eeb86373e3</anchor>
      <arglist>(const RefPtr &amp;src) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RefPtr</type>
      <name>cast_dynamic</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>afba688c406f0c3d1239c6b7c3716c1de</anchor>
      <arglist>(const RefPtr&lt; T_CastFrom &gt; &amp;src) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RefPtr</type>
      <name>cast_static</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a4ef4c5010a46d48ef7d3ed44bd64031e</anchor>
      <arglist>(const RefPtr&lt; T_CastFrom &gt; &amp;src) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RefPtr</type>
      <name>cast_const</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a8a854e9e27c1a76cfc47a97aca5d1598</anchor>
      <arglist>(const RefPtr&lt; T_CastFrom &gt; &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a969a3c44b0fe4be9882890ba3e41ebfd</anchor>
      <arglist>(RefPtr&lt; T_CppObject &gt; &amp;lhs, RefPtr&lt; T_CppObject &gt; &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Regex</name>
    <filename>classGlib_1_1Regex.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>abe25ea12ebc06a3294e296177f1d6240</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>afe71213f4745e0d6aa75a4ddbcb01031</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GRegex *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a640d1c5b6bc6ff05461dbf11b97e4477</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GRegex *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a97c5643a3db55f23a91ec78d11a121c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GRegex *</type>
      <name>gobj_copy</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a9cc3b184c9e4817f18c2f3ce3f4359c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Regex</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>aaae302567d5aa9648f216b349be26375</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Regex</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>acb85b2ec990227be37232a50e3e135d2</anchor>
      <arglist>(const Regex &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Regex &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a47a67fd6307c5e635d87c19d1c56b122</anchor>
      <arglist>(const Regex &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_pattern</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>ad5963d4df7f4cdd30909edaa394f44e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_max_backref</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>aa6b506f1825eef9f0ee953e937d5c1b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_capture_count</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>ae08e2632deb992959cf3fe812402a269</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_has_cr_or_lf</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a0bc2d72e2c064d478325646fce7cb6b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_max_lookbehind</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a6ef9c8c972d23a63e0e5ea7f7c0e4934</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_string_number</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>adf87b95579d6373cffc1a77f4ac7d6bf</anchor>
      <arglist>(const Glib::ustring &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>RegexCompileFlags</type>
      <name>get_compile_flags</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a9012e6b62cd20ed8e0891ff8051680ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RegexMatchFlags</type>
      <name>get_match_flags</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a3f8f76582354e445d1dc8c44b463a9af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>match</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a52a55ce94fcdf6b24cc8d6cc2ba77ebf</anchor>
      <arglist>(const Glib::ustring &amp;string, Glib::MatchInfo &amp;match_info, RegexMatchFlags match_options=static_cast&lt; RegexMatchFlags &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>match</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>ad19516ab8cbcad727a159160a50bf26e</anchor>
      <arglist>(const Glib::ustring &amp;string, RegexMatchFlags match_options=static_cast&lt; RegexMatchFlags &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>match</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a0db06bc90254899673d1899a01f16652</anchor>
      <arglist>(const Glib::ustring &amp;string, int start_position, Glib::MatchInfo &amp;match_info, RegexMatchFlags match_options=static_cast&lt; RegexMatchFlags &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>match</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a723e145e1ed53d0c8c272386ec1bfbf6</anchor>
      <arglist>(const Glib::ustring &amp;string, gssize string_len, int start_position, Glib::MatchInfo &amp;match_info, RegexMatchFlags match_options=static_cast&lt; RegexMatchFlags &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>match</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>acbbd6f902b679b6b34554099a2ef67ef</anchor>
      <arglist>(const Glib::ustring &amp;string, int start_position, RegexMatchFlags match_options)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>match</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a6e0224ad096ba88c94e6e648a619f163</anchor>
      <arglist>(const Glib::ustring &amp;string, gssize string_len, int start_position, RegexMatchFlags match_options)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>match_all</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>ac5d1e01c383fbf2d8646d3deaf50148f</anchor>
      <arglist>(const Glib::ustring &amp;string, Glib::MatchInfo &amp;match_info, RegexMatchFlags match_options=static_cast&lt; RegexMatchFlags &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>match_all</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a8e2a2daa7f18c41ca37080cdd4842fae</anchor>
      <arglist>(const Glib::ustring &amp;string, RegexMatchFlags match_options=static_cast&lt; RegexMatchFlags &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>match_all</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>aa28e51fff3244cb499d89ef0919d8ec3</anchor>
      <arglist>(const Glib::ustring &amp;string, int start_position, Glib::MatchInfo &amp;match_info, RegexMatchFlags match_options=static_cast&lt; RegexMatchFlags &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>match_all</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a3bd99c4fe2a912d0e6dd56ddaf16f9e0</anchor>
      <arglist>(const Glib::ustring &amp;string, gssize string_len, int start_position, Glib::MatchInfo &amp;match_info, RegexMatchFlags match_options=static_cast&lt; RegexMatchFlags &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>match_all</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>adf0dc5f15631c6a090c5724bfa71f4bf</anchor>
      <arglist>(const Glib::ustring &amp;string, int start_position, RegexMatchFlags match_options)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>match_all</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a2e393570c407f42cbf4e223fab19f499</anchor>
      <arglist>(const Glib::ustring &amp;string, gssize string_len, int start_position, RegexMatchFlags match_options)</arglist>
    </member>
    <member kind="function">
      <type>Glib::StringArrayHandle</type>
      <name>split</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a447bbb8dc8ca457d1c1a4ab0740ced7e</anchor>
      <arglist>(const Glib::ustring &amp;string, RegexMatchFlags match_options=static_cast&lt; RegexMatchFlags &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>Glib::StringArrayHandle</type>
      <name>split</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a4b756a213e23b9d8529cd879c8a8a562</anchor>
      <arglist>(const gchar *string, gssize string_len, int start_position, RegexMatchFlags match_options=static_cast&lt; RegexMatchFlags &gt;(0), int max_tokens=0) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::StringArrayHandle</type>
      <name>split</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a2d1e40735b50401c7f18c9f77572d3eb</anchor>
      <arglist>(const Glib::ustring &amp;string, int start_position, RegexMatchFlags match_options, int max_tokens) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>ae9f40c233d33361814252f8bfb00a716</anchor>
      <arglist>(const gchar *string, gssize string_len, int start_position, const Glib::ustring &amp;replacement, RegexMatchFlags match_options=static_cast&lt; RegexMatchFlags &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>add3848dcec1b22547ab57fddbfdaec1d</anchor>
      <arglist>(const Glib::ustring &amp;string, int start_position, const Glib::ustring &amp;replacement, RegexMatchFlags match_options)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>replace_literal</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a4bccbbffa1c84249b35201ee6e6f39c9</anchor>
      <arglist>(const gchar *string, gssize string_len, int start_position, const Glib::ustring &amp;replacement, RegexMatchFlags match_options=static_cast&lt; RegexMatchFlags &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>replace_literal</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a6660f8fcf2ec8a6e90a7ecc85ced0e2a</anchor>
      <arglist>(const Glib::ustring &amp;string, int start_position, const Glib::ustring &amp;replacement, RegexMatchFlags match_options)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>replace_eval</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>ac5a2cf889ebf233c5d467b3816c8d533</anchor>
      <arglist>(const Glib::ustring &amp;string, gssize string_len, int start_position, RegexMatchFlags match_options, GRegexEvalCallback eval, gpointer user_data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Glib::Regex &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a09d723a3b495453399d9f685b528727a</anchor>
      <arglist>(const Glib::ustring &amp;pattern, RegexCompileFlags compile_options=static_cast&lt; RegexCompileFlags &gt;(0), RegexMatchFlags match_options=static_cast&lt; RegexMatchFlags &gt;(0))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::ustring</type>
      <name>escape_string</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>abc2c9b4f7d042a125d0d65fb16b71ff1</anchor>
      <arglist>(const Glib::ustring &amp;string)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>match_simple</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a74905e31f14819b84c9e9cb53c79ca6c</anchor>
      <arglist>(const Glib::ustring &amp;pattern, const Glib::ustring &amp;string, RegexCompileFlags compile_options=static_cast&lt; RegexCompileFlags &gt;(0), RegexMatchFlags match_options=static_cast&lt; RegexMatchFlags &gt;(0))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::StringArrayHandle</type>
      <name>split_simple</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>aa0911a410fa5295667d54e900cce7f10</anchor>
      <arglist>(const Glib::ustring &amp;pattern, const Glib::ustring &amp;string, RegexCompileFlags compile_options=static_cast&lt; RegexCompileFlags &gt;(0), RegexMatchFlags match_options=static_cast&lt; RegexMatchFlags &gt;(0))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>check_replacement</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a54071d7bdd63db75099445fe0c84580c</anchor>
      <arglist>(const Glib::ustring &amp;replacement, gboolean *has_references)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a88fe75f456608b165b2a9e15bc31dc75</anchor>
      <arglist>(void *, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Glib::Regex &gt;</type>
      <name>wrap</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>aa502a39684fb9d59dc689da8bb9d9da8</anchor>
      <arglist>(GRegex *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::RegexError</name>
    <filename>classGlib_1_1RegexError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumeration">
      <type></type>
      <name>Code</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COMPILE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea095e149a396ab3a9a85558734ced483a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMIZE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea1b0181b463a9cb9a6e253b667c3f3e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REPLACE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeaae03b8944dce79aa18f7d74d3ad23066</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MATCH</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea20a3226a8ce3c74d4f0acd12aad60f22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTERNAL</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea442bbe63cbe3f05456f35032292a64b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STRAY_BACKSLASH</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea01cd2c4b0bcf9d3aed8ac14227851e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MISSING_CONTROL_CHAR</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea9a409f0d4613fdbee0b34092299aa1f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNRECOGNIZED_ESCAPE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea6382d6dd0c56f492d80857d60dc05a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QUANTIFIERS_OUT_OF_ORDER</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeae9e4d57f5c0cc5c319db37b9fecf1eb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QUANTIFIER_TOO_BIG</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea1c048a1b8a80f73bfc8a6e85683a8049</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNTERMINATED_CHARACTER_CLASS</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea41652c6be81972252a849e92c45236ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_ESCAPE_IN_CHARACTER_CLASS</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea9ebbb4d5a87eb7b40b2044fbec228d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RANGE_OUT_OF_ORDER</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea60be85b0936be94757b938442ac9deda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOTHING_TO_REPEAT</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea256795482316539f642dd3ee16f22685</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNRECOGNIZED_CHARACTER</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea6940887442b2bfabd2aece5b0daa35df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POSIX_NAMED_CLASS_OUTSIDE_CLASS</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeaf908a577c51d85a1676e8792c7eeb5d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNMATCHED_PARENTHESIS</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea0ade4902258b9df1bec697353c36f0b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INEXISTENT_SUBPATTERN_REFERENCE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea3ce3a9bdd02f6f336d8407f8b2540676</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNTERMINATED_COMMENT</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea15147a0ffcddeff31dd60a300a7bc61b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPRESSION_TOO_LARGE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeaa342e965d78af053e2bf784bd21db228</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MEMORY_ERROR</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeaeecfdaa4d3ac414914a3b8f286f6a517</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VARIABLE_LENGTH_LOOKBEHIND</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea8c252d04ffa7cb99891fa991089f85c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MALFORMED_CONDITION</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea626745717d5206c95777d6b5da9911bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOO_MANY_CONDITIONAL_BRANCHES</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeacf2dbdee0f2b381e88e2cbf5396d8773</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASSERTION_EXPECTED</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea1508f67a84cc3a71172562152f6cfd83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_POSIX_CLASS_NAME</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea452d26eb3179b39b27bc6e535c741d28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea8bc194eabc8c00330c14c0fb18668b92</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HEX_CODE_TOO_LARGE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea3c1af0676b6a13b302e81a7a05938461</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_CONDITION</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea9bf4fb48e9984f8c44e6ab69d5e8fb08</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SINGLE_BYTE_MATCH_IN_LOOKBEHIND</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea8db5b255bb8e56beca20512efe37dfcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFINITE_LOOP</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea080ec3baa33150824a6969aab7137bfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MISSING_SUBPATTERN_NAME_TERMINATOR</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeead2bf83ae0dac6cdaa2c2f1f9ba48e5bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DUPLICATE_SUBPATTERN_NAME</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea21ede065dbed4ab6c63793f7044424c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MALFORMED_PROPERTY</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeead7f75a22dd351b2f1a5c8123176657eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_PROPERTY</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea461695c1221f54c8ae46c327ff704363</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUBPATTERN_NAME_TOO_LONG</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeaf8f729eb2409659b423587cb8c79d8d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOO_MANY_SUBPATTERNS</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea39cca9b906722501028e3f4b3fb4558f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_OCTAL_VALUE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeead9f70ab72243f8f2fa7a0aeaf3acf4ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOO_MANY_BRANCHES_IN_DEFINE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea472887aac67d3245e8d640f880ad5a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEFINE_REPETION</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeac94b5be4da68990fdcc232d59903b86c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INCONSISTENT_NEWLINE_OPTIONS</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeadcd0413eaf70909a8a0fa01aaecdc177</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MISSING_BACK_REFERENCE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea801a85dd41a45869f02c783071b26ed1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_RELATIVE_REFERENCE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea090bb99f8b14506de0ae4b58f5635081</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea190d6f79bc1dec3eaee58404fbc801df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_BACKTRACKING_CONTROL_VERB</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeaab1b3e318017168840bcaf81d6beee75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUMBER_TOO_BIG</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea716fc23a3d479ccaf34adf59eab4646a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MISSING_SUBPATTERN_NAME</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeead38e4b9c7dff1ed6bdc8f8ceb22f2e18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MISSING_DIGIT</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeada809c7bee985dee4c92df927c6fc488</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_DATA_CHARACTER</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea7a25f048d63712e57c0be9c2066895f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXTRA_SUBPATTERN_NAME</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea39f0ba57fbd48d61ecbef355f5879232</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea665ee6eb17bddb078c647494619bd768</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_CONTROL_CHAR</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea4f5d5334c395d18d3fc1f426934d0cb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MISSING_NAME</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeae0845b3c5051ef9fe62c23829c900414</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SUPPORTED_IN_CLASS</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeae9770d030df4928fdb1f1b95908e6c00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOO_MANY_FORWARD_REFERENCES</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea4f2db6de7d5212a8c75ffba5a2bf024b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NAME_TOO_LONG</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeaabef5d4b6e123d46da97e96fb9b594c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHARACTER_VALUE_TOO_LARGE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeaba1b0c3bd3ea34745ba0b9b1da3fba76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COMPILE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea095e149a396ab3a9a85558734ced483a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMIZE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea1b0181b463a9cb9a6e253b667c3f3e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REPLACE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeaae03b8944dce79aa18f7d74d3ad23066</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MATCH</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea20a3226a8ce3c74d4f0acd12aad60f22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTERNAL</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea442bbe63cbe3f05456f35032292a64b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STRAY_BACKSLASH</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea01cd2c4b0bcf9d3aed8ac14227851e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MISSING_CONTROL_CHAR</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea9a409f0d4613fdbee0b34092299aa1f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNRECOGNIZED_ESCAPE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea6382d6dd0c56f492d80857d60dc05a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QUANTIFIERS_OUT_OF_ORDER</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeae9e4d57f5c0cc5c319db37b9fecf1eb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QUANTIFIER_TOO_BIG</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea1c048a1b8a80f73bfc8a6e85683a8049</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNTERMINATED_CHARACTER_CLASS</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea41652c6be81972252a849e92c45236ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_ESCAPE_IN_CHARACTER_CLASS</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea9ebbb4d5a87eb7b40b2044fbec228d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RANGE_OUT_OF_ORDER</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea60be85b0936be94757b938442ac9deda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOTHING_TO_REPEAT</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea256795482316539f642dd3ee16f22685</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNRECOGNIZED_CHARACTER</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea6940887442b2bfabd2aece5b0daa35df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POSIX_NAMED_CLASS_OUTSIDE_CLASS</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeaf908a577c51d85a1676e8792c7eeb5d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNMATCHED_PARENTHESIS</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea0ade4902258b9df1bec697353c36f0b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INEXISTENT_SUBPATTERN_REFERENCE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea3ce3a9bdd02f6f336d8407f8b2540676</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNTERMINATED_COMMENT</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea15147a0ffcddeff31dd60a300a7bc61b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPRESSION_TOO_LARGE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeaa342e965d78af053e2bf784bd21db228</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MEMORY_ERROR</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeaeecfdaa4d3ac414914a3b8f286f6a517</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VARIABLE_LENGTH_LOOKBEHIND</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea8c252d04ffa7cb99891fa991089f85c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MALFORMED_CONDITION</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea626745717d5206c95777d6b5da9911bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOO_MANY_CONDITIONAL_BRANCHES</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeacf2dbdee0f2b381e88e2cbf5396d8773</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASSERTION_EXPECTED</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea1508f67a84cc3a71172562152f6cfd83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_POSIX_CLASS_NAME</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea452d26eb3179b39b27bc6e535c741d28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea8bc194eabc8c00330c14c0fb18668b92</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HEX_CODE_TOO_LARGE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea3c1af0676b6a13b302e81a7a05938461</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_CONDITION</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea9bf4fb48e9984f8c44e6ab69d5e8fb08</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SINGLE_BYTE_MATCH_IN_LOOKBEHIND</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea8db5b255bb8e56beca20512efe37dfcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFINITE_LOOP</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea080ec3baa33150824a6969aab7137bfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MISSING_SUBPATTERN_NAME_TERMINATOR</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeead2bf83ae0dac6cdaa2c2f1f9ba48e5bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DUPLICATE_SUBPATTERN_NAME</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea21ede065dbed4ab6c63793f7044424c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MALFORMED_PROPERTY</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeead7f75a22dd351b2f1a5c8123176657eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_PROPERTY</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea461695c1221f54c8ae46c327ff704363</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUBPATTERN_NAME_TOO_LONG</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeaf8f729eb2409659b423587cb8c79d8d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOO_MANY_SUBPATTERNS</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea39cca9b906722501028e3f4b3fb4558f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_OCTAL_VALUE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeead9f70ab72243f8f2fa7a0aeaf3acf4ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOO_MANY_BRANCHES_IN_DEFINE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea472887aac67d3245e8d640f880ad5a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEFINE_REPETION</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeac94b5be4da68990fdcc232d59903b86c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INCONSISTENT_NEWLINE_OPTIONS</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeadcd0413eaf70909a8a0fa01aaecdc177</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MISSING_BACK_REFERENCE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea801a85dd41a45869f02c783071b26ed1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_RELATIVE_REFERENCE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea090bb99f8b14506de0ae4b58f5635081</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea190d6f79bc1dec3eaee58404fbc801df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_BACKTRACKING_CONTROL_VERB</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeaab1b3e318017168840bcaf81d6beee75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUMBER_TOO_BIG</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea716fc23a3d479ccaf34adf59eab4646a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MISSING_SUBPATTERN_NAME</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeead38e4b9c7dff1ed6bdc8f8ceb22f2e18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MISSING_DIGIT</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeada809c7bee985dee4c92df927c6fc488</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_DATA_CHARACTER</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea7a25f048d63712e57c0be9c2066895f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXTRA_SUBPATTERN_NAME</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea39f0ba57fbd48d61ecbef355f5879232</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea665ee6eb17bddb078c647494619bd768</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_CONTROL_CHAR</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea4f5d5334c395d18d3fc1f426934d0cb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MISSING_NAME</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeae0845b3c5051ef9fe62c23829c900414</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SUPPORTED_IN_CLASS</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeae9770d030df4928fdb1f1b95908e6c00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOO_MANY_FORWARD_REFERENCES</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea4f2db6de7d5212a8c75ffba5a2bf024b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NAME_TOO_LONG</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeaabef5d4b6e123d46da97e96fb9b594c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHARACTER_VALUE_TOO_LARGE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeaba1b0c3bd3ea34745ba0b9b1da3fba76</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegexError</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a817d8fc1cd64ac013e8a971134880103</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegexError</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>addb3a6d45d66c56a3b4a53aa4b188f02</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a1166ae67d45da9eaeb40e488e1bc877a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::RWLock</name>
    <filename>classGlib_1_1RWLock.html</filename>
    <base>Glib::StaticRWLock</base>
    <class kind="class">Glib::RWLock::ReaderLock</class>
    <class kind="class">Glib::RWLock::WriterLock</class>
    <member kind="function">
      <type></type>
      <name>RWLock</name>
      <anchorfile>classGlib_1_1RWLock.html</anchorfile>
      <anchor>a71bb74cd3035b4abf617a10cfc50b723</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RWLock</name>
      <anchorfile>classGlib_1_1RWLock.html</anchorfile>
      <anchor>ab4a3a3cf2bc32fd7678af15e56a57600</anchor>
      <arglist>(const RWLock &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>RWLock &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1RWLock.html</anchorfile>
      <anchor>a15cb796f7e20f2e67f6c8f671df60f40</anchor>
      <arglist>(const RWLock &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RWLock</name>
      <anchorfile>classGlib_1_1RWLock.html</anchorfile>
      <anchor>acb72fd652e847296b580f796bb82fa36</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::RWLock::ReaderLock</name>
    <filename>classGlib_1_1RWLock_1_1ReaderLock.html</filename>
    <member kind="function">
      <type></type>
      <name>ReaderLock</name>
      <anchorfile>classGlib_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>a3ec567d55a84fb8ddf5892ae8adf5a6f</anchor>
      <arglist>(RWLock &amp;rwlock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReaderLock</name>
      <anchorfile>classGlib_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>aa22f3de258861a7c9cfbf2c420bf60d8</anchor>
      <arglist>(RWLock &amp;rwlock, NotLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReaderLock</name>
      <anchorfile>classGlib_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>af3f9ffabd993ae5cc40f91afb673e96d</anchor>
      <arglist>(RWLock &amp;rwlock, TryLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReaderLock</name>
      <anchorfile>classGlib_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>ab6dd94443de87085e2d968b63bc98e20</anchor>
      <arglist>(const RWLock::ReaderLock &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>RWLock::ReaderLock &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>a70ab47be949e438d640bde0b3505761a</anchor>
      <arglist>(const RWLock::ReaderLock &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ReaderLock</name>
      <anchorfile>classGlib_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>afa8de82014987c3834dea5142642402a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acquire</name>
      <anchorfile>classGlib_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>ae36282c4d009bf76910d37c5b010cc7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>try_acquire</name>
      <anchorfile>classGlib_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>ad30060213dc44abf4b3cfed6ad6fe2ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classGlib_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>a6859ec0e0caf92a7f3da8c96b9e22082</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>locked</name>
      <anchorfile>classGlib_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>a5234630ec927d2351814df459b3802a4</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::RWLock::WriterLock</name>
    <filename>classGlib_1_1RWLock_1_1WriterLock.html</filename>
    <member kind="function">
      <type></type>
      <name>WriterLock</name>
      <anchorfile>classGlib_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>a5aca4e3617470e59344f4c7f64b226ab</anchor>
      <arglist>(RWLock &amp;rwlock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WriterLock</name>
      <anchorfile>classGlib_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>a8eaaeaf2e0979b8032600c0a1144bf46</anchor>
      <arglist>(RWLock &amp;rwlock, NotLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WriterLock</name>
      <anchorfile>classGlib_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>aa662238d1b2026823bcfafaf1f9b63d4</anchor>
      <arglist>(RWLock &amp;rwlock, TryLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WriterLock</name>
      <anchorfile>classGlib_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>a271c4e81b629e0d07e003219571a2406</anchor>
      <arglist>(const RWLock::WriterLock &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>RWLock::WriterLock &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>a57833f69324c67dc0e7d49d1a610c1c5</anchor>
      <arglist>(const RWLock::WriterLock &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WriterLock</name>
      <anchorfile>classGlib_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>a47bfa749496840f33b7f8451eb637850</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acquire</name>
      <anchorfile>classGlib_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>ae508867d3b32dc73deab37cd5d785f4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>try_acquire</name>
      <anchorfile>classGlib_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>a597521878f1829509119c5b76ad96032</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classGlib_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>af8028a0eaebcebc1d71e2658e6b66b7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>locked</name>
      <anchorfile>classGlib_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>a1869c4fff99719f2684038f5ec86cfd8</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Sequence</name>
    <filename>classGlib_1_1Sequence.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Sequence</name>
      <anchorfile>classGlib_1_1Sequence.html</anchorfile>
      <anchor>a2f556fc5bb85887bfeb6547e0076adb4</anchor>
      <arglist>(Iterator pbegin, Iterator pend)</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>classGlib_1_1Sequence.html</anchorfile>
      <anchor>ae58203f054ed1cb1a60392986111f533</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>classGlib_1_1Sequence.html</anchorfile>
      <anchor>ac4b107ea80c051aaa4cd64c2ede76356</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classGlib_1_1Sequence.html</anchorfile>
      <anchor>a51f750e6e03354431933c4e17414f780</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ShellError</name>
    <filename>classGlib_1_1ShellError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumeration">
      <type></type>
      <name>Code</name>
      <anchorfile>classGlib_1_1ShellError.html</anchorfile>
      <anchor>ae36e02f4bf8e48d4fe678b30b5300435</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_QUOTING</name>
      <anchorfile>classGlib_1_1ShellError.html</anchorfile>
      <anchor>ae36e02f4bf8e48d4fe678b30b5300435a164567412479edaefa8dd5541efc9431</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EMPTY_STRING</name>
      <anchorfile>classGlib_1_1ShellError.html</anchorfile>
      <anchor>ae36e02f4bf8e48d4fe678b30b5300435a8551e8302cd602dc9125c9cab9a22110</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchorfile>classGlib_1_1ShellError.html</anchorfile>
      <anchor>ae36e02f4bf8e48d4fe678b30b5300435a6e5bf2f4e763daf3a3aa71457c4152e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_QUOTING</name>
      <anchorfile>classGlib_1_1ShellError.html</anchorfile>
      <anchor>ae36e02f4bf8e48d4fe678b30b5300435a164567412479edaefa8dd5541efc9431</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EMPTY_STRING</name>
      <anchorfile>classGlib_1_1ShellError.html</anchorfile>
      <anchor>ae36e02f4bf8e48d4fe678b30b5300435a8551e8302cd602dc9125c9cab9a22110</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchorfile>classGlib_1_1ShellError.html</anchorfile>
      <anchor>ae36e02f4bf8e48d4fe678b30b5300435a6e5bf2f4e763daf3a3aa71457c4152e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShellError</name>
      <anchorfile>classGlib_1_1ShellError.html</anchorfile>
      <anchor>a2ad6bcad67427196b05b0be32703d148</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShellError</name>
      <anchorfile>classGlib_1_1ShellError.html</anchorfile>
      <anchor>a3398d25526f1c1262c754320e815ba32</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGlib_1_1ShellError.html</anchorfile>
      <anchor>a984d6b5c118275b3e4e8efd308da6a87</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalChildWatch</name>
    <filename>classGlib_1_1SignalChildWatch.html</filename>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalChildWatch.html</anchorfile>
      <anchor>a4c2f5be316b9600133129cc974b6b5bb</anchor>
      <arglist>(const sigc::slot&lt; void, GPid, int &gt; &amp;slot, GPid pid, int priority=PRIORITY_DEFAULT)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalIdle</name>
    <filename>classGlib_1_1SignalIdle.html</filename>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalIdle.html</anchorfile>
      <anchor>ac8befbaf1d10a17d1f3f75143e967a3f</anchor>
      <arglist>(const sigc::slot&lt; bool &gt; &amp;slot, int priority=PRIORITY_DEFAULT_IDLE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_once</name>
      <anchorfile>classGlib_1_1SignalIdle.html</anchorfile>
      <anchor>a94217dc63e35f96b5cee4c48f2cdd020</anchor>
      <arglist>(const sigc::slot&lt; void &gt; &amp;slot, int priority=PRIORITY_DEFAULT_IDLE)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalIO</name>
    <filename>classGlib_1_1SignalIO.html</filename>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalIO.html</anchorfile>
      <anchor>af4ffeaefbe8ca44b567314fadfd4760e</anchor>
      <arglist>(const sigc::slot&lt; bool, IOCondition &gt; &amp;slot, PollFD::fd_t fd, IOCondition condition, int priority=PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalIO.html</anchorfile>
      <anchor>a779227bae6390b055243d1f3083a5388</anchor>
      <arglist>(const sigc::slot&lt; bool, IOCondition &gt; &amp;slot, const Glib::RefPtr&lt; IOChannel &gt; &amp;channel, IOCondition condition, int priority=PRIORITY_DEFAULT)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalProxy</name>
    <filename>classGlib_1_1SignalProxy.html</filename>
    <templarg></templarg>
    <templarg>T</templarg>
    <base>Glib::SignalProxyNormal</base>
    <member kind="typedef">
      <type>sigc::slot&lt; R, T... &gt;</type>
      <name>SlotType</name>
      <anchorfile>classGlib_1_1SignalProxy.html</anchorfile>
      <anchor>aea55f84ad517e8ca9a61e014641d3505</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void, T... &gt;</type>
      <name>VoidSlotType</name>
      <anchorfile>classGlib_1_1SignalProxy.html</anchorfile>
      <anchor>acf180bdc8b84724895da963e6525ae36</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignalProxy</name>
      <anchorfile>classGlib_1_1SignalProxy.html</anchorfile>
      <anchor>aeeaca4a49d59dc3be05af7b66b8618c1</anchor>
      <arglist>(ObjectBase *obj, const SignalProxyInfo *info)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalProxy.html</anchorfile>
      <anchor>a0bee9dba36374339ab19ec34f288613e</anchor>
      <arglist>(const SlotType &amp;slot, bool after=true)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalProxy.html</anchorfile>
      <anchor>a33c74bc36dafd8bbb1924772c1e2b7e6</anchor>
      <arglist>(SlotType &amp;&amp;slot, bool after=true)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect_notify</name>
      <anchorfile>classGlib_1_1SignalProxy.html</anchorfile>
      <anchor>a0728e94c17b7a56561d3eba981cd9069</anchor>
      <arglist>(const VoidSlotType &amp;slot, bool after=false)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect_notify</name>
      <anchorfile>classGlib_1_1SignalProxy.html</anchorfile>
      <anchor>a210be6fd700e2171801c7bd1b78b6fa9</anchor>
      <arglist>(VoidSlotType &amp;&amp;slot, bool after=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalProxyBase</name>
    <filename>classGlib_1_1SignalProxyBase.html</filename>
    <member kind="function">
      <type></type>
      <name>SignalProxyBase</name>
      <anchorfile>classGlib_1_1SignalProxyBase.html</anchorfile>
      <anchor>af340b9d05531bbf31e50d3b0ec6dec06</anchor>
      <arglist>(Glib::ObjectBase *obj)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ObjectBase *</type>
      <name>obj_</name>
      <anchorfile>classGlib_1_1SignalProxyBase.html</anchorfile>
      <anchor>af0a2ac9d830f483801c24d551e1eb57c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalProxyDetailed</name>
    <filename>classGlib_1_1SignalProxyDetailed.html</filename>
    <base>Glib::SignalProxyBase</base>
    <member kind="function">
      <type></type>
      <name>~SignalProxyDetailed</name>
      <anchorfile>classGlib_1_1SignalProxyDetailed.html</anchorfile>
      <anchor>aeddeca4a3e215f1de292eed4423d78c7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emission_stop</name>
      <anchorfile>classGlib_1_1SignalProxyDetailed.html</anchorfile>
      <anchor>a2109c981706aa463d7e37d9243a17f26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SignalProxyDetailed</name>
      <anchorfile>classGlib_1_1SignalProxyDetailed.html</anchorfile>
      <anchor>a6e5d91bb59c3e3f91d980ae6981a06ce</anchor>
      <arglist>(Glib::ObjectBase *obj, const SignalProxyInfo *info, const Glib::ustring &amp;detail_name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sigc::slot_base &amp;</type>
      <name>connect_impl_</name>
      <anchorfile>classGlib_1_1SignalProxyDetailed.html</anchorfile>
      <anchor>a91f2877eb55144846bd9de480578941b</anchor>
      <arglist>(bool notify, const sigc::slot_base &amp;slot, bool after)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sigc::slot_base &amp;</type>
      <name>connect_impl_</name>
      <anchorfile>classGlib_1_1SignalProxyDetailed.html</anchorfile>
      <anchor>a7c47f7b5c73eb1e206938293c47e9b94</anchor>
      <arglist>(bool notify, sigc::slot_base &amp;&amp;slot, bool after)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalProxyDetailedAnyType</name>
    <filename>classGlib_1_1SignalProxyDetailedAnyType.html</filename>
    <templarg></templarg>
    <templarg>T</templarg>
    <base>Glib::SignalProxyDetailed</base>
    <member kind="typedef">
      <type>sigc::slot&lt; R, T... &gt;</type>
      <name>SlotType</name>
      <anchorfile>classGlib_1_1SignalProxyDetailedAnyType.html</anchorfile>
      <anchor>a3dc692ff44300fe4c7582c21cd44301b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void, T... &gt;</type>
      <name>VoidSlotType</name>
      <anchorfile>classGlib_1_1SignalProxyDetailedAnyType.html</anchorfile>
      <anchor>a45cc9613db45d37731e1d6aebf4e1158</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignalProxyDetailedAnyType</name>
      <anchorfile>classGlib_1_1SignalProxyDetailedAnyType.html</anchorfile>
      <anchor>aaa08fe47a31ffa1c32d34c47c0d2d7ef</anchor>
      <arglist>(ObjectBase *obj, const SignalProxyInfo *info, const Glib::ustring &amp;detail_name)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalProxyDetailedAnyType.html</anchorfile>
      <anchor>a814e9452f7a04235b63cac3eac6900b6</anchor>
      <arglist>(const SlotType &amp;slot, bool after=true)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalProxyDetailedAnyType.html</anchorfile>
      <anchor>a010cf0b1e52ca08467af9ca26d5420f9</anchor>
      <arglist>(SlotType &amp;&amp;slot, bool after=true)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect_notify</name>
      <anchorfile>classGlib_1_1SignalProxyDetailedAnyType.html</anchorfile>
      <anchor>a43b4d259764cf4ad7ebad88e35c1f8d1</anchor>
      <arglist>(const VoidSlotType &amp;slot, bool after=false)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect_notify</name>
      <anchorfile>classGlib_1_1SignalProxyDetailedAnyType.html</anchorfile>
      <anchor>a82422ee8e8ab3863387fbc98e920decf</anchor>
      <arglist>(VoidSlotType &amp;&amp;slot, bool after=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalProxyNormal</name>
    <filename>classGlib_1_1SignalProxyNormal.html</filename>
    <base>Glib::SignalProxyBase</base>
    <member kind="function">
      <type></type>
      <name>~SignalProxyNormal</name>
      <anchorfile>classGlib_1_1SignalProxyNormal.html</anchorfile>
      <anchor>a0fabc34d86aff391687f9106d9813dc1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emission_stop</name>
      <anchorfile>classGlib_1_1SignalProxyNormal.html</anchorfile>
      <anchor>a8142f5d5f986aea2ce8bfb22d8d38cf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SignalProxyNormal</name>
      <anchorfile>classGlib_1_1SignalProxyNormal.html</anchorfile>
      <anchor>a17cc3a55165dfbf0b2681aace390e82c</anchor>
      <arglist>(Glib::ObjectBase *obj, const SignalProxyInfo *info)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sigc::slot_base &amp;</type>
      <name>connect_</name>
      <anchorfile>classGlib_1_1SignalProxyNormal.html</anchorfile>
      <anchor>a051e24c3af5f41c269351d49a8d3a1aa</anchor>
      <arglist>(const sigc::slot_base &amp;slot, bool after)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sigc::slot_base &amp;</type>
      <name>connect_notify_</name>
      <anchorfile>classGlib_1_1SignalProxyNormal.html</anchorfile>
      <anchor>a2b05fbe06539c4fb26e2afc7fb2b8bc6</anchor>
      <arglist>(const sigc::slot_base &amp;slot, bool after)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sigc::slot_base &amp;</type>
      <name>connect_impl_</name>
      <anchorfile>classGlib_1_1SignalProxyNormal.html</anchorfile>
      <anchor>aabce0a7d8c60c4fd3020a22f63c72a10</anchor>
      <arglist>(bool notify, sigc::slot_base &amp;&amp;slot, bool after)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalProxyProperty</name>
    <filename>classGlib_1_1SignalProxyProperty.html</filename>
    <base>Glib::SignalProxyBase</base>
    <member kind="typedef">
      <type>sigc::slot&lt; void &gt;</type>
      <name>SlotType</name>
      <anchorfile>classGlib_1_1SignalProxyProperty.html</anchorfile>
      <anchor>ae65213c7a6e561303f822dbf8e54e494</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignalProxyProperty</name>
      <anchorfile>classGlib_1_1SignalProxyProperty.html</anchorfile>
      <anchor>a7fedeaa4f15140fa40b99b2dd5a9657b</anchor>
      <arglist>(Glib::ObjectBase *obj, const gchar *property_name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SignalProxyProperty</name>
      <anchorfile>classGlib_1_1SignalProxyProperty.html</anchorfile>
      <anchor>a6285d826adf5e2919051df94c754c36f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalProxyProperty.html</anchorfile>
      <anchor>ae603d3d26a10a73f8c6b7742bdbc5194</anchor>
      <arglist>(const SlotType &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalProxyProperty.html</anchorfile>
      <anchor>a2299b762343608b687f5e26be5475c03</anchor>
      <arglist>(SlotType &amp;&amp;slot)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>property_name_</name>
      <anchorfile>classGlib_1_1SignalProxyProperty.html</anchorfile>
      <anchor>a74a5e9f3fe2b3029bb4eb0110cd57cd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PropertyProxy_Base</name>
      <anchorfile>classGlib_1_1SignalProxyProperty.html</anchorfile>
      <anchor>af89eed4f02a88c9f6685c24f64b60257</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalTimeout</name>
    <filename>classGlib_1_1SignalTimeout.html</filename>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalTimeout.html</anchorfile>
      <anchor>a75b555ed13d91e6903e927f9e0d7afd2</anchor>
      <arglist>(const sigc::slot&lt; bool &gt; &amp;slot, unsigned int interval, int priority=PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_once</name>
      <anchorfile>classGlib_1_1SignalTimeout.html</anchorfile>
      <anchor>a4ea8fdd120102d7963709916f28b2bcc</anchor>
      <arglist>(const sigc::slot&lt; void &gt; &amp;slot, unsigned int interval, int priority=PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect_seconds</name>
      <anchorfile>classGlib_1_1SignalTimeout.html</anchorfile>
      <anchor>a02ad93aa55aa48d48263df628b69fa95</anchor>
      <arglist>(const sigc::slot&lt; bool &gt; &amp;slot, unsigned int interval, int priority=PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_seconds_once</name>
      <anchorfile>classGlib_1_1SignalTimeout.html</anchorfile>
      <anchor>aebbfd6e94c3c04bfac53f89e53fafa93</anchor>
      <arglist>(const sigc::slot&lt; void &gt; &amp;slot, unsigned int interval, int priority=PRIORITY_DEFAULT)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SListHandle</name>
    <filename>classGlib_1_1SListHandle.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename Tr::CppType</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>af4230f94789efcb7a2aaa5fb794e790f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>a37a57e3305825f5c0d51e58efd32e7b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CppType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>aaed4d1deca2b7af0ea6bf91e4764770e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>a4efccb4035086b60df1ae0df1008d730</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>a94b6e6143584f237ebfdbfd8b912fb57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Container_Helpers::SListHandleIterator&lt; Tr &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>a6e1281a9987af69d9dafa07288da16e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Container_Helpers::SListHandleIterator&lt; Tr &gt;</type>
      <name>iterator</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>a06ec94378a4790f8273a20734a661870</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SListHandle</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>ac0b356f88cdc1ae822f3db5600ad8568</anchor>
      <arglist>(const Cont &amp;container)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SListHandle</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>a14f6477eed92aeda49ade71915a6a172</anchor>
      <arglist>(GSList *glist, Glib::OwnershipType ownership)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SListHandle</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>a0c35999d203ce8723ed2b7fd0579887e</anchor>
      <arglist>(const SListHandle&lt; T, Tr &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SListHandle</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>a9fb1a1110213b7d5b4ac218c29bf62d5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>a6b13abaaddeac0b02f2fe02c90c8e11e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>a2ee95e37be8231f92668564b6fd2e23f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::vector&lt; U &gt;</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>a27bdaef40c65a1a2f501230d0afc60dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::deque&lt; U &gt;</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>a09ce749ae9fabc5cf88b7e78a5e670aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::list&lt; U &gt;</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>abb0a9b27ed064a7fc2f70878afd876f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_to</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>a3d0c7a5bd782c99143a0e69b90d1c968</anchor>
      <arglist>(Cont &amp;container) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>a7d1cc1577e2f45d6737b7ac15c97c08f</anchor>
      <arglist>(Out pdest) const</arglist>
    </member>
    <member kind="function">
      <type>GSList *</type>
      <name>data</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>a888e9a6b1e670fe64587ebb925230b98</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>a754507f4144912c7d918fb7683c89549</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>ace1287c341136074c11fa98236939426</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SListHandler</name>
    <filename>classGlib_1_1SListHandler.html</filename>
    <templarg>T</templarg>
    <templarg>Tr</templarg>
    <member kind="typedef">
      <type>typename Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1SListHandler.html</anchorfile>
      <anchor>adf59a3b11391490ab72004f96ba048b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1SListHandler.html</anchorfile>
      <anchor>a494d598dd80ef574f2a65b8fc2a987cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; CppType &gt;</type>
      <name>VectorType</name>
      <anchorfile>classGlib_1_1SListHandler.html</anchorfile>
      <anchor>aba279aa63939b417041b3bd2d18fa79d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Glib::Container_Helpers::GSListKeeper&lt; Tr &gt;</type>
      <name>GSListKeeperType</name>
      <anchorfile>classGlib_1_1SListHandler.html</anchorfile>
      <anchor>aa2f569ffdb3b455c8bf71b3be0a0b20e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Glib::Container_Helpers::SListIterator&lt; Tr &gt;</type>
      <name>SListIteratorType</name>
      <anchorfile>classGlib_1_1SListHandler.html</anchorfile>
      <anchor>a7ef535d79ae31e21011d9c75b98ee942</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VectorType</type>
      <name>slist_to_vector</name>
      <anchorfile>classGlib_1_1SListHandler.html</anchorfile>
      <anchor>a75266d75c64e3aa8271cb2c07def9f8d</anchor>
      <arglist>(GSList *gslist, Glib::OwnershipType ownership)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GSListKeeperType</type>
      <name>vector_to_slist</name>
      <anchorfile>classGlib_1_1SListHandler.html</anchorfile>
      <anchor>af3dc5675cfa0ed8ff8f00e3df6fa0a56</anchor>
      <arglist>(const VectorType &amp;vector)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Source</name>
    <filename>classGlib_1_1Source.html</filename>
    <member kind="typedef">
      <type>Glib::Source</type>
      <name>CppObjectType</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a36c90841b4bfdeab189345429573ad76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GSource</type>
      <name>BaseObjectType</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a30c02cc7b19c4cfe98caa94ae0cba213</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Source</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a521a1901abbe790a8270192ab7650737</anchor>
      <arglist>(const Source &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Source &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a104cbad20b538322d827d646fe73fcc0</anchor>
      <arglist>(const Source &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>attach</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>aa61d28e643f2b286203b0d8e533b2c88</anchor>
      <arglist>(const Glib::RefPtr&lt; MainContext &gt; &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>attach</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a77c4b83960b2fd8d65b10ade1fc2e2fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a98c983f075cdcb77c576b10900b3e052</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_priority</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a0c485044d82729a97b19cbcb841f3c53</anchor>
      <arglist>(int priority)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_priority</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a7daca155b82da09c61158a20810271d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_can_recurse</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a9ca4bf99d7837587021e3cafd6775aba</anchor>
      <arglist>(bool can_recurse)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_can_recurse</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a7cd9b2f7690e7c8aaad9f0399d017532</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_id</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>abe7dd2ac1722d0ec11b4f665712968b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; MainContext &gt;</type>
      <name>get_context</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a42935adf57e6605188e38236cb14b607</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GSource *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a4e855292e2a99861f33c3ba3e5cc3486</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSource *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>aa12a60e39b2806bb5c93984b52bc502c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GSource *</type>
      <name>gobj_copy</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a8fc7c167b6981fdcdcfd330bb5ad5eef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>aa74412c97c3bd306394c070a8c5ad03b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>aedf60cf4a132765730e7de9be21e508a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Source &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>aeaffb039abf99982d7a89403bca71569</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Source</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a9d081ba880470694d7aae3daaee30198</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Source</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>accc8cdb2f85ee750e196236a6533b1f0</anchor>
      <arglist>(GSource *cast_item, GSourceFunc callback_func)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Source</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a3ef52ada4719ebc7d96b8fb41cd8d5f6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sigc::connection</type>
      <name>connect_generic</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a7ee23894376489ae9cebf18bada4e014</anchor>
      <arglist>(const sigc::slot_base &amp;slot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>add_poll</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a3a0843a960cad7a25919a682c37c9d03</anchor>
      <arglist>(PollFD &amp;poll_fd)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_poll</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a67b7133527caa4f788674af0b4f185b2</anchor>
      <arglist>(PollFD &amp;poll_fd)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>get_current_time</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>aec16c75c6c202ea5cb4667aef2637d3c</anchor>
      <arglist>(Glib::TimeVal &amp;current_time)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>gint64</type>
      <name>get_time</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>ad6d81acbff54cf160b0b318e571ccfb5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>prepare</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>abc0e9e88fa74766818d317cd75d6aa3f</anchor>
      <arglist>(int &amp;timeout)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>check</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a914448375c7e0dfcee1a686a006c685d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>dispatch</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>aaf867fd3b09fc05d9c3e20cd89f35bd9</anchor>
      <arglist>(sigc::slot_base *slot)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SpawnError</name>
    <filename>classGlib_1_1SpawnError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumeration">
      <type></type>
      <name>Code</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FORK</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba2e18ebdff68417d93730771021858a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>READ</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1bacd931b684a2f0cce9ca4a0d75e947984</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHDIR</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1bac3b5a55310510104e54a87153f83cba9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACCES</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba0db5693d01bfda7809578075e61eb3fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PERM</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba0293cb13ede6acd9a35740b3c4a46b85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOO_BIG</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1badd65e14f9e22f4db5dfa2353ff35cd1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOOBIG</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1badccd39e54245ae3b4c4e48b7e2716829</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOEXEC</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1baf5b3a741a37c179ff6bb564fe0b5bfe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NAMETOOLONG</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba58e1be919ee7369e1b6c70d4e4431a0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOENT</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1baf20e743ab342bac80b42e4f352e2f8bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOMEM</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1baf4cb987dffa609b9081b23ea3b3ab876</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOTDIR</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba79035412ea45d1fca76b447da8b58f50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOOP</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1bac5af5b15ce99489e861a89f7a8964322</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TXTBUSY</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba309ab0338f350d6912ef96455e88558a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba6db07e0a18716303d4e26909d5b05cd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NFILE</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1bab6c9ef50fab51e4fb51debe02b3b8ed9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MFILE</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba0ce5f8d8ee06382b283425d1001179b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVAL</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1bade8f098b7d9a44dcc5245d7d79ae42d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ISDIR</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1baeea25df41619a97ba2e416f744e8685f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LIBBAD</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba491757cfe17409a06caf8b2ce0ecc16d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba723e7e75977dedc2f945e0e353e201ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FORK</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba2e18ebdff68417d93730771021858a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>READ</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1bacd931b684a2f0cce9ca4a0d75e947984</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHDIR</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1bac3b5a55310510104e54a87153f83cba9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACCES</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba0db5693d01bfda7809578075e61eb3fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PERM</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba0293cb13ede6acd9a35740b3c4a46b85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOO_BIG</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1badd65e14f9e22f4db5dfa2353ff35cd1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOOBIG</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1badccd39e54245ae3b4c4e48b7e2716829</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOEXEC</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1baf5b3a741a37c179ff6bb564fe0b5bfe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NAMETOOLONG</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba58e1be919ee7369e1b6c70d4e4431a0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOENT</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1baf20e743ab342bac80b42e4f352e2f8bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOMEM</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1baf4cb987dffa609b9081b23ea3b3ab876</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOTDIR</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba79035412ea45d1fca76b447da8b58f50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOOP</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1bac5af5b15ce99489e861a89f7a8964322</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TXTBUSY</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba309ab0338f350d6912ef96455e88558a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba6db07e0a18716303d4e26909d5b05cd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NFILE</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1bab6c9ef50fab51e4fb51debe02b3b8ed9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MFILE</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba0ce5f8d8ee06382b283425d1001179b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVAL</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1bade8f098b7d9a44dcc5245d7d79ae42d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ISDIR</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1baeea25df41619a97ba2e416f744e8685f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LIBBAD</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba491757cfe17409a06caf8b2ce0ecc16d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba723e7e75977dedc2f945e0e353e201ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpawnError</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>a29eb55d60f444f4d84e1a505defa2a10</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpawnError</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>a7a3b357b3521a7f28c1517429d57eb31</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>a0c4ab7dae2ec9a4794dca3d1c5ad58c6</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Glib::StaticMutex</name>
    <filename>structGlib_1_1StaticMutex.html</filename>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>structGlib_1_1StaticMutex.html</anchorfile>
      <anchor>a7052b89e18e8c7fa2c987dc429a01296</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trylock</name>
      <anchorfile>structGlib_1_1StaticMutex.html</anchorfile>
      <anchor>a874e22be27896359ecb4008cd6e6f8ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>structGlib_1_1StaticMutex.html</anchorfile>
      <anchor>a539181ea215c00c84e90d4f7a0131e4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Mutex &amp;</name>
      <anchorfile>structGlib_1_1StaticMutex.html</anchorfile>
      <anchor>a144e7de846446e2ce1740adc7bf0dc9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GStaticMutex *</type>
      <name>gobj</name>
      <anchorfile>structGlib_1_1StaticMutex.html</anchorfile>
      <anchor>a381d25917d27c665d3db638b4aa8b743</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GLIBMM_STATIC_MUTEX_INIT</name>
      <anchorfile>structGlib_1_1StaticMutex.html</anchorfile>
      <anchor>a5b1b115d491997555a22bce7256cd9b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Glib::StaticPrivate</name>
    <filename>structGlib_1_1StaticPrivate.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>void(*)(void *)</type>
      <name>DestroyNotifyFunc</name>
      <anchorfile>structGlib_1_1StaticPrivate.html</anchorfile>
      <anchor>af415c597014301a697758bd6e0c6b1ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get</name>
      <anchorfile>structGlib_1_1StaticPrivate.html</anchorfile>
      <anchor>ad208b161d8e65e26ab559da7a306e1ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structGlib_1_1StaticPrivate.html</anchorfile>
      <anchor>a35d07a85ca83076789c2dcb268d6c25d</anchor>
      <arglist>(T *data, DestroyNotifyFunc notify_func=&amp;StaticPrivate&lt; T &gt;::delete_ptr)</arglist>
    </member>
    <member kind="function">
      <type>GStaticPrivate *</type>
      <name>gobj</name>
      <anchorfile>structGlib_1_1StaticPrivate.html</anchorfile>
      <anchor>abfc8325b959a71497571c53c37141d58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>delete_ptr</name>
      <anchorfile>structGlib_1_1StaticPrivate.html</anchorfile>
      <anchor>a6c230680af925b13a85ce8507549ab76</anchor>
      <arglist>(void *data)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GLIBMM_STATIC_PRIVATE_INIT</name>
      <anchorfile>structGlib_1_1StaticPrivate.html</anchorfile>
      <anchor>a2697c638215d761f0d59b1fb76965234</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Glib::StaticRecMutex</name>
    <filename>structGlib_1_1StaticRecMutex.html</filename>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>structGlib_1_1StaticRecMutex.html</anchorfile>
      <anchor>af318bffd84f77b39dbfe65bf654c265b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trylock</name>
      <anchorfile>structGlib_1_1StaticRecMutex.html</anchorfile>
      <anchor>ad59351bd8e600907511b9ed8a693c1ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>structGlib_1_1StaticRecMutex.html</anchorfile>
      <anchor>aed1a4127138ac49d4d7f2c27da7c236b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock_full</name>
      <anchorfile>structGlib_1_1StaticRecMutex.html</anchorfile>
      <anchor>a9c1fbb797f5e0b72b885186e67ae6ebd</anchor>
      <arglist>(unsigned int depth)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>unlock_full</name>
      <anchorfile>structGlib_1_1StaticRecMutex.html</anchorfile>
      <anchor>a380a6ae88b358e5b8661a7e765b19e8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator RecMutex &amp;</name>
      <anchorfile>structGlib_1_1StaticRecMutex.html</anchorfile>
      <anchor>a8fbcf435aeb1c8797f7f4584cf06e0e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GStaticRecMutex *</type>
      <name>gobj</name>
      <anchorfile>structGlib_1_1StaticRecMutex.html</anchorfile>
      <anchor>afc0c434e6d72bc3260346d79e8dd5588</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GLIBMM_STATIC_REC_MUTEX_INIT</name>
      <anchorfile>structGlib_1_1StaticRecMutex.html</anchorfile>
      <anchor>a2c8e79288c96d87c64769786c733a439</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Glib::StaticRWLock</name>
    <filename>structGlib_1_1StaticRWLock.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reader_lock</name>
      <anchorfile>structGlib_1_1StaticRWLock.html</anchorfile>
      <anchor>af80746638d6252c24243fcf3159d15ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reader_trylock</name>
      <anchorfile>structGlib_1_1StaticRWLock.html</anchorfile>
      <anchor>a1cf789f9ffd606ad71d0e8fd13578708</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reader_unlock</name>
      <anchorfile>structGlib_1_1StaticRWLock.html</anchorfile>
      <anchor>ad5aae43bc4a3c632823bfc81fe8a70cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writer_lock</name>
      <anchorfile>structGlib_1_1StaticRWLock.html</anchorfile>
      <anchor>a9cd606ef6f61488478d92ffc02ae0b2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writer_trylock</name>
      <anchorfile>structGlib_1_1StaticRWLock.html</anchorfile>
      <anchor>ae6e4e019daf5f307a5c1be6ee20953a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writer_unlock</name>
      <anchorfile>structGlib_1_1StaticRWLock.html</anchorfile>
      <anchor>a3ee12daec94dc696956fcd7b89265b5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator RWLock &amp;</name>
      <anchorfile>structGlib_1_1StaticRWLock.html</anchorfile>
      <anchor>a91c0f044b25a8ac53ef46ce08ac73c9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GStaticRWLock *</type>
      <name>gobj</name>
      <anchorfile>structGlib_1_1StaticRWLock.html</anchorfile>
      <anchor>a4714a65b490f29119d021cecb4931e02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GLIBMM_STATIC_RW_LOCK_INIT</name>
      <anchorfile>structGlib_1_1StaticRWLock.html</anchorfile>
      <anchor>abe9bd8aefb468fcda2a3945bf9d23c2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::StreamIOChannel</name>
    <filename>classGlib_1_1StreamIOChannel.html</filename>
    <base>Glib::IOChannel</base>
    <member kind="function">
      <type></type>
      <name>~StreamIOChannel</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>a4567364b45020894f95cea50a85930ae</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; StreamIOChannel &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>af05ec7633a97902748738417ae742d5d</anchor>
      <arglist>(std::istream &amp;stream)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; StreamIOChannel &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>aeb3177836df152b6b4a4debacbffbb16</anchor>
      <arglist>(std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; StreamIOChannel &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>aa8b797316447a92a1cd657799922b2da</anchor>
      <arglist>(std::iostream &amp;stream)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StreamIOChannel</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>aef1abb0c118ab43a97b00a860ccf6204</anchor>
      <arglist>(std::istream *stream_in, std::ostream *stream_out)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IOStatus</type>
      <name>read_vfunc</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>a24138a4545a14e11fe63e5226167bc71</anchor>
      <arglist>(char *buf, gsize count, gsize &amp;bytes_read) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IOStatus</type>
      <name>write_vfunc</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>aa01353b86622ec2e3a924503b1504893</anchor>
      <arglist>(const char *buf, gsize count, gsize &amp;bytes_written) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IOStatus</type>
      <name>seek_vfunc</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>a0c8d70439ad73056437d650a7f732c51</anchor>
      <arglist>(gint64 offset, SeekType type) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IOStatus</type>
      <name>close_vfunc</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>a75a9297cdbd4d88dcd7151403ef51c02</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IOStatus</type>
      <name>set_flags_vfunc</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>a7d7553f34d9f9eff125b17a413afc8a1</anchor>
      <arglist>(IOFlags flags) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IOFlags</type>
      <name>get_flags_vfunc</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>a02e90d9f7b0a80d01c8134b6d86c824c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Glib::RefPtr&lt; Glib::Source &gt;</type>
      <name>create_watch_vfunc</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>a9e447a1517b139a25b7dbdd19a46c617</anchor>
      <arglist>(IOCondition cond) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::istream *</type>
      <name>stream_in_</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>a81a491b37d051a0ea5a3c3f8177d74ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::ostream *</type>
      <name>stream_out_</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>a83bcd47600a9a4ab6c3f500479f683c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Thread</name>
    <filename>classGlib_1_1Thread.html</filename>
    <class kind="class">Glib::Thread::Exit</class>
    <member kind="function">
      <type></type>
      <name>Thread</name>
      <anchorfile>classGlib_1_1Thread.html</anchorfile>
      <anchor>a864142ac3a938082cbf9001e29358930</anchor>
      <arglist>(const Thread &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Thread &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Thread.html</anchorfile>
      <anchor>a87df11cc0a123efafb01a5407af1633a</anchor>
      <arglist>(const Thread &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>join</name>
      <anchorfile>classGlib_1_1Thread.html</anchorfile>
      <anchor>ab95e51699279fd84c9577c45d76b0d8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>joinable</name>
      <anchorfile>classGlib_1_1Thread.html</anchorfile>
      <anchor>afbb502174f20f719e9ee19558ff0a8a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_priority</name>
      <anchorfile>classGlib_1_1Thread.html</anchorfile>
      <anchor>a3b323f981147d7eb4b4bd03f3fbdccf5</anchor>
      <arglist>(ThreadPriority priority)</arglist>
    </member>
    <member kind="function">
      <type>ThreadPriority</type>
      <name>get_priority</name>
      <anchorfile>classGlib_1_1Thread.html</anchorfile>
      <anchor>af9169571321b33cecb6f7ffa7eeefda4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GThread *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Thread.html</anchorfile>
      <anchor>a28fbc6c46928a90d82114fa9b6b63196</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GThread *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Thread.html</anchorfile>
      <anchor>ab324047b100999ca15dcbc43e5124776</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Thread *</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Thread.html</anchorfile>
      <anchor>a2775df2f24b6166e3fab41e69dcd04b6</anchor>
      <arglist>(const sigc::slot&lt; void &gt; &amp;slot, bool joinable=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Thread *</type>
      <name>self</name>
      <anchorfile>classGlib_1_1Thread.html</anchorfile>
      <anchor>a9db6864c35701b1c179f48217ab76cca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Thread *</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Thread.html</anchorfile>
      <anchor>af30a7a8b037c7c7a3802aa2a22cf612d</anchor>
      <arglist>(const sigc::slot&lt; void &gt; &amp;slot, unsigned long stack_size, bool joinable, bool bound, ThreadPriority priority)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>yield</name>
      <anchorfile>classGlib_1_1Thread.html</anchorfile>
      <anchor>acad8be7a8093ef3aca32344264461011</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Thread *</type>
      <name>wrap</name>
      <anchorfile>classGlib_1_1Thread.html</anchorfile>
      <anchor>a6bfbb3119eaac9fa8cb725aa1e82f61e</anchor>
      <arglist>(GThread *gobject)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Thread::Exit</name>
    <filename>classGlib_1_1Thread_1_1Exit.html</filename>
  </compound>
  <compound kind="class">
    <name>Glib::ThreadError</name>
    <filename>classGlib_1_1ThreadError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumeration">
      <type></type>
      <name>Code</name>
      <anchorfile>classGlib_1_1ThreadError.html</anchorfile>
      <anchor>a6b42834d5d29377db4aa1c4a79f63952</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AGAIN</name>
      <anchorfile>classGlib_1_1ThreadError.html</anchorfile>
      <anchor>a6b42834d5d29377db4aa1c4a79f63952aa4d3177a09cecbee2d6aa59aa718ab12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AGAIN</name>
      <anchorfile>classGlib_1_1ThreadError.html</anchorfile>
      <anchor>a6b42834d5d29377db4aa1c4a79f63952aa4d3177a09cecbee2d6aa59aa718ab12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreadError</name>
      <anchorfile>classGlib_1_1ThreadError.html</anchorfile>
      <anchor>aac882a2e31fd93acfb341ca0ed3f1192</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreadError</name>
      <anchorfile>classGlib_1_1ThreadError.html</anchorfile>
      <anchor>a51e5c3c760bfa1b7867a29eb1637ea1f</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGlib_1_1ThreadError.html</anchorfile>
      <anchor>afb377a42a2c2ec729d36d4a31b29ed0f</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ThreadPool</name>
    <filename>classGlib_1_1ThreadPool.html</filename>
    <member kind="function">
      <type></type>
      <name>ThreadPool</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>afd549a2867eafe34663d8935c17efbe2</anchor>
      <arglist>(int max_threads=-1, bool exclusive=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreadPool</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>a68dc576f1a75ec573d206fa8fdf9c5ea</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>a7b37fdac9f7a6e4a8791b4668e23e264</anchor>
      <arglist>(const sigc::slot&lt; void &gt; &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max_threads</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>ae19ed9a523788e40509ee4f39d2b10a9</anchor>
      <arglist>(int max_threads)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_max_threads</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>a665b9f1b05056056d8ab93743f914b3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_num_threads</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>aa785ae473dc95908021ccf4dc2ebe292</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>unprocessed</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>af524f6259f1fe5fbdc5f485d9dbebd67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_exclusive</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>a545086fd8284d982a0883638d12c4440</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shutdown</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>a14a3e00a1fec5fec2bded78ea6a2b796</anchor>
      <arglist>(bool immediately=false)</arglist>
    </member>
    <member kind="function">
      <type>GThreadPool *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>ac7f444f305942afb54c45204f509bc39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GThreadPool *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>acb4334cfa47d113dcc4f10ef00af81b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set_max_unused_threads</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>af057a2e30dc3e32137944f71658467db</anchor>
      <arglist>(int max_threads)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>get_max_unused_threads</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>aa0bb8c1914b2e36fa0222bbaeb44b94e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>get_num_unused_threads</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>a9904f39dc346cd44296f361415147ae1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>stop_unused_threads</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>a132a7f8416d29f9499ed87ba102c37a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Threads::Cond</name>
    <filename>classGlib_1_1Threads_1_1Cond.html</filename>
    <member kind="function">
      <type></type>
      <name>Cond</name>
      <anchorfile>classGlib_1_1Threads_1_1Cond.html</anchorfile>
      <anchor>a1a61666d7577c6ac28232c388923aa42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cond</name>
      <anchorfile>classGlib_1_1Threads_1_1Cond.html</anchorfile>
      <anchor>a8c55b74d2e425ff941917c1ee9a355ae</anchor>
      <arglist>(const Cond &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Cond &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Threads_1_1Cond.html</anchorfile>
      <anchor>a19a210de0e21e571232d595f91e4c37b</anchor>
      <arglist>(const Cond &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Cond</name>
      <anchorfile>classGlib_1_1Threads_1_1Cond.html</anchorfile>
      <anchor>a674e83a368694681ad7f145512e79055</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>signal</name>
      <anchorfile>classGlib_1_1Threads_1_1Cond.html</anchorfile>
      <anchor>a9db57dd8e743968ee7ac6932d0acabf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>broadcast</name>
      <anchorfile>classGlib_1_1Threads_1_1Cond.html</anchorfile>
      <anchor>ac59292a7e51e8e6cc85bcdd071c982e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>classGlib_1_1Threads_1_1Cond.html</anchorfile>
      <anchor>a08e9c45266817a95001135e2b7698598</anchor>
      <arglist>(Mutex &amp;mutex)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wait_until</name>
      <anchorfile>classGlib_1_1Threads_1_1Cond.html</anchorfile>
      <anchor>ab8c8842a5962291411b67abd9bb4746d</anchor>
      <arglist>(Mutex &amp;mutex, gint64 end_time)</arglist>
    </member>
    <member kind="function">
      <type>GCond *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Threads_1_1Cond.html</anchorfile>
      <anchor>a74fd007fcce8d7e40322289b46d746a5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Threads::Mutex</name>
    <filename>classGlib_1_1Threads_1_1Mutex.html</filename>
    <class kind="class">Glib::Threads::Mutex::Lock</class>
    <member kind="function">
      <type></type>
      <name>Mutex</name>
      <anchorfile>classGlib_1_1Threads_1_1Mutex.html</anchorfile>
      <anchor>a14093e5f7604912966d399e88755f933</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mutex</name>
      <anchorfile>classGlib_1_1Threads_1_1Mutex.html</anchorfile>
      <anchor>a39c230a6a746f69cbe0661032f80188a</anchor>
      <arglist>(const Mutex &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Mutex &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Threads_1_1Mutex.html</anchorfile>
      <anchor>a045d7d7931428cb292767d903c9039a4</anchor>
      <arglist>(const Mutex &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Mutex</name>
      <anchorfile>classGlib_1_1Threads_1_1Mutex.html</anchorfile>
      <anchor>ae525272c2cecaadbad2cd801eccab6e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>classGlib_1_1Threads_1_1Mutex.html</anchorfile>
      <anchor>a30558c72364c4831189ea4529b7051be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trylock</name>
      <anchorfile>classGlib_1_1Threads_1_1Mutex.html</anchorfile>
      <anchor>ad308197d22158afbb66f16e924cdc406</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>classGlib_1_1Threads_1_1Mutex.html</anchorfile>
      <anchor>a3d18b139afd37b7b46a3498dbe7ed3d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GMutex *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Threads_1_1Mutex.html</anchorfile>
      <anchor>a9d3dcff3f9119aa44693d6cf357ef477</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Mutex *</type>
      <name>wrap</name>
      <anchorfile>group__Threads.html</anchorfile>
      <anchor>ga474cb9d17afdc606a6afd0068ac061d3</anchor>
      <arglist>(GMutex *gobject)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Threads::Mutex::Lock</name>
    <filename>classGlib_1_1Threads_1_1Mutex_1_1Lock.html</filename>
    <member kind="function">
      <type></type>
      <name>Lock</name>
      <anchorfile>classGlib_1_1Threads_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>a83c71f5c904aae6553bbb9bb89fc6dca</anchor>
      <arglist>(Mutex &amp;mutex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lock</name>
      <anchorfile>classGlib_1_1Threads_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>a570f656f028c95c94e3c7c486432d3a6</anchor>
      <arglist>(Mutex &amp;mutex, NotLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lock</name>
      <anchorfile>classGlib_1_1Threads_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>a42b4f2672e1de510d292a8aa1ed443c9</anchor>
      <arglist>(Mutex &amp;mutex, TryLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lock</name>
      <anchorfile>classGlib_1_1Threads_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>a441bd7e8385a074bcfc036cbac193327</anchor>
      <arglist>(const Mutex::Lock &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Mutex::Lock &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Threads_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>aaef046ecec512a46b221677d4f0cefa0</anchor>
      <arglist>(const Mutex::Lock &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Lock</name>
      <anchorfile>classGlib_1_1Threads_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>ad0dc9df566df28e107b73f9938ddd366</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acquire</name>
      <anchorfile>classGlib_1_1Threads_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>a30732c6fbd6a7f63bc77caa2720ecac2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>try_acquire</name>
      <anchorfile>classGlib_1_1Threads_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>a74426ec0cc13f9a228aebc7c602a709d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classGlib_1_1Threads_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>a8e90e519fc479bb20ef2bc30db46d994</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>locked</name>
      <anchorfile>classGlib_1_1Threads_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>a29b23b97be50a11f3b2dd94c4bbaa976</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Threads::Private</name>
    <filename>classGlib_1_1Threads_1_1Private.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>void(*)(void *)</type>
      <name>DestructorFunc</name>
      <anchorfile>classGlib_1_1Threads_1_1Private.html</anchorfile>
      <anchor>a489c49229d7e7d36474d6a2dfab498b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Private</name>
      <anchorfile>classGlib_1_1Threads_1_1Private.html</anchorfile>
      <anchor>ab1201f11d99a5486d7f16dd02d8e737b</anchor>
      <arglist>(const Private&lt; T &gt; &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Private&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Threads_1_1Private.html</anchorfile>
      <anchor>a4d68eaa73660fd31de07446bd7440887</anchor>
      <arglist>(const Private&lt; T &gt; &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Private</name>
      <anchorfile>classGlib_1_1Threads_1_1Private.html</anchorfile>
      <anchor>a72666cd6d6792e4c1efa3fe800a4c4e5</anchor>
      <arglist>(DestructorFunc destructor_func=&amp;Private&lt; T &gt;::delete_ptr)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Threads_1_1Private.html</anchorfile>
      <anchor>a835b6cba77e88023798f40a2fe1ebfb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Threads_1_1Private.html</anchorfile>
      <anchor>ab0740eaa856abbe880ba8466d82c81cc</anchor>
      <arglist>(T *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1Threads_1_1Private.html</anchorfile>
      <anchor>aa4a8cd09419878b96b69ab4d12e98f6b</anchor>
      <arglist>(T *data)</arglist>
    </member>
    <member kind="function">
      <type>GPrivate *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Threads_1_1Private.html</anchorfile>
      <anchor>a1e04fbb3f71768d75d4bc7ddfea3d914</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>delete_ptr</name>
      <anchorfile>classGlib_1_1Threads_1_1Private.html</anchorfile>
      <anchor>a440d3f7cd5ef614679c6348ceaab63be</anchor>
      <arglist>(void *data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Threads::RecMutex</name>
    <filename>classGlib_1_1Threads_1_1RecMutex.html</filename>
    <class kind="class">Glib::Threads::RecMutex::Lock</class>
    <member kind="function">
      <type></type>
      <name>RecMutex</name>
      <anchorfile>classGlib_1_1Threads_1_1RecMutex.html</anchorfile>
      <anchor>a6546c1d24d34726458107b46345632e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RecMutex</name>
      <anchorfile>classGlib_1_1Threads_1_1RecMutex.html</anchorfile>
      <anchor>a152a017de599ce6e4c971ab1cb34ea5b</anchor>
      <arglist>(const RecMutex &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>RecMutex &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Threads_1_1RecMutex.html</anchorfile>
      <anchor>a3d311534278964cb3d80e3a13b207bab</anchor>
      <arglist>(const RecMutex &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RecMutex</name>
      <anchorfile>classGlib_1_1Threads_1_1RecMutex.html</anchorfile>
      <anchor>ac782c3e809dcb6d021bbd788099ad1f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>classGlib_1_1Threads_1_1RecMutex.html</anchorfile>
      <anchor>a1cfcbbfc6591f014f045862fdada3c4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trylock</name>
      <anchorfile>classGlib_1_1Threads_1_1RecMutex.html</anchorfile>
      <anchor>ad28bb4286cda5db9a5eff077838dbbbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>classGlib_1_1Threads_1_1RecMutex.html</anchorfile>
      <anchor>a004144b9f8dff6536629c7e8d75c23ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GRecMutex *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Threads_1_1RecMutex.html</anchorfile>
      <anchor>a0b022fdcda869c9c53a99516c797d56e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RecMutex *</type>
      <name>wrap</name>
      <anchorfile>group__Threads.html</anchorfile>
      <anchor>gad710cc5f6feaccfe6fe2c886b6cd1636</anchor>
      <arglist>(GRecMutex *gobject)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Threads::RecMutex::Lock</name>
    <filename>classGlib_1_1Threads_1_1RecMutex_1_1Lock.html</filename>
    <member kind="function">
      <type></type>
      <name>Lock</name>
      <anchorfile>classGlib_1_1Threads_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>ad2ff1b2598d8fc557860e50d2699e67a</anchor>
      <arglist>(RecMutex &amp;mutex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lock</name>
      <anchorfile>classGlib_1_1Threads_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>a05c2fe5b7b0f02b3d6b00dde118ce6a7</anchor>
      <arglist>(RecMutex &amp;mutex, NotLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lock</name>
      <anchorfile>classGlib_1_1Threads_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>a064781d272167121a075619dd249b67f</anchor>
      <arglist>(RecMutex &amp;mutex, TryLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lock</name>
      <anchorfile>classGlib_1_1Threads_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>a729beae1c33e9e48807ccc9ea2d8d4e1</anchor>
      <arglist>(const RecMutex::Lock &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>RecMutex::Lock &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Threads_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>a2985820b3a44cd7d81136ccafda9b75b</anchor>
      <arglist>(const RecMutex::Lock &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Lock</name>
      <anchorfile>classGlib_1_1Threads_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>ad709baa357e6f1ed4723fc06b2eda41f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acquire</name>
      <anchorfile>classGlib_1_1Threads_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>ac6f060a8097d5aeabd920bf4ac9af07d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>try_acquire</name>
      <anchorfile>classGlib_1_1Threads_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>a31122edac8700bbbb5ce03800bd36054</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classGlib_1_1Threads_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>a321d39a0d0da1783db452a77629396ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>locked</name>
      <anchorfile>classGlib_1_1Threads_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>ae5e76ee5d761e66cd88d1f0990bd0fa1</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Threads::RWLock</name>
    <filename>classGlib_1_1Threads_1_1RWLock.html</filename>
    <class kind="class">Glib::Threads::RWLock::ReaderLock</class>
    <class kind="class">Glib::Threads::RWLock::WriterLock</class>
    <member kind="function">
      <type></type>
      <name>RWLock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock.html</anchorfile>
      <anchor>a4de0016496df8d84672d324744d6b9cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RWLock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock.html</anchorfile>
      <anchor>a5b96fd2a4ba9c56e37e9038c97c1561c</anchor>
      <arglist>(const RWLock &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>RWLock &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock.html</anchorfile>
      <anchor>a136cdf23fe80f87022dc056677dd2f8b</anchor>
      <arglist>(const RWLock &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RWLock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock.html</anchorfile>
      <anchor>a79400545ef8c48abcab8e04bf7082d33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reader_lock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock.html</anchorfile>
      <anchor>a4baa11d561b690e83830caf76172291c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reader_trylock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock.html</anchorfile>
      <anchor>a524f9df39169b9e5bc552e1f052f12ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reader_unlock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock.html</anchorfile>
      <anchor>af5b67ec536bf340aee46647ec9ba35c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writer_lock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock.html</anchorfile>
      <anchor>a07c1d3b85c1324c34ddc4df500a9d233</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writer_trylock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock.html</anchorfile>
      <anchor>afd77b9bcdcd712dbd422c51fef9595a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writer_unlock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock.html</anchorfile>
      <anchor>a64c9ae6cd44743db54cf487c7c04d2f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GRWLock *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock.html</anchorfile>
      <anchor>a591025ba8a3f5f2a6cff66661ec7462b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Threads::RWLock::ReaderLock</name>
    <filename>classGlib_1_1Threads_1_1RWLock_1_1ReaderLock.html</filename>
    <member kind="function">
      <type></type>
      <name>ReaderLock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>ae1eca9fdd9e6f73ba1622a727bec39e3</anchor>
      <arglist>(RWLock &amp;rwlock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReaderLock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>a292a2d4ce43e18ecdbac02c157541bdf</anchor>
      <arglist>(RWLock &amp;rwlock, NotLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReaderLock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>a6cd164baf5f67161770aa031104fbe3a</anchor>
      <arglist>(RWLock &amp;rwlock, TryLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReaderLock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>a3d8b3ccadf868bd64c2610eba59fbfeb</anchor>
      <arglist>(const RWLock::ReaderLock &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>RWLock::ReaderLock &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>a5427e99ef053df64fa0892738e7967ca</anchor>
      <arglist>(const RWLock::ReaderLock &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ReaderLock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>a7facab400e5bedfa6445ad0fb035b7c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acquire</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>ad5e4330977d11520f6c373d9d9d3ca7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>try_acquire</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>acf16f4371633d11f843fa04fcdecb9b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>abfd4f21a1c033cdb63f1b8f9130e3d9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>locked</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>a6e1f5a97957b9d7f6eacfe1ad0d809e3</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Threads::RWLock::WriterLock</name>
    <filename>classGlib_1_1Threads_1_1RWLock_1_1WriterLock.html</filename>
    <member kind="function">
      <type></type>
      <name>WriterLock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>adc7f880f51901ebe308fd6996279311a</anchor>
      <arglist>(RWLock &amp;rwlock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WriterLock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>a95a9d4cdfa30b1c239894c97e2d566fa</anchor>
      <arglist>(RWLock &amp;rwlock, NotLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WriterLock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>a2a829657b52a6572ad6d979567d925f3</anchor>
      <arglist>(RWLock &amp;rwlock, TryLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WriterLock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>a78ed119911443ec4acebd4f006a12a3f</anchor>
      <arglist>(const RWLock::WriterLock &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>RWLock::WriterLock &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>abb1e2b6c7710516c2010b2795d10597f</anchor>
      <arglist>(const RWLock::WriterLock &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WriterLock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>a0c45be95afc565b0d339523584744d3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acquire</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>aadc0d240f68f823f4f2a8157359e2ca3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>try_acquire</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>a7b1f555c1e7240438d8ef072d8dd70f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>a2a695a3770a3cf88246cedcf5406c21e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>locked</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>a36f7776072fb12bf4afdbb0a10fde619</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Threads::Thread</name>
    <filename>classGlib_1_1Threads_1_1Thread.html</filename>
    <class kind="class">Glib::Threads::Thread::Exit</class>
    <member kind="function">
      <type></type>
      <name>Thread</name>
      <anchorfile>classGlib_1_1Threads_1_1Thread.html</anchorfile>
      <anchor>ad3808e7e2f243c675b12f5ca0755f9f6</anchor>
      <arglist>(const Thread &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Thread &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Threads_1_1Thread.html</anchorfile>
      <anchor>a616d128d0555ba10c2af271e2d59c971</anchor>
      <arglist>(const Thread &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>join</name>
      <anchorfile>classGlib_1_1Threads_1_1Thread.html</anchorfile>
      <anchor>ad68ccd7d8209913f09f742aef95758e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GThread *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Threads_1_1Thread.html</anchorfile>
      <anchor>ae2afcdad184e8064ab21edcb287e50d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GThread *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Threads_1_1Thread.html</anchorfile>
      <anchor>a949b65e378d0b9332ecf3a45215d662e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Thread *</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Threads_1_1Thread.html</anchorfile>
      <anchor>ad89d142f0a9fd02d476dbed49dd17b85</anchor>
      <arglist>(const sigc::slot&lt; void &gt; &amp;slot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Thread *</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Threads_1_1Thread.html</anchorfile>
      <anchor>a2ffdf8dd86ea405669f610c7d47c90e9</anchor>
      <arglist>(const sigc::slot&lt; void &gt; &amp;slot, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Thread *</type>
      <name>self</name>
      <anchorfile>classGlib_1_1Threads_1_1Thread.html</anchorfile>
      <anchor>a7289f43e01199fa1cf7df67f725f8cef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>yield</name>
      <anchorfile>classGlib_1_1Threads_1_1Thread.html</anchorfile>
      <anchor>a0b4e6d3fe278429716f0e0cca3654fde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Thread *</type>
      <name>wrap</name>
      <anchorfile>group__Threads.html</anchorfile>
      <anchor>ga6bfbb3119eaac9fa8cb725aa1e82f61e</anchor>
      <arglist>(GThread *gobject)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Threads::Thread::Exit</name>
    <filename>classGlib_1_1Threads_1_1Thread_1_1Exit.html</filename>
  </compound>
  <compound kind="class">
    <name>Glib::Threads::ThreadError</name>
    <filename>classGlib_1_1Threads_1_1ThreadError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumeration">
      <type></type>
      <name>Code</name>
      <anchorfile>classGlib_1_1Threads_1_1ThreadError.html</anchorfile>
      <anchor>a4f9ffae8fe56d267e8b7d0bcd75cff37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AGAIN</name>
      <anchorfile>classGlib_1_1Threads_1_1ThreadError.html</anchorfile>
      <anchor>a4f9ffae8fe56d267e8b7d0bcd75cff37aee61eae399baab740abababe811824ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AGAIN</name>
      <anchorfile>classGlib_1_1Threads_1_1ThreadError.html</anchorfile>
      <anchor>a4f9ffae8fe56d267e8b7d0bcd75cff37aee61eae399baab740abababe811824ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreadError</name>
      <anchorfile>classGlib_1_1Threads_1_1ThreadError.html</anchorfile>
      <anchor>a45bc20ae4202207f5d1c3de12ab6b4bb</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreadError</name>
      <anchorfile>classGlib_1_1Threads_1_1ThreadError.html</anchorfile>
      <anchor>afb5189c1799f808995c9935493363e72</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGlib_1_1Threads_1_1ThreadError.html</anchorfile>
      <anchor>ab427a6665ee7caeb6bc171c019753461</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::TimeoutSource</name>
    <filename>classGlib_1_1TimeoutSource.html</filename>
    <base>Glib::Source</base>
    <member kind="typedef">
      <type>Glib::TimeoutSource</type>
      <name>CppObjectType</name>
      <anchorfile>classGlib_1_1TimeoutSource.html</anchorfile>
      <anchor>a4b8e6eb4d8e79464a2faeb12ac3befcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1TimeoutSource.html</anchorfile>
      <anchor>afd5504a056dbbf1c2aa38450c59c197d</anchor>
      <arglist>(const sigc::slot&lt; bool &gt; &amp;slot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; TimeoutSource &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1TimeoutSource.html</anchorfile>
      <anchor>aafe1898dd9ded8c66fc1dc9e9ba80884</anchor>
      <arglist>(unsigned int interval)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TimeoutSource</name>
      <anchorfile>classGlib_1_1TimeoutSource.html</anchorfile>
      <anchor>a1477a30365d9b50fc3a02c92535d084c</anchor>
      <arglist>(unsigned int interval)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~TimeoutSource</name>
      <anchorfile>classGlib_1_1TimeoutSource.html</anchorfile>
      <anchor>a1c62b2f432a1e3df6285bbe54788d528</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>prepare</name>
      <anchorfile>classGlib_1_1TimeoutSource.html</anchorfile>
      <anchor>ac2676393a657490ec3a973d9b6fe3231</anchor>
      <arglist>(int &amp;timeout) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>check</name>
      <anchorfile>classGlib_1_1TimeoutSource.html</anchorfile>
      <anchor>ac358ba90a5acfabbd461b19d346c9330</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>dispatch</name>
      <anchorfile>classGlib_1_1TimeoutSource.html</anchorfile>
      <anchor>ad91c9fd165c3e75e2b1b8913414cb235</anchor>
      <arglist>(sigc::slot_base *slot) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Timer</name>
    <filename>classGlib_1_1Timer.html</filename>
    <member kind="function">
      <type></type>
      <name>Timer</name>
      <anchorfile>classGlib_1_1Timer.html</anchorfile>
      <anchor>a1ff80cf54560a168274fa69be8f0c280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Timer</name>
      <anchorfile>classGlib_1_1Timer.html</anchorfile>
      <anchor>a7ce4642a82edddf8eb98dc5773226851</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Timer</name>
      <anchorfile>classGlib_1_1Timer.html</anchorfile>
      <anchor>a12e34411e484a9e9948b734c23d1915a</anchor>
      <arglist>(const Timer &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Timer &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Timer.html</anchorfile>
      <anchor>ad6a6710760436c6b875fd92f9bf590aa</anchor>
      <arglist>(const Timer &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classGlib_1_1Timer.html</anchorfile>
      <anchor>a05067986b126f147111357ff7693aea6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classGlib_1_1Timer.html</anchorfile>
      <anchor>a3c54e67ddbc01f39b843b1df45aa3c17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classGlib_1_1Timer.html</anchorfile>
      <anchor>a82d5eef4159c73d8412b9e927073625b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>elapsed</name>
      <anchorfile>classGlib_1_1Timer.html</anchorfile>
      <anchor>ab6da10878cce1be7a16342ad39c00043</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>elapsed</name>
      <anchorfile>classGlib_1_1Timer.html</anchorfile>
      <anchor>ae4809351dfa287920a8d4f9631225371</anchor>
      <arglist>(unsigned long &amp;microseconds) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Glib::TimeVal</name>
    <filename>structGlib_1_1TimeVal.html</filename>
    <member kind="function">
      <type></type>
      <name>TimeVal</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>ab1861a9cd1f66b581b99ba9bb9456626</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeVal</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>ac72a9eada5c330236f7bc7f305b19179</anchor>
      <arglist>(long seconds, long microseconds)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeVal</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a5f889cb372ca5abb6796cfec44b8cc0d</anchor>
      <arglist>(const GTimeVal &amp;gtimeval)</arglist>
    </member>
    <member kind="function">
      <type>TimeVal &amp;</type>
      <name>operator=</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a2098aff57cd47005faacb51854ede6a9</anchor>
      <arglist>(const GTimeVal &amp;gtimeval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_current_time</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a9e28e3310fc1ee5e2dba7a7ed9cbb97e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assign_from_iso8601</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a0dbe47db920938db0676eb4d7a5b1abe</anchor>
      <arglist>(const Glib::ustring &amp;iso_date)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>ac94c07dbb768f3d1c68731e735f074ba</anchor>
      <arglist>(const TimeVal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>ac47cd4e39665d3a25e3a236b0ced620d</anchor>
      <arglist>(const TimeVal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_seconds</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>ae24a9a526b4f66a16a2bc0047ac52ad6</anchor>
      <arglist>(long seconds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract_seconds</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>aabd386d64098d531101589ba7f9aad4a</anchor>
      <arglist>(long seconds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_milliseconds</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a116ddecfdc3994b541e05d0fd27ce297</anchor>
      <arglist>(long milliseconds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract_milliseconds</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a08a82c224a744142db48b9d9f25a236f</anchor>
      <arglist>(long milliseconds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_microseconds</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a55648d2e807fd75d0eafffc3a595eaf0</anchor>
      <arglist>(long microseconds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract_microseconds</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a495a575cdc38ec785808e58750020957</anchor>
      <arglist>(long microseconds)</arglist>
    </member>
    <member kind="function">
      <type>TimeVal &amp;</type>
      <name>operator+=</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>aab1d96583d1fb003ec887f2cd6fa00b7</anchor>
      <arglist>(const TimeVal &amp;gtimeval)</arglist>
    </member>
    <member kind="function">
      <type>TimeVal &amp;</type>
      <name>operator-=</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a8f20714471ddf46966a0bbdda19448be</anchor>
      <arglist>(const TimeVal &amp;gtimeval)</arglist>
    </member>
    <member kind="function">
      <type>TimeVal &amp;</type>
      <name>operator+=</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a0fab78f2bb33e9f9dbcddbd5ea27cf76</anchor>
      <arglist>(long seconds)</arglist>
    </member>
    <member kind="function">
      <type>TimeVal &amp;</type>
      <name>operator-=</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a8868ad08d7f5e874b05b1045f8b4b230</anchor>
      <arglist>(long seconds)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>as_double</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>af1b7256c83ee2e114119fabb19e3ba91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>as_iso8601</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a68dfea7c4b92a2110126008f3745d71d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>negative</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>ad88b78e1c413ca25dca3b391f1e8b80e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>adac635972d831ff9e590a5d2c7bc0541</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TimeVal</type>
      <name>operator+</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a73ff3d601bc8fa6c8930bb38bfc4b81a</anchor>
      <arglist>(const TimeVal &amp;lhs, const TimeVal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TimeVal</type>
      <name>operator+</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>aff0c676ec4f733efaa502a143a230c5f</anchor>
      <arglist>(const TimeVal &amp;lhs, long seconds)</arglist>
    </member>
    <member kind="function">
      <type>TimeVal</type>
      <name>operator-</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a535d26acb52dfff88be818f67fbdf374</anchor>
      <arglist>(const TimeVal &amp;lhs, const TimeVal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TimeVal</type>
      <name>operator-</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a53bcd5233d92b3af6a55cb4aff9fb6f6</anchor>
      <arglist>(const TimeVal &amp;lhs, long seconds)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a77e3f591d386260fe9e9c63aafa31173</anchor>
      <arglist>(const TimeVal &amp;lhs, const TimeVal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a3519281c327ded4360495fc2dee669ee</anchor>
      <arglist>(const TimeVal &amp;lhs, const TimeVal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>ac68de516b4ddbd26ab553e661108fa83</anchor>
      <arglist>(const TimeVal &amp;lhs, const TimeVal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a2bbae56f9818348985dac857054f4d78</anchor>
      <arglist>(const TimeVal &amp;lhs, const TimeVal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a288728d04ff97620e97b8742c337e21d</anchor>
      <arglist>(const TimeVal &amp;lhs, const TimeVal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>adf5ab3ded63a7ff5c134622deaf03640</anchor>
      <arglist>(const TimeVal &amp;lhs, const TimeVal &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::TimeZone</name>
    <filename>classGlib_1_1TimeZone.html</filename>
    <member kind="function">
      <type></type>
      <name>TimeZone</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>af9c8a7635fc43243d13799b7cf9544fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeZone</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>a37e807fdfc03d2bcd650d03b8c100268</anchor>
      <arglist>(GTimeZone *castitem, bool make_a_copy=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeZone</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>a97a5c31d3146547deb2307cf1d38a734</anchor>
      <arglist>(const TimeZone &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>TimeZone &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>a66afaef68db0a541e2ea1ac3978f56bc</anchor>
      <arglist>(const TimeZone &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeZone</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>aa3f0f1e0314a275277cd9cd7de02940a</anchor>
      <arglist>(TimeZone &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TimeZone &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>aa839e78faf7d69904b4f4ad7a666795e</anchor>
      <arglist>(TimeZone &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TimeZone</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>a62a61dde33a76f35f34f46ad298495b0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>af0c4b19b5077a33abdea239f71af852d</anchor>
      <arglist>(TimeZone &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>GTimeZone *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>a5018eca73f72727ef17c5187d83f749e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GTimeZone *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>a34b9fc8e8aeb66a8723519b941fa4694</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GTimeZone *</type>
      <name>gobj_copy</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>abbe340f38189900872017293dbfc6995</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find_interval</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>a6a5afdc266f9d20312ca5a29cffefcd4</anchor>
      <arglist>(TimeType type, gint64 time) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>adjust_time</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>a23f48da9f2eaff6320f85a3f773370ae</anchor>
      <arglist>(TimeType type, gint64 &amp;time) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_abbreviation</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>a54c0f80981c2977146db63fc1cc079ce</anchor>
      <arglist>(int interval) const</arglist>
    </member>
    <member kind="function">
      <type>gint32</type>
      <name>get_offset</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>a62915c74679384a432210c501796a4a4</anchor>
      <arglist>(int interval) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_dst</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>accd800b0542cdd4254d46d0398d6ff53</anchor>
      <arglist>(int interval) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TimeZone</type>
      <name>create</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>ad53f95cbf8307a835575a33becff076e</anchor>
      <arglist>(const Glib::ustring &amp;identifier)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TimeZone</type>
      <name>create_local</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>ae0eeec8e8ec473789702acac8e8ed37d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TimeZone</type>
      <name>create_utc</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>a3321991cbc511c9c1365d1e26de6fc87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GTimeZone *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>a717ab5d4a1cc6c77665dd4e78b517ba4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>a8d673c87d9a7e230830979b266a88dfd</anchor>
      <arglist>(TimeZone &amp;lhs, TimeZone &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Glib::TimeZone</type>
      <name>wrap</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>a2d4464f05ba65fd63df60e9bcae8d97e</anchor>
      <arglist>(GTimeZone *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ustring</name>
    <filename>classGlib_1_1ustring.html</filename>
    <member kind="typedef">
      <type>std::string::size_type</type>
      <name>size_type</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>af3357773ba5f3913bdc34ea9a8d85e44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string::difference_type</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>adb7b999fe65a400016f9603c34b3e590</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gunichar</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a991b717ea3d3227c292d61b03bc0e55c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gunichar &amp;</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a5d7e2daeeee104401ce4d625a7052f40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const gunichar &amp;</type>
      <name>const_reference</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>af3bf027c3355bc96e8e418ac7a7165cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ustring_Iterator&lt; std::string::iterator &gt;</type>
      <name>iterator</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a6d87d3853d2b2f70dce607428cf1d40f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ustring_Iterator&lt; std::string::const_iterator &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a4a35a4f6d1638d781190378218285b65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aeb3fa6dcbc2b27b705a3d70f920d9b07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a43c8745d40e273056462198bfa446218</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a71802782f4c2c408ef7ac69c6564b370</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ustring</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a49adef86a06535367afee49cad515feb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a5dc4cc90abcdd62a33f9eb92852aac2e</anchor>
      <arglist>(const ustring &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>afb1c91d0ed557a26ec3f04fa4d48f6b9</anchor>
      <arglist>(ustring &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aa8f2a6f7f4321afd3800e8fa038d2609</anchor>
      <arglist>(const ustring &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ad6d9e94aae9e31c175a184f24d42d191</anchor>
      <arglist>(ustring &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aab10391953b67135dba63ccee17bc0c8</anchor>
      <arglist>(ustring &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aa18a6019809b2cb64bb329a8422f1857</anchor>
      <arglist>(const std::string &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a03aa1bcae8a4cf6f6d2f93f0751cb566</anchor>
      <arglist>(std::string &amp;&amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a37655e890b5cb3a2f0fc862b85ba29cc</anchor>
      <arglist>(const ustring &amp;src, size_type i, size_type n=npos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a4a32814b94b8158c126f9dba4cc49839</anchor>
      <arglist>(const char *src, size_type n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ac15b3452b5e61664c5cc03e63fc1cb87</anchor>
      <arglist>(const char *src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aca3b1f0ea95a872075249152726e26cc</anchor>
      <arglist>(size_type n, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a9578a8ed5b5efd1b85ff06064931cc04</anchor>
      <arglist>(size_type n, char c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a01e9bf49373f364a7a5650f9de806d56</anchor>
      <arglist>(In pbegin, In pend)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ab09a3fb3ebcb703c9fe2c8a182ca61d9</anchor>
      <arglist>(const std::string &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a252bd66c513ecec1c833204237be733c</anchor>
      <arglist>(std::string &amp;&amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a462c9ecbe5a1ba9f82f3d8fe65551799</anchor>
      <arglist>(const char *src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a3a6b53d3bdad890c0c55a3dd5eb1ee6d</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a192af14563f29029f00e1dfc3cb97180</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>assign</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a042e31ee9f6f03238776b64901386fb1</anchor>
      <arglist>(const ustring &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>assign</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a3c0c9669a7fa5c1cde42ad367c08d186</anchor>
      <arglist>(ustring &amp;&amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>assign</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a35e75872182e516aecf7cbdc14e67ce2</anchor>
      <arglist>(const ustring &amp;src, size_type i, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>assign</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a989c810b8a7d63893adac83020f9e974</anchor>
      <arglist>(const char *src, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>assign</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a08c1aa84e95d2d4012faeb83b61e0c4f</anchor>
      <arglist>(const char *src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>assign</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a6e17c136d7fce8916c2c72af1c403fbd</anchor>
      <arglist>(size_type n, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>assign</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a8c5e94fc459cd41784a476bfd55c5fbe</anchor>
      <arglist>(size_type n, char c)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>assign</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a4338286bc81f4e54050aba273984cece</anchor>
      <arglist>(In pbegin, In pend)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator+=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>afefb665c88b67a3eaaa00f3a07977cf1</anchor>
      <arglist>(const ustring &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator+=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a8b493156ea0a9b488765b4b683874ee5</anchor>
      <arglist>(const char *src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator+=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a9820af75b209405f70477c42e2cf76ce</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator+=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a4752324b5d6ee7d39fa6581d473a5d4c</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>afdf6aaf1bdc127a37b779e872f005663</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aa7d9d1a618d511a07aa8d6a297398c71</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>append</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a8ee78968938b742083e3dd785be1c82e</anchor>
      <arglist>(const ustring &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>append</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a62f1635fe0971922a42c0daed6014ae9</anchor>
      <arglist>(const ustring &amp;src, size_type i, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>append</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a696bcfe283235e38a8bee7806cb80dba</anchor>
      <arglist>(const char *src, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>append</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a41df279b9a20314cd810190a5732b7d4</anchor>
      <arglist>(const char *src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>append</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ae1dc013550a42becdb36e407044d5b39</anchor>
      <arglist>(size_type n, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>append</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ae2ff748e9869b087c3a5b7b486b94ae2</anchor>
      <arglist>(size_type n, char c)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>append</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a84e95ff4b9b5e71a20cb2c99d6168fe0</anchor>
      <arglist>(In pbegin, In pend)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>adc7ed354d9657590e61f65dc9ea4b498</anchor>
      <arglist>(size_type i, const ustring &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a7dee38b14e2975f3ca60ad407bef62b6</anchor>
      <arglist>(size_type i, const ustring &amp;src, size_type i2, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a67da2d68fda78fd3e1f70c915ad0c8f7</anchor>
      <arglist>(size_type i, const char *src, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>af3e79d497de7d2e593a1aa1e267cce64</anchor>
      <arglist>(size_type i, const char *src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a5c163a5f8690d593e44a2cad810bbd5f</anchor>
      <arglist>(size_type i, size_type n, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a3f60e626c9cdb00f1ae73804542a6cd4</anchor>
      <arglist>(size_type i, size_type n, char c)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ab1b0455f1db1608834c2c6f7ab753f25</anchor>
      <arglist>(iterator p, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ae74a1b439755c000f9d77e3a51f2c522</anchor>
      <arglist>(iterator p, char c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ae0ba0b641b603d07490c90789f9592fb</anchor>
      <arglist>(iterator p, size_type n, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aa2ff066e10cb1ed9ecbee902e625c859</anchor>
      <arglist>(iterator p, size_type n, char c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a8dad1bbcde2adf3fc9fabc4ddac8a42d</anchor>
      <arglist>(iterator p, In pbegin, In pend)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a0f0c9b5aaad58279d3ac87a86a173f4a</anchor>
      <arglist>(size_type i, size_type n, const ustring &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a0e5c1ca4f4fe63ab8ba991339676ee16</anchor>
      <arglist>(size_type i, size_type n, const ustring &amp;src, size_type i2, size_type n2)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ab0bb3c55c72e41f856be06f0026c7289</anchor>
      <arglist>(size_type i, size_type n, const char *src, size_type n2)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a8111ac295e4d589075a78e46d304f908</anchor>
      <arglist>(size_type i, size_type n, const char *src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a41fd10a9dae5a6e5a48844255be3667e</anchor>
      <arglist>(size_type i, size_type n, size_type n2, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ab10df235025c2bd67bbc82630ae6169f</anchor>
      <arglist>(size_type i, size_type n, size_type n2, char c)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a440d241c8506fef8d7db45390b7082bd</anchor>
      <arglist>(iterator pbegin, iterator pend, const ustring &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a6175229e79d9e8331a59cf11a572ac7a</anchor>
      <arglist>(iterator pbegin, iterator pend, const char *src, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a44fca1dfd45c017330af208415752975</anchor>
      <arglist>(iterator pbegin, iterator pend, const char *src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a54e65b70536fb16267c7e229db929009</anchor>
      <arglist>(iterator pbegin, iterator pend, size_type n, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a880730452006fdb7f78a710fc5c51b9b</anchor>
      <arglist>(iterator pbegin, iterator pend, size_type n, char c)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a60dd5d7a58443e503f39b0c7372b77ed</anchor>
      <arglist>(iterator pbegin, iterator pend, In pbegin2, In pend2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a29d71bbd400b18e9e81b1f51b193a172</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>erase</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>acd29a2b0ea0e40068a1b77a2276bb68e</anchor>
      <arglist>(size_type i, size_type n=npos)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>erase</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>adc5cf169c9af32e912727ce3bf541549</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ac6ea980bbbeeef8bcf727543c9bd5c69</anchor>
      <arglist>(iterator p)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ad550647c64ee20c076aae11c824ca147</anchor>
      <arglist>(iterator pbegin, iterator pend)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>af1f548346857b57cb436dccef7cd9674</anchor>
      <arglist>(const ustring &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a4fc8326bf67153dc3e1ef49bc74e3872</anchor>
      <arglist>(const char *rhs) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aeb8404a6acd41ef91b1033284bf67b4f</anchor>
      <arglist>(size_type i, size_type n, const ustring &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a0b011612838f64a9bb7427ae8fff2556</anchor>
      <arglist>(size_type i, size_type n, const ustring &amp;rhs, size_type i2, size_type n2) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a00a155157bce2c5cb967d5b5f27b985f</anchor>
      <arglist>(size_type i, size_type n, const char *rhs, size_type n2) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a1998f175c05d1e0e877cee6b90ab6283</anchor>
      <arglist>(size_type i, size_type n, const char *rhs) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>collate_key</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a5322472a8bd3a81781dee61ca2aec125</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>casefold_collate_key</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aab330bf32356ffe6ba6f12628af50bc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator[]</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ae5f5284ab55e378dab6667bc91d2fe61</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>at</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a9f83c78e510e3cc7b4d481409518b320</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>substr</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aa34225249c4690eb8cf2e0dc95a7366b</anchor>
      <arglist>(size_type i=0, size_type n=npos) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a6389a5bd22b924d09dd483c6f09cf80b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>abd3e8c51c3ee4f2a2e077e0956ab7b59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a69f36d2bbaf974ca77a6dcb56312dcc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a233b4c8b05e20bdbe1c8b946443ec999</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a6fa752b1bbfd0b816f338db1ec913da0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a67c0a179fa38d0f69396a7827d9e781e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>af10078cf772e2988aa771c4b4834725e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ab43d03f7d02b7f27b81d75b7f6653050</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a8355496f6f94174eb4c1750e9bbf5346</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a69dc7db69165792f1a950dafd46edd64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>af424341efd4270e8059c478f271ba57e</anchor>
      <arglist>(const ustring &amp;str, size_type i=0) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ae32408ee9ab1fed2199c9d3a1a020e37</anchor>
      <arglist>(const char *str, size_type i, size_type n) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ae515de0f670c6243a48042be0e9be6e8</anchor>
      <arglist>(const char *str, size_type i=0) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a3219122ff34ab6a075810f75f980c4ad</anchor>
      <arglist>(gunichar uc, size_type i=0) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a0cb7242cbb69f6cd3d2ca8b649a048ae</anchor>
      <arglist>(char c, size_type i=0) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rfind</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a874bda3af6a3e04ff91ea22a9e450ba8</anchor>
      <arglist>(const ustring &amp;str, size_type i=npos) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rfind</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a7b58e946330b5d6abc18e0fe32f6debc</anchor>
      <arglist>(const char *str, size_type i, size_type n) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rfind</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a28374d47cc3842f478301fea32281b37</anchor>
      <arglist>(const char *str, size_type i=npos) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rfind</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a64441fd6b136af19edd820ed32b8f1d1</anchor>
      <arglist>(gunichar uc, size_type i=npos) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rfind</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a042428f9d1d349140b9219e72ef098e9</anchor>
      <arglist>(char c, size_type i=npos) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a2132efcbbbe5b6dbde12318c8a16784d</anchor>
      <arglist>(const ustring &amp;match, size_type i=0) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a58644ca6c4029f30822e5bcd54bbf224</anchor>
      <arglist>(const char *match, size_type i, size_type n) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ad04f0ccb51024477244ffca15e543a30</anchor>
      <arglist>(const char *match, size_type i=0) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a3e49f677b1cdc977cd26fb44c8fe3528</anchor>
      <arglist>(gunichar uc, size_type i=0) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a148c2369db299f498eaf1511a74e6322</anchor>
      <arglist>(char c, size_type i=0) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a6df18cfc42979a9b8015c556395784a0</anchor>
      <arglist>(const ustring &amp;match, size_type i=npos) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a0f583556f3fdd831942b4832f9a13dd6</anchor>
      <arglist>(const char *match, size_type i, size_type n) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a3282943bdfea48f9c45fa3f38c8e4e89</anchor>
      <arglist>(const char *match, size_type i=npos) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a21119b996408818581d201a6d33e528f</anchor>
      <arglist>(gunichar uc, size_type i=npos) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a1f6a531a16846b98433fcc059b40223c</anchor>
      <arglist>(char c, size_type i=npos) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a57809672327fbec65869e06be68487e8</anchor>
      <arglist>(const ustring &amp;match, size_type i=0) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a263f3610d30d520fdd1657982e384c07</anchor>
      <arglist>(const char *match, size_type i, size_type n) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>afefdbed6780d934d8e29cbba7cef8084</anchor>
      <arglist>(const char *match, size_type i=0) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aabe3cd071728ccceacf2cdbafb9b0bd2</anchor>
      <arglist>(gunichar uc, size_type i=0) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aee60f1f3ab076238d392487db4a43090</anchor>
      <arglist>(char c, size_type i=0) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ad2f94f5555d5e7e748183c2b914dc351</anchor>
      <arglist>(const ustring &amp;match, size_type i=npos) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a162a5fac845a94a30bb98428c7586a03</anchor>
      <arglist>(const char *match, size_type i, size_type n) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a0201181819443aa5026839ea2212ae0b</anchor>
      <arglist>(const char *match, size_type i=npos) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>abc4b1d665b04fd8accfd5549a98eb196</anchor>
      <arglist>(gunichar uc, size_type i=npos) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a4dd5b79322c948036cb9175ccf723ee8</anchor>
      <arglist>(char c, size_type i=npos) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a9a7e87babf9d55abc346afbfd092a5b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a3e25253dfe5775e05c3b59051ebc6684</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>length</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aff7287d93f415aa1ce8bac801a51dfa1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>bytes</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ac35e61350249d3b55cb82602f8ccd5cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a267b95424c7ab80b79a12e569d369368</anchor>
      <arglist>(size_type n, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>acf40ef3330bbb5cb608c53346592f31a</anchor>
      <arglist>(size_type n, char c=&apos;\0&apos;)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>capacity</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ad027d470775cedb0e6c9cb885f0f0d0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aaa90f2982af77c310349e4248dba3472</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a7b762f649f8c349f7d3b288aec797f7c</anchor>
      <arglist>(size_type n=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a5c20001bb2384464cd65746392a6dacb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>raw</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a9e8e276e0e543f282a39fa091b5d6eec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>data</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a3de9dc2a53cbb59ee51cb11968e2b6ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>c_str</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aa013db90bc4dd13a433b19230f3f8374</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>copy</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a24c8ac64aa21ad0ed7f0f3a0025916a3</anchor>
      <arglist>(char *dest, size_type n, size_type i=0) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validate</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a3a0be94943f1cdfc286cf224c45d9942</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validate</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ae6880bcb529516f64ea7205136d65d44</anchor>
      <arglist>(iterator &amp;first_invalid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validate</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a3f67c2442ee1a35a029762efc7b738dd</anchor>
      <arglist>(const_iterator &amp;first_invalid) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_ascii</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a6a15a51306f4a97636a051c4af7e8c7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>normalize</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ae0c6079a4b022d697c3c3747f4ea8e88</anchor>
      <arglist>(NormalizeMode mode=NORMALIZE_DEFAULT_COMPOSE) const</arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>uppercase</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a0d6dd307e8efce3b600c710112cfd3d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>lowercase</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ad4211856010837e68b49e455ac93d572</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>casefold</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a8f94cde7b3e7bbc0ec851c2099556ec5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>compose</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a18e1242bc0ad8a961a28fb2198392258</anchor>
      <arglist>(const ustring &amp;fmt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>compose</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a64ff7ac3d9e9899c2910f1d831f8d500</anchor>
      <arglist>(const ustring &amp;fmt, const T1 &amp;a1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>compose</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aafa50bf6378411e84cfcb8eec3c1b78c</anchor>
      <arglist>(const ustring &amp;fmt, const T1 &amp;a1, const T2 &amp;a2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>compose</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a23babfac57b0c753d0166bcd479d497c</anchor>
      <arglist>(const ustring &amp;fmt, const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>compose</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a77b874fd49dcdbcee3ff00cbdc286fc6</anchor>
      <arglist>(const ustring &amp;fmt, const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3, const T4 &amp;a4)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>compose</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a668431ad045dd396be557ddb7c97e695</anchor>
      <arglist>(const ustring &amp;fmt, const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3, const T4 &amp;a4, const T5 &amp;a5)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>compose</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aecc4d28eb153ee5801ff7c4807300b8c</anchor>
      <arglist>(const ustring &amp;fmt, const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3, const T4 &amp;a4, const T5 &amp;a5, const T6 &amp;a6)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>compose</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a1242cfcef5bbd276621851f23e9fa8ad</anchor>
      <arglist>(const ustring &amp;fmt, const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3, const T4 &amp;a4, const T5 &amp;a5, const T6 &amp;a6, const T7 &amp;a7)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>compose</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>acc5a140391a94c717645e162e00b7634</anchor>
      <arglist>(const ustring &amp;fmt, const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3, const T4 &amp;a4, const T5 &amp;a5, const T6 &amp;a6, const T7 &amp;a7, const T8 &amp;a8)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>compose</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ad549288c86e186f21ce130ee3ea01ac8</anchor>
      <arglist>(const ustring &amp;fmt, const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3, const T4 &amp;a4, const T5 &amp;a5, const T6 &amp;a6, const T7 &amp;a7, const T8 &amp;a8, const T9 &amp;a9)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>format</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ab107f38a4f62c08156ca7235e4439792</anchor>
      <arglist>(const T1 &amp;a1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>format</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a4572cef7cea72238874f52614bbcc929</anchor>
      <arglist>(const T1 &amp;a1, const T2 &amp;a2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>format</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a1e7223b475a23eb1367b11abe4947c71</anchor>
      <arglist>(const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>format</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a1ca54756c09e64a63e17420ce78b0806</anchor>
      <arglist>(const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3, const T4 &amp;a4)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>format</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a47ca2aeba24825d5dc3a7e2a9df58d42</anchor>
      <arglist>(const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3, const T4 &amp;a4, const T5 &amp;a5)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>format</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a664c5f3d71f229bd36aa7dec6035aa52</anchor>
      <arglist>(const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3, const T4 &amp;a4, const T5 &amp;a5, const T6 &amp;a6)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>format</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a21d4eadf25b9114dd467b4a1efd0d8f7</anchor>
      <arglist>(const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3, const T4 &amp;a4, const T5 &amp;a5, const T6 &amp;a6, const T7 &amp;a7)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>format</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a7229d13d23610d00322ac33a2b162b24</anchor>
      <arglist>(const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3, const T4 &amp;a4, const T5 &amp;a5, const T6 &amp;a6, const T7 &amp;a7, const T8 &amp;a8)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_type</type>
      <name>npos</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a61c7ec1483736fdcd15fe0a0c13abf26</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a6db8569e4295d0b6e620b5a423c572ac</anchor>
      <arglist>(std::istream &amp;is, Glib::ustring &amp;utf8_string)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a48666f99f399065075c916ee1742393c</anchor>
      <arglist>(std::ostream &amp;os, const Glib::ustring &amp;utf8_string)</arglist>
    </member>
    <member kind="function">
      <type>std::wistream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a767612fad39971f9573e12ae7f4fab1e</anchor>
      <arglist>(std::wistream &amp;is, ustring &amp;utf8_string)</arglist>
    </member>
    <member kind="function">
      <type>std::wostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a96e0d2f2a88e489fc7c2855f49e999e2</anchor>
      <arglist>(std::wostream &amp;os, const ustring &amp;utf8_string)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aaa999f27120493fab2bbcb15ad32e1fd</anchor>
      <arglist>(ustring &amp;lhs, ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a8de47e1d7bb26732cfa05ec51a4fcc36</anchor>
      <arglist>(const ustring &amp;lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a5c36c162303fcac90e0cad98e5d853ba</anchor>
      <arglist>(const ustring &amp;lhs, const char *rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a41d8c9b5ed68e92cab26695fc1f4ab25</anchor>
      <arglist>(const char *lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a769fa72dab1a8593936e4d1e7427d5bf</anchor>
      <arglist>(const ustring &amp;lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>afabe45d06c824249d356f845339dcf79</anchor>
      <arglist>(const ustring &amp;lhs, const char *rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a589cb7a5bbc1c182a98f9a2ddcc875ac</anchor>
      <arglist>(const char *lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a7db7cd5453e8ee3759e26bf4b6e64032</anchor>
      <arglist>(const ustring &amp;lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a33a94fc0e34c020891dbf7ce3370e4d3</anchor>
      <arglist>(const ustring &amp;lhs, const char *rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a0af331fc288b855db7a8a9a8ac4db2f1</anchor>
      <arglist>(const char *lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a2608d2a621b5dcc9d33aa70f2607c61c</anchor>
      <arglist>(const ustring &amp;lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a61c211450e992dde4d07a8ee903a06c1</anchor>
      <arglist>(const ustring &amp;lhs, const char *rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a73958401c880bdfe2dfeb5f8ebda29de</anchor>
      <arglist>(const char *lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a9ffc92d15e8c999e1de479ba49dc8f1b</anchor>
      <arglist>(const ustring &amp;lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a8b60486f4223c4aff0d7dcca8ca108e6</anchor>
      <arglist>(const ustring &amp;lhs, const char *rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a42b3c3fafd868c34b19590979b9f575c</anchor>
      <arglist>(const char *lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a0bb54254372b88a27847dada4bd57bb0</anchor>
      <arglist>(const ustring &amp;lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a501a833ed0b311598a9eef8fde525221</anchor>
      <arglist>(const ustring &amp;lhs, const char *rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>afead426b680bdfde61ba6ad91da5479f</anchor>
      <arglist>(const char *lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>operator+</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a6b11288ba72c136097f549369983f2ec</anchor>
      <arglist>(const ustring &amp;lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>operator+</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ac58ba66e58462e1ee1ff4f9408c8f351</anchor>
      <arglist>(const ustring &amp;lhs, const char *rhs)</arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>operator+</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>abdd772f46a21d519578ac3795cb4a090</anchor>
      <arglist>(const char *lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>operator+</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a572b14b910b8a66510ab87f0ce6349d5</anchor>
      <arglist>(const ustring &amp;lhs, gunichar rhs)</arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>operator+</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ad29db04ea21d148042cd8c4ad247781f</anchor>
      <arglist>(gunichar lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>operator+</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a7fad3f7c5b642aaad0e3cf8a9396446f</anchor>
      <arglist>(const ustring &amp;lhs, char rhs)</arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>operator+</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a0d0409577fa7d97a469c1bd07367b53e</anchor>
      <arglist>(char lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ab09a3fb3ebcb703c9fe2c8a182ca61d9</anchor>
      <arglist>(const std::string &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a252bd66c513ecec1c833204237be733c</anchor>
      <arglist>(std::string &amp;&amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a462c9ecbe5a1ba9f82f3d8fe65551799</anchor>
      <arglist>(const char *src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a3a6b53d3bdad890c0c55a3dd5eb1ee6d</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a192af14563f29029f00e1dfc3cb97180</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>assign</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a042e31ee9f6f03238776b64901386fb1</anchor>
      <arglist>(const ustring &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>assign</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a3c0c9669a7fa5c1cde42ad367c08d186</anchor>
      <arglist>(ustring &amp;&amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>assign</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a35e75872182e516aecf7cbdc14e67ce2</anchor>
      <arglist>(const ustring &amp;src, size_type i, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>assign</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a989c810b8a7d63893adac83020f9e974</anchor>
      <arglist>(const char *src, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>assign</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a08c1aa84e95d2d4012faeb83b61e0c4f</anchor>
      <arglist>(const char *src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>assign</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a6e17c136d7fce8916c2c72af1c403fbd</anchor>
      <arglist>(size_type n, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>assign</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a8c5e94fc459cd41784a476bfd55c5fbe</anchor>
      <arglist>(size_type n, char c)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>assign</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a4338286bc81f4e54050aba273984cece</anchor>
      <arglist>(In pbegin, In pend)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator+=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>afefb665c88b67a3eaaa00f3a07977cf1</anchor>
      <arglist>(const ustring &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator+=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a8b493156ea0a9b488765b4b683874ee5</anchor>
      <arglist>(const char *src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator+=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a9820af75b209405f70477c42e2cf76ce</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator+=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a4752324b5d6ee7d39fa6581d473a5d4c</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>afdf6aaf1bdc127a37b779e872f005663</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aa7d9d1a618d511a07aa8d6a297398c71</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>append</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a8ee78968938b742083e3dd785be1c82e</anchor>
      <arglist>(const ustring &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>append</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a62f1635fe0971922a42c0daed6014ae9</anchor>
      <arglist>(const ustring &amp;src, size_type i, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>append</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a696bcfe283235e38a8bee7806cb80dba</anchor>
      <arglist>(const char *src, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>append</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a41df279b9a20314cd810190a5732b7d4</anchor>
      <arglist>(const char *src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>append</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ae1dc013550a42becdb36e407044d5b39</anchor>
      <arglist>(size_type n, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>append</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ae2ff748e9869b087c3a5b7b486b94ae2</anchor>
      <arglist>(size_type n, char c)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>append</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a84e95ff4b9b5e71a20cb2c99d6168fe0</anchor>
      <arglist>(In pbegin, In pend)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>adc7ed354d9657590e61f65dc9ea4b498</anchor>
      <arglist>(size_type i, const ustring &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a7dee38b14e2975f3ca60ad407bef62b6</anchor>
      <arglist>(size_type i, const ustring &amp;src, size_type i2, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a67da2d68fda78fd3e1f70c915ad0c8f7</anchor>
      <arglist>(size_type i, const char *src, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>af3e79d497de7d2e593a1aa1e267cce64</anchor>
      <arglist>(size_type i, const char *src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a5c163a5f8690d593e44a2cad810bbd5f</anchor>
      <arglist>(size_type i, size_type n, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a3f60e626c9cdb00f1ae73804542a6cd4</anchor>
      <arglist>(size_type i, size_type n, char c)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ab1b0455f1db1608834c2c6f7ab753f25</anchor>
      <arglist>(iterator p, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ae74a1b439755c000f9d77e3a51f2c522</anchor>
      <arglist>(iterator p, char c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ae0ba0b641b603d07490c90789f9592fb</anchor>
      <arglist>(iterator p, size_type n, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aa2ff066e10cb1ed9ecbee902e625c859</anchor>
      <arglist>(iterator p, size_type n, char c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a8dad1bbcde2adf3fc9fabc4ddac8a42d</anchor>
      <arglist>(iterator p, In pbegin, In pend)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a0f0c9b5aaad58279d3ac87a86a173f4a</anchor>
      <arglist>(size_type i, size_type n, const ustring &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a0e5c1ca4f4fe63ab8ba991339676ee16</anchor>
      <arglist>(size_type i, size_type n, const ustring &amp;src, size_type i2, size_type n2)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ab0bb3c55c72e41f856be06f0026c7289</anchor>
      <arglist>(size_type i, size_type n, const char *src, size_type n2)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a8111ac295e4d589075a78e46d304f908</anchor>
      <arglist>(size_type i, size_type n, const char *src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a41fd10a9dae5a6e5a48844255be3667e</anchor>
      <arglist>(size_type i, size_type n, size_type n2, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ab10df235025c2bd67bbc82630ae6169f</anchor>
      <arglist>(size_type i, size_type n, size_type n2, char c)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a440d241c8506fef8d7db45390b7082bd</anchor>
      <arglist>(iterator pbegin, iterator pend, const ustring &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a6175229e79d9e8331a59cf11a572ac7a</anchor>
      <arglist>(iterator pbegin, iterator pend, const char *src, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a44fca1dfd45c017330af208415752975</anchor>
      <arglist>(iterator pbegin, iterator pend, const char *src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a54e65b70536fb16267c7e229db929009</anchor>
      <arglist>(iterator pbegin, iterator pend, size_type n, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a880730452006fdb7f78a710fc5c51b9b</anchor>
      <arglist>(iterator pbegin, iterator pend, size_type n, char c)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a60dd5d7a58443e503f39b0c7372b77ed</anchor>
      <arglist>(iterator pbegin, iterator pend, In pbegin2, In pend2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a29d71bbd400b18e9e81b1f51b193a172</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>erase</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>acd29a2b0ea0e40068a1b77a2276bb68e</anchor>
      <arglist>(size_type i, size_type n=npos)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>erase</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>adc5cf169c9af32e912727ce3bf541549</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ac6ea980bbbeeef8bcf727543c9bd5c69</anchor>
      <arglist>(iterator p)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ad550647c64ee20c076aae11c824ca147</anchor>
      <arglist>(iterator pbegin, iterator pend)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>af1f548346857b57cb436dccef7cd9674</anchor>
      <arglist>(const ustring &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a4fc8326bf67153dc3e1ef49bc74e3872</anchor>
      <arglist>(const char *rhs) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aeb8404a6acd41ef91b1033284bf67b4f</anchor>
      <arglist>(size_type i, size_type n, const ustring &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a0b011612838f64a9bb7427ae8fff2556</anchor>
      <arglist>(size_type i, size_type n, const ustring &amp;rhs, size_type i2, size_type n2) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a00a155157bce2c5cb967d5b5f27b985f</anchor>
      <arglist>(size_type i, size_type n, const char *rhs, size_type n2) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a1998f175c05d1e0e877cee6b90ab6283</anchor>
      <arglist>(size_type i, size_type n, const char *rhs) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>collate_key</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a5322472a8bd3a81781dee61ca2aec125</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>casefold_collate_key</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aab330bf32356ffe6ba6f12628af50bc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator[]</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ae5f5284ab55e378dab6667bc91d2fe61</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>at</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a9f83c78e510e3cc7b4d481409518b320</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>substr</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aa34225249c4690eb8cf2e0dc95a7366b</anchor>
      <arglist>(size_type i=0, size_type n=npos) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a6389a5bd22b924d09dd483c6f09cf80b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>abd3e8c51c3ee4f2a2e077e0956ab7b59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a69f36d2bbaf974ca77a6dcb56312dcc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a233b4c8b05e20bdbe1c8b946443ec999</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a6fa752b1bbfd0b816f338db1ec913da0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a67c0a179fa38d0f69396a7827d9e781e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>af10078cf772e2988aa771c4b4834725e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ab43d03f7d02b7f27b81d75b7f6653050</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a8355496f6f94174eb4c1750e9bbf5346</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a69dc7db69165792f1a950dafd46edd64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>af424341efd4270e8059c478f271ba57e</anchor>
      <arglist>(const ustring &amp;str, size_type i=0) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ae32408ee9ab1fed2199c9d3a1a020e37</anchor>
      <arglist>(const char *str, size_type i, size_type n) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ae515de0f670c6243a48042be0e9be6e8</anchor>
      <arglist>(const char *str, size_type i=0) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a3219122ff34ab6a075810f75f980c4ad</anchor>
      <arglist>(gunichar uc, size_type i=0) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a0cb7242cbb69f6cd3d2ca8b649a048ae</anchor>
      <arglist>(char c, size_type i=0) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rfind</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a874bda3af6a3e04ff91ea22a9e450ba8</anchor>
      <arglist>(const ustring &amp;str, size_type i=npos) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rfind</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a7b58e946330b5d6abc18e0fe32f6debc</anchor>
      <arglist>(const char *str, size_type i, size_type n) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rfind</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a28374d47cc3842f478301fea32281b37</anchor>
      <arglist>(const char *str, size_type i=npos) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rfind</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a64441fd6b136af19edd820ed32b8f1d1</anchor>
      <arglist>(gunichar uc, size_type i=npos) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rfind</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a042428f9d1d349140b9219e72ef098e9</anchor>
      <arglist>(char c, size_type i=npos) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a2132efcbbbe5b6dbde12318c8a16784d</anchor>
      <arglist>(const ustring &amp;match, size_type i=0) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a58644ca6c4029f30822e5bcd54bbf224</anchor>
      <arglist>(const char *match, size_type i, size_type n) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ad04f0ccb51024477244ffca15e543a30</anchor>
      <arglist>(const char *match, size_type i=0) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a3e49f677b1cdc977cd26fb44c8fe3528</anchor>
      <arglist>(gunichar uc, size_type i=0) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a148c2369db299f498eaf1511a74e6322</anchor>
      <arglist>(char c, size_type i=0) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a6df18cfc42979a9b8015c556395784a0</anchor>
      <arglist>(const ustring &amp;match, size_type i=npos) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a0f583556f3fdd831942b4832f9a13dd6</anchor>
      <arglist>(const char *match, size_type i, size_type n) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a3282943bdfea48f9c45fa3f38c8e4e89</anchor>
      <arglist>(const char *match, size_type i=npos) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a21119b996408818581d201a6d33e528f</anchor>
      <arglist>(gunichar uc, size_type i=npos) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a1f6a531a16846b98433fcc059b40223c</anchor>
      <arglist>(char c, size_type i=npos) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a57809672327fbec65869e06be68487e8</anchor>
      <arglist>(const ustring &amp;match, size_type i=0) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a263f3610d30d520fdd1657982e384c07</anchor>
      <arglist>(const char *match, size_type i, size_type n) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>afefdbed6780d934d8e29cbba7cef8084</anchor>
      <arglist>(const char *match, size_type i=0) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aabe3cd071728ccceacf2cdbafb9b0bd2</anchor>
      <arglist>(gunichar uc, size_type i=0) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aee60f1f3ab076238d392487db4a43090</anchor>
      <arglist>(char c, size_type i=0) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ad2f94f5555d5e7e748183c2b914dc351</anchor>
      <arglist>(const ustring &amp;match, size_type i=npos) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a162a5fac845a94a30bb98428c7586a03</anchor>
      <arglist>(const char *match, size_type i, size_type n) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a0201181819443aa5026839ea2212ae0b</anchor>
      <arglist>(const char *match, size_type i=npos) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>abc4b1d665b04fd8accfd5549a98eb196</anchor>
      <arglist>(gunichar uc, size_type i=npos) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a4dd5b79322c948036cb9175ccf723ee8</anchor>
      <arglist>(char c, size_type i=npos) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a9a7e87babf9d55abc346afbfd092a5b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a3e25253dfe5775e05c3b59051ebc6684</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>length</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aff7287d93f415aa1ce8bac801a51dfa1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>bytes</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ac35e61350249d3b55cb82602f8ccd5cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a267b95424c7ab80b79a12e569d369368</anchor>
      <arglist>(size_type n, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>acf40ef3330bbb5cb608c53346592f31a</anchor>
      <arglist>(size_type n, char c=&apos;\0&apos;)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>capacity</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ad027d470775cedb0e6c9cb885f0f0d0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aaa90f2982af77c310349e4248dba3472</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a7b762f649f8c349f7d3b288aec797f7c</anchor>
      <arglist>(size_type n=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a5c20001bb2384464cd65746392a6dacb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>raw</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a9e8e276e0e543f282a39fa091b5d6eec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>data</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a3de9dc2a53cbb59ee51cb11968e2b6ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>c_str</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aa013db90bc4dd13a433b19230f3f8374</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>copy</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a24c8ac64aa21ad0ed7f0f3a0025916a3</anchor>
      <arglist>(char *dest, size_type n, size_type i=0) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validate</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a3a0be94943f1cdfc286cf224c45d9942</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validate</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ae6880bcb529516f64ea7205136d65d44</anchor>
      <arglist>(iterator &amp;first_invalid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validate</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a3f67c2442ee1a35a029762efc7b738dd</anchor>
      <arglist>(const_iterator &amp;first_invalid) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_ascii</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a6a15a51306f4a97636a051c4af7e8c7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>normalize</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ae0c6079a4b022d697c3c3747f4ea8e88</anchor>
      <arglist>(NormalizeMode mode=NORMALIZE_DEFAULT_COMPOSE) const</arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>uppercase</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a0d6dd307e8efce3b600c710112cfd3d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>lowercase</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ad4211856010837e68b49e455ac93d572</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>casefold</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a8f94cde7b3e7bbc0ec851c2099556ec5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>compose</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a18e1242bc0ad8a961a28fb2198392258</anchor>
      <arglist>(const ustring &amp;fmt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>compose</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a64ff7ac3d9e9899c2910f1d831f8d500</anchor>
      <arglist>(const ustring &amp;fmt, const T1 &amp;a1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>compose</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aafa50bf6378411e84cfcb8eec3c1b78c</anchor>
      <arglist>(const ustring &amp;fmt, const T1 &amp;a1, const T2 &amp;a2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>compose</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a23babfac57b0c753d0166bcd479d497c</anchor>
      <arglist>(const ustring &amp;fmt, const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>compose</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a77b874fd49dcdbcee3ff00cbdc286fc6</anchor>
      <arglist>(const ustring &amp;fmt, const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3, const T4 &amp;a4)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>compose</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a668431ad045dd396be557ddb7c97e695</anchor>
      <arglist>(const ustring &amp;fmt, const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3, const T4 &amp;a4, const T5 &amp;a5)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>compose</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aecc4d28eb153ee5801ff7c4807300b8c</anchor>
      <arglist>(const ustring &amp;fmt, const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3, const T4 &amp;a4, const T5 &amp;a5, const T6 &amp;a6)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>compose</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a1242cfcef5bbd276621851f23e9fa8ad</anchor>
      <arglist>(const ustring &amp;fmt, const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3, const T4 &amp;a4, const T5 &amp;a5, const T6 &amp;a6, const T7 &amp;a7)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>compose</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>acc5a140391a94c717645e162e00b7634</anchor>
      <arglist>(const ustring &amp;fmt, const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3, const T4 &amp;a4, const T5 &amp;a5, const T6 &amp;a6, const T7 &amp;a7, const T8 &amp;a8)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>compose</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ad549288c86e186f21ce130ee3ea01ac8</anchor>
      <arglist>(const ustring &amp;fmt, const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3, const T4 &amp;a4, const T5 &amp;a5, const T6 &amp;a6, const T7 &amp;a7, const T8 &amp;a8, const T9 &amp;a9)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>format</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ab107f38a4f62c08156ca7235e4439792</anchor>
      <arglist>(const T1 &amp;a1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>format</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a4572cef7cea72238874f52614bbcc929</anchor>
      <arglist>(const T1 &amp;a1, const T2 &amp;a2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>format</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a1e7223b475a23eb1367b11abe4947c71</anchor>
      <arglist>(const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>format</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a1ca54756c09e64a63e17420ce78b0806</anchor>
      <arglist>(const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3, const T4 &amp;a4)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>format</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a47ca2aeba24825d5dc3a7e2a9df58d42</anchor>
      <arglist>(const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3, const T4 &amp;a4, const T5 &amp;a5)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>format</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a664c5f3d71f229bd36aa7dec6035aa52</anchor>
      <arglist>(const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3, const T4 &amp;a4, const T5 &amp;a5, const T6 &amp;a6)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>format</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a21d4eadf25b9114dd467b4a1efd0d8f7</anchor>
      <arglist>(const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3, const T4 &amp;a4, const T5 &amp;a5, const T6 &amp;a6, const T7 &amp;a7)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>format</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a7229d13d23610d00322ac33a2b162b24</anchor>
      <arglist>(const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3, const T4 &amp;a4, const T5 &amp;a5, const T6 &amp;a6, const T7 &amp;a7, const T8 &amp;a8)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ustring_Iterator</name>
    <filename>classGlib_1_1ustring__Iterator.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::bidirectional_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>a4a94d066bf24c72f91ec0baa35fc2935</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gunichar</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>a766856207efc45a01f0eec9fc93992d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string::difference_type</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>a2b1c245ff5371ed35511e8299d13ef66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>a8dbf552182724ea048faee7cd5757e5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>pointer</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>a27920a6daf1e6257b16d7326dd254cf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring_Iterator</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>af20ce404b0ffb807ace293af4ddf7f07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring_Iterator</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>a456579af0eafeabf6014825dc8b3c103</anchor>
      <arglist>(const ustring_Iterator&lt; std::string::iterator &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator*</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>acc2ec44bdc9859ba5136cce0943e16a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ustring_Iterator&lt; T &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>ada50c68ef23fd35a3d20d4ad57b02e57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ustring_Iterator&lt; T &gt;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>a1c746bd9a2ab884ba19190fcdeb428b5</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ustring_Iterator&lt; T &gt; &amp;</type>
      <name>operator--</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>a70cc9ab14d049e21a0375e97d7b8759a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ustring_Iterator&lt; T &gt;</type>
      <name>operator--</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>aeebb923631e3535e9e96a1f65edec999</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring_Iterator</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>a1f4b5aaeadcc90211e016f08a0be846a</anchor>
      <arglist>(T pos)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>base</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>accf948bbfd3e3bb04acd618f5f672529</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>a71d2d580e6e761fd4dd1f9a0bda9e3ab</anchor>
      <arglist>(const Glib::ustring::const_iterator &amp;lhs, const Glib::ustring::const_iterator &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>a913deefabb28e251ed6f29ac4316e031</anchor>
      <arglist>(const Glib::ustring::const_iterator &amp;lhs, const Glib::ustring::const_iterator &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>ab187b9c8fe8307b54f5bfa3e4e6b5ce0</anchor>
      <arglist>(const Glib::ustring::const_iterator &amp;lhs, const Glib::ustring::const_iterator &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>a36a8542e086c203993fcddfc054dda4e</anchor>
      <arglist>(const Glib::ustring::const_iterator &amp;lhs, const Glib::ustring::const_iterator &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>a8a95c65ba9914b5d0c2ca56c1e3d6770</anchor>
      <arglist>(const Glib::ustring::const_iterator &amp;lhs, const Glib::ustring::const_iterator &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>a25acc98a371197b997295485b477e4de</anchor>
      <arglist>(const Glib::ustring::const_iterator &amp;lhs, const Glib::ustring::const_iterator &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value</name>
    <filename>classGlib_1_1Value.html</filename>
    <templarg></templarg>
    <base>Glib::ValueBase_Boxed</base>
    <member kind="typedef">
      <type>T</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value.html</anchorfile>
      <anchor>af548618e702992a1976343601dd234ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value.html</anchorfile>
      <anchor>a6b49de4231c0d869ba517a04a3960a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value.html</anchorfile>
      <anchor>ad9750eff16879524796c8c13d4045c0e</anchor>
      <arglist>(const CppType &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>CppType</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value.html</anchorfile>
      <anchor>a38b7fb868bb332613a51ce4fa8cefb5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value.html</anchorfile>
      <anchor>aab385c17d1f31b8fc691eb1e802548c1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; bool &gt;</name>
    <filename>classGlib_1_1Value_3_01bool_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>bool</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01bool_01_4.html</anchorfile>
      <anchor>aae26467eb81f30ac086ebf9975987b86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gboolean</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01bool_01_4.html</anchorfile>
      <anchor>af488785fe44b8a6c6fcfab552b842494</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01bool_01_4.html</anchorfile>
      <anchor>a9fbbbc99675113812fad12fdda11a0f2</anchor>
      <arglist>(bool data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01bool_01_4.html</anchorfile>
      <anchor>a19027ca1a3384d4227e0035e5d2fcd3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01bool_01_4.html</anchorfile>
      <anchor>a66381d27357321419bfe1b3f15ec1f8b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; char &gt;</name>
    <filename>classGlib_1_1Value_3_01char_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>char</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01char_01_4.html</anchorfile>
      <anchor>aff365f90099a83be5d7efd31dc5019a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gchar</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01char_01_4.html</anchorfile>
      <anchor>a6e7b59ec15ee5bd11cd84f3ce3cc69bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01char_01_4.html</anchorfile>
      <anchor>a2de97ae867d772bdb9da89e1359217bc</anchor>
      <arglist>(char data)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01char_01_4.html</anchorfile>
      <anchor>a0ffe84d94b6aacb2344bdadd821210e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01char_01_4.html</anchorfile>
      <anchor>aa3d698cb7af0a5ca27e462370a66971e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; const T * &gt;</name>
    <filename>classGlib_1_1Value_3_01const_01T_01_5_01_4.html</filename>
    <templarg></templarg>
    <base>Value_Pointer&lt; T, const T *&gt;</base>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; double &gt;</name>
    <filename>classGlib_1_1Value_3_01double_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>double</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01double_01_4.html</anchorfile>
      <anchor>a450a56032addd16e13f0c93c142972fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gdouble</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01double_01_4.html</anchorfile>
      <anchor>ad1c712268fbfea6124b2014702cc1bfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01double_01_4.html</anchorfile>
      <anchor>aef6e3c7dfda4a135bb2ee37b4ba468f8</anchor>
      <arglist>(double data)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01double_01_4.html</anchorfile>
      <anchor>adb5595e6bf615b92f9dcd870e349a9f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01double_01_4.html</anchorfile>
      <anchor>a046afc0453d84b0accb5e5e23bcd7521</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; float &gt;</name>
    <filename>classGlib_1_1Value_3_01float_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>float</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01float_01_4.html</anchorfile>
      <anchor>aec22fb856cde7e99a4b08c509d3d550b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gfloat</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01float_01_4.html</anchorfile>
      <anchor>aceb2a5cb2ccf11509fa1d3971367426b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01float_01_4.html</anchorfile>
      <anchor>a14489a9eb51ff17ac80f07ecc1ac9c15</anchor>
      <arglist>(float data)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01float_01_4.html</anchorfile>
      <anchor>ab6897d44a33ca660df476739073664d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01float_01_4.html</anchorfile>
      <anchor>a887a33770700af739023cc24f5bea16c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; Glib::RefPtr&lt; const T &gt; &gt;</name>
    <filename>classGlib_1_1Value_3_01Glib_1_1RefPtr_3_01const_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <base>Glib::ValueBase_Object</base>
    <member kind="typedef">
      <type>Glib::RefPtr&lt; const T &gt;</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01Glib_1_1RefPtr_3_01const_01T_01_4_01_4.html</anchorfile>
      <anchor>a984b187710c15be306de3899a16648fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename T::BaseObjectType *</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01Glib_1_1RefPtr_3_01const_01T_01_4_01_4.html</anchorfile>
      <anchor>a923f46be1d1fb1789ef954ab48f3eef6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01Glib_1_1RefPtr_3_01const_01T_01_4_01_4.html</anchorfile>
      <anchor>a243b6b5a244173959c6e1a2f100d4e46</anchor>
      <arglist>(const CppType &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>CppType</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01Glib_1_1RefPtr_3_01const_01T_01_4_01_4.html</anchorfile>
      <anchor>a427240c73b6d3ba3ef5616ba61d08874</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01Glib_1_1RefPtr_3_01const_01T_01_4_01_4.html</anchorfile>
      <anchor>a59ec430d79b579a3db4921a9dcbb3d86</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; Glib::RefPtr&lt; T &gt; &gt;</name>
    <filename>classGlib_1_1Value_3_01Glib_1_1RefPtr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <base>Glib::ValueBase_Object</base>
    <member kind="typedef">
      <type>Glib::RefPtr&lt; T &gt;</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01Glib_1_1RefPtr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a6398d3acd885e2a824e34f7c9f20ece5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename T::BaseObjectType *</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01Glib_1_1RefPtr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a6d80b8356c40b02b0ada077a7da43626</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01Glib_1_1RefPtr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>ac0819ab1fa54af74ff8f09faa519bf4a</anchor>
      <arglist>(const CppType &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>CppType</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01Glib_1_1RefPtr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a9c6a7efe3e3adc5820017a0872fe8b2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01Glib_1_1RefPtr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a240ca7bc698f73231a398567b3dea351</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; Glib::ustring &gt;</name>
    <filename>classGlib_1_1Value_3_01Glib_1_1ustring_01_4.html</filename>
    <base>Glib::ValueBase_String</base>
    <member kind="typedef">
      <type>Glib::ustring</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01Glib_1_1ustring_01_4.html</anchorfile>
      <anchor>a88d10b7e0dd22bc933a6dccca03b1a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01Glib_1_1ustring_01_4.html</anchorfile>
      <anchor>abb7f8cc0a7fc1b81b7e94e7959336690</anchor>
      <arglist>(const Glib::ustring &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01Glib_1_1ustring_01_4.html</anchorfile>
      <anchor>a44119c57b273e8724d89887fa7fc0055</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; int &gt;</name>
    <filename>classGlib_1_1Value_3_01int_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>int</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01int_01_4.html</anchorfile>
      <anchor>a9ac3f3b1a43d87c97e6ba03963e30041</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gint</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01int_01_4.html</anchorfile>
      <anchor>a2868a3c5d251db24db10a263e4e14b09</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01int_01_4.html</anchorfile>
      <anchor>abd4c8e675046c0010591b10116c9e3aa</anchor>
      <arglist>(int data)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01int_01_4.html</anchorfile>
      <anchor>a0b1a2259c58bb6c7499bd4eca9b0ccf6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01int_01_4.html</anchorfile>
      <anchor>a3cae9644d1b1b7f70391ee14bb3b7478</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; long &gt;</name>
    <filename>classGlib_1_1Value_3_01long_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>long</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01long_01_4.html</anchorfile>
      <anchor>aa9aed5244b47fb4efe112c739ee52ff8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>glong</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01long_01_4.html</anchorfile>
      <anchor>ac6bbc531fb4514c7ba274858bc828806</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01long_01_4.html</anchorfile>
      <anchor>a8e572e84d90bf91abfb7dd5b476e5b9e</anchor>
      <arglist>(long data)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01long_01_4.html</anchorfile>
      <anchor>a6eabc07a030f82d570729018076b3a4d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01long_01_4.html</anchorfile>
      <anchor>a330f13a348fd72f361642380a19bf60f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; long long &gt;</name>
    <filename>classGlib_1_1Value_3_01long_01long_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>long long</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01long_01long_01_4.html</anchorfile>
      <anchor>aa5091330962c9cf540cbc50dce81a992</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gint64</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01long_01long_01_4.html</anchorfile>
      <anchor>a3a45ac3baa227ba1b15d1c877c5ffe34</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01long_01long_01_4.html</anchorfile>
      <anchor>a5f9d39c582e8eebccddf95614c45a8a6</anchor>
      <arglist>(long long data)</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01long_01long_01_4.html</anchorfile>
      <anchor>a9ad4725e1bd495471824f572f170c095</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01long_01long_01_4.html</anchorfile>
      <anchor>a93480551d41d8690fbe9207b040f7843</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; signed char &gt;</name>
    <filename>classGlib_1_1Value_3_01signed_01char_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>signed char</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01signed_01char_01_4.html</anchorfile>
      <anchor>a4b0f1f492d98b38a76b35daed5af7df3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gint8</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01signed_01char_01_4.html</anchorfile>
      <anchor>a240220fcc2d0adfc6fcdd27daa457a8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01signed_01char_01_4.html</anchorfile>
      <anchor>a9d1091619fd77ce080e51aed5b627ec4</anchor>
      <arglist>(signed char data)</arglist>
    </member>
    <member kind="function">
      <type>signed char</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01signed_01char_01_4.html</anchorfile>
      <anchor>a3ed78d5aa34f200e2253ea78762ce789</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01signed_01char_01_4.html</anchorfile>
      <anchor>abf1f98179ee6ea20c7671f1cb8183f4d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; std::string &gt;</name>
    <filename>classGlib_1_1Value_3_01std_1_1string_01_4.html</filename>
    <base>Glib::ValueBase_String</base>
    <member kind="typedef">
      <type>std::string</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>a59e5cd8a66ee6d14931d7e569c8a279c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>a8e5930246b7013936186f464cff72ac0</anchor>
      <arglist>(const std::string &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>a91cddec0da0eee90e70f1e5ddff6d5d2</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; T * &gt;</name>
    <filename>classGlib_1_1Value_3_01T_01_5_01_4.html</filename>
    <templarg></templarg>
    <base>Value_Pointer&lt; T, T *&gt;</base>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; unsigned char &gt;</name>
    <filename>classGlib_1_1Value_3_01unsigned_01char_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>adaa86f4a9416f26c27ae86f5484b3d6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>guchar</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>a9d7a8829b74dd0bccf8a3c78ec7d90cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>aab3178311695a913986d7e7741f65ccc</anchor>
      <arglist>(unsigned char data)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>a065817d273dc1e92e5c2513999301f17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>ac697709ac8d7a4ccfb19d79e69c3739d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; unsigned int &gt;</name>
    <filename>classGlib_1_1Value_3_01unsigned_01int_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01int_01_4.html</anchorfile>
      <anchor>aae52e968621bbca014de1a959d8afc13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>guint</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01int_01_4.html</anchorfile>
      <anchor>a9588c3abc15633d6006cf129b49c3a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01int_01_4.html</anchorfile>
      <anchor>ac3fda3995e4a33f71f359785d8fa8a88</anchor>
      <arglist>(unsigned int data)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01int_01_4.html</anchorfile>
      <anchor>a2c7f6b26ad2ceb7888cf6c7b844491d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01int_01_4.html</anchorfile>
      <anchor>a31035397d045545690e68a1a08619b6a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; unsigned long &gt;</name>
    <filename>classGlib_1_1Value_3_01unsigned_01long_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01long_01_4.html</anchorfile>
      <anchor>afe3e69391ed45525de12e1bc277a131d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gulong</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01long_01_4.html</anchorfile>
      <anchor>a7b78d76ffa2c63c01f1fc33389db8ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01long_01_4.html</anchorfile>
      <anchor>a89a290484aa20b8299a66b1023e8f135</anchor>
      <arglist>(unsigned long data)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01long_01_4.html</anchorfile>
      <anchor>a7a90c557f74b852bf8a8b79876e054ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01long_01_4.html</anchorfile>
      <anchor>a6abf2858362e23a94500242db4ad957c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; unsigned long long &gt;</name>
    <filename>classGlib_1_1Value_3_01unsigned_01long_01long_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>unsigned long long</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01long_01long_01_4.html</anchorfile>
      <anchor>aba094a85aa50062923edf56b3d330f45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>guint64</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01long_01long_01_4.html</anchorfile>
      <anchor>a9451f15409266ee11982c86de6afb986</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01long_01long_01_4.html</anchorfile>
      <anchor>a190b1c8b1a2496a9b139d98c465eaffa</anchor>
      <arglist>(unsigned long long data)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long long</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01long_01long_01_4.html</anchorfile>
      <anchor>a455244a93224c987aa3e0f653e153484</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01long_01long_01_4.html</anchorfile>
      <anchor>a9a3dd742b5c9c26b883cdd9ee0287f20</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; void * &gt;</name>
    <filename>classGlib_1_1Value_3_01void_01_5_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>void *</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01void_01_5_01_4.html</anchorfile>
      <anchor>aa80e58fcc31850c3e03c7affa3a873c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gpointer</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01void_01_5_01_4.html</anchorfile>
      <anchor>aec8b470f312a11112dc9fd93ceb4422e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01void_01_5_01_4.html</anchorfile>
      <anchor>a30f8bdfdaa2391c0a4f60f179ac30082</anchor>
      <arglist>(void *data)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01void_01_5_01_4.html</anchorfile>
      <anchor>aab8970b2b3815bf9035fb14dfad95cab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01void_01_5_01_4.html</anchorfile>
      <anchor>a14370792a114bc30b65d7b6992bceb2d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value_Boxed</name>
    <filename>classGlib_1_1Value__Boxed.html</filename>
    <templarg></templarg>
    <base>Glib::ValueBase_Boxed</base>
    <member kind="typedef">
      <type>T</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value__Boxed.html</anchorfile>
      <anchor>a76b181832795f4a22ce155a3e2e51c3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename T::BaseObjectType *</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value__Boxed.html</anchorfile>
      <anchor>a2e3c4a341a82100a14d133900ed3a90d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value__Boxed.html</anchorfile>
      <anchor>a26519e4ae30215089c64eac002a4c681</anchor>
      <arglist>(const CppType &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>CppType</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value__Boxed.html</anchorfile>
      <anchor>af07b3183c2632f6b6868a4e240f13a15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value__Boxed.html</anchorfile>
      <anchor>a3e53b3ba7cb78f6cc837c7d2636919fe</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value_Enum</name>
    <filename>classGlib_1_1Value__Enum.html</filename>
    <templarg></templarg>
    <base>Glib::ValueBase_Enum</base>
    <member kind="typedef">
      <type>T</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value__Enum.html</anchorfile>
      <anchor>a14b753bb7001d652070e28b49c5c9ba3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value__Enum.html</anchorfile>
      <anchor>a43e5aed8e5125a59a9dd4eb0de6eb93c</anchor>
      <arglist>(CppType data)</arglist>
    </member>
    <member kind="function">
      <type>CppType</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value__Enum.html</anchorfile>
      <anchor>a739a0b9ff7d2aa7d61080e4c8187931d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value_Flags</name>
    <filename>classGlib_1_1Value__Flags.html</filename>
    <templarg></templarg>
    <base>Glib::ValueBase_Flags</base>
    <member kind="typedef">
      <type>T</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value__Flags.html</anchorfile>
      <anchor>a70bb6bd6915b18f58ea707fce5e6e66b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value__Flags.html</anchorfile>
      <anchor>aa097ffbbc6a4e925b34c369dcaaeec8e</anchor>
      <arglist>(CppType data)</arglist>
    </member>
    <member kind="function">
      <type>CppType</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value__Flags.html</anchorfile>
      <anchor>a3cdced6eee9523b24a169d82530b7837</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value_Pointer</name>
    <filename>classGlib_1_1Value__Pointer.html</filename>
    <templarg>T</templarg>
    <templarg>PtrT</templarg>
    <base>Glib::ValueBase_Object</base>
    <member kind="typedef">
      <type>PtrT</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>a58039de1c753601e75b7affdd6be4991</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void *</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>aa682d62adfd40d62fad4b14a4fbd2c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>ad4b2133d4d67bfc3100bee5ce8ac7aaa</anchor>
      <arglist>(CppType data)</arglist>
    </member>
    <member kind="function">
      <type>CppType</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>ae8d3d243838aa7a4abe23aaffa40d08d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>a09e38a57b4f7f70085ce772ceea34090</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ValueArray</name>
    <filename>classGlib_1_1ValueArray.html</filename>
    <member kind="typedef">
      <type>sigc::slot&lt; int, const Glib::ValueBase &amp;, const Glib::ValueBase &amp; &gt;</type>
      <name>SlotCompare</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>a3afbf0385fbbfc69b4ccb55802e4e029</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueArray</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>aa403923648ca619054e4c8b8be1bb801</anchor>
      <arglist>(GValueArray *gobject, bool make_a_copy=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueArray</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>a5edd2ac638c259f60fd99bb48b95bdc6</anchor>
      <arglist>(const ValueArray &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ValueArray &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>aff63102ffe3754919ac79b0dcb8588bf</anchor>
      <arglist>(const ValueArray &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueArray</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>a4fd153fd32be8e352f4007481768d021</anchor>
      <arglist>(ValueArray &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ValueArray &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>aa7d9f93175372802ebc7f9557d902e41</anchor>
      <arglist>(ValueArray &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ValueArray</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>ab5d59f5a2b947fb019fada59b633fa25</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>a343c43da54d8513a43148e036524d380</anchor>
      <arglist>(ValueArray &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>GValueArray *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>a5ba764739af03092ea3bfebdf3bdc079</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GValueArray *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>ae1b2680831b5abbef4f330cb98611962</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GValueArray *</type>
      <name>gobj_copy</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>ae5fc8ba5f8e855c9d2fa0f62fd4cee79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueArray</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>a8bdecaaa39e7f8159637768e495bfa5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueArray</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>a836e8fb2bc4e0c5dd4030599ae7f1ffa</anchor>
      <arglist>(guint n_preallocated)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_nth</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>a2c32fe81f5d6cdf3040b8e621b02b02d</anchor>
      <arglist>(guint index, Glib::ValueBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ValueArray &amp;</type>
      <name>append</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>abe238a2bc7c967a0941a416f1caa650d</anchor>
      <arglist>(const Glib::ValueBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ValueArray &amp;</type>
      <name>prepend</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>af7c30ee85c708e917cb4f0779a0ca31c</anchor>
      <arglist>(const Glib::ValueBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ValueArray &amp;</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>a14fa8d4fa2bba2386ae79bbe816f1c42</anchor>
      <arglist>(guint index, const Glib::ValueBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ValueArray &amp;</type>
      <name>remove</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>a30dd7f25f52351968e88c545bbf911c8</anchor>
      <arglist>(guint index)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ValueArray &amp;</type>
      <name>sort</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>aa62247fd9a4574141f09814affe8ab8f</anchor>
      <arglist>(const SlotCompare &amp;compare_func)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>a0810a3c63e3d39aaf4242905bfa4b752</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GValueArray *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>a9b4925a477575dacae2507e5c57ed6bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>aa976e66c8cc65fcc4e44565d8a6771d8</anchor>
      <arglist>(ValueArray &amp;lhs, ValueArray &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Glib::ValueArray</type>
      <name>wrap</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>ad7bd84e60b7a67eb393a76b7da88d937</anchor>
      <arglist>(GValueArray *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ValueBase</name>
    <filename>classGlib_1_1ValueBase.html</filename>
    <member kind="function">
      <type></type>
      <name>ValueBase</name>
      <anchorfile>classGlib_1_1ValueBase.html</anchorfile>
      <anchor>a066cc345d62be564ff53b25bd11e62e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueBase</name>
      <anchorfile>classGlib_1_1ValueBase.html</anchorfile>
      <anchor>a1af751f0ac927df5ccba7d584cb9e63f</anchor>
      <arglist>(const ValueBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ValueBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1ValueBase.html</anchorfile>
      <anchor>a73ceadee7e4d2298b31d1dbe4bcd35e5</anchor>
      <arglist>(const ValueBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ValueBase</name>
      <anchorfile>classGlib_1_1ValueBase.html</anchorfile>
      <anchor>aed5fa89efb4f89f37bc51d08cfd01f6b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classGlib_1_1ValueBase.html</anchorfile>
      <anchor>a1659121f15f5e840cc1eba2b0aaefbb1</anchor>
      <arglist>(GType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classGlib_1_1ValueBase.html</anchorfile>
      <anchor>a1d31168845e6bb144a66904e813240e2</anchor>
      <arglist>(const GValue *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classGlib_1_1ValueBase.html</anchorfile>
      <anchor>a30c7bde0d772b87dc890da7a197c4494</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GValue *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1ValueBase.html</anchorfile>
      <anchor>a33253264f47c41526ede3f78afdbe1e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GValue *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1ValueBase.html</anchorfile>
      <anchor>aea504b71cd0d5890a608152858bc0635</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GValue</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1ValueBase.html</anchorfile>
      <anchor>a3472d8f4c0bd6513c939ee3a4633be0f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ValueBase_Boxed</name>
    <filename>classGlib_1_1ValueBase__Boxed.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1ValueBase__Boxed.html</anchorfile>
      <anchor>ac3757fa4722632be1455ac5ddde63cd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_boxed</name>
      <anchorfile>classGlib_1_1ValueBase__Boxed.html</anchorfile>
      <anchor>a948e0b5fa5d14b14f67291d9ee8d5d9f</anchor>
      <arglist>(const void *data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void *</type>
      <name>get_boxed</name>
      <anchorfile>classGlib_1_1ValueBase__Boxed.html</anchorfile>
      <anchor>a191daad581a4c4f363f2af38131241d4</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ValueBase_Enum</name>
    <filename>classGlib_1_1ValueBase__Enum.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>gint</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1ValueBase__Enum.html</anchorfile>
      <anchor>a12b722488082d195f34973d42eee6b32</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1ValueBase__Enum.html</anchorfile>
      <anchor>a60e58a7ac4f865048d8053e2983ceab8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_enum</name>
      <anchorfile>classGlib_1_1ValueBase__Enum.html</anchorfile>
      <anchor>a2f6c7a5ec5a223b8991f10bd0690521f</anchor>
      <arglist>(int data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>get_enum</name>
      <anchorfile>classGlib_1_1ValueBase__Enum.html</anchorfile>
      <anchor>a06d87540f712992134d7e081d0b2b287</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ValueBase_Flags</name>
    <filename>classGlib_1_1ValueBase__Flags.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>guint</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1ValueBase__Flags.html</anchorfile>
      <anchor>a8427f3186d1e9f4364cadf154b94e0e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1ValueBase__Flags.html</anchorfile>
      <anchor>a7b6c333eed59377834bbd2c166a3e84d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_flags</name>
      <anchorfile>classGlib_1_1ValueBase__Flags.html</anchorfile>
      <anchor>a28560a2e6e5d54f8f0b93abaf0da9eee</anchor>
      <arglist>(unsigned int data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned int</type>
      <name>get_flags</name>
      <anchorfile>classGlib_1_1ValueBase__Flags.html</anchorfile>
      <anchor>acb05c00dee758cdda7537c614c5ed675</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ValueBase_Object</name>
    <filename>classGlib_1_1ValueBase__Object.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1ValueBase__Object.html</anchorfile>
      <anchor>a712e2e12c2a93ac9bbc5a9ef97966686</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_object</name>
      <anchorfile>classGlib_1_1ValueBase__Object.html</anchorfile>
      <anchor>a12d0e3946f35a2b07f95e01834f932c7</anchor>
      <arglist>(Glib::ObjectBase *data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Glib::ObjectBase *</type>
      <name>get_object</name>
      <anchorfile>classGlib_1_1ValueBase__Object.html</anchorfile>
      <anchor>a737c0880bb1da023aa015b1fe10b39da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Glib::RefPtr&lt; Glib::ObjectBase &gt;</type>
      <name>get_object_copy</name>
      <anchorfile>classGlib_1_1ValueBase__Object.html</anchorfile>
      <anchor>a09a196d829ab5dbf861261ef45516394</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ValueBase_String</name>
    <filename>classGlib_1_1ValueBase__String.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>const gchar *</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1ValueBase__String.html</anchorfile>
      <anchor>ab915b4f822a2f0a9c5bfebc5dd4b0e88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1ValueBase__String.html</anchorfile>
      <anchor>aedc2f0286f2ad9f40f75c515d3641ec6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_cstring</name>
      <anchorfile>classGlib_1_1ValueBase__String.html</anchorfile>
      <anchor>aef09ab6b77be252853c1e13d28129f17</anchor>
      <arglist>(const char *data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>get_cstring</name>
      <anchorfile>classGlib_1_1ValueBase__String.html</anchorfile>
      <anchor>a8392d85b1cee89e86880e2952685e2b8</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant</name>
    <filename>classGlib_1_1Variant.html</filename>
    <templarg></templarg>
    <base>Glib::VariantBase</base>
    <member kind="typedef">
      <type>T</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Variant.html</anchorfile>
      <anchor>a2a164c1ef902258d6e999088fe7dcd41</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; bool &gt;</name>
    <filename>classGlib_1_1Variant_3_01bool_01_4.html</filename>
    <base>Glib::VariantBase</base>
    <member kind="typedef">
      <type>gboolean</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Variant_3_01bool_01_4.html</anchorfile>
      <anchor>af3524cbd6e10b7af50f0254954d4be96</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01bool_01_4.html</anchorfile>
      <anchor>ad97748c9042fe5ba4ce7796ddae260f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01bool_01_4.html</anchorfile>
      <anchor>a9323d675dccad278f534955fcbb7c31d</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01bool_01_4.html</anchorfile>
      <anchor>aec8b37afbdeed06831f24663b91d745e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01bool_01_4.html</anchorfile>
      <anchor>a990e17b61c7eb088f3fe8523c18319ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; bool &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01bool_01_4.html</anchorfile>
      <anchor>ac047c865f0e198ad1a651f8b4c578440</anchor>
      <arglist>(bool data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; double &gt;</name>
    <filename>classGlib_1_1Variant_3_01double_01_4.html</filename>
    <base>Glib::VariantBase</base>
    <member kind="typedef">
      <type>gdouble</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Variant_3_01double_01_4.html</anchorfile>
      <anchor>a126c99561c842d1e14521519df1d56b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01double_01_4.html</anchorfile>
      <anchor>acd948e4f7e6fa69c84d97c11b8909e04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01double_01_4.html</anchorfile>
      <anchor>a0b7a6eeb537fbab9c84e47db71c3c0d5</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01double_01_4.html</anchorfile>
      <anchor>a641e4ddaa5c7db0ecdc3219fb33e2a81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01double_01_4.html</anchorfile>
      <anchor>a89da29f762818e4e02455e7fb50c8409</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; double &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01double_01_4.html</anchorfile>
      <anchor>ad2f6d86798471ef283cf87efe2add9c3</anchor>
      <arglist>(double data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; gint16 &gt;</name>
    <filename>classGlib_1_1Variant_3_01gint16_01_4.html</filename>
    <base>Glib::VariantBase</base>
    <member kind="typedef">
      <type>gint16</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Variant_3_01gint16_01_4.html</anchorfile>
      <anchor>ad104e16428d0652ceb581e38054f89d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01gint16_01_4.html</anchorfile>
      <anchor>aa7d273a4d48c98efec5105c81f8d9d0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01gint16_01_4.html</anchorfile>
      <anchor>ac7f3ca1724bb28959069bf5ebfbacb16</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>gint16</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01gint16_01_4.html</anchorfile>
      <anchor>a06392db02e76cbb6dc595933254b7268</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01gint16_01_4.html</anchorfile>
      <anchor>a7ee6db127565d7b7c374b2eb79f31a48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; gint16 &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01gint16_01_4.html</anchorfile>
      <anchor>a9dbecd7481845fe7f7f43bf07b0474e8</anchor>
      <arglist>(gint16 data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; gint32 &gt;</name>
    <filename>classGlib_1_1Variant_3_01gint32_01_4.html</filename>
    <base>Glib::VariantBase</base>
    <member kind="typedef">
      <type>gint32</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Variant_3_01gint32_01_4.html</anchorfile>
      <anchor>a0f81fb263d21f49ca70dbeb3389724c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01gint32_01_4.html</anchorfile>
      <anchor>ac3362f64a5b90323c9b30170e2e2277d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01gint32_01_4.html</anchorfile>
      <anchor>af5927fe4a6e94c21a344f61c441e3846</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>gint32</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01gint32_01_4.html</anchorfile>
      <anchor>a0e22974b5812e06c2f2e338e6f0e490b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01gint32_01_4.html</anchorfile>
      <anchor>ae7da319ecb0f50dbda06eb4b110c2bf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; gint32 &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01gint32_01_4.html</anchorfile>
      <anchor>a793bfc20987e13448995c3fcd7191bfe</anchor>
      <arglist>(gint32 data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; gint32 &gt;</type>
      <name>create_handle</name>
      <anchorfile>classGlib_1_1Variant_3_01gint32_01_4.html</anchorfile>
      <anchor>a91ac3849bd6b1c96fb88b3b0e532d0a1</anchor>
      <arglist>(gint32 data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; gint64 &gt;</name>
    <filename>classGlib_1_1Variant_3_01gint64_01_4.html</filename>
    <base>Glib::VariantBase</base>
    <member kind="typedef">
      <type>gint64</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Variant_3_01gint64_01_4.html</anchorfile>
      <anchor>a367f7a0fc097f5931821c126a179c591</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01gint64_01_4.html</anchorfile>
      <anchor>abe6382d5b63afe138d86b4ba7760001e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01gint64_01_4.html</anchorfile>
      <anchor>ab001c9471880ad8f5c739fedde7ca940</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>gint64</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01gint64_01_4.html</anchorfile>
      <anchor>a0c43624df76bf8b53b24f6fc53ef910b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01gint64_01_4.html</anchorfile>
      <anchor>a47c763e793f8c292a8a7e1924d04c2f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; gint64 &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01gint64_01_4.html</anchorfile>
      <anchor>a9be72ef1a8f27251bbe8244e49f65a50</anchor>
      <arglist>(gint64 data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; Glib::DBusObjectPathString &gt;</name>
    <filename>classGlib_1_1Variant_3_01Glib_1_1DBusObjectPathString_01_4.html</filename>
    <base>Glib::VariantStringBase</base>
    <member kind="typedef">
      <type>char *</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Variant_3_01Glib_1_1DBusObjectPathString_01_4.html</anchorfile>
      <anchor>a2992f49365e1ddc5242e379d6496b568</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::DBusObjectPathString</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Variant_3_01Glib_1_1DBusObjectPathString_01_4.html</anchorfile>
      <anchor>a7e125912298f2644c103342a92157e43</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01Glib_1_1DBusObjectPathString_01_4.html</anchorfile>
      <anchor>ac72b85a7cff8b9e409d65db0706e5ad1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01Glib_1_1DBusObjectPathString_01_4.html</anchorfile>
      <anchor>a66ecaf0a28e1e7746620465cefc7a925</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>CppType</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01Glib_1_1DBusObjectPathString_01_4.html</anchorfile>
      <anchor>aaad0d9a41069b12b96a2eeefe888c541</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01Glib_1_1DBusObjectPathString_01_4.html</anchorfile>
      <anchor>a372553cfcb25cc15ae53c5ab1769b972</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; CppType &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01Glib_1_1DBusObjectPathString_01_4.html</anchorfile>
      <anchor>a071990e5ea299c7cf770b7549592d53d</anchor>
      <arglist>(const CppType &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; Glib::DBusSignatureString &gt;</name>
    <filename>classGlib_1_1Variant_3_01Glib_1_1DBusSignatureString_01_4.html</filename>
    <base>Glib::VariantStringBase</base>
    <member kind="typedef">
      <type>char *</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Variant_3_01Glib_1_1DBusSignatureString_01_4.html</anchorfile>
      <anchor>a64f11ec45dc5cade5c7ff3d76351cd43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::DBusSignatureString</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Variant_3_01Glib_1_1DBusSignatureString_01_4.html</anchorfile>
      <anchor>a85e0fb74d69492e3a0c83bd8a5e9d254</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01Glib_1_1DBusSignatureString_01_4.html</anchorfile>
      <anchor>afde0a092f382c65567771d3556cce56e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01Glib_1_1DBusSignatureString_01_4.html</anchorfile>
      <anchor>a1a41bdd589ebfa30301b1de34e4b93dc</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>CppType</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01Glib_1_1DBusSignatureString_01_4.html</anchorfile>
      <anchor>a5b49e3bed0783f8e7f2a1448088da8b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01Glib_1_1DBusSignatureString_01_4.html</anchorfile>
      <anchor>a913a5f298a0f8ad0d7f05df925f59a59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; CppType &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01Glib_1_1DBusSignatureString_01_4.html</anchorfile>
      <anchor>a23a2ed46df5c45ac7748982b3b08f0a8</anchor>
      <arglist>(const CppType &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; Glib::ustring &gt;</name>
    <filename>classGlib_1_1Variant_3_01Glib_1_1ustring_01_4.html</filename>
    <base>Glib::VariantStringBase</base>
    <member kind="typedef">
      <type>char *</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Variant_3_01Glib_1_1ustring_01_4.html</anchorfile>
      <anchor>af0c5871ed3aae5939930e855a456ae19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::ustring</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Variant_3_01Glib_1_1ustring_01_4.html</anchorfile>
      <anchor>ab8441b8c53e98b70cbffa9879fff1d3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01Glib_1_1ustring_01_4.html</anchorfile>
      <anchor>a622d1821cce69d2025de8207d2a93603</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01Glib_1_1ustring_01_4.html</anchorfile>
      <anchor>a15f3b2cb67c274646b22a3eb5fc530dd</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01Glib_1_1ustring_01_4.html</anchorfile>
      <anchor>a547c9b19a532f9a037816a72a70ab2ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01Glib_1_1ustring_01_4.html</anchorfile>
      <anchor>a2955ee131498392a06f49a6cf87bb56a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; Glib::ustring &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01Glib_1_1ustring_01_4.html</anchorfile>
      <anchor>a5d5b10360e90d0e65e278798b5c4a587</anchor>
      <arglist>(const Glib::ustring &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; guint16 &gt;</name>
    <filename>classGlib_1_1Variant_3_01guint16_01_4.html</filename>
    <base>Glib::VariantBase</base>
    <member kind="typedef">
      <type>guint16</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Variant_3_01guint16_01_4.html</anchorfile>
      <anchor>a27c21c1a4fb7391b3681c169c481a8ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01guint16_01_4.html</anchorfile>
      <anchor>a774076b9bad170c942d748f3737f6250</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01guint16_01_4.html</anchorfile>
      <anchor>a09c14f67d836673cf68860fe478cbb57</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>guint16</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01guint16_01_4.html</anchorfile>
      <anchor>a2b1523dd7c02363219f5401d2811bfc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01guint16_01_4.html</anchorfile>
      <anchor>a4bdd5cc156499df42352b585ef9b8d87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; guint16 &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01guint16_01_4.html</anchorfile>
      <anchor>adf3f1a3ecad8d6ab668ce7d0063a73d9</anchor>
      <arglist>(guint16 data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; guint32 &gt;</name>
    <filename>classGlib_1_1Variant_3_01guint32_01_4.html</filename>
    <base>Glib::VariantBase</base>
    <member kind="typedef">
      <type>guint32</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Variant_3_01guint32_01_4.html</anchorfile>
      <anchor>a218b080e26c921d581ea4a1dc574c604</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01guint32_01_4.html</anchorfile>
      <anchor>a7d615ac3d0753303f46a04c74eef6b8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01guint32_01_4.html</anchorfile>
      <anchor>afe2095ce65435bdbf87d97257e57ea00</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>guint32</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01guint32_01_4.html</anchorfile>
      <anchor>ac0cb9da60f452585514d40392dbb4ddc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01guint32_01_4.html</anchorfile>
      <anchor>adf031643028001c6819c99cdf4401e66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; guint32 &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01guint32_01_4.html</anchorfile>
      <anchor>a3263926c1eb852cf40f38d78927580a7</anchor>
      <arglist>(guint32 data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; guint64 &gt;</name>
    <filename>classGlib_1_1Variant_3_01guint64_01_4.html</filename>
    <base>Glib::VariantBase</base>
    <member kind="typedef">
      <type>guint64</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Variant_3_01guint64_01_4.html</anchorfile>
      <anchor>a56dc45fc01ed6409826644b59086049d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01guint64_01_4.html</anchorfile>
      <anchor>aa6eacccec95c1a3e3a64a3b7fd67804a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01guint64_01_4.html</anchorfile>
      <anchor>a95c2676841996aafe140cbbcffc57603</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>guint64</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01guint64_01_4.html</anchorfile>
      <anchor>ae39ae09da0d6705e6e850f992e54e5f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01guint64_01_4.html</anchorfile>
      <anchor>ad6fe86e878a126cffb7315a5719e0ede</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; guint64 &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01guint64_01_4.html</anchorfile>
      <anchor>a152939bc5c20901c264671a8244d2ae1</anchor>
      <arglist>(guint64 data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; std::map&lt; K, V &gt; &gt;</name>
    <filename>classGlib_1_1Variant_3_01std_1_1map_3_01K_00_01V_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Glib::VariantContainerBase</base>
    <member kind="typedef">
      <type>std::pair&lt; K, V &gt;</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1map_3_01K_00_01V_01_4_01_4.html</anchorfile>
      <anchor>ab964ab637ebca3e8b9426d3c70760e5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; K, V &gt;</type>
      <name>CppContainerType</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1map_3_01K_00_01V_01_4_01_4.html</anchorfile>
      <anchor>a168bbf69ec0fab452ef44253102e3254</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1map_3_01K_00_01V_01_4_01_4.html</anchorfile>
      <anchor>a14a8aeea0c2633a9af5b788ee6392e3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1map_3_01K_00_01V_01_4_01_4.html</anchorfile>
      <anchor>a84e8c71bc7e9db7d03a1e75ac0d22867</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; K, V &gt;</type>
      <name>get_child</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1map_3_01K_00_01V_01_4_01_4.html</anchorfile>
      <anchor>a61ef08497657b7dab909200c41db53ac</anchor>
      <arglist>(gsize index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lookup</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1map_3_01K_00_01V_01_4_01_4.html</anchorfile>
      <anchor>a2ff449bcd4b706ffb4e9ef9a925113f4</anchor>
      <arglist>(const K &amp;key, V &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; K, V &gt;</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1map_3_01K_00_01V_01_4_01_4.html</anchorfile>
      <anchor>a2ca95bae6a9712fd2862cad099c9605f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VariantIter</type>
      <name>get_iter</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1map_3_01K_00_01V_01_4_01_4.html</anchorfile>
      <anchor>a28c7435009bcc846200ea96e8324487e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1map_3_01K_00_01V_01_4_01_4.html</anchorfile>
      <anchor>afbc21b7a2ea13de49050ec27a47bb00b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; std::map&lt; K, V &gt; &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1map_3_01K_00_01V_01_4_01_4.html</anchorfile>
      <anchor>a2d4b3be26cac7be44c1770fcc94dd593</anchor>
      <arglist>(const std::map&lt; K, V &gt; &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; std::string &gt;</name>
    <filename>classGlib_1_1Variant_3_01std_1_1string_01_4.html</filename>
    <base>Glib::VariantStringBase</base>
    <member kind="typedef">
      <type>char *</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>a2dd237a7b93a27d09a12587f03b37b92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>a39b3726dccb877bae6caab02b4511cdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>af4c043bede19c1cd87c483a9eaa71fe9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>a3be41b4b25916571336c7d9a71013fdf</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>a9a70ee423b079e1cb89737b38135eec1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>a67d7c4a0a784363fa9ab0f92ca592bfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; std::string &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>a74626aadb7c3fd708cfce84afb2461ec</anchor>
      <arglist>(const std::string &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; std::tuple&lt; Types... &gt; &gt;</name>
    <filename>classGlib_1_1Variant_3_01std_1_1tuple_3_01Types_8_8_8_01_4_01_4.html</filename>
    <templarg>Types</templarg>
    <base>Glib::VariantContainerBase</base>
    <member kind="typedef">
      <type>std::tuple&lt; Types... &gt;</type>
      <name>CppContainerType</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1tuple_3_01Types_8_8_8_01_4_01_4.html</anchorfile>
      <anchor>ab21e2986ea3fd0cb720c7997ca2582d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1tuple_3_01Types_8_8_8_01_4_01_4.html</anchorfile>
      <anchor>ad8a8249b87993cd7c83bc1ca560f9575</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1tuple_3_01Types_8_8_8_01_4_01_4.html</anchorfile>
      <anchor>aefb773882076a837f44fcb1715e85adb</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_child</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1tuple_3_01Types_8_8_8_01_4_01_4.html</anchorfile>
      <anchor>ad5ad3ab8229ac7199a8ef4f4ab39f94d</anchor>
      <arglist>(gsize index) const</arglist>
    </member>
    <member kind="function">
      <type>Variant&lt; T &gt;</type>
      <name>get_child_variant</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1tuple_3_01Types_8_8_8_01_4_01_4.html</anchorfile>
      <anchor>a72677593c7334d8f16fbb745330659fe</anchor>
      <arglist>(gsize index) const</arglist>
    </member>
    <member kind="function">
      <type>std::tuple&lt; Types... &gt;</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1tuple_3_01Types_8_8_8_01_4_01_4.html</anchorfile>
      <anchor>a8b4b3577f2437b954dee801b56a6da51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VariantIter</type>
      <name>get_iter</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1tuple_3_01Types_8_8_8_01_4_01_4.html</anchorfile>
      <anchor>a76a2f462ba4e59867846f1c94c1b63c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; std::tuple&lt; Types... &gt; &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1tuple_3_01Types_8_8_8_01_4_01_4.html</anchorfile>
      <anchor>a9186c3fd628301fac08c3b82157fae68</anchor>
      <arglist>(const std::tuple&lt; Types... &gt; &amp;data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1tuple_3_01Types_8_8_8_01_4_01_4.html</anchorfile>
      <anchor>a4efe545d604a72677063e5b7b8741462</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; std::vector&lt; Glib::DBusObjectPathString &gt; &gt;</name>
    <filename>classGlib_1_1Variant_3_01std_1_1vector_3_01Glib_1_1DBusObjectPathString_01_4_01_4.html</filename>
    <base>Glib::VariantContainerBase</base>
    <member kind="typedef">
      <type>Glib::DBusObjectPathString</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01Glib_1_1DBusObjectPathString_01_4_01_4.html</anchorfile>
      <anchor>a678de8516f31ea09d249f65205d8bc97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Glib::DBusObjectPathString &gt;</type>
      <name>CppContainerType</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01Glib_1_1DBusObjectPathString_01_4_01_4.html</anchorfile>
      <anchor>ab63d6f86cf0eb410b8b1c9ae6561a5bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01Glib_1_1DBusObjectPathString_01_4_01_4.html</anchorfile>
      <anchor>a91cf69a28a0e71362769eb9447adfdfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01Glib_1_1DBusObjectPathString_01_4_01_4.html</anchorfile>
      <anchor>acebbc2511b7174f67c6cf551965ff81a</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>CppType</type>
      <name>get_child</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01Glib_1_1DBusObjectPathString_01_4_01_4.html</anchorfile>
      <anchor>a9db86c9b1b311c0883b209203661a96f</anchor>
      <arglist>(gsize index) const</arglist>
    </member>
    <member kind="function">
      <type>CppContainerType</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01Glib_1_1DBusObjectPathString_01_4_01_4.html</anchorfile>
      <anchor>a3f73a5626d0dcc7443015b0647d37d3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VariantIter</type>
      <name>get_iter</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01Glib_1_1DBusObjectPathString_01_4_01_4.html</anchorfile>
      <anchor>a4f36a8ea34f9613f06042b2fa96da687</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01Glib_1_1DBusObjectPathString_01_4_01_4.html</anchorfile>
      <anchor>a0b1a0747b8f246b0b1e05be52ec551ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; CppContainerType &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01Glib_1_1DBusObjectPathString_01_4_01_4.html</anchorfile>
      <anchor>ad970915af837691fb691e539fb1e7f5b</anchor>
      <arglist>(const CppContainerType &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; std::vector&lt; Glib::ustring &gt; &gt;</name>
    <filename>classGlib_1_1Variant_3_01std_1_1vector_3_01Glib_1_1ustring_01_4_01_4.html</filename>
    <base>Glib::VariantContainerBase</base>
    <member kind="typedef">
      <type>Glib::ustring</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01Glib_1_1ustring_01_4_01_4.html</anchorfile>
      <anchor>a4cbd5f1e0083f726f1843d8fb77ec9b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Glib::ustring &gt;</type>
      <name>CppContainerType</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01Glib_1_1ustring_01_4_01_4.html</anchorfile>
      <anchor>a1a84d52d435aeab70f61b5c9d6af3eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01Glib_1_1ustring_01_4_01_4.html</anchorfile>
      <anchor>a7c1bd06e5b58b05a1f8517c73b6455b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01Glib_1_1ustring_01_4_01_4.html</anchorfile>
      <anchor>a2cc9fbf227e1da4bcf99d99da1610742</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_child</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01Glib_1_1ustring_01_4_01_4.html</anchorfile>
      <anchor>a039e15f8c54e8ace16e0b0e990d7c197</anchor>
      <arglist>(gsize index) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::ustring &gt;</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01Glib_1_1ustring_01_4_01_4.html</anchorfile>
      <anchor>a528ae9b48293bdb2151eb49a8ef0af1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VariantIter</type>
      <name>get_iter</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01Glib_1_1ustring_01_4_01_4.html</anchorfile>
      <anchor>a3d459b3e84ed5c5c17ca2e4cea1c2e5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01Glib_1_1ustring_01_4_01_4.html</anchorfile>
      <anchor>a2f9b40f48bb5e9a7f460b910eec609cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; std::vector&lt; Glib::ustring &gt; &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01Glib_1_1ustring_01_4_01_4.html</anchorfile>
      <anchor>a1f93fea455923e86933202fe6c1566d2</anchor>
      <arglist>(const std::vector&lt; Glib::ustring &gt; &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; std::vector&lt; std::string &gt; &gt;</name>
    <filename>classGlib_1_1Variant_3_01std_1_1vector_3_01std_1_1string_01_4_01_4.html</filename>
    <base>Glib::VariantContainerBase</base>
    <member kind="typedef">
      <type>std::string</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01std_1_1string_01_4_01_4.html</anchorfile>
      <anchor>a075adee8b293cca030e284fbb9a7bad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>CppContainerType</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01std_1_1string_01_4_01_4.html</anchorfile>
      <anchor>af38ea3fb1ef1176dd79dbb28b2946299</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01std_1_1string_01_4_01_4.html</anchorfile>
      <anchor>a1543d79bd49eeaff5b73e2006e100a0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01std_1_1string_01_4_01_4.html</anchorfile>
      <anchor>a0594edf449f985b9322722025aff01c3</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_child</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01std_1_1string_01_4_01_4.html</anchorfile>
      <anchor>a6c427783616bedf177579a4bca9a0d15</anchor>
      <arglist>(gsize index) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01std_1_1string_01_4_01_4.html</anchorfile>
      <anchor>a3d3137e1c88f9c70e344fdc33417e230</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VariantIter</type>
      <name>get_iter</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01std_1_1string_01_4_01_4.html</anchorfile>
      <anchor>afc2639431118812ca1a987c27e414999</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01std_1_1string_01_4_01_4.html</anchorfile>
      <anchor>ab9b7a5f067bed2b705510e4cd204d0f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; std::vector&lt; std::string &gt; &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01std_1_1string_01_4_01_4.html</anchorfile>
      <anchor>a2d4d4da74b992fdc8ccceca8a6de4977</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; std::vector&lt; std::string &gt; &gt;</type>
      <name>create_from_object_paths</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01std_1_1string_01_4_01_4.html</anchorfile>
      <anchor>a368c1fa22c308798dacc0aeccb954146</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;paths)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; std::vector&lt; T &gt; &gt;</name>
    <filename>classGlib_1_1Variant_3_01std_1_1vector_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <base>Glib::VariantContainerBase</base>
    <member kind="typedef">
      <type>T</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a7aea968105b3f0a0eeb47330a48e1756</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;</type>
      <name>CppContainerType</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01T_01_4_01_4.html</anchorfile>
      <anchor>aab2f6d79a61fb2a96fb08116156eb2cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a6daacfed337a15bda8403b2b73e65932</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a9d904e473de66e95937a70d5ced84a5a</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_child</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a3573c6a762b2c8c505820d6c58271270</anchor>
      <arglist>(gsize index) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a8173db80bbb2eb4d8da33e5a4cceec41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VariantIter</type>
      <name>get_iter</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01T_01_4_01_4.html</anchorfile>
      <anchor>ad3ca3131ff922f4bba28e3b241fab136</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a0ecc55e8b63891da8f705701ac0e8985</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; std::vector&lt; T &gt; &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a4d86a01c64270f72942903c7028eb16c</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; unsigned char &gt;</name>
    <filename>classGlib_1_1Variant_3_01unsigned_01char_01_4.html</filename>
    <base>Glib::VariantBase</base>
    <member kind="typedef">
      <type>guchar</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Variant_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>ac642a65ec47e39e2ff9756d64a2d8870</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>ab69b5eed963bbc8eb97ef43f0678fb24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>a184f13cba62575857490193baebe4d64</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>af0ea318abfbe499056ec90c64765262d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>a1a81388cf3729af8af61ae6dd02bf7eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; unsigned char &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>a52a2deb4b520a6c434241ed6892c9a15</anchor>
      <arglist>(unsigned char data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; Variant&lt; T &gt; &gt;</name>
    <filename>classGlib_1_1Variant_3_01Variant_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <base>Glib::VariantContainerBase</base>
    <member kind="typedef">
      <type>GVariant *</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Variant_3_01Variant_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a9b96e6854456fedb8fd0284bc7a431e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Variant&lt; T &gt;</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Variant_3_01Variant_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a3a6da5778253be9ad22d68c435822564</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Variant&lt; CppType &gt;</type>
      <name>CppContainerType</name>
      <anchorfile>classGlib_1_1Variant_3_01Variant_3_01T_01_4_01_4.html</anchorfile>
      <anchor>abcc79bd91e68a67a5528838dcf7b07ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01Variant_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a61d949e79d7fc1cc3bd5953459d7e65c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01Variant_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a2d7deb8bdc66ca87f97272e23e095848</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>Variant&lt; T &gt;</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01Variant_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a960d96bf8afa230eff74b6e76bd5eeef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01Variant_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a0f4ad10afb46e25cf6f798c7c46a7ab8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; Variant&lt; T &gt; &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01Variant_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a6e26f8d03ba8b23b8e6a8198ebef9005</anchor>
      <arglist>(const Variant&lt; T &gt; &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; VariantBase &gt;</name>
    <filename>classGlib_1_1Variant_3_01VariantBase_01_4.html</filename>
    <base>Glib::VariantContainerBase</base>
    <member kind="typedef">
      <type>GVariant *</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Variant_3_01VariantBase_01_4.html</anchorfile>
      <anchor>a18975d068a3b91abb2a7c4354a46a2c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VariantBase</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Variant_3_01VariantBase_01_4.html</anchorfile>
      <anchor>a9eea64050f2fdd2061e47be2b20b17a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Variant&lt; VariantBase &gt;</type>
      <name>CppContainerType</name>
      <anchorfile>classGlib_1_1Variant_3_01VariantBase_01_4.html</anchorfile>
      <anchor>a83da671ceb1b5a9748c93a87d32fed5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01VariantBase_01_4.html</anchorfile>
      <anchor>ab2430e158b28a4997d1147f0e491326c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01VariantBase_01_4.html</anchorfile>
      <anchor>ac561a75cec9517628abed24619626460</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01VariantBase_01_4.html</anchorfile>
      <anchor>a70af09213109f536aa234323e4335940</anchor>
      <arglist>(VariantBase &amp;variant) const</arglist>
    </member>
    <member kind="function">
      <type>VariantBase</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01VariantBase_01_4.html</anchorfile>
      <anchor>ae900459e0328e701463b96d158dfed84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01VariantBase_01_4.html</anchorfile>
      <anchor>a07d44c0d3b5f66191d8d4289749a91e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; VariantBase &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01VariantBase_01_4.html</anchorfile>
      <anchor>ab3bd9f2a48125d9bf6ec97cceffbbde4</anchor>
      <arglist>(const VariantBase &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::VariantBase</name>
    <filename>classGlib_1_1VariantBase.html</filename>
    <member kind="typedef">
      <type>const void *</type>
      <name>BoolExpr</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>ae46eeafcd6f827fabb1a61e53a0d401b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantBase</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a74bb8db40a8cd10d2fed3d02c4cb413e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantBase</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>afac0ab2bacb3ff7c1b8eea15ac75df9c</anchor>
      <arglist>(GVariant *castitem, bool make_a_copy=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantBase</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a6eb13ac35e3de8d16a866aa8822aea25</anchor>
      <arglist>(const VariantBase &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>VariantBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a2f30d304c0343fa3e86d1f9df2726d7c</anchor>
      <arglist>(const VariantBase &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantBase</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>afdd23a76dad128ee5e8c290a8a250ca4</anchor>
      <arglist>(VariantBase &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>VariantBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a0325c35f55ea53e64146ad20661f6d8d</anchor>
      <arglist>(VariantBase &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VariantBase</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a1853f1bd452866789479f9d5d48cadd9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a336846c1fd9175e222e58d74aa5c9156</anchor>
      <arglist>(VariantBase &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>GVariant *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a3b980321e6b0d16401343129dfc439e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GVariant *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a9a32c7b5743cf3e0ef1be6f4b52b7879</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GVariant *</type>
      <name>gobj_copy</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>ae55e408724475fb231e514f03e62cc4e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator BoolExpr</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>ab0c3a170109283c7c2e3aa2b621ebaa6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>ab4ae01c904768ee5c7c222469795fa83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a980a39e735ac4e68dfc37fe004161018</anchor>
      <arglist>(const GVariant *cobject, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>VariantType</type>
      <name>get_type</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>ad581febd10535aee8b71d2456f8351aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_type_string</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a1d5b77ad3573f62589be6d29248d1181</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_floating</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a56934b85ab44853fc33fbc778b4ffd03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_of_type</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a29f40905eddfb9c19bd1f2c143c08ce6</anchor>
      <arglist>(const VariantType &amp;type) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_container</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>afa6e0512d03470f8bb89ab24ae005ee7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GVariantClass</type>
      <name>classify</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a50cff41a3a339a2dba2102b45ba3278a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>gsize</type>
      <name>get_size</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>aa1c23c18e0a2c8ce4c259b2cc37df988</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>gconstpointer</type>
      <name>get_data</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a687306a73541b9b5e11e91d6d8f97831</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>gconstpointer</type>
      <name>get_data</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a3bc558b0b75fe31716dfa8406428b506</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Glib::Bytes &gt;</type>
      <name>get_data_as_bytes</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a2833b07dd7f5edf8542b6f2b5144cdb5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>store</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a7a63b7476142963fa6b1d31ea2cb7e90</anchor>
      <arglist>(gpointer data) const</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>print</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a451efed62c1123dd28bae39e9c25b5df</anchor>
      <arglist>(bool type_annotate=false) const</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>hash</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>ac02ca2fa168254a30e02cef26ad03cf6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a77f20ca2ae807e612f73e6a62e4313b3</anchor>
      <arglist>(const VariantBase &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_normal_form</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a7650d73edb1465c61641b69182ba79e5</anchor>
      <arglist>(VariantBase &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_normal_form</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>afed03db642a06c630ffed4e51f8cdcd7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>byteswap</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a7d4fe3b45aaf70551ca8187b8b1dcb93</anchor>
      <arglist>(VariantBase &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>check_format_string</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>ac428fb65c8699f2f2d92f6902f5db140</anchor>
      <arglist>(const std::string &amp;format_string, bool copy_only=false) const</arglist>
    </member>
    <member kind="function">
      <type>VariantContainerBase</type>
      <name>cast_dynamic</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a9564ae1398eb9015369b3842d50b67e8</anchor>
      <arglist>(const VariantBase &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static V_CastTo</type>
      <name>cast_dynamic</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a1f65fc45c20886cd9a5351ed5fa81463</anchor>
      <arglist>(const VariantBase &amp;v)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GVariant *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>afb327758aeb118b06e9c9e6b0a796892</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>ad70df57e9ee2e532a0c836923e7d0b2a</anchor>
      <arglist>(VariantBase &amp;lhs, VariantBase &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantBase</type>
      <name>wrap</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>aea2fee9e9505dfd38d7f086a335655b0</anchor>
      <arglist>(GVariant *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::VariantContainerBase</name>
    <filename>classGlib_1_1VariantContainerBase.html</filename>
    <base>Glib::VariantBase</base>
    <member kind="typedef">
      <type>GVariant *</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1VariantContainerBase.html</anchorfile>
      <anchor>af25ca06a5994ba5f39c92fd120187244</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VariantContainerBase</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1VariantContainerBase.html</anchorfile>
      <anchor>ac221ee3ce265cc70aaf5d4e077048f97</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantContainerBase</name>
      <anchorfile>classGlib_1_1VariantContainerBase.html</anchorfile>
      <anchor>a47701d34a101027946e14fcc2d00d863</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantContainerBase</name>
      <anchorfile>classGlib_1_1VariantContainerBase.html</anchorfile>
      <anchor>a87220270495aa11312652234a7bb7803</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>gsize</type>
      <name>get_n_children</name>
      <anchorfile>classGlib_1_1VariantContainerBase.html</anchorfile>
      <anchor>a8f5163ad6a44a4886874d8217037d360</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_child</name>
      <anchorfile>classGlib_1_1VariantContainerBase.html</anchorfile>
      <anchor>a15924df220d6bb818b900805d643ba65</anchor>
      <arglist>(VariantBase &amp;child, gsize index=0) const</arglist>
    </member>
    <member kind="function">
      <type>VariantBase</type>
      <name>get_child</name>
      <anchorfile>classGlib_1_1VariantContainerBase.html</anchorfile>
      <anchor>ad0a475e0b0b07ea03242c945a5db67e0</anchor>
      <arglist>(gsize index=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_maybe</name>
      <anchorfile>classGlib_1_1VariantContainerBase.html</anchorfile>
      <anchor>a8b91c45407067ac96a4f70b1512293c6</anchor>
      <arglist>(VariantBase &amp;maybe) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VariantContainerBase</type>
      <name>create_tuple</name>
      <anchorfile>classGlib_1_1VariantContainerBase.html</anchorfile>
      <anchor>a9153ad406feee6ad2de943cd1ed71601</anchor>
      <arglist>(const std::vector&lt; VariantBase &gt; &amp;children)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VariantContainerBase</type>
      <name>create_tuple</name>
      <anchorfile>classGlib_1_1VariantContainerBase.html</anchorfile>
      <anchor>a2338b26250ab256da44ca656191ae187</anchor>
      <arglist>(const VariantBase &amp;child)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VariantContainerBase</type>
      <name>create_maybe</name>
      <anchorfile>classGlib_1_1VariantContainerBase.html</anchorfile>
      <anchor>a4e2ff2c8d2db762fa398901e8863cb8f</anchor>
      <arglist>(const VariantType &amp;child_type, const VariantBase &amp;child=VariantBase())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::VariantDict</name>
    <filename>classGlib_1_1VariantDict.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1VariantDict.html</anchorfile>
      <anchor>a847fffe19e3beaa8317c66c29407d6b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGlib_1_1VariantDict.html</anchorfile>
      <anchor>a3f6585c468dacc39cd9913dcbf7aa0bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GVariantDict *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1VariantDict.html</anchorfile>
      <anchor>a867a56baa952c4f98ecf21b01d3d00c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GVariantDict *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1VariantDict.html</anchorfile>
      <anchor>ae8ebd43ee16b2120ad741af514c7a545</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GVariantDict *</type>
      <name>gobj_copy</name>
      <anchorfile>classGlib_1_1VariantDict.html</anchorfile>
      <anchor>a5c366f3ad7e1090529ee6f51f6aa10d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantDict</name>
      <anchorfile>classGlib_1_1VariantDict.html</anchorfile>
      <anchor>a190c68d8d3d469b66bed3509a4b16102</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantDict</name>
      <anchorfile>classGlib_1_1VariantDict.html</anchorfile>
      <anchor>a3805a3f50ee49d3d5dba47774d4c511c</anchor>
      <arglist>(const VariantDict &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>VariantDict &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1VariantDict.html</anchorfile>
      <anchor>ab29956fc31dfec06e858d6b6858408b4</anchor>
      <arglist>(const VariantDict &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lookup_value_variant</name>
      <anchorfile>classGlib_1_1VariantDict.html</anchorfile>
      <anchor>a27fcbbc39ade754487a906414724b3b7</anchor>
      <arglist>(const Glib::ustring &amp;key, const VariantType &amp;expected_type, VariantBase &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lookup_value</name>
      <anchorfile>classGlib_1_1VariantDict.html</anchorfile>
      <anchor>acdaf4fd89f9235671dce3d135244ece4</anchor>
      <arglist>(const Glib::ustring &amp;key, T_Value &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classGlib_1_1VariantDict.html</anchorfile>
      <anchor>a9b3764aaca4b50f3e9603f7035c8826e</anchor>
      <arglist>(const Glib::ustring &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert_value_variant</name>
      <anchorfile>classGlib_1_1VariantDict.html</anchorfile>
      <anchor>ab91bcd264d3b66d104f91e4c66466cf5</anchor>
      <arglist>(const Glib::ustring &amp;key, const VariantBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert_value</name>
      <anchorfile>classGlib_1_1VariantDict.html</anchorfile>
      <anchor>ae4e832e5c263de0dc9689c57c493d51b</anchor>
      <arglist>(const Glib::ustring &amp;key, const T_Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classGlib_1_1VariantDict.html</anchorfile>
      <anchor>a38047bbaddfe71a729d36374e6966364</anchor>
      <arglist>(const Glib::ustring &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classGlib_1_1VariantDict.html</anchorfile>
      <anchor>a8c7763c19ed62427ca6e3347a9adda39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; VariantDict &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1VariantDict.html</anchorfile>
      <anchor>a0111e0f9065c8f193db7a18875dbce06</anchor>
      <arglist>(const VariantBase &amp;from_asv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; VariantDict &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1VariantDict.html</anchorfile>
      <anchor>ac88f713989c502e998e64e986de1f288</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classGlib_1_1VariantDict.html</anchorfile>
      <anchor>a83a69bd96dc625b914a667e53e4d2689</anchor>
      <arglist>(void *, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Glib::VariantDict &gt;</type>
      <name>wrap</name>
      <anchorfile>classGlib_1_1VariantDict.html</anchorfile>
      <anchor>a153ca5d33744e7a1b84e8aaa5847cc05</anchor>
      <arglist>(GVariantDict *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::VariantIter</name>
    <filename>classGlib_1_1VariantIter.html</filename>
    <member kind="function">
      <type></type>
      <name>VariantIter</name>
      <anchorfile>classGlib_1_1VariantIter.html</anchorfile>
      <anchor>ad2b942a346f4e627f8d506d56d2f6ca9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantIter</name>
      <anchorfile>classGlib_1_1VariantIter.html</anchorfile>
      <anchor>a3740e672ee31321f23cc25d100d521cd</anchor>
      <arglist>(GVariantIter *castitem, bool make_a_copy=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantIter</name>
      <anchorfile>classGlib_1_1VariantIter.html</anchorfile>
      <anchor>a0900264d5dc894f33cf4725c01ae4c2e</anchor>
      <arglist>(const VariantIter &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>VariantIter &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1VariantIter.html</anchorfile>
      <anchor>ae3904f860aa1c241e7bd2732b03819e4</anchor>
      <arglist>(const VariantIter &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantIter</name>
      <anchorfile>classGlib_1_1VariantIter.html</anchorfile>
      <anchor>ac5b68c303c654590f1d0c4a9a2850636</anchor>
      <arglist>(VariantIter &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>VariantIter &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1VariantIter.html</anchorfile>
      <anchor>afb55d29de34adeccd9c560ce7b6b6b60</anchor>
      <arglist>(VariantIter &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VariantIter</name>
      <anchorfile>classGlib_1_1VariantIter.html</anchorfile>
      <anchor>a82356d7d6802520c1a286de98b8f3e9d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classGlib_1_1VariantIter.html</anchorfile>
      <anchor>ad1266d55e7237b94d8e7561cfa1aa691</anchor>
      <arglist>(VariantIter &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>GVariantIter *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1VariantIter.html</anchorfile>
      <anchor>aefb89b951a1e173003a0124a872dd10d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GVariantIter *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1VariantIter.html</anchorfile>
      <anchor>a2729386010d6f34baeab0d3bc5d6a1ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GVariantIter *</type>
      <name>gobj_copy</name>
      <anchorfile>classGlib_1_1VariantIter.html</anchorfile>
      <anchor>a1ddaec2337bf12c8705ae40028cc0d3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantIter</name>
      <anchorfile>classGlib_1_1VariantIter.html</anchorfile>
      <anchor>a3c6536a04708e394d5a4f484ab47a126</anchor>
      <arglist>(const VariantBase &amp;variant)</arglist>
    </member>
    <member kind="function">
      <type>gsize</type>
      <name>init</name>
      <anchorfile>classGlib_1_1VariantIter.html</anchorfile>
      <anchor>afe28c96086ebd28d28dbf8d0b517f5da</anchor>
      <arglist>(const VariantContainerBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>gsize</type>
      <name>get_n_children</name>
      <anchorfile>classGlib_1_1VariantIter.html</anchorfile>
      <anchor>afd5503c13b6d6dc023db9154b585f7ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next_value</name>
      <anchorfile>classGlib_1_1VariantIter.html</anchorfile>
      <anchor>aaa597dd59e369c4a8bcf7e15e48568e2</anchor>
      <arglist>(VariantBase &amp;value)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GVariantIter *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1VariantIter.html</anchorfile>
      <anchor>a8c9f77e7a61fa4d0a580e2e6560f880d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classGlib_1_1VariantIter.html</anchorfile>
      <anchor>a69df3eb4abcc26da3a94de497dd4c534</anchor>
      <arglist>(VariantIter &amp;lhs, VariantIter &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantIter</type>
      <name>wrap</name>
      <anchorfile>classGlib_1_1VariantIter.html</anchorfile>
      <anchor>a7c11a76e7facaa1f56e32af7661bd012</anchor>
      <arglist>(GVariantIter *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::VariantParseError</name>
    <filename>classGlib_1_1VariantParseError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumeration">
      <type></type>
      <name>Code</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314ea4ac78cff3b3d00d4c9e0910d49b650a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BASIC_TYPE_EXPECTED</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314eac02d392afb9ff4d947c42c68b251169b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CANNOT_INFER_TYPE</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314eabd0392b3c64cbae6db02fd059656f2b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEFINITE_TYPE_EXPECTED</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314ea5de7586970eab27608c42c07f2d97a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INPUT_NOT_AT_END</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314ea94a094331551001947c13107e6eba049</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_CHARACTER</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314eab889a795687d50a645c96b8f8a988b8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_FORMAT_STRING</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314eadc38cf15fadb1e79bc383f74731f9a9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_OBJECT_PATH</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314ea7d0812e6c93180296a6a92c09e2dd201</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_SIGNATURE</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314eaa1d36623b7b9da74e6017ecbe461bdae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_TYPE_STRING</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314eab9073320bec75b6b8ea54c498f0e11ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_COMMON_TYPE</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314eacc7813aa9d6b577fba98699d9b5cf22c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUMBER_OUT_OF_RANGE</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314ead52f458094a30385d7d6af67d150a169</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUMBER_TOO_BIG</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314ea33e2d71b59a057e2151f65038377d229</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_ERROR</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314ea5c9879e0ed9f9648c7f72f5491b4c41b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNEXPECTED_TOKEN</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314ea460c0f469b84940caa8312ec1078c321</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_KEYWORD</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314ea02cea75f5d9c8b097f336004a04fc061</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNTERMINATED_STRING_CONSTANT</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314ea0764fbf8555aa4a78319432ed0dbdc9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VALUE_EXPECTED</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314ea115d9a581636b91bff9db1d2eee6ea9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314ea4ac78cff3b3d00d4c9e0910d49b650a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BASIC_TYPE_EXPECTED</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314eac02d392afb9ff4d947c42c68b251169b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CANNOT_INFER_TYPE</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314eabd0392b3c64cbae6db02fd059656f2b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEFINITE_TYPE_EXPECTED</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314ea5de7586970eab27608c42c07f2d97a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INPUT_NOT_AT_END</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314ea94a094331551001947c13107e6eba049</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_CHARACTER</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314eab889a795687d50a645c96b8f8a988b8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_FORMAT_STRING</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314eadc38cf15fadb1e79bc383f74731f9a9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_OBJECT_PATH</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314ea7d0812e6c93180296a6a92c09e2dd201</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_SIGNATURE</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314eaa1d36623b7b9da74e6017ecbe461bdae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_TYPE_STRING</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314eab9073320bec75b6b8ea54c498f0e11ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_COMMON_TYPE</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314eacc7813aa9d6b577fba98699d9b5cf22c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUMBER_OUT_OF_RANGE</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314ead52f458094a30385d7d6af67d150a169</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUMBER_TOO_BIG</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314ea33e2d71b59a057e2151f65038377d229</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_ERROR</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314ea5c9879e0ed9f9648c7f72f5491b4c41b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNEXPECTED_TOKEN</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314ea460c0f469b84940caa8312ec1078c321</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_KEYWORD</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314ea02cea75f5d9c8b097f336004a04fc061</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNTERMINATED_STRING_CONSTANT</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314ea0764fbf8555aa4a78319432ed0dbdc9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VALUE_EXPECTED</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a217aafad01bee506a1b699a7e138314ea115d9a581636b91bff9db1d2eee6ea9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantParseError</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a2d2e9929413a635984226b49097dab80</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantParseError</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>acfe27e6cd3d758267fb7626e6ed9e39f</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGlib_1_1VariantParseError.html</anchorfile>
      <anchor>a9253b299c20de4406080d6ef3998b09d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::VariantStringBase</name>
    <filename>classGlib_1_1VariantStringBase.html</filename>
    <base>Glib::VariantBase</base>
    <member kind="typedef">
      <type>GVariant *</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1VariantStringBase.html</anchorfile>
      <anchor>ae7766c85e3944194c883b7491c2f4cb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VariantStringBase</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1VariantStringBase.html</anchorfile>
      <anchor>a07044056c8c34f31ef58e093aec0923f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantStringBase</name>
      <anchorfile>classGlib_1_1VariantStringBase.html</anchorfile>
      <anchor>a13ea98681709fb302d36358ee74e41f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantStringBase</name>
      <anchorfile>classGlib_1_1VariantStringBase.html</anchorfile>
      <anchor>aa5349ce2660a42307b9f4206610db0a5</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>create_object_path</name>
      <anchorfile>classGlib_1_1VariantStringBase.html</anchorfile>
      <anchor>a16f267560818fd2c30e1e66a08ad5199</anchor>
      <arglist>(VariantStringBase &amp;output, const std::string &amp;object_path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>is_object_path</name>
      <anchorfile>classGlib_1_1VariantStringBase.html</anchorfile>
      <anchor>aa07e4d93db2fb3c138f1b064a7cee4f7</anchor>
      <arglist>(const std::string &amp;string)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>create_signature</name>
      <anchorfile>classGlib_1_1VariantStringBase.html</anchorfile>
      <anchor>af0fc3a17ced885820fba0d0303c075fb</anchor>
      <arglist>(VariantStringBase &amp;output, const std::string &amp;signature)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>is_signature</name>
      <anchorfile>classGlib_1_1VariantStringBase.html</anchorfile>
      <anchor>a75f4a50974c381d161a7e1029a6bd5e7</anchor>
      <arglist>(const std::string &amp;string)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::VariantType</name>
    <filename>classGlib_1_1VariantType.html</filename>
    <member kind="function">
      <type></type>
      <name>VariantType</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a7d05abfd748f0e5917996682eb8d7b3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantType</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>aa9f6a6269718a433540a56b874dd9e93</anchor>
      <arglist>(GVariantType *castitem, bool make_a_copy=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantType</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>addfa490c6545d0b0a3af409a1890c5b3</anchor>
      <arglist>(const VariantType &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>VariantType &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a0d63c3af32d9c2eeeeea3009207457fe</anchor>
      <arglist>(const VariantType &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantType</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a9b75713e8127362005aae10aa3a1e96b</anchor>
      <arglist>(VariantType &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>VariantType &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a05e8c7bc32e1cae7c8c7c4044f32e996</anchor>
      <arglist>(VariantType &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VariantType</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>ade2e2b2fb55596457bf1de943d8a267e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>aaa7b5d84857755c4cc9f6dfec22ccfbd</anchor>
      <arglist>(VariantType &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>GVariantType *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a911a3cfa7c4fc5e56cca07f0cb765487</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GVariantType *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>afe52b6c2db8a92fa44b6fe0f06a3dc8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GVariantType *</type>
      <name>gobj_copy</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a4d5c6f3b59411bbd3fd73b3df561d34a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantType</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>af02bb61ceab7e1b8f89c2cbcd39e01de</anchor>
      <arglist>(const GVariantType *castitem)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantType</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>ae10ea525df2b241b59036de7684ae565</anchor>
      <arglist>(const std::string &amp;type_string)</arglist>
    </member>
    <member kind="function">
      <type>VariantType &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a32d8cf9c965f307b1dbabf5d8845e22a</anchor>
      <arglist>(const GVariantType *castitem)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_string</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a19fa954d836c05fa9f379feccb992cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_definite</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>ab508d0a43ced88c4beb685cda233d749</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_container</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a409d35a4aea3e0c980c49c1e435ecade</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_basic</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a2422a87bb2ab461f5c82f0079a71af0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_maybe</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>ad41070e6892073b6ce7f7ab7a93fe4c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a9a5ba87ca42a8e4d5a7309379057f2aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_tuple</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a5fb484e023a8949a4f198560da28d4ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_dict_entry</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a26c90a1f8431c48806568a207c994c28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_variant</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>aadba2be4ad172a9e5ba984f02f4b54a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>hash</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a30bc74a9d194766172ca1d90ec83cd50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a22e6ca681dd0213162bdf68c61d000b3</anchor>
      <arglist>(const VariantType &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_subtype_of</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a5cc31e57323ada2fe326de577ac1c4d0</anchor>
      <arglist>(const VariantType &amp;supertype) const</arglist>
    </member>
    <member kind="function">
      <type>VariantType</type>
      <name>element</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a9b511f8318ab438cfa4edac75f576e35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VariantType</type>
      <name>first</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a7ba77745f518e18ebe0a7cc1e877d581</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VariantType</type>
      <name>next</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>aa0d724fe4a290e41f6267c7cecb2e556</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>gsize</type>
      <name>n_items</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a026696d44c063e742fef7df4776fe57f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VariantType</type>
      <name>key</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>af2e75517a29b17e483c641dacd6c68ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VariantType</type>
      <name>value</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a8d4dfb79358c208eddea5086c01c58a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; VariantType &gt;</type>
      <name>get_item_types</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a776ff2f8511d04f73596cac244a96857</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VariantType</type>
      <name>create_array</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a75cdb696a91c6fbc3cc9042bb20e66d0</anchor>
      <arglist>(const VariantType &amp;element)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VariantType</type>
      <name>create_maybe</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>aeac7660b174a80c9ae1ade6da36fac15</anchor>
      <arglist>(const VariantType &amp;element)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VariantType</type>
      <name>create_tuple</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a1e6ee0f41b29df3b43b548c267b0c16b</anchor>
      <arglist>(const std::vector&lt; VariantType &gt; &amp;items)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VariantType</type>
      <name>create_dict_entry</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>ae491f86f5ebda97b1a6aae8cb96c6251</anchor>
      <arglist>(const VariantType &amp;key, const VariantType &amp;value)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GVariantType *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a9ca6d5b63454a54702ad5e890ec95d75</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a78bb154e5a13d78cd0d7a6bc6449d3c5</anchor>
      <arglist>(VariantType &amp;lhs, VariantType &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantType</type>
      <name>wrap</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a7ab0237355a6c562fa30b3afc4a10332</anchor>
      <arglist>(GVariantType *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::WeakRef</name>
    <filename>classGlib_1_1WeakRef.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>WeakRef</name>
      <anchorfile>classGlib_1_1WeakRef.html</anchorfile>
      <anchor>a742af0eea71db225a3eee5094df1b4f2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeakRef</name>
      <anchorfile>classGlib_1_1WeakRef.html</anchorfile>
      <anchor>a8115592f075bfec8c7685eba953217b0</anchor>
      <arglist>(const WeakRef &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeakRef</name>
      <anchorfile>classGlib_1_1WeakRef.html</anchorfile>
      <anchor>a09ca7eab4c191538cdf6eccd2732b2a4</anchor>
      <arglist>(WeakRef &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeakRef</name>
      <anchorfile>classGlib_1_1WeakRef.html</anchorfile>
      <anchor>ab31785505c6aa1e8a961650d817587f6</anchor>
      <arglist>(const WeakRef&lt; T_CastFrom &gt; &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeakRef</name>
      <anchorfile>classGlib_1_1WeakRef.html</anchorfile>
      <anchor>adcc3b33861af65d557cb040ba5f6a5ae</anchor>
      <arglist>(WeakRef&lt; T_CastFrom &gt; &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeakRef</name>
      <anchorfile>classGlib_1_1WeakRef.html</anchorfile>
      <anchor>a7efd424c72b4273c6c397a2efcf084fd</anchor>
      <arglist>(const RefPtr&lt; T_CastFrom &gt; &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WeakRef</name>
      <anchorfile>classGlib_1_1WeakRef.html</anchorfile>
      <anchor>a60660d0a2e5de7258a857776d415f4b4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classGlib_1_1WeakRef.html</anchorfile>
      <anchor>a7563560d6413f05e768ce7e15c771bde</anchor>
      <arglist>(WeakRef &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>WeakRef &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1WeakRef.html</anchorfile>
      <anchor>a8eebda64905314f007adcf71a7e4f8fc</anchor>
      <arglist>(const WeakRef &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>WeakRef &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1WeakRef.html</anchorfile>
      <anchor>abfe47f2520e9c7ac73f7c735ca740352</anchor>
      <arglist>(WeakRef &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>WeakRef &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1WeakRef.html</anchorfile>
      <anchor>a3f42d24f682e3df01fe5c69bde09fdd4</anchor>
      <arglist>(const WeakRef&lt; T_CastFrom &gt; &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>WeakRef &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1WeakRef.html</anchorfile>
      <anchor>a7fe160cb3e8eb76f566c9f2ce52c0db9</anchor>
      <arglist>(WeakRef&lt; T_CastFrom &gt; &amp;&amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>WeakRef &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1WeakRef.html</anchorfile>
      <anchor>abcb6017666ea3c77b86e720df2e7a12f</anchor>
      <arglist>(const RefPtr&lt; T_CastFrom &gt; &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classGlib_1_1WeakRef.html</anchorfile>
      <anchor>a4256072bb223bb690036092ce9117b08</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>RefPtr&lt; T_CppObject &gt;</type>
      <name>get</name>
      <anchorfile>classGlib_1_1WeakRef.html</anchorfile>
      <anchor>a88eb239c3242477334e7e80dcd4d305c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classGlib_1_1WeakRef.html</anchorfile>
      <anchor>abae8fbb148f48e74f7923f09ffb0b501</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WeakRef</type>
      <name>cast_dynamic</name>
      <anchorfile>classGlib_1_1WeakRef.html</anchorfile>
      <anchor>a017ff11f7786e498b10af8e5ffd63427</anchor>
      <arglist>(const WeakRef&lt; T_CastFrom &gt; &amp;src) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WeakRef</type>
      <name>cast_static</name>
      <anchorfile>classGlib_1_1WeakRef.html</anchorfile>
      <anchor>ab392bcba7f060fc9f3b012fc263e8f43</anchor>
      <arglist>(const WeakRef&lt; T_CastFrom &gt; &amp;src) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WeakRef</type>
      <name>cast_const</name>
      <anchorfile>classGlib_1_1WeakRef.html</anchorfile>
      <anchor>a5f04f8d965ab0415048eb30fefe6403c</anchor>
      <arglist>(const WeakRef&lt; T_CastFrom &gt; &amp;src) noexcept</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WeakRef</name>
      <anchorfile>classGlib_1_1WeakRef.html</anchorfile>
      <anchor>a01af83840e506961497aee2e084120f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classGlib_1_1WeakRef.html</anchorfile>
      <anchor>a1f7be128b20c6f474dc95249cd19de01</anchor>
      <arglist>(WeakRef&lt; T_CppObject &gt; &amp;lhs, WeakRef&lt; T_CppObject &gt; &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Value_Pointer&lt; T, const T *&gt;</name>
    <filename>classGlib_1_1Value__Pointer.html</filename>
    <base>Glib::ValueBase_Object</base>
    <member kind="typedef">
      <type>const T *</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>a58039de1c753601e75b7affdd6be4991</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void *</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>aa682d62adfd40d62fad4b14a4fbd2c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>ad4b2133d4d67bfc3100bee5ce8ac7aaa</anchor>
      <arglist>(CppType data)</arglist>
    </member>
    <member kind="function">
      <type>CppType</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>ae8d3d243838aa7a4abe23aaffa40d08d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>a09e38a57b4f7f70085ce772ceea34090</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Value_Pointer&lt; T, T *&gt;</name>
    <filename>classGlib_1_1Value__Pointer.html</filename>
    <base>Glib::ValueBase_Object</base>
    <member kind="typedef">
      <type>T *</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>a58039de1c753601e75b7affdd6be4991</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void *</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>aa682d62adfd40d62fad4b14a4fbd2c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>ad4b2133d4d67bfc3100bee5ce8ac7aaa</anchor>
      <arglist>(CppType data)</arglist>
    </member>
    <member kind="function">
      <type>CppType</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>ae8d3d243838aa7a4abe23aaffa40d08d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>a09e38a57b4f7f70085ce772ceea34090</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Gio</name>
    <filename>namespaceGio.html</filename>
    <namespace>Gio::DBus</namespace>
    <class kind="class">Gio::Action</class>
    <class kind="class">Gio::ActionGroup</class>
    <class kind="class">Gio::ActionMap</class>
    <class kind="class">Gio::AppInfo</class>
    <class kind="class">Gio::AppLaunchContext</class>
    <class kind="class">Gio::Application</class>
    <class kind="class">Gio::ApplicationCommandLine</class>
    <class kind="class">Gio::AsyncInitable</class>
    <class kind="class">Gio::AsyncResult</class>
    <class kind="class">Gio::BufferedInputStream</class>
    <class kind="class">Gio::BufferedOutputStream</class>
    <class kind="class">Gio::Cancellable</class>
    <class kind="class">Gio::CharsetConverter</class>
    <class kind="class">Gio::Converter</class>
    <class kind="class">Gio::ConverterInputStream</class>
    <class kind="class">Gio::ConverterOutputStream</class>
    <class kind="class">Gio::Credentials</class>
    <class kind="class">Gio::DataInputStream</class>
    <class kind="class">Gio::DataOutputStream</class>
    <class kind="class">Gio::DesktopAppInfo</class>
    <class kind="class">Gio::Drive</class>
    <class kind="class">Gio::Emblem</class>
    <class kind="class">Gio::EmblemedIcon</class>
    <class kind="class">Gio::Error</class>
    <class kind="class">Gio::File</class>
    <class kind="class">Gio::FileAttributeInfo</class>
    <class kind="class">Gio::FileAttributeInfoList</class>
    <class kind="class">Gio::FileAttributeMatcher</class>
    <class kind="class">Gio::FileEnumerator</class>
    <class kind="class">Gio::FileIcon</class>
    <class kind="class">Gio::FileInfo</class>
    <class kind="class">Gio::FileInputStream</class>
    <class kind="class">Gio::FileIOStream</class>
    <class kind="class">Gio::FileMonitor</class>
    <class kind="class">Gio::FilenameCompleter</class>
    <class kind="class">Gio::FileOutputStream</class>
    <class kind="class">Gio::FilterInputStream</class>
    <class kind="class">Gio::FilterOutputStream</class>
    <class kind="class">Gio::Icon</class>
    <class kind="class">Gio::InetAddress</class>
    <class kind="class">Gio::InetSocketAddress</class>
    <class kind="class">Gio::Initable</class>
    <class kind="class">Gio::InputStream</class>
    <class kind="class">Gio::IOStream</class>
    <class kind="class">Gio::ListModel</class>
    <class kind="class">Gio::ListStore</class>
    <class kind="class">Gio::ListStoreBase</class>
    <class kind="class">Gio::LoadableIcon</class>
    <class kind="class">Gio::MemoryInputStream</class>
    <class kind="class">Gio::MemoryOutputStream</class>
    <class kind="class">Gio::Menu</class>
    <class kind="class">Gio::MenuAttributeIter</class>
    <class kind="class">Gio::MenuItem</class>
    <class kind="class">Gio::MenuLinkIter</class>
    <class kind="class">Gio::MenuModel</class>
    <class kind="class">Gio::Mount</class>
    <class kind="class">Gio::MountOperation</class>
    <class kind="class">Gio::NetworkAddress</class>
    <class kind="class">Gio::NetworkMonitor</class>
    <class kind="class">Gio::NetworkService</class>
    <class kind="class">Gio::Notification</class>
    <class kind="class">Gio::OutputStream</class>
    <class kind="class">Gio::Permission</class>
    <class kind="class">Gio::PollableInputStream</class>
    <class kind="class">Gio::PollableOutputStream</class>
    <class kind="class">Gio::Proxy</class>
    <class kind="class">Gio::ProxyAddress</class>
    <class kind="class">Gio::ProxyResolver</class>
    <class kind="class">Gio::RemoteActionGroup</class>
    <class kind="class">Gio::Resolver</class>
    <class kind="class">Gio::ResolverError</class>
    <class kind="class">Gio::Resource</class>
    <class kind="class">Gio::ResourceError</class>
    <class kind="class">Gio::Seekable</class>
    <class kind="class">Gio::Settings</class>
    <class kind="class">Gio::SettingsSchema</class>
    <class kind="class">Gio::SettingsSchemaKey</class>
    <class kind="class">Gio::SettingsSchemaSource</class>
    <class kind="class">Gio::SignalSocket</class>
    <class kind="class">Gio::SimpleAction</class>
    <class kind="class">Gio::SimpleActionGroup</class>
    <class kind="class">Gio::SimpleIOStream</class>
    <class kind="class">Gio::SimplePermission</class>
    <class kind="class">Gio::Socket</class>
    <class kind="class">Gio::SocketAddress</class>
    <class kind="class">Gio::SocketAddressEnumerator</class>
    <class kind="class">Gio::SocketClient</class>
    <class kind="class">Gio::SocketConnectable</class>
    <class kind="class">Gio::SocketConnection</class>
    <class kind="class">Gio::SocketControlMessage</class>
    <class kind="class">Gio::SocketListener</class>
    <class kind="class">Gio::SocketService</class>
    <class kind="class">Gio::SocketSource</class>
    <class kind="class">Gio::SrvTarget</class>
    <class kind="class">Gio::TcpConnection</class>
    <class kind="class">Gio::TcpWrapperConnection</class>
    <class kind="class">Gio::ThemedIcon</class>
    <class kind="class">Gio::ThreadedSocketService</class>
    <class kind="class">Gio::TlsCertificate</class>
    <class kind="class">Gio::TlsClientConnection</class>
    <class kind="class">Gio::TlsConnection</class>
    <class kind="class">Gio::TlsDatabase</class>
    <class kind="class">Gio::TlsError</class>
    <class kind="class">Gio::TlsInteraction</class>
    <class kind="class">Gio::TlsPassword</class>
    <class kind="class">Gio::TlsServerConnection</class>
    <class kind="class">Gio::UnixConnection</class>
    <class kind="class">Gio::UnixCredentialsMessage</class>
    <class kind="class">Gio::UnixFDList</class>
    <class kind="class">Gio::UnixFDMessage</class>
    <class kind="class">Gio::UnixInputStream</class>
    <class kind="class">Gio::UnixOutputStream</class>
    <class kind="class">Gio::UnixSocketAddress</class>
    <class kind="class">Gio::Volume</class>
    <class kind="class">Gio::VolumeMonitor</class>
    <class kind="class">Gio::ZlibCompressor</class>
    <class kind="class">Gio::ZlibDecompressor</class>
    <member kind="typedef">
      <type>sigc::slot&lt; void, Glib::RefPtr&lt; AsyncResult &gt; &amp; &gt;</type>
      <name>SlotAsyncReady</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a62eda8192493461b01b1df06ca229bb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::ListHandle&lt; Gio::SrvTarget, SrvTargetListTraits &gt;</type>
      <name>ListHandle_SrvTarget</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a0e20e371af96fff4efd6974a484c5b8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AppInfoCreateFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gae39c1e25f40a070e1720470758a55344</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APP_INFO_CREATE_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gae39c1e25f40a070e1720470758a55344add0a457b19825cca468ab82bfcb26792</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APP_INFO_CREATE_NEEDS_TERMINAL</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gae39c1e25f40a070e1720470758a55344a856b6d31af6aa3b829c4f7d0c369cb36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APP_INFO_CREATE_SUPPORTS_URIS</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gae39c1e25f40a070e1720470758a55344acdadd06006e617905058fe72b7d20a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gae39c1e25f40a070e1720470758a55344a019ac7f7975aa01cf9cce569d32cb305</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ApplicationFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga493d914cf0a466cc9c6b18a44c5d345e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APPLICATION_FLAGS_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga493d914cf0a466cc9c6b18a44c5d345eac3648311d6c651b1ec142a9126dd9218</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APPLICATION_IS_SERVICE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga493d914cf0a466cc9c6b18a44c5d345eacbfbbfcf23728f586b20198ec8c0ef65</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APPLICATION_IS_LAUNCHER</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga493d914cf0a466cc9c6b18a44c5d345ea80b9654d577ba14cac46a377803582f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APPLICATION_HANDLES_OPEN</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga493d914cf0a466cc9c6b18a44c5d345ea48febe68e1b1d161e976fbe7438d6dfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APPLICATION_HANDLES_COMMAND_LINE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga493d914cf0a466cc9c6b18a44c5d345ea571b3655b06b966f063c6934c716827a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APPLICATION_SEND_ENVIRONMENT</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga493d914cf0a466cc9c6b18a44c5d345ea3d7a27c9565496e3e091054a5c43d3a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APPLICATION_NON_UNIQUE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga493d914cf0a466cc9c6b18a44c5d345ea076d0a322fe529f2d3e34cab73036d2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APPLICATION_CAN_OVERRIDE_APP_ID</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga493d914cf0a466cc9c6b18a44c5d345eae62ad4558f55afd1e1f72b5b055dcc86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ConverterResult</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa0a2aaee2c908b38261e17b4cb851b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONVERTER_ERROR</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaa0a2aaee2c908b38261e17b4cb851b5fafe3299680b582332e478fb2687a2444e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONVERTER_CONVERTED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaa0a2aaee2c908b38261e17b4cb851b5fa90c651f8d195d6f831ac5129d37bfea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONVERTER_FINISHED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaa0a2aaee2c908b38261e17b4cb851b5fa8b4c5ace43db5f6c59e93f2657c64a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONVERTER_FLUSHED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaa0a2aaee2c908b38261e17b4cb851b5faf5796b84682a3a74758fc0ebbff8e78a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ConverterFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab07e5ab152ffbc542e6e5c007809f17c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONVERTER_NO_FLAGS</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gab07e5ab152ffbc542e6e5c007809f17cad789df2d3d8b69e3c3e769799ea2fd9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONVERTER_INPUT_AT_END</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gab07e5ab152ffbc542e6e5c007809f17caf8ef1d62da6ff9d9f48354d086c4542b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONVERTER_FLUSH</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gab07e5ab152ffbc542e6e5c007809f17ca09637822cb0ec186b2765b19e32ca75c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CredentialsType</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gae498b021f21459dc83201f010ddf8dde</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CREDENTIALS_TYPE_INVALID</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gae498b021f21459dc83201f010ddf8ddea29474824e47dc06cd31745084064b741</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CREDENTIALS_TYPE_LINUX_UCRED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gae498b021f21459dc83201f010ddf8ddea41895e1cf2bf9aa8f1913fee18f6f57a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CREDENTIALS_TYPE_FREEBSD_CMSGCRED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gae498b021f21459dc83201f010ddf8ddea87ae260e0bc318acd72444ee24be4563</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gae498b021f21459dc83201f010ddf8ddea6f27f270318a2033f69c7fa5f3289813</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CREDENTIALS_TYPE_SOLARIS_UCRED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gae498b021f21459dc83201f010ddf8ddea70852c7fca3b1ed74f6adf469115c523</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CREDENTIALS_TYPE_NETBSD_UNPCBID</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gae498b021f21459dc83201f010ddf8ddea478afdbc5ff761304d5876f51e8c6d0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DriveStartFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab628e70b1d028b3bc9b02b0d3b8acf2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DRIVE_START_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gab628e70b1d028b3bc9b02b0d3b8acf2da9fe888bc06249b6238868b8fffa4c9cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DriveStartStopType</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga148d2356238c5c8f809dcbd58341cc2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DRIVE_START_STOP_TYPE_UNKNOWN</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga148d2356238c5c8f809dcbd58341cc2dac0b4d7173528ab4d281f2946189225b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DRIVE_START_STOP_TYPE_SHUTDOWN</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga148d2356238c5c8f809dcbd58341cc2dab2f2a704561293cdd46fc45149a698ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DRIVE_START_STOP_TYPE_NETWORK</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga148d2356238c5c8f809dcbd58341cc2daf3635f16b2365d617603e90b9894be49</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DRIVE_START_STOP_TYPE_MULTIDISK</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga148d2356238c5c8f809dcbd58341cc2da76e4f6e59c0474cb0f73bd35f8ede533</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DRIVE_START_STOP_TYPE_PASSWORD</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga148d2356238c5c8f809dcbd58341cc2daeed465a6f82c4446c9585d3a070af35f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EmblemOrigin</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga7f2c8f757fdeb91ca48c0bc8184f9270</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EMBLEM_ORIGIN_UNKNOWN</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7f2c8f757fdeb91ca48c0bc8184f9270a91846b396a34f3df7fabff035440d684</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EMBLEM_ORIGIN_DEVICE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7f2c8f757fdeb91ca48c0bc8184f9270a03234829155a8c8df81621edefb0611f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EMBLEM_ORIGIN_LIVEMETADATA</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7f2c8f757fdeb91ca48c0bc8184f9270a162bb08277c29a9e2a4697ae2bbe1abc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EMBLEM_ORIGIN_TAG</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7f2c8f757fdeb91ca48c0bc8184f9270a19f1be7e988a13fb24aba702e3a053a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DataStreamByteOrder</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga87dea9b56fed9c0bca0f8426fb57781e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DATA_STREAM_BYTE_ORDER_BIG_ENDIAN</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga87dea9b56fed9c0bca0f8426fb57781ea8b4902d3cb6f18ca9cd368b8592bc2d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga87dea9b56fed9c0bca0f8426fb57781eacfc71a021f044e01f47fc17414d614cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DATA_STREAM_BYTE_ORDER_HOST_ENDIAN</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga87dea9b56fed9c0bca0f8426fb57781eadbbb7a6b49187d80effe2f86ece4df35</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DataStreamNewlineType</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga2de111fe308aff763fb98a39bc507267</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DATA_STREAM_NEWLINE_TYPE_LF</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga2de111fe308aff763fb98a39bc507267a3436677feb41490a984ca7a2888703c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DATA_STREAM_NEWLINE_TYPE_CR</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga2de111fe308aff763fb98a39bc507267a26f114922babde47f335da1db19edc0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DATA_STREAM_NEWLINE_TYPE_CR_LF</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga2de111fe308aff763fb98a39bc507267a67902d64d395eaf7ffda260087c18258</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DATA_STREAM_NEWLINE_TYPE_ANY</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga2de111fe308aff763fb98a39bc507267acb8fa2e7c3b4afceb6247a60e11b3a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ErrorEnum</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_FAILED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9ab0cc1f39ca02a434f5743fe048024234</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NOT_FOUND</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a4ef5a9505bfc5dfc1ae9f9f3447d4e11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_EXISTS</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a4ceb1df9ce7cee68ae688d9b4928bd35</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_IS_DIRECTORY</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a51c6cd44b213e6398f0832b2e4f0d9a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NOT_DIRECTORY</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a59876b7a8237ec343ab802d3d8d3993c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NOT_EMPTY</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a88ac8b2960da0db4b2ad1911421ce6a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NOT_REGULAR_FILE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a26df8843300d90f513e9e3cedb6b7160</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NOT_SYMBOLIC_LINK</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a1cae279c511fd3bfa2bd6c22f40afad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NOT_MOUNTABLE_FILE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a61a760edac9e645617248da0dc4cb1b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_FILENAME_TOO_LONG</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a94e7643e3100aec970d860fc04cf2a4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_INVALID_FILENAME</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a169d1d04640be309d75f57daaaab967a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_TOO_MANY_LINKS</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9aab3cb365b675f525a57cb3aa59b19eb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NO_SPACE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a74478cef936bb366faa61c4d3fbd2f35</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_INVALID_ARGUMENT</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a133a98e6b98462e693e2cdb01d04dd45</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_PERMISSION_DENIED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a175f98a99b2eedf9388b0b1a14337768</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NOT_SUPPORTED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a8105194f1a5fcafb73fa0bb11a58ba37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NOT_MOUNTED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a6077fb042b3fbf7919b07e32cc58a0c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_ALREADY_MOUNTED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a76f3bd66119828db7de127c2d0d9d404</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_CLOSED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a811449c2fc1320fdc9cc2699e95c28b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_CANCELLED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a34b177be2c03351bc7229368daeb6c7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_PENDING</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a59888e38aafea0a297cddda02b4d4c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_READ_ONLY</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a94ce70939862a818366ce36d4073eea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_CANT_CREATE_BACKUP</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a3d84f8d331584efdecd6509659469963</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_WRONG_ETAG</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a5e70c1d9cabf665b6644072e617fcd8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_TIMED_OUT</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a6afbb366cf6fadbcd3a0cc9bdda4d785</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_WOULD_RECURSE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a40e63426571446c6b8367e8723ff884b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_BUSY</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9af03051cf787ed29bfbfc3eef779f643c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_WOULD_BLOCK</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a33cedc0aa8ed9ed6fe2046dafa6be761</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_HOST_NOT_FOUND</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9af82cfefac7dcb8443eeb68e00655018c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_HOST_WAS_NOT_FOUND</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9ae0f97278ba9282b38b4de0a05bc5d02a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_WOULD_MERGE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a8fde4035c92a204ea5ced8fc0246b1c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_FAILED_HANDLED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9aedf009957a6447d72d7b57e322873241</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_TOO_MANY_OPEN_FILES</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a07c99219035cdedfb7e68912103c4809</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NOT_INITIALIZED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a41dba331826e8286d2cd6b0597c66ed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_ADDRESS_IN_USE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a52c950d317ba2bf030503348fbbe3507</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_PARTIAL_INPUT</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a499e88d84d7c74f16f05d590ad325939</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_INVALID_DATA</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9ac127dae51d242cf4e555698a304ab6e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_DBUS_ERROR</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a01732f06363333ccd3a92315c39997bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_HOST_UNREACHABLE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9abb38de071094e3719cff06eda169ad19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NETWORK_UNREACHABLE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a10b76e3c96ac62ce1b391bd16aaddd34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_CONNECTION_REFUSED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a7ea93acf57628c52f0ec0bca88867a1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_PROXY_FAILED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a488eb73dbfcda6c9dfdce34506aad189</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_PROXY_AUTH_FAILED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a719d21f61636b4a2be41c57095d75a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_PROXY_NEED_AUTH</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9af530560c8f757e469966e70937c2b84f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_PROXY_NOT_ALLOWED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a792abebe5a0f00a91b764195990f863d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_BROKEN_PIPE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a4a016f0cbd21e8208d0d48ce6882ad98</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_CONNECTION_CLOSED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a5a5a8e19d31cc278f25dfecd7a838c96</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NOT_CONNECTED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a74feb15f7727640d014feecdd4f5ce9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_MESSAGE_TOO_LARGE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a62d62e6f664b90737381377af7d58747</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SocketFamily</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga0ba69e14ad979bf9b2073ad122e38d48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_FAMILY_INVALID</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0ba69e14ad979bf9b2073ad122e38d48a6bed0d7385152034c574c30517146415</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_FAMILY_UNIX</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0ba69e14ad979bf9b2073ad122e38d48a064bccdabdfea2abf2b51d0c75776c90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_FAMILY_IPV4</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0ba69e14ad979bf9b2073ad122e38d48ad5c89514986f19d88128f5e6904a7954</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_FAMILY_IPV6</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0ba69e14ad979bf9b2073ad122e38d48ada5d2619a60802d5623077908d7d9d9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TlsAuthenticationMode</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga202fd408b6a0f198ae5aaf0f0c6a69b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_AUTHENTICATION_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga202fd408b6a0f198ae5aaf0f0c6a69b1a6f68cd7902a2ff811172ef8790c3b45f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_AUTHENTICATION_REQUESTED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga202fd408b6a0f198ae5aaf0f0c6a69b1a7f674a9fdd9ada5fc3aa290be6daa714</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_AUTHENTICATION_REQUIRED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga202fd408b6a0f198ae5aaf0f0c6a69b1af0e295a2f16be5c1964b35b8ed26d755</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TlsCertificateFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gac96df88bc70e763045de6aa47e87039a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_CERTIFICATE_UNKNOWN_CA</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gac96df88bc70e763045de6aa47e87039aaa61070c1752cab0ed249d122ea6d1c82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_CERTIFICATE_BAD_IDENTITY</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gac96df88bc70e763045de6aa47e87039aacab8c8dda0e2cec3f607d9a9ca1a42b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_CERTIFICATE_NOT_ACTIVATED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gac96df88bc70e763045de6aa47e87039aa5254c1571dbe9837634767c357b7d8bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_CERTIFICATE_EXPIRED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gac96df88bc70e763045de6aa47e87039aa4fac7824ceea67b46567d4c02758f0de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_CERTIFICATE_REVOKED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gac96df88bc70e763045de6aa47e87039aaef5e648db292564cead690dc80454a5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_CERTIFICATE_INSECURE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gac96df88bc70e763045de6aa47e87039aa2fe51d259ecb128d4905bb5e25d6c5c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_CERTIFICATE_GENERIC_ERROR</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gac96df88bc70e763045de6aa47e87039aad6eeb967a5da3b6b700f9380816f4840</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_CERTIFICATE_VALIDATE_ALL</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gac96df88bc70e763045de6aa47e87039aa5f708cb7a52ac87665c6fb824f9ae066</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileQueryInfoFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga2cb7bdea61353f0999607785abd032c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_QUERY_INFO_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga2cb7bdea61353f0999607785abd032c0a4e412b5c20ae24607975e36b1d2142c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_QUERY_INFO_NOFOLLOW_SYMLINKS</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga2cb7bdea61353f0999607785abd032c0a083d027fec770383a5747b6f5d555f80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileCreateFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga500a44e123fd4c578f8af9ddef2f7601</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_CREATE_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga500a44e123fd4c578f8af9ddef2f7601a823486fdb9088ef7b93e208bc6b62e88</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_CREATE_PRIVATE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga500a44e123fd4c578f8af9ddef2f7601a20a321bcbed7bc1ca7dcfdafbd71542d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_CREATE_REPLACE_DESTINATION</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga500a44e123fd4c578f8af9ddef2f7601ae08c57359cd652d3ce61f4e1509748f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileCopyFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga08edc09a45449b136b27493647d4ecbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_COPY_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga08edc09a45449b136b27493647d4ecbea74324723d31670f9d554d43d4d21cba9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_COPY_OVERWRITE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga08edc09a45449b136b27493647d4ecbea2be9041c22de8fec379aee9fb358320b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_COPY_BACKUP</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga08edc09a45449b136b27493647d4ecbeadc037d686a7557c965dfa15491df35cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_COPY_NOFOLLOW_SYMLINKS</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga08edc09a45449b136b27493647d4ecbea32ab435654684ff92fa8f8175af13201</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_COPY_ALL_METADATA</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga08edc09a45449b136b27493647d4ecbea4e001ed252dd18fecaa44f1b759e1569</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_COPY_NO_FALLBACK_FOR_MOVE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga08edc09a45449b136b27493647d4ecbeada7bad8e87c41d3dc1754d534216536d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_COPY_TARGET_DEFAULT_PERMS</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga08edc09a45449b136b27493647d4ecbeaae94c977672250ae25bc12fc6fe2c112</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileMonitorFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga469f795e9a4dddb2421c0e5568be6649</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga469f795e9a4dddb2421c0e5568be6649adedf14a2a5916e81bc91e6174b400290</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_WATCH_MOUNTS</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga469f795e9a4dddb2421c0e5568be6649a137fce52cf19a9e99778bc444a168e8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_SEND_MOVED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga469f795e9a4dddb2421c0e5568be6649a685c2e018318ca8b6b74d1ad42275644</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_WATCH_HARD_LINKS</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga469f795e9a4dddb2421c0e5568be6649a415c73cd16a4fb046d37b427a087aac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_WATCH_MOVES</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga469f795e9a4dddb2421c0e5568be6649a08340eaa7f8de052ae3850c07b92ad39</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileMeasureFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3d27573e797e8e78e7b71705ad015ced</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MEASURE_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga3d27573e797e8e78e7b71705ad015ceda96dacae2624b3093efe929aed02cbca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MEASURE_REPORT_ANY_ERROR</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga3d27573e797e8e78e7b71705ad015ceda32288391e78d0e5cdb60043371e6bc67</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MEASURE_APPARENT_SIZE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga3d27573e797e8e78e7b71705ad015cedaa164ff3f2ce85af9ce27769f624e68a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MEASURE_NO_XDEV</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga3d27573e797e8e78e7b71705ad015cedab724452e7293d1d0a823cabb170b691d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileAttributeType</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga5e79fa284e14b18d180741cd1c03d0e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_TYPE_INVALID</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga5e79fa284e14b18d180741cd1c03d0e2a805ed50e0977f72475eeda88c0d7a7a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_TYPE_STRING</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga5e79fa284e14b18d180741cd1c03d0e2a2245a488ce026f086d5c675094eff3f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_TYPE_BYTE_STRING</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga5e79fa284e14b18d180741cd1c03d0e2a164db2121bfd5ff822bac6acbde33544</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_TYPE_BOOLEAN</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga5e79fa284e14b18d180741cd1c03d0e2a93319c8374a669b5e1129567418bde82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_TYPE_UINT32</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga5e79fa284e14b18d180741cd1c03d0e2aba6788fbe235ea29dea30b35257fbc68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_TYPE_INT32</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga5e79fa284e14b18d180741cd1c03d0e2a4dc9622fb7721f6c649cd84383a5d5c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_TYPE_UINT64</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga5e79fa284e14b18d180741cd1c03d0e2a0fa0752320fa928bc91377fd949dd2b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_TYPE_INT64</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga5e79fa284e14b18d180741cd1c03d0e2a2125480e07a560278057f1708b2f2786</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_TYPE_OBJECT</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga5e79fa284e14b18d180741cd1c03d0e2a62c78139dc3d8dcfd7d9a065f03d8dd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_TYPE_STRINGV</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga5e79fa284e14b18d180741cd1c03d0e2a099ea86783dc6107a1091288cde7ed8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileAttributeInfoFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8687b5c14230bb3e46a1df7341941f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_INFO_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga8687b5c14230bb3e46a1df7341941f16a94fee536cd3b76cf646d218bbe79431f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_INFO_COPY_WITH_FILE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga8687b5c14230bb3e46a1df7341941f16a4d067fa34aaa26916a8e628a324fd0ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga8687b5c14230bb3e46a1df7341941f16a7c592c7403a77c24938d2cf862f3d4f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileAttributeStatus</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gae926022c51a79fd117e4bfd100c25b29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_STATUS_UNSET</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gae926022c51a79fd117e4bfd100c25b29aa6ae1faab740fea51730ec8deb321357</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_STATUS_SET</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gae926022c51a79fd117e4bfd100c25b29a498cc49dddb48bc7b47c6a1436635e9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_STATUS_ERROR_SETTING</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gae926022c51a79fd117e4bfd100c25b29a33b51e197bf827abaaf840392ca490c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileType</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga7dcba95023d74c47bba3fd0a07f8824c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TYPE_NOT_KNOWN</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7dcba95023d74c47bba3fd0a07f8824cac25cd997f78ab9767b89832029ff7643</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TYPE_REGULAR</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7dcba95023d74c47bba3fd0a07f8824cabb375590e8c40cd86e52d5514ef6cecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TYPE_DIRECTORY</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7dcba95023d74c47bba3fd0a07f8824ca92da3d5f23153beff0aca0df8306f205</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TYPE_SYMBOLIC_LINK</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7dcba95023d74c47bba3fd0a07f8824ca1c546c9a8d5b169bc9341f91a4043a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TYPE_SPECIAL</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7dcba95023d74c47bba3fd0a07f8824caa018808e35cbe9662b5d4912839d92af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TYPE_SHORTCUT</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7dcba95023d74c47bba3fd0a07f8824ca945309db7d4a735df1b2f9aa0de8e9af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TYPE_MOUNTABLE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7dcba95023d74c47bba3fd0a07f8824ca22b432ea367e5862e5afc063fd6b77e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileMonitorEvent</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gabd42cf9877b5b6556bb18b7fd6b6dd81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_EVENT_CHANGED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gabd42cf9877b5b6556bb18b7fd6b6dd81a5a51698573022af410cb775ab5f624a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_EVENT_CHANGES_DONE_HINT</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gabd42cf9877b5b6556bb18b7fd6b6dd81a92c379f4f5af44ae845743ac00356ae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_EVENT_DELETED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gabd42cf9877b5b6556bb18b7fd6b6dd81ae5ad92f521597f62f841b2fa3f4ac5ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_EVENT_CREATED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gabd42cf9877b5b6556bb18b7fd6b6dd81ab930b855d1b6166425a50e2f0073e96d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gabd42cf9877b5b6556bb18b7fd6b6dd81a497566a966a85e8a3d605b1e0f2fe6df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_EVENT_PRE_UNMOUNT</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gabd42cf9877b5b6556bb18b7fd6b6dd81aa6b5259e0e4118e4278e7ba3b2a7b3a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_EVENT_UNMOUNTED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gabd42cf9877b5b6556bb18b7fd6b6dd81afc80802f75f9a2b28e0ac8865a1c6c3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_EVENT_MOVED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gabd42cf9877b5b6556bb18b7fd6b6dd81a476780dff2264f47c66d99e73d82902b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_EVENT_RENAMED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gabd42cf9877b5b6556bb18b7fd6b6dd81a03ad1d5e5109472390938c337dc75577</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_EVENT_MOVED_IN</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gabd42cf9877b5b6556bb18b7fd6b6dd81adfad74bbc20e2c6d17ef283212983ca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_EVENT_MOVED_OUT</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gabd42cf9877b5b6556bb18b7fd6b6dd81a3279dd7033a88654f27cc04b933df22b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>IOStreamSpliceFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga753fc539949f2db7d1114d7ebd5b45b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STREAM_SPLICE_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga753fc539949f2db7d1114d7ebd5b45b7a72d9ff1d41beeda3a353d288067c1a89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STREAM_SPLICE_CLOSE_STREAM1</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga753fc539949f2db7d1114d7ebd5b45b7a24034382c40a690f81e569dc73bb8ca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STREAM_SPLICE_CLOSE_STREAM2</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga753fc539949f2db7d1114d7ebd5b45b7aa6bbcbd7487a11353206d37995150d50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STREAM_SPLICE_WAIT_FOR_BOTH</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga753fc539949f2db7d1114d7ebd5b45b7a76dec5a78d423a9443f657ce2fac8c36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MenuAttribute</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a7df84578d37eccbf86072c8fc85b217a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MENU_ATTRIBUTE_ACTION</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a7df84578d37eccbf86072c8fc85b217aa86f1a371d32e9fab99744d963e04f5bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MENU_ATTRIBUTE_LABEL</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a7df84578d37eccbf86072c8fc85b217aa4ae64afc7fe6c6660c51c6f486c040cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MENU_ATTRIBUTE_TARGET</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a7df84578d37eccbf86072c8fc85b217aa58117bdf3a42e57648845407823a3219</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MenuLink</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a4febebe134c8e141020c6c253711e0d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MENU_LINK_SECTION</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a4febebe134c8e141020c6c253711e0d2aa6356ca52c0aeb0abea871c903fa2b70</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MENU_LINK_SUBMENU</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a4febebe134c8e141020c6c253711e0d2a58cf137e0477ed185f5ff32ae84dcedc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MountUnmountFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga9fa1b6a8eabf8f88e4cf6d611a4cff44</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MOUNT_UNMOUNT_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga9fa1b6a8eabf8f88e4cf6d611a4cff44a1599c4ebeb5c0c6e9c312a4b9e4231b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MOUNT_UNMOUNT_FORCE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga9fa1b6a8eabf8f88e4cf6d611a4cff44a8a1875392ebf634f2d02625395df5207</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MountMountFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga5484bace25c932fd4c7354259e138814</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MOUNT_MOUNT_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga5484bace25c932fd4c7354259e138814a73c8f98eedd8a952ae25a55533dc145d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AskPasswordFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gac807da73d3b89a6dc16dad028244e6ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASK_PASSWORD_NEED_PASSWORD</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gac807da73d3b89a6dc16dad028244e6eca777e15d6610937851ef05608edb34d16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASK_PASSWORD_NEED_USERNAME</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gac807da73d3b89a6dc16dad028244e6eca01380b474c01152aeb2db5351adc14a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASK_PASSWORD_NEED_DOMAIN</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gac807da73d3b89a6dc16dad028244e6ecae283224523fe0a4c343984e1fd0e7a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASK_PASSWORD_SAVING_SUPPORTED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gac807da73d3b89a6dc16dad028244e6eca4e5c4cd229b2d87c9fa505262e31a747</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASK_PASSWORD_ANONYMOUS_SUPPORTED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gac807da73d3b89a6dc16dad028244e6eca58484c40d21ac105c3af15f845ef55f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PasswordSave</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gafec517575c8f8d6f48433c86da52448f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PASSWORD_SAVE_NEVER</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gafec517575c8f8d6f48433c86da52448faedf9056b0e9394620857b9b142b4ceb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PASSWORD_SAVE_FOR_SESSION</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gafec517575c8f8d6f48433c86da52448fa11147906f5de9af5313c3dc99223e4dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PASSWORD_SAVE_PERMANENTLY</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gafec517575c8f8d6f48433c86da52448fa3372ea635ae7fa7c23f2941211703bba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MountOperationResult</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gac479310f8df4ad5909d717caec261076</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MOUNT_OPERATION_HANDLED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gac479310f8df4ad5909d717caec261076aadc695f34c2910427dc53ceb41785ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MOUNT_OPERATION_ABORTED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gac479310f8df4ad5909d717caec261076a88bb44b71d0d353785c6b60b42bb5e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MOUNT_OPERATION_UNHANDLED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gac479310f8df4ad5909d717caec261076a22c0d4477019d21864affc0e6739b51d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>NetworkConnectivity</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga19329d33cc5bb273b36883742550acd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NETWORK_CONNECTIVITY_LOCAL</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga19329d33cc5bb273b36883742550acd6a2988c68726b7f02a22e319aa3bd2ede9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NETWORK_CONNECTIVITY_LIMITED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga19329d33cc5bb273b36883742550acd6a63aa0e6c77f73d0caa7fa46ef38b8815</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NETWORK_CONNECTIVITY_PORTAL</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga19329d33cc5bb273b36883742550acd6a3cb00b4090345f8538ff202c64c29cb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NETWORK_CONNECTIVITY_FULL</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga19329d33cc5bb273b36883742550acd6accb71a7cff4a7118470fb72839551873</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>NotificationPriority</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga342e11d6fd463ede2d49d20cb584f1b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOTIFICATION_PRIORITY_NORMAL</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga342e11d6fd463ede2d49d20cb584f1b4a540bdded59011a11fe23020237b9bc0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOTIFICATION_PRIORITY_LOW</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga342e11d6fd463ede2d49d20cb584f1b4a0c7be3f42864b275ac740c46ff2f1946</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOTIFICATION_PRIORITY_HIGH</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga342e11d6fd463ede2d49d20cb584f1b4ad7c266a72023d6a1d06f73c4db84dd20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOTIFICATION_PRIORITY_URGENT</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga342e11d6fd463ede2d49d20cb584f1b4ac6e8d50dba1a2f9364fb10199c3d12ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OutputStreamSpliceFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga7c30d67e5f60d33fdcd3053123feea74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUTPUT_STREAM_SPLICE_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7c30d67e5f60d33fdcd3053123feea74a4a8d0f68799497978b5baaf64a453435</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUTPUT_STREAM_SPLICE_CLOSE_SOURCE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7c30d67e5f60d33fdcd3053123feea74abc66eea22d58051ebd68f30510264db5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUTPUT_STREAM_SPLICE_CLOSE_TARGET</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7c30d67e5f60d33fdcd3053123feea74a342a9302a3953a86a706a5d016df4fc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ResolverRecordType</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga7305dc7c78903a65491f3a505f55e966</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESOLVER_RECORD_SRV</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7305dc7c78903a65491f3a505f55e966ac548d0dd4d1ca0dc44e0198026d97743</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESOLVER_RECORD_MX</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7305dc7c78903a65491f3a505f55e966a659ee77f7a108769e0a5ed1bd8d623cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESOLVER_RECORD_TXT</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7305dc7c78903a65491f3a505f55e966a88dfa057fc978cf1b44d97cc524b4fba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESOLVER_RECORD_SOA</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7305dc7c78903a65491f3a505f55e966ac16f3405fc29e0a668b86d50c297242b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESOLVER_RECORD_NS</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7305dc7c78903a65491f3a505f55e966ad1009cbb36502af096ebbbe783b7a6ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ResourceFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab96db7e3e47eb9f35766a29b025790e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESOURCE_FLAGS_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gab96db7e3e47eb9f35766a29b025790e0a42a249e1bb855320676e5256495339a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESOURCE_FLAGS_COMPRESSED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gab96db7e3e47eb9f35766a29b025790e0a30500369b14531c262d0afecbf9dd217</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ResourceLookupFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga834108a2d288186de3d9beea8925b9a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESOURCE_LOOKUP_FLAGS_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga834108a2d288186de3d9beea8925b9a8a107ee0f5b03ddf59931825aab1696256</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SettingsBindFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab41e4379084ff04d75104143d99ecf61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SETTINGS_BIND_DEFAULT</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gab41e4379084ff04d75104143d99ecf61a3ce16849b0de4e3ee431fdc4b9e22743</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SETTINGS_BIND_GET</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gab41e4379084ff04d75104143d99ecf61aa319946ecd163150075ef1ab0f19284c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SETTINGS_BIND_SET</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gab41e4379084ff04d75104143d99ecf61a80140cfe9c11b5cea3600728f9d82ede</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SETTINGS_BIND_NO_SENSITIVITY</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gab41e4379084ff04d75104143d99ecf61a4f626b2d4de6868c5a90cac6e1ce19f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SETTINGS_BIND_GET_NO_CHANGES</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gab41e4379084ff04d75104143d99ecf61ad9391f896ba987bdf6eb6c41e33b4f8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SETTINGS_BIND_INVERT_BOOLEAN</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gab41e4379084ff04d75104143d99ecf61a3ad9eea211350bc06670ff384d0e8268</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SocketType</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga2302a45e052658e343729e0be2fd3310</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_TYPE_INVALID</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga2302a45e052658e343729e0be2fd3310a49bd4b46e7905c9394731d0abadb2e02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_TYPE_STREAM</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga2302a45e052658e343729e0be2fd3310afc55c511821dc58a492d7c474a1b1ea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_TYPE_DATAGRAM</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga2302a45e052658e343729e0be2fd3310ae1eef5b09f7187e72db09c0f7bfaf944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_TYPE_SEQPACKET</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga2302a45e052658e343729e0be2fd3310a1b81d801009c9471bbeb3aba2412b6a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SocketProtocol</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga4e8932017a600fffa5e8e6b5f6ea5b16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_PROTOCOL_UNKNOWN</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga4e8932017a600fffa5e8e6b5f6ea5b16ab3f91855912cd06d5ae3cdc79ce65a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_PROTOCOL_DEFAULT</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga4e8932017a600fffa5e8e6b5f6ea5b16a96f0a62cfb9d0121dff3b1cbb86588e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_PROTOCOL_TCP</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga4e8932017a600fffa5e8e6b5f6ea5b16ad06eafdd4ba6c1989f0e79da060bd968</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_PROTOCOL_UDP</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga4e8932017a600fffa5e8e6b5f6ea5b16a68e3a82b9749e8503d2121bcc8528102</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_PROTOCOL_SCTP</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga4e8932017a600fffa5e8e6b5f6ea5b16a1f4d47329d9ef942f5d20247da0b4c6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SocketMsgFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga11f5e6b2ba2903428e93d947c82fa04e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_MSG_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga11f5e6b2ba2903428e93d947c82fa04ea566eba142e4067e3510eb479d177ffad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_MSG_OOB</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga11f5e6b2ba2903428e93d947c82fa04ea1d7b6de8ed171562d9254f285f5a5993</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_MSG_PEEK</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga11f5e6b2ba2903428e93d947c82fa04eab353a9d8f6a5efbd5c5b5f70b3310b25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_MSG_DONTROUTE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga11f5e6b2ba2903428e93d947c82fa04ea4d60627f51602e0da0f517d544236be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SocketClientEvent</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf8428cdf057aabdd8990b5e0a8021adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_CLIENT_RESOLVING</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaf8428cdf057aabdd8990b5e0a8021adcaf27ff2bb8aa4bfba7f530914302e6b68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_CLIENT_RESOLVED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaf8428cdf057aabdd8990b5e0a8021adcad20a5e4f48335b65d71dd81fbb4e45ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_CLIENT_CONNECTING</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaf8428cdf057aabdd8990b5e0a8021adcaab53be1516a7898addfa234505380c91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_CLIENT_CONNECTED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaf8428cdf057aabdd8990b5e0a8021adca272d5c7a7ff4f8cc2dfb3f35a70293ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_CLIENT_PROXY_NEGOTIATING</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaf8428cdf057aabdd8990b5e0a8021adcad78637c6c51ffe5f0ee87445241ee07a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_CLIENT_PROXY_NEGOTIATED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaf8428cdf057aabdd8990b5e0a8021adca88d3229819861b95e92db313a03178fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_CLIENT_TLS_HANDSHAKING</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaf8428cdf057aabdd8990b5e0a8021adca6a19a1c046f9c1a7a48c035c15f2e9ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_CLIENT_TLS_HANDSHAKED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaf8428cdf057aabdd8990b5e0a8021adca9b4da0f454f3921280a4b53d627e5509</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_CLIENT_COMPLETE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaf8428cdf057aabdd8990b5e0a8021adcae48a58af767d126bf0b857f01606274a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TlsRehandshakeMode</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga9730680b829b7745e4f36c1540761f3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_REHANDSHAKE_NEVER</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga9730680b829b7745e4f36c1540761f3fac8ff1b158382a7e0944ca22d36efa45d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_REHANDSHAKE_SAFELY</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga9730680b829b7745e4f36c1540761f3faa634954ea0400e153992717d5cb26cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_REHANDSHAKE_UNSAFELY</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga9730680b829b7745e4f36c1540761f3fa2176f716b50ba1295c669015897f5a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TlsDatabaseVerifyFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa46a3fc37c1e5566af625d7db3123a4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_DATABASE_VERIFY_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaa46a3fc37c1e5566af625d7db3123a4bae878bdddf57ebe9c6763e09cbeb1d0db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TlsDatabaseLookupFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga0de6ee7362d49df4f068b6214b93a076</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_DATABASE_LOOKUP_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0de6ee7362d49df4f068b6214b93a076ab4bcee74e44c9e07b862aea638a6a702</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_DATABASE_LOOKUP_KEYPAIR</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0de6ee7362d49df4f068b6214b93a076a4a63bab7d12dc952756580064d71a0a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TlsInteractionResult</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga13ffba1819a4d780593c50266d7a9484</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_INTERACTION_UNHANDLED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga13ffba1819a4d780593c50266d7a9484a9124d1a05b6e51fcfb74d1c5dfe81444</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_INTERACTION_HANDLED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga13ffba1819a4d780593c50266d7a9484ae073f3fa9246f1aaf14cca26b643c0bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_INTERACTION_FAILED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga13ffba1819a4d780593c50266d7a9484a246a89fbc6dd9fa82f7fe072f20d6ed8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TlsCertificateRequestFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaab2a17acffc49fca7080e27fd1e61996</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_CERTIFICATE_REQUEST_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaab2a17acffc49fca7080e27fd1e61996a1a43c45f95ab7c4cd60f77d3a668579d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TlsPasswordFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8ac18330be9383471445ba62336a929a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_PASSWORD_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga8ac18330be9383471445ba62336a929aa974fc670e6e7a7a558552003dd192b00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_PASSWORD_RETRY</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga8ac18330be9383471445ba62336a929aa13f226bbdab3f2abb89c5bdc6aabbbff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_PASSWORD_MANY_TRIES</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga8ac18330be9383471445ba62336a929aae3b9f706b9a6b6d6c63dc9c1d2609911</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_PASSWORD_FINAL_TRY</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga8ac18330be9383471445ba62336a929aa231f395c8c272846b106aee9690901eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ZlibCompressorFormat</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab247c6072c566753c8b9762f66e84c02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZLIB_COMPRESSOR_FORMAT_ZLIB</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gab247c6072c566753c8b9762f66e84c02ab635cfa0d0ddeafe35f7e3c8ad411e1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZLIB_COMPRESSOR_FORMAT_GZIP</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gab247c6072c566753c8b9762f66e84c02a0c0304ef454aaf0d34a180241d3c604b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZLIB_COMPRESSOR_FORMAT_RAW</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gab247c6072c566753c8b9762f66e84c02a97beae051e98c770a6185a3336390fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>UnixSocketAddressType</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf842f4597d522154407164deb4906c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNIX_SOCKET_ADDRESS_INVALID</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaf842f4597d522154407164deb4906c2eaeefc2bdc5ec67828a46119a74c8e7143</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNIX_SOCKET_ADDRESS_ANONYMOUS</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaf842f4597d522154407164deb4906c2ea93c2605ae77d14182f21150b0b399b95</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNIX_SOCKET_ADDRESS_PATH</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaf842f4597d522154407164deb4906c2eaa81d365fa4258138dd887b23768fd30d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNIX_SOCKET_ADDRESS_ABSTRACT</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaf842f4597d522154407164deb4906c2eae50800b7fb801e830b3ead075c13d644</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaf842f4597d522154407164deb4906c2ea7deb4d7d3c78b7f9bd191b853ede3f88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>AppInfoCreateFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gac2ae439cef63de06f97ed8454b67ec32</anchor>
      <arglist>(AppInfoCreateFlags lhs, AppInfoCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AppInfoCreateFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga383e30021c91def6e5a33ea1d2316114</anchor>
      <arglist>(AppInfoCreateFlags lhs, AppInfoCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AppInfoCreateFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga9f582e5773b615c406ceb28b695b7015</anchor>
      <arglist>(AppInfoCreateFlags lhs, AppInfoCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AppInfoCreateFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga302df8457f421e75eaea25a67cb63c19</anchor>
      <arglist>(AppInfoCreateFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>AppInfoCreateFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaccda1b3df9583689a62a3add6715f640</anchor>
      <arglist>(AppInfoCreateFlags &amp;lhs, AppInfoCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AppInfoCreateFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gac1201397fa24921e3b60ef6cd62c304d</anchor>
      <arglist>(AppInfoCreateFlags &amp;lhs, AppInfoCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AppInfoCreateFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga5dac484830e37250c0942325fb4b85a3</anchor>
      <arglist>(AppInfoCreateFlags &amp;lhs, AppInfoCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ApplicationFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga44ea3f3bc13b4f365f8b2423a9ac6697</anchor>
      <arglist>(ApplicationFlags lhs, ApplicationFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ApplicationFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga054de3d03be476f92ac269d01f5d6717</anchor>
      <arglist>(ApplicationFlags lhs, ApplicationFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ApplicationFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf78c94e5bddf6119131fc2925e25e4db</anchor>
      <arglist>(ApplicationFlags lhs, ApplicationFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ApplicationFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gabfccee773f2311c38a00aa0d1ecbe3ac</anchor>
      <arglist>(ApplicationFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>ApplicationFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga7f8cf604f276081f162dfe2e78e5e76a</anchor>
      <arglist>(ApplicationFlags &amp;lhs, ApplicationFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ApplicationFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa047e992118ed36688faf5a0a8cbc344</anchor>
      <arglist>(ApplicationFlags &amp;lhs, ApplicationFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ApplicationFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga58651ff4ec0b8e4ca0fd0e868e8f09cf</anchor>
      <arglist>(ApplicationFlags &amp;lhs, ApplicationFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConverterFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga9f956fe651a1375f27fc596f1ade2ab6</anchor>
      <arglist>(ConverterFlags lhs, ConverterFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConverterFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga6e58e9e48396f6319571dcbe76d81deb</anchor>
      <arglist>(ConverterFlags lhs, ConverterFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConverterFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa24dddaf6719113c40e5c8ec9694cf05</anchor>
      <arglist>(ConverterFlags lhs, ConverterFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConverterFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga1ca85527dd594724362f3a6e8d1ad466</anchor>
      <arglist>(ConverterFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>ConverterFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga006555992fbb516f1cea93b762566516</anchor>
      <arglist>(ConverterFlags &amp;lhs, ConverterFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConverterFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gade6a95b5e41956a879b57a097c159f88</anchor>
      <arglist>(ConverterFlags &amp;lhs, ConverterFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConverterFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga65a84e2cc906ff5924d3eb0af66b56b2</anchor>
      <arglist>(ConverterFlags &amp;lhs, ConverterFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>DriveStartFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga38b31de13d1949c2acb9255bdc858767</anchor>
      <arglist>(DriveStartFlags lhs, DriveStartFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>DriveStartFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga469bc3cfd0273e72057fcdea791a5e5f</anchor>
      <arglist>(DriveStartFlags lhs, DriveStartFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>DriveStartFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gae75239258d148626dc4b0048b55a4c44</anchor>
      <arglist>(DriveStartFlags lhs, DriveStartFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>DriveStartFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf625621abb6c686d449c3f3c43aee02c</anchor>
      <arglist>(DriveStartFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>DriveStartFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga994648faf5be7fd03bc1929554044dac</anchor>
      <arglist>(DriveStartFlags &amp;lhs, DriveStartFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>DriveStartFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3a70a69affb9acc3192f731f5a51e2be</anchor>
      <arglist>(DriveStartFlags &amp;lhs, DriveStartFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>DriveStartFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga1c0e50bc08aaf61dc1fbbe786c5e6b33</anchor>
      <arglist>(DriveStartFlags &amp;lhs, DriveStartFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga22c0194e634b597f4dcec67551a7ca9b</anchor>
      <arglist>(TlsCertificateFlags lhs, TlsCertificateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga0daad7f705714622e093da3383ceb997</anchor>
      <arglist>(TlsCertificateFlags lhs, TlsCertificateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga9fd8470137571e8eef6bc1af201a5867</anchor>
      <arglist>(TlsCertificateFlags lhs, TlsCertificateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8fd13816125414ef8f52696da2c1e0ca</anchor>
      <arglist>(TlsCertificateFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga69a2edc59567e8ddc43d718a01ca11a3</anchor>
      <arglist>(TlsCertificateFlags &amp;lhs, TlsCertificateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga232c3a04aca042c4193284eba69830eb</anchor>
      <arglist>(TlsCertificateFlags &amp;lhs, TlsCertificateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga7960cd8bde85baaf03372bf57015d123</anchor>
      <arglist>(TlsCertificateFlags &amp;lhs, TlsCertificateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileQueryInfoFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaba7574ea0b336541af125d4eb9423088</anchor>
      <arglist>(FileQueryInfoFlags lhs, FileQueryInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileQueryInfoFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga88919bc64976573d31af5a4621436b3a</anchor>
      <arglist>(FileQueryInfoFlags lhs, FileQueryInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileQueryInfoFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gacae77e10133f304081534efa76be4a52</anchor>
      <arglist>(FileQueryInfoFlags lhs, FileQueryInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileQueryInfoFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga42422c40ea08ec4f0ad74c8e2a657eb5</anchor>
      <arglist>(FileQueryInfoFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>FileQueryInfoFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gac59d6f3b6a2adca24d2763ba2af99a02</anchor>
      <arglist>(FileQueryInfoFlags &amp;lhs, FileQueryInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileQueryInfoFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaaea473e3ea4be6ab9de95a0099a33983</anchor>
      <arglist>(FileQueryInfoFlags &amp;lhs, FileQueryInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileQueryInfoFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga55adc6ecb3a15cb850b30bafb7eb9248</anchor>
      <arglist>(FileQueryInfoFlags &amp;lhs, FileQueryInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCreateFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga431f17ab67ccea562ea556c10df6bd27</anchor>
      <arglist>(FileCreateFlags lhs, FileCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCreateFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga150cbdf6590be48029d85d14dab2f85b</anchor>
      <arglist>(FileCreateFlags lhs, FileCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCreateFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab4d3e010c78b9f5ca2673210269b999d</anchor>
      <arglist>(FileCreateFlags lhs, FileCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCreateFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga703109997bbde3b6a686dd36ec9d35ad</anchor>
      <arglist>(FileCreateFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>FileCreateFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga4f6ed1c3e6f2a3a7d394b62f3166df7a</anchor>
      <arglist>(FileCreateFlags &amp;lhs, FileCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCreateFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga6a9894f553ae85b4cf5bba980bccc9f1</anchor>
      <arglist>(FileCreateFlags &amp;lhs, FileCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCreateFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga045123aaa65f69e2a76a488d1024e34d</anchor>
      <arglist>(FileCreateFlags &amp;lhs, FileCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCopyFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga0b841b27ceceb381f08e1bc5cf929eb1</anchor>
      <arglist>(FileCopyFlags lhs, FileCopyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCopyFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga41baf7218374c765844ff2a7dcb9c39a</anchor>
      <arglist>(FileCopyFlags lhs, FileCopyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCopyFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga29b016e93e7a6dfdebc4f9f6e4fbf1c1</anchor>
      <arglist>(FileCopyFlags lhs, FileCopyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCopyFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga70312f36423a73fbf663c64824631dc8</anchor>
      <arglist>(FileCopyFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>FileCopyFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gabb9c03e9bbf1ef698696dc08b0d36371</anchor>
      <arglist>(FileCopyFlags &amp;lhs, FileCopyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCopyFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gafeb53f251bc932077ba5190238c12a8d</anchor>
      <arglist>(FileCopyFlags &amp;lhs, FileCopyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCopyFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga514b3929469585c9cfc222ef2daf4fea</anchor>
      <arglist>(FileCopyFlags &amp;lhs, FileCopyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileMonitorFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab3fab04e51aeff08aaf235f038e50d72</anchor>
      <arglist>(FileMonitorFlags lhs, FileMonitorFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileMonitorFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga74a4fb73c8d8bb4ff84ae5f73ba88c91</anchor>
      <arglist>(FileMonitorFlags lhs, FileMonitorFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileMonitorFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga81b5df359bd6a61df867af8274d182ae</anchor>
      <arglist>(FileMonitorFlags lhs, FileMonitorFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileMonitorFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga501c69e3e5101b66d2e5fb8181229b2c</anchor>
      <arglist>(FileMonitorFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>FileMonitorFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8af51d7b4e7b78d3f0153090674470aa</anchor>
      <arglist>(FileMonitorFlags &amp;lhs, FileMonitorFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileMonitorFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaccd6a49937bb6b3e0b9854ba3a777c2a</anchor>
      <arglist>(FileMonitorFlags &amp;lhs, FileMonitorFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileMonitorFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaffa032f65b2c0270e12fe6bafa5c36bf</anchor>
      <arglist>(FileMonitorFlags &amp;lhs, FileMonitorFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileMeasureFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga881f9e3f716eea055f2436e00f817bcd</anchor>
      <arglist>(FileMeasureFlags lhs, FileMeasureFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileMeasureFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga46c1ae06b82fb82ce83a13586a77cb04</anchor>
      <arglist>(FileMeasureFlags lhs, FileMeasureFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileMeasureFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga178b6b7a47d7191a834ba91ef45d8900</anchor>
      <arglist>(FileMeasureFlags lhs, FileMeasureFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileMeasureFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga73ba283b4941eb5ed0586c5de9e687af</anchor>
      <arglist>(FileMeasureFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>FileMeasureFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8b334fb16e12f2fb292818af8f91430b</anchor>
      <arglist>(FileMeasureFlags &amp;lhs, FileMeasureFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileMeasureFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga0543255c72616f0d65a3c92d3a080770</anchor>
      <arglist>(FileMeasureFlags &amp;lhs, FileMeasureFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileMeasureFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga1dd67b3e69f82f1ae7d29ae6a36a0571</anchor>
      <arglist>(FileMeasureFlags &amp;lhs, FileMeasureFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileAttributeInfoFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3779f0623bf9380fb656028b9bc88323</anchor>
      <arglist>(FileAttributeInfoFlags lhs, FileAttributeInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileAttributeInfoFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaca854e01ff332df713e3f3e4f004cdf8</anchor>
      <arglist>(FileAttributeInfoFlags lhs, FileAttributeInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileAttributeInfoFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gade49ce26dfa73eb2eb9fc56534ac1319</anchor>
      <arglist>(FileAttributeInfoFlags lhs, FileAttributeInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileAttributeInfoFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga9150f4358ab779fd1267151c4ee84a46</anchor>
      <arglist>(FileAttributeInfoFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>FileAttributeInfoFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gadebdfefd85c32a1b626bce9ae251138b</anchor>
      <arglist>(FileAttributeInfoFlags &amp;lhs, FileAttributeInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileAttributeInfoFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga9ae9134d75beb6ab7128bb5765ebee73</anchor>
      <arglist>(FileAttributeInfoFlags &amp;lhs, FileAttributeInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileAttributeInfoFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf8c86d142fcb81426bc429d51da4f7d9</anchor>
      <arglist>(FileAttributeInfoFlags &amp;lhs, FileAttributeInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOStreamSpliceFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gadd33991052b8c7b6d70b6afd4c4b3850</anchor>
      <arglist>(IOStreamSpliceFlags lhs, IOStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOStreamSpliceFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaef13d603f1c86ee8b308f606c881de9a</anchor>
      <arglist>(IOStreamSpliceFlags lhs, IOStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOStreamSpliceFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga798437d9bba38467f6bf1eb02935f618</anchor>
      <arglist>(IOStreamSpliceFlags lhs, IOStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOStreamSpliceFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga69033ae6dd34521e4951f4a5ca14dfff</anchor>
      <arglist>(IOStreamSpliceFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>IOStreamSpliceFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gadeb0ed62d112c12255260042ff0205dd</anchor>
      <arglist>(IOStreamSpliceFlags &amp;lhs, IOStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOStreamSpliceFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga03cc958c73d1f7560e3138c317ecf1fc</anchor>
      <arglist>(IOStreamSpliceFlags &amp;lhs, IOStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOStreamSpliceFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gad48e0449d3be29a9e01e27982d62fad6</anchor>
      <arglist>(IOStreamSpliceFlags &amp;lhs, IOStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountUnmountFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga42e2925c2e192eb3e9b71b727e676644</anchor>
      <arglist>(MountUnmountFlags lhs, MountUnmountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountUnmountFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaff0fe1fa0d77c5d5e3d9d7699399dc29</anchor>
      <arglist>(MountUnmountFlags lhs, MountUnmountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountUnmountFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga76909c76363248e860a94b20dad18ad9</anchor>
      <arglist>(MountUnmountFlags lhs, MountUnmountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountUnmountFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gace7018ee540582a709530dce1dd9191a</anchor>
      <arglist>(MountUnmountFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>MountUnmountFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga2d1ab6ef14833802a3615e54b8115aa8</anchor>
      <arglist>(MountUnmountFlags &amp;lhs, MountUnmountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountUnmountFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gad1b73a7e5a218228776589769d64ba61</anchor>
      <arglist>(MountUnmountFlags &amp;lhs, MountUnmountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountUnmountFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga6a939c0dc5f5b25dbad5cdb7a1848184</anchor>
      <arglist>(MountUnmountFlags &amp;lhs, MountUnmountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountMountFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga1248f40d35ae4fb70d74c5df295cb4ae</anchor>
      <arglist>(MountMountFlags lhs, MountMountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountMountFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa6fbc60829952ed9919950afc79ba424</anchor>
      <arglist>(MountMountFlags lhs, MountMountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountMountFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga02952bdc6c064b144e6667e326618c2d</anchor>
      <arglist>(MountMountFlags lhs, MountMountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountMountFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga74223d1de9c9db1c53429a6d23671d4f</anchor>
      <arglist>(MountMountFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>MountMountFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaab40e5b0bc75d3308e8cb78606c4eb18</anchor>
      <arglist>(MountMountFlags &amp;lhs, MountMountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountMountFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gafa4281057a072141233a22d8aaf9b737</anchor>
      <arglist>(MountMountFlags &amp;lhs, MountMountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountMountFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gad941eb418369c3f95f0b5c046e7d868d</anchor>
      <arglist>(MountMountFlags &amp;lhs, MountMountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AskPasswordFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab444ed2fbe1877464f469a64d9107e36</anchor>
      <arglist>(AskPasswordFlags lhs, AskPasswordFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AskPasswordFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gad25d80c61831198a4eb6ecbef4918b85</anchor>
      <arglist>(AskPasswordFlags lhs, AskPasswordFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AskPasswordFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf0b37f457e38844832549486982ed1d8</anchor>
      <arglist>(AskPasswordFlags lhs, AskPasswordFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AskPasswordFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga993dba04647b8f34ad72e86cbc88ba34</anchor>
      <arglist>(AskPasswordFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>AskPasswordFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga01e87fab2e1906ac5eafa153747ceae9</anchor>
      <arglist>(AskPasswordFlags &amp;lhs, AskPasswordFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AskPasswordFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gac9b1bc2be6351cafe0275aeec24a2d8f</anchor>
      <arglist>(AskPasswordFlags &amp;lhs, AskPasswordFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AskPasswordFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8e3411a2fa7d7f016953b5f84dbad4c1</anchor>
      <arglist>(AskPasswordFlags &amp;lhs, AskPasswordFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>OutputStreamSpliceFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaef500d088ea9d123dc514f71c4c67b1d</anchor>
      <arglist>(OutputStreamSpliceFlags lhs, OutputStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>OutputStreamSpliceFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga722e50f24697e0cfe734708528c4aa38</anchor>
      <arglist>(OutputStreamSpliceFlags lhs, OutputStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>OutputStreamSpliceFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga14a79b6dee4f711a22b52bf259539e34</anchor>
      <arglist>(OutputStreamSpliceFlags lhs, OutputStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>OutputStreamSpliceFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gafcded381df7535fe7c41bb8f8c21c169</anchor>
      <arglist>(OutputStreamSpliceFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>OutputStreamSpliceFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga5602d53794a62a9e823005e6f9aed428</anchor>
      <arglist>(OutputStreamSpliceFlags &amp;lhs, OutputStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>OutputStreamSpliceFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga5c52121dbb21b04f7d25cda1b757a514</anchor>
      <arglist>(OutputStreamSpliceFlags &amp;lhs, OutputStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>OutputStreamSpliceFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga01f192f0f1b9f66047d603780c458e6e</anchor>
      <arglist>(OutputStreamSpliceFlags &amp;lhs, OutputStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>hostname_to_ascii</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a77e0b4b95d9ab0d2c2b21e79117ec77a</anchor>
      <arglist>(const Glib::ustring &amp;hostname)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>hostname_to_unicode</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a80496bf6a136c6b3a4d995849d0665af</anchor>
      <arglist>(const Glib::ustring &amp;hostname)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hostname_is_non_ascii</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a0d47bc4dc47f82a829ee5e00e13987f3</anchor>
      <arglist>(const Glib::ustring &amp;hostname)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hostname_is_ascii_encoded</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a58e3cc92152717d75a9f5cf4d260815d</anchor>
      <arglist>(const Glib::ustring &amp;hostname)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hostname_is_ip_address</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a19e270aea166c888515b97d0623f4309</anchor>
      <arglist>(const Glib::ustring &amp;hostname)</arglist>
    </member>
    <member kind="function">
      <type>ResourceFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga516e2a00d96b55f44b38f344f7e33958</anchor>
      <arglist>(ResourceFlags lhs, ResourceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ResourceFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gabcdcaaffd25561491f5ab9c4cda672da</anchor>
      <arglist>(ResourceFlags lhs, ResourceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ResourceFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gace4049bb40811eef3a5e999e2818b8a4</anchor>
      <arglist>(ResourceFlags lhs, ResourceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ResourceFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gad9978d07f4e7b6d6c1bcf01bc61a76ec</anchor>
      <arglist>(ResourceFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>ResourceFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaacd735992103524e700acf793263248c</anchor>
      <arglist>(ResourceFlags &amp;lhs, ResourceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ResourceFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf78667a2e52296da815408fa928b3c8c</anchor>
      <arglist>(ResourceFlags &amp;lhs, ResourceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ResourceFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaebb4dc4755df27ef3c41fc535e3e96cc</anchor>
      <arglist>(ResourceFlags &amp;lhs, ResourceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ResourceLookupFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga20427c15169127d85de3e40bfccda3b9</anchor>
      <arglist>(ResourceLookupFlags lhs, ResourceLookupFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ResourceLookupFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gad194da034c5dbe05ba49724a8d513416</anchor>
      <arglist>(ResourceLookupFlags lhs, ResourceLookupFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ResourceLookupFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa9ebf29ebadd80df263f088a1b90b583</anchor>
      <arglist>(ResourceLookupFlags lhs, ResourceLookupFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ResourceLookupFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga217b7daa1dfa4753ae2d2d4b0afe5fcc</anchor>
      <arglist>(ResourceLookupFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>ResourceLookupFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gac1a4ea570928539b089d621205950fbf</anchor>
      <arglist>(ResourceLookupFlags &amp;lhs, ResourceLookupFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ResourceLookupFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga1ee5171f4482aa90093c848f003ecf1e</anchor>
      <arglist>(ResourceLookupFlags &amp;lhs, ResourceLookupFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ResourceLookupFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gacb4f3bd6cedade144573c1722a028e4a</anchor>
      <arglist>(ResourceLookupFlags &amp;lhs, ResourceLookupFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SettingsBindFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8cd5ffb873f77345b515bf4ec2522ad7</anchor>
      <arglist>(SettingsBindFlags lhs, SettingsBindFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SettingsBindFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3cfc37090e507ab83ba08e96e2248c24</anchor>
      <arglist>(SettingsBindFlags lhs, SettingsBindFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SettingsBindFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gabe81d29f028b8bfb85c189c2471a290d</anchor>
      <arglist>(SettingsBindFlags lhs, SettingsBindFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SettingsBindFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3faf22f64ae075a5465b7827001101d2</anchor>
      <arglist>(SettingsBindFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>SettingsBindFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga0299f50197606d69c0f306224760fcdb</anchor>
      <arglist>(SettingsBindFlags &amp;lhs, SettingsBindFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SettingsBindFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga58044b0ab24bee93db6b0385d4792383</anchor>
      <arglist>(SettingsBindFlags &amp;lhs, SettingsBindFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SettingsBindFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3f4f0e3823c4d8ce3470b656913fb4e0</anchor>
      <arglist>(SettingsBindFlags &amp;lhs, SettingsBindFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SocketMsgFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa085ca077592487a87d8339ce3324166</anchor>
      <arglist>(SocketMsgFlags lhs, SocketMsgFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SocketMsgFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaeef3544f65ae7406b8d5e938e868497f</anchor>
      <arglist>(SocketMsgFlags lhs, SocketMsgFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SocketMsgFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaadfaf5e3a456218e23ca0ee13ac3db3d</anchor>
      <arglist>(SocketMsgFlags lhs, SocketMsgFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SocketMsgFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf31952f93c501b25194ad46df8994752</anchor>
      <arglist>(SocketMsgFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>SocketMsgFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga62b41279cd63908c0736e96f868e832e</anchor>
      <arglist>(SocketMsgFlags &amp;lhs, SocketMsgFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SocketMsgFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga02ec1970d51a454fac3f5763139129f9</anchor>
      <arglist>(SocketMsgFlags &amp;lhs, SocketMsgFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SocketMsgFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab892045d6e9cf73dc96593ead692145b</anchor>
      <arglist>(SocketMsgFlags &amp;lhs, SocketMsgFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseVerifyFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga39e0d92d55656c2a2632f98636265306</anchor>
      <arglist>(TlsDatabaseVerifyFlags lhs, TlsDatabaseVerifyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseVerifyFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaedc27cd6cf2b592e2424cad4ad95f3ca</anchor>
      <arglist>(TlsDatabaseVerifyFlags lhs, TlsDatabaseVerifyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseVerifyFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8368dd487149972f892a91422e9bd33b</anchor>
      <arglist>(TlsDatabaseVerifyFlags lhs, TlsDatabaseVerifyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseVerifyFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf2f0b0b2463b3e547db1a4b85603bd36</anchor>
      <arglist>(TlsDatabaseVerifyFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseVerifyFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga23b4f358bf1da65d761823c0c14601a3</anchor>
      <arglist>(TlsDatabaseVerifyFlags &amp;lhs, TlsDatabaseVerifyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseVerifyFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga158c2843a2b32fa4908b9bba406b145d</anchor>
      <arglist>(TlsDatabaseVerifyFlags &amp;lhs, TlsDatabaseVerifyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseVerifyFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gacf39fa96fbecf1a1eb1c265794b79c03</anchor>
      <arglist>(TlsDatabaseVerifyFlags &amp;lhs, TlsDatabaseVerifyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseLookupFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga17032c82d6f99398b325773ecfbb8864</anchor>
      <arglist>(TlsDatabaseLookupFlags lhs, TlsDatabaseLookupFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseLookupFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab22bf778be0148df6250fc1fb68b71eb</anchor>
      <arglist>(TlsDatabaseLookupFlags lhs, TlsDatabaseLookupFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseLookupFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaab103c2de8ca0e1abc5afb44a06ab7c7</anchor>
      <arglist>(TlsDatabaseLookupFlags lhs, TlsDatabaseLookupFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseLookupFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gae83d0705d3e1b6a1c1214802fd0413a7</anchor>
      <arglist>(TlsDatabaseLookupFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseLookupFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga70adec8becf6acbe4d1f3a7d32512647</anchor>
      <arglist>(TlsDatabaseLookupFlags &amp;lhs, TlsDatabaseLookupFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseLookupFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gacdd2b1e7736f4aa17054d4ca3b61b928</anchor>
      <arglist>(TlsDatabaseLookupFlags &amp;lhs, TlsDatabaseLookupFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseLookupFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gad91ca8afd55f164582fc2182414a567d</anchor>
      <arglist>(TlsDatabaseLookupFlags &amp;lhs, TlsDatabaseLookupFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateRequestFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf22bb92488cf1cd6097decfc5ccff4aa</anchor>
      <arglist>(TlsCertificateRequestFlags lhs, TlsCertificateRequestFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateRequestFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gabfaa5e32da493e3ef962f54c54af1d1d</anchor>
      <arglist>(TlsCertificateRequestFlags lhs, TlsCertificateRequestFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateRequestFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gabf70e6fec894c648a62a8b3057601b90</anchor>
      <arglist>(TlsCertificateRequestFlags lhs, TlsCertificateRequestFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateRequestFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga9b6865e73e13095e7a4a57bbac28db74</anchor>
      <arglist>(TlsCertificateRequestFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateRequestFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga25a044628996f41d7419dd2ea3631ca7</anchor>
      <arglist>(TlsCertificateRequestFlags &amp;lhs, TlsCertificateRequestFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateRequestFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga1f52ad40e03db53a888abb29ea90d787</anchor>
      <arglist>(TlsCertificateRequestFlags &amp;lhs, TlsCertificateRequestFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateRequestFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gad07b2cce57653f7ed382f2fecaba5798</anchor>
      <arglist>(TlsCertificateRequestFlags &amp;lhs, TlsCertificateRequestFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsPasswordFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gafbbaf640a1d770dc0bd46380763952e8</anchor>
      <arglist>(TlsPasswordFlags lhs, TlsPasswordFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsPasswordFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga80adba52fb921f5ce8582cb7144746bd</anchor>
      <arglist>(TlsPasswordFlags lhs, TlsPasswordFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsPasswordFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga18b59057b4efe6dfb55345e198c2dd4a</anchor>
      <arglist>(TlsPasswordFlags lhs, TlsPasswordFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsPasswordFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga9c6566499acc6dbfb73ad14225ebaff4</anchor>
      <arglist>(TlsPasswordFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>TlsPasswordFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab3d9e43f9d3f79660d3eba8402cc3c7d</anchor>
      <arglist>(TlsPasswordFlags &amp;lhs, TlsPasswordFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsPasswordFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaba35b9420c7c104d2b57477658a6d3c5</anchor>
      <arglist>(TlsPasswordFlags &amp;lhs, TlsPasswordFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsPasswordFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga1bf68c82d083fab33b612fe7756b7d56</anchor>
      <arglist>(TlsPasswordFlags &amp;lhs, TlsPasswordFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>content_type_equals</name>
      <anchorfile>group__giommContentType.html</anchorfile>
      <anchor>ga496c304f10ea79f1a20137bf614466e8</anchor>
      <arglist>(const Glib::ustring &amp;type1, const Glib::ustring &amp;type2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>content_type_is_a</name>
      <anchorfile>group__giommContentType.html</anchorfile>
      <anchor>ga278fca288c7c2e9995ebb64ce43a6ffd</anchor>
      <arglist>(const Glib::ustring &amp;type, const Glib::ustring &amp;supertype)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>content_type_is_unknown</name>
      <anchorfile>group__giommContentType.html</anchorfile>
      <anchor>gaee153086e7cd9f1ab0509cbf81ec06e9</anchor>
      <arglist>(const Glib::ustring &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>content_type_get_description</name>
      <anchorfile>group__giommContentType.html</anchorfile>
      <anchor>gac065cb89d7abb5935cfa225e3d41a732</anchor>
      <arglist>(const Glib::ustring &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>content_type_get_mime_type</name>
      <anchorfile>group__giommContentType.html</anchorfile>
      <anchor>ga92f379d45658e14f3ec1bec3da71d908</anchor>
      <arglist>(const Glib::ustring &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Icon &gt;</type>
      <name>content_type_get_icon</name>
      <anchorfile>group__giommContentType.html</anchorfile>
      <anchor>ga7972eb82466bf972bbbf5b58f6344e84</anchor>
      <arglist>(const Glib::ustring &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Icon &gt;</type>
      <name>content_type_get_symbolic_icon</name>
      <anchorfile>group__giommContentType.html</anchorfile>
      <anchor>gab55b0d4ac98b1aa0edab98afa66a8b6c</anchor>
      <arglist>(const Glib::ustring &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>content_type_can_be_executable</name>
      <anchorfile>group__giommContentType.html</anchorfile>
      <anchor>gae5107c4e00134d7d9df3b755a74f9494</anchor>
      <arglist>(const Glib::ustring &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>content_type_from_mime_type</name>
      <anchorfile>group__giommContentType.html</anchorfile>
      <anchor>gad5432d8f8c8ba74f8157af9d49930b4c</anchor>
      <arglist>(const Glib::ustring &amp;mime_type)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>content_type_guess</name>
      <anchorfile>group__giommContentType.html</anchorfile>
      <anchor>ga48e8afbb7f1724efcdebd7c028da5560</anchor>
      <arglist>(const std::string &amp;filename, const guchar *data, gsize data_size, bool &amp;result_uncertain)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>content_type_guess</name>
      <anchorfile>group__giommContentType.html</anchorfile>
      <anchor>gae46acc46aa5c33a8d1feda6a675fefa9</anchor>
      <arglist>(const std::string &amp;filename, const std::string &amp;data, bool &amp;result_uncertain)</arglist>
    </member>
    <member kind="function">
      <type>Glib::StringArrayHandle</type>
      <name>content_type_guess_for_tree</name>
      <anchorfile>group__giommContentType.html</anchorfile>
      <anchor>ga7e82e215c402edca50219020e43d08ec</anchor>
      <arglist>(const Glib::RefPtr&lt; const File &gt; &amp;root)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ListHandle&lt; Glib::ustring &gt;</type>
      <name>content_types_get_registered</name>
      <anchorfile>group__giommContentType.html</anchorfile>
      <anchor>gaeae6cd7ee77a7b1c52443116f346b476</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a28171d5c1584ce2516ba05b13cee04ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SignalSocket</type>
      <name>signal_socket</name>
      <anchorfile>group__NetworkIO.html</anchorfile>
      <anchor>ga73dc3243f51abce0a62424329724f510</anchor>
      <arglist>(const Glib::RefPtr&lt; Glib::MainContext &gt; &amp;context=Glib::RefPtr&lt; Glib::MainContext &gt;())</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Gio::DBus</name>
    <filename>namespaceGio_1_1DBus.html</filename>
    <namespace>Gio::DBus::Address</namespace>
    <namespace>Gio::DBus::ErrorUtils</namespace>
    <class kind="class">Gio::DBus::ActionGroup</class>
    <class kind="class">Gio::DBus::AnnotationInfo</class>
    <class kind="class">Gio::DBus::ArgInfo</class>
    <class kind="class">Gio::DBus::AuthObserver</class>
    <class kind="class">Gio::DBus::Connection</class>
    <class kind="class">Gio::DBus::Error</class>
    <class kind="class">Gio::DBus::Interface</class>
    <class kind="class">Gio::DBus::InterfaceInfo</class>
    <class kind="class">Gio::DBus::InterfaceSkeleton</class>
    <class kind="class">Gio::DBus::InterfaceVTable</class>
    <class kind="class">Gio::DBus::MenuModel</class>
    <class kind="class">Gio::DBus::Message</class>
    <class kind="class">Gio::DBus::MethodInfo</class>
    <class kind="class">Gio::DBus::MethodInvocation</class>
    <class kind="class">Gio::DBus::NodeInfo</class>
    <class kind="class">Gio::DBus::Object</class>
    <class kind="class">Gio::DBus::PropertyInfo</class>
    <class kind="class">Gio::DBus::Proxy</class>
    <class kind="class">Gio::DBus::Server</class>
    <class kind="class">Gio::DBus::SignalInfo</class>
    <class kind="class">Gio::DBus::SubtreeVTable</class>
    <member kind="typedef">
      <type>sigc::slot&lt; void, const Glib::RefPtr&lt; Gio::DBus::Connection &gt; &amp;, Glib::ustring &gt;</type>
      <name>SlotBusAcquired</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>gab7640ad4f168b22492f5783148ad0d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void, const Glib::RefPtr&lt; Gio::DBus::Connection &gt; &amp;, Glib::ustring &gt;</type>
      <name>SlotNameAcquired</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga41021af407491538d8bfd65ab63f456a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void, const Glib::RefPtr&lt; Gio::DBus::Connection &gt; &amp;, Glib::ustring &gt;</type>
      <name>SlotNameLost</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga69b58dba209c6b3a5f5f20fcd492c973</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void, const Glib::RefPtr&lt; Gio::DBus::Connection &gt; &amp;, Glib::ustring, const Glib::ustring &amp; &gt;</type>
      <name>SlotNameAppeared</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga200acb252ecaa113828e23b9001a7a8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void, const Glib::RefPtr&lt; Gio::DBus::Connection &gt; &amp;, Glib::ustring &gt;</type>
      <name>SlotNameVanished</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga01da22e2e222d03382d93e6741be6935</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BusType</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa00806111608557f425bf09bdf4b0087</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUS_TYPE_STARTER</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gaa00806111608557f425bf09bdf4b0087aab916c886b6a3f3aadd08806416fe776</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUS_TYPE_NONE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gaa00806111608557f425bf09bdf4b0087a04b4cf0b4c4e1ade2161d47f50573a03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUS_TYPE_SYSTEM</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gaa00806111608557f425bf09bdf4b0087a2eccc6ac9ad0dd3ab3b5156173bf4270</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUS_TYPE_SESSION</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gaa00806111608557f425bf09bdf4b0087ae0de0856fe1ddbb862fe8fa39da894cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CallFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa2aaa37e1bbc56a65746a9ebc3a5a4db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CALL_FLAGS_NONE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gaa2aaa37e1bbc56a65746a9ebc3a5a4dba40e3b6a19ddaa17280300aa628abe849</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CALL_FLAGS_NO_AUTO_START</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gaa2aaa37e1bbc56a65746a9ebc3a5a4dba07771ba4cced2dbe5a356c7b1169bcab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CALL_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gaa2aaa37e1bbc56a65746a9ebc3a5a4dbae4b042d99e12117dbd6a28b959956522</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ConnectionFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa395bc4535e698ee8615a929c947187d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTION_FLAGS_NONE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gaa395bc4535e698ee8615a929c947187da2eb3cb8d569f71c870a88394f591fded</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTION_FLAGS_AUTHENTICATION_CLIENT</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gaa395bc4535e698ee8615a929c947187da83efcd0c5b446244f4de720f8f2d9903</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTION_FLAGS_AUTHENTICATION_SERVER</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gaa395bc4535e698ee8615a929c947187da3d01acde66ebbf2422da41d3a3644388</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gaa395bc4535e698ee8615a929c947187da5eb013d20a37142b4d6e5dfe3cdad04c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gaa395bc4535e698ee8615a929c947187da2ef23aff9fc5ed0984bdd2f94e6de6a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gaa395bc4535e698ee8615a929c947187da5912bf6845315acc846b31cf13333cc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SendMessageFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab2b457af9dfcf8a106e4b8495d22af2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEND_MESSAGE_FLAGS_NONE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gab2b457af9dfcf8a106e4b8495d22af2ba033b75923dcedbfd7f395b6b11f59cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEND_MESSAGE_FLAGS_PRESERVE_SERIAL</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gab2b457af9dfcf8a106e4b8495d22af2ba27d67cc732f62f053bc596e1376ee348</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SignalFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga5978f448a9187eca418eac34799144fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGNAL_FLAGS_NONE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga5978f448a9187eca418eac34799144faaea59457ebca8e18dbcf629edfdc2214f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGNAL_FLAGS_NO_MATCH_RULE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga5978f448a9187eca418eac34799144faa9357714d880d0bf44a617714a9d16fdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga5978f448a9187eca418eac34799144faa97049b22e5a8c6b8f7a071906bf476f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGNAL_FLAGS_MATCH_ARG0_PATH</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga5978f448a9187eca418eac34799144faa0cd86d556df3b75375c80de534c834f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SubtreeFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga57ca559dd8d3b93c96c4828cb457b975</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUBTREE_FLAGS_NONE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga57ca559dd8d3b93c96c4828cb457b975a235c5dac5f3035f4ddd88ae6bf2d5653</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga57ca559dd8d3b93c96c4828cb457b975a52969f47406b6454b4c2ab0c9b8b5e82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>InterfaceSkeletonFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gad553d6b87f056a42ec83373c5f6198d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DBUS_INTERFACE_SKELETON_FLAGS_NONE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gad553d6b87f056a42ec83373c5f6198d7a29fbfeb50c91d0bc36ea3787456357a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gad553d6b87f056a42ec83373c5f6198d7a40f6eded2fb704153c939c0be30cb9be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PropertyInfoFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga54150c0a362b8266949aa773ddeae53b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROPERTY_INFO_FLAGS_NONE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga54150c0a362b8266949aa773ddeae53baaa63905ed5df2500e977566ee5d50903</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROPERTY_INFO_FLAGS_READABLE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga54150c0a362b8266949aa773ddeae53baca64e29b7a0c8f601486d803cfaa81d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROPERTY_INFO_FLAGS_WRITABLE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga54150c0a362b8266949aa773ddeae53baabf556bc3f5e90e4c205f3d0135064ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MessageType</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gadd9b3057ea07b6bb75a7c033678a07b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_TYPE_INVALID</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gadd9b3057ea07b6bb75a7c033678a07b6a8b9a7a6a084815a8060eabf1be20eabe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_TYPE_METHOD_CALL</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gadd9b3057ea07b6bb75a7c033678a07b6a0a9c5e63591ba34e488c83d4600e681d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_TYPE_METHOD_RETURN</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gadd9b3057ea07b6bb75a7c033678a07b6a16c69b9e9b6cec7e8a5b7a66608f104f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_TYPE_ERROR</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gadd9b3057ea07b6bb75a7c033678a07b6a12f215babf0bfc97fb6567de80e9b4d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_TYPE_SIGNAL</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gadd9b3057ea07b6bb75a7c033678a07b6a795e7b4a83d335bc31ccc8297d55e9c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MessageFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf22c46c040ba585ee936319b7e414784</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_FLAGS_NONE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gaf22c46c040ba585ee936319b7e414784a0c88b5d305a144cfb012c3cb2fd70585</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_FLAGS_NO_REPLY_EXPECTED</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gaf22c46c040ba585ee936319b7e414784a04f4cdacc644a4e28f846aa6d9bbf002</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_FLAGS_NO_AUTO_START</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gaf22c46c040ba585ee936319b7e414784a75250947c066ac742792ef5349e33253</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gaf22c46c040ba585ee936319b7e414784ae123f8d107181e976741cf9e8bad7c29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MessageHeaderField</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga6cfd9fb2c0212aea31cecd5fd923a0f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_HEADER_FIELD_INVALID</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga6cfd9fb2c0212aea31cecd5fd923a0f0a0919873bbe88467c5baad50f3baa5243</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_HEADER_FIELD_PATH</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga6cfd9fb2c0212aea31cecd5fd923a0f0a5d2013e287e2ba9b1948cc27e4167393</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_HEADER_FIELD_INTERFACE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga6cfd9fb2c0212aea31cecd5fd923a0f0ac969fef8c51f9124c48eda21f6e82967</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_HEADER_FIELD_MEMBER</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga6cfd9fb2c0212aea31cecd5fd923a0f0a5ffa315233785645f6d85b1362b5f4e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_HEADER_FIELD_ERROR_NAME</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga6cfd9fb2c0212aea31cecd5fd923a0f0a37658b900f0090e075394e1ae05c4d56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_HEADER_FIELD_REPLY_SERIAL</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga6cfd9fb2c0212aea31cecd5fd923a0f0a4f7e9cdc27fcddb17d5fbd7f748fb0f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_HEADER_FIELD_DESTINATION</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga6cfd9fb2c0212aea31cecd5fd923a0f0adbbdafefa229a74ba0cf4ebb6005832b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_HEADER_FIELD_SENDER</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga6cfd9fb2c0212aea31cecd5fd923a0f0af56b497d31dd6bf2d60f276ec3eb9860</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_HEADER_FIELD_SIGNATURE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga6cfd9fb2c0212aea31cecd5fd923a0f0aa125004b5dadc193b5b333fe1ad1b9b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_HEADER_FIELD_NUM_UNIX_FDS</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga6cfd9fb2c0212aea31cecd5fd923a0f0a3d842bfa90a49623fcbf34f4dbfd20a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CapabilityFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gadc652797a964763619fdb48a89b42f93</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAPABILITY_FLAGS_NONE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gadc652797a964763619fdb48a89b42f93a3ed3e77bb323d43df2818db094d96bfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAPABILITY_FLAGS_UNIX_FD_PASSING</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gadc652797a964763619fdb48a89b42f93abca338e994b09efcf37e7fc7950d03fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BusNameOwnerFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga90e13b67fdf97528695baa4a6a18b051</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUS_NAME_OWNER_FLAGS_NONE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga90e13b67fdf97528695baa4a6a18b051a900fa7dcd6f4b5263dc9b42969439140</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga90e13b67fdf97528695baa4a6a18b051a064a68e0fa3528cdede245b4a7f30a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUS_NAME_OWNER_FLAGS_REPLACE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga90e13b67fdf97528695baa4a6a18b051ac8d4a3e5664ccd285031c35e6a6b03b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUS_NAME_OWNER_FLAGS_DO_NOT_QUEUE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga90e13b67fdf97528695baa4a6a18b051a8f73a9a1a3b21d97af5f54f63d861b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ProxyFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gac7e5173c0b0042ec1dfca220d6761c9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROXY_FLAGS_NONE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gac7e5173c0b0042ec1dfca220d6761c9fa03980d62f7e788a29e39d9ff27fa13ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gac7e5173c0b0042ec1dfca220d6761c9fa2746107ef7f01e33186ec8a73e52f03e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gac7e5173c0b0042ec1dfca220d6761c9faaed9ebcc1eebcb8f74a7ee86a9f6a757</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROXY_FLAGS_DO_NOT_AUTO_START</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gac7e5173c0b0042ec1dfca220d6761c9faa4beae8b2803f42530e2b5d7916e8d71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROXY_FLAGS_GET_INVALIDATED_PROPERTIES</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gac7e5173c0b0042ec1dfca220d6761c9fa5998625f06e94240adde9f3125e3c58e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gac7e5173c0b0042ec1dfca220d6761c9fa8f8e762671b830cfc00ec07aee37052e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ServerFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3fbaae392de9b7cb4e91ba94476a82b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SERVER_FLAGS_NONE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga3fbaae392de9b7cb4e91ba94476a82b2adbf5c5f93fd528dcf3bc9975e8971ae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SERVER_FLAGS_RUN_IN_THREAD</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga3fbaae392de9b7cb4e91ba94476a82b2a16f16173f6d63d6f4a87a07dfc3ea168</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga3fbaae392de9b7cb4e91ba94476a82b2a002f455d364a7646b317d9cb764c6da5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BusNameWatcherFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga724a510e53ed4df47411bcdbaf680c85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUS_NAME_WATCHER_FLAGS_NONE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga724a510e53ed4df47411bcdbaf680c85a23e333ede42826b165a4d40b0f55ad22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUS_NAME_WATCHER_FLAGS_AUTO_START</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga724a510e53ed4df47411bcdbaf680c85a559feaf6228b1762dc83064053a137d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CallFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaaf256ad4e34a802125934a3602918182</anchor>
      <arglist>(CallFlags lhs, CallFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CallFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gadd59f33797ba9003a8a00654dc21c5cb</anchor>
      <arglist>(CallFlags lhs, CallFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CallFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga2f5d5bbe79d36aeb8946a9d1985ba5d4</anchor>
      <arglist>(CallFlags lhs, CallFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CallFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab7d0c01e24d4734b302439ac13db5c01</anchor>
      <arglist>(CallFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>CallFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf7f8b92419edde75f68a2e9fe3f6b207</anchor>
      <arglist>(CallFlags &amp;lhs, CallFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CallFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa58d14bfa8dc1d3f779077664bcef5cd</anchor>
      <arglist>(CallFlags &amp;lhs, CallFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CallFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga45397d95ea49e8d13e45968ec55056f0</anchor>
      <arglist>(CallFlags &amp;lhs, CallFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConnectionFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gabf0261e49d127ddbb20121314bd691e5</anchor>
      <arglist>(ConnectionFlags lhs, ConnectionFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConnectionFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga157afd8bf936c40577d7ba7762c7a119</anchor>
      <arglist>(ConnectionFlags lhs, ConnectionFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConnectionFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gadeceb9495694a6f85d0aa34cd76593f4</anchor>
      <arglist>(ConnectionFlags lhs, ConnectionFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConnectionFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga9cd54aecd4fcf0476f3908ced65ea3da</anchor>
      <arglist>(ConnectionFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>ConnectionFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga531539a51f6fa26100e00cf79b3ef074</anchor>
      <arglist>(ConnectionFlags &amp;lhs, ConnectionFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConnectionFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga557f2bfae2346665f5eb373ea461ab20</anchor>
      <arglist>(ConnectionFlags &amp;lhs, ConnectionFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConnectionFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab3e32a633be5fab9f1e2ea91e4c203b2</anchor>
      <arglist>(ConnectionFlags &amp;lhs, ConnectionFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SendMessageFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga517437c24b21c9390d68d06252c38ee0</anchor>
      <arglist>(SendMessageFlags lhs, SendMessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SendMessageFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gae3636e72afeab50d8ba2b017f3d548bf</anchor>
      <arglist>(SendMessageFlags lhs, SendMessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SendMessageFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gacb730118932c2c089205040b6f99bb5e</anchor>
      <arglist>(SendMessageFlags lhs, SendMessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SendMessageFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga2a7223d208f91d9a6d618b24bcd120ad</anchor>
      <arglist>(SendMessageFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>SendMessageFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga2c8dbd2f0ee82cc71309daaa7708fac2</anchor>
      <arglist>(SendMessageFlags &amp;lhs, SendMessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SendMessageFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gabea4f6e4bf3c96e7eda48cf085be7176</anchor>
      <arglist>(SendMessageFlags &amp;lhs, SendMessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SendMessageFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga47c0490b33800886410984ebc8ade747</anchor>
      <arglist>(SendMessageFlags &amp;lhs, SendMessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SignalFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa71251f9666e33b79ca3a35b14c56b75</anchor>
      <arglist>(SignalFlags lhs, SignalFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SignalFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gafc16be7d1a676ae22b0d81ae6f66373a</anchor>
      <arglist>(SignalFlags lhs, SignalFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SignalFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab061e0a24b6b7d57c6eb05bb8a311f9b</anchor>
      <arglist>(SignalFlags lhs, SignalFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SignalFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8a995c39db7f285301ce89935348568b</anchor>
      <arglist>(SignalFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>SignalFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga92a022e06267a8e614e64124f3ac27ae</anchor>
      <arglist>(SignalFlags &amp;lhs, SignalFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SignalFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga461265e9505580ac52efceab01fb5e5a</anchor>
      <arglist>(SignalFlags &amp;lhs, SignalFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SignalFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga67e999a4414637b197248e62958c6528</anchor>
      <arglist>(SignalFlags &amp;lhs, SignalFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SubtreeFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gae3a3d5e31e4ddea76624f7681614397c</anchor>
      <arglist>(SubtreeFlags lhs, SubtreeFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SubtreeFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga534fa8ab13f51db6d92400754fa79221</anchor>
      <arglist>(SubtreeFlags lhs, SubtreeFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SubtreeFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga515f8f33ea2499547311998d503cbdf1</anchor>
      <arglist>(SubtreeFlags lhs, SubtreeFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SubtreeFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa24aa533cfbe9d4988c40466d5105272</anchor>
      <arglist>(SubtreeFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>SubtreeFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga48af5a57b27520a781794b0d491b2c18</anchor>
      <arglist>(SubtreeFlags &amp;lhs, SubtreeFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SubtreeFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga33e51d25230d5cc488e53aa1117bd5fe</anchor>
      <arglist>(SubtreeFlags &amp;lhs, SubtreeFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SubtreeFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa9e879e08b368bda95e12b464c246461</anchor>
      <arglist>(SubtreeFlags &amp;lhs, SubtreeFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>InterfaceSkeletonFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga93f58fade77f58a700609e2155c0284c</anchor>
      <arglist>(InterfaceSkeletonFlags lhs, InterfaceSkeletonFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>InterfaceSkeletonFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gada93a8df39c6b80e121a1594397d0eb3</anchor>
      <arglist>(InterfaceSkeletonFlags lhs, InterfaceSkeletonFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>InterfaceSkeletonFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab154380be90dcc8abd71ab17da151708</anchor>
      <arglist>(InterfaceSkeletonFlags lhs, InterfaceSkeletonFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>InterfaceSkeletonFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf0aadfd03ce7e0ad24b9d5672a85ffb9</anchor>
      <arglist>(InterfaceSkeletonFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>InterfaceSkeletonFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga2015b9e953b4ea4b5d4480568e91e7d3</anchor>
      <arglist>(InterfaceSkeletonFlags &amp;lhs, InterfaceSkeletonFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>InterfaceSkeletonFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga896a78d960b5e61e2f7eb9066ffd6feb</anchor>
      <arglist>(InterfaceSkeletonFlags &amp;lhs, InterfaceSkeletonFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>InterfaceSkeletonFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga78faf490171eeb84cafee0a15f50886f</anchor>
      <arglist>(InterfaceSkeletonFlags &amp;lhs, InterfaceSkeletonFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>PropertyInfoFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3162179be3acb867fc1b7d66a9e2d27c</anchor>
      <arglist>(PropertyInfoFlags lhs, PropertyInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>PropertyInfoFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab85a9e69cc725a1dbab52063325506db</anchor>
      <arglist>(PropertyInfoFlags lhs, PropertyInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>PropertyInfoFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga36f6ee825d38230e4fb1d264550f385c</anchor>
      <arglist>(PropertyInfoFlags lhs, PropertyInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>PropertyInfoFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gac36330aaaa3f5436abef2c04ddd76edb</anchor>
      <arglist>(PropertyInfoFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>PropertyInfoFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga9d77c45a262381a023550c672f4aad30</anchor>
      <arglist>(PropertyInfoFlags &amp;lhs, PropertyInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>PropertyInfoFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3e60d9a5aef48a3b9c262af3a38267f5</anchor>
      <arglist>(PropertyInfoFlags &amp;lhs, PropertyInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>PropertyInfoFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga332bf3aa8cd16de4a9d563ac60aa34c6</anchor>
      <arglist>(PropertyInfoFlags &amp;lhs, PropertyInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MessageFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga7dab85256a6961f9edbd479b8641a840</anchor>
      <arglist>(MessageFlags lhs, MessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MessageFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga835d8975311157d663491aefaf72bf97</anchor>
      <arglist>(MessageFlags lhs, MessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MessageFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaedaa6d5aed08b463298ef9a29abf6611</anchor>
      <arglist>(MessageFlags lhs, MessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MessageFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga45fb183fd7a0d4e6c9c741e4f3544449</anchor>
      <arglist>(MessageFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>MessageFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa7c77f89fbc6749eeb2580b0708385ef</anchor>
      <arglist>(MessageFlags &amp;lhs, MessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MessageFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8ea4aae38ba17dca7ad158bace6ee650</anchor>
      <arglist>(MessageFlags &amp;lhs, MessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MessageFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf94c469e7db6e0c1e018f472976c0e6b</anchor>
      <arglist>(MessageFlags &amp;lhs, MessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CapabilityFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa381c473b1bd9ba61f55980bdfbd64a7</anchor>
      <arglist>(CapabilityFlags lhs, CapabilityFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CapabilityFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga1c1c4fa47d960fda035c5dded3cdd0eb</anchor>
      <arglist>(CapabilityFlags lhs, CapabilityFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CapabilityFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf407a0b027a0f5ac46690ccf96a1d16b</anchor>
      <arglist>(CapabilityFlags lhs, CapabilityFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CapabilityFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaac055f4785da200653bdbc7d228d158d</anchor>
      <arglist>(CapabilityFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>CapabilityFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaffb83150531f7af44949645e6d7bd632</anchor>
      <arglist>(CapabilityFlags &amp;lhs, CapabilityFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CapabilityFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaab9138705b6d619b54ed0813604a72bb</anchor>
      <arglist>(CapabilityFlags &amp;lhs, CapabilityFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CapabilityFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf6b4bae2281097b7020ebd2c78460a88</anchor>
      <arglist>(CapabilityFlags &amp;lhs, CapabilityFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameOwnerFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga6ee165e164ee5ac76fcae97d149b0096</anchor>
      <arglist>(BusNameOwnerFlags lhs, BusNameOwnerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameOwnerFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga50b86acd56b5d8ef26c08b2edbeb5fa2</anchor>
      <arglist>(BusNameOwnerFlags lhs, BusNameOwnerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameOwnerFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga66e5ff30c50eda68a6e9c9856ff24929</anchor>
      <arglist>(BusNameOwnerFlags lhs, BusNameOwnerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameOwnerFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga76ae3c19edb95730bbf26a8bd2fe41fc</anchor>
      <arglist>(BusNameOwnerFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>BusNameOwnerFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga1082185ea5b919ef8e797f5a4a2cbd84</anchor>
      <arglist>(BusNameOwnerFlags &amp;lhs, BusNameOwnerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameOwnerFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8b3d76ca0ece547b75ddf7977beb2012</anchor>
      <arglist>(BusNameOwnerFlags &amp;lhs, BusNameOwnerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameOwnerFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8256822b508991b36784f8633f5a2a41</anchor>
      <arglist>(BusNameOwnerFlags &amp;lhs, BusNameOwnerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>own_name</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga6e63011eb298f04364d38d44ae51d1e5</anchor>
      <arglist>(BusType bus_type, const Glib::ustring &amp;name, const SlotBusAcquired &amp;bus_acquired_slot=SlotBusAcquired(), const SlotNameAcquired &amp;name_acquired_slot=SlotNameAcquired(), const SlotNameLost &amp;name_lost_slot=SlotNameLost(), BusNameOwnerFlags flags=Gio::DBus::BUS_NAME_OWNER_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unown_name</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>a56eb716650330a147b033d7aec56e0ed</anchor>
      <arglist>(guint owner_id)</arglist>
    </member>
    <member kind="function">
      <type>ProxyFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa322b87fce3af1fdea7133a127088be1</anchor>
      <arglist>(ProxyFlags lhs, ProxyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ProxyFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaedd6c084853864f9adf4c6263908109f</anchor>
      <arglist>(ProxyFlags lhs, ProxyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ProxyFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga86dfb1bb4f81af398e3d9e46c7bcfdd6</anchor>
      <arglist>(ProxyFlags lhs, ProxyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ProxyFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3ea4f184a1f3477087c578f74b88fbf2</anchor>
      <arglist>(ProxyFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>ProxyFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gace0563138240e17842fa5110f70e6c38</anchor>
      <arglist>(ProxyFlags &amp;lhs, ProxyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ProxyFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga95b7b16dbf0d153c9ae500b25c1cf29a</anchor>
      <arglist>(ProxyFlags &amp;lhs, ProxyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ProxyFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga996098077862478d47a82bae84847f4e</anchor>
      <arglist>(ProxyFlags &amp;lhs, ProxyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ServerFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga7955ba627de857db9a98ba002092c825</anchor>
      <arglist>(ServerFlags lhs, ServerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ServerFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gad76003cb3c7ee635acce39d25e293f1c</anchor>
      <arglist>(ServerFlags lhs, ServerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ServerFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga11ec0042ba646a016c058c8ead2cd18d</anchor>
      <arglist>(ServerFlags lhs, ServerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ServerFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga5ab28f60229aa0c887d0c1ec05ec286f</anchor>
      <arglist>(ServerFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>ServerFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gac1a3b9ca9c65cb38a478ac3df387983a</anchor>
      <arglist>(ServerFlags &amp;lhs, ServerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ServerFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaceba145483aef79b9f829545e5c35673</anchor>
      <arglist>(ServerFlags &amp;lhs, ServerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ServerFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3104ed754362062701f00c4aa9ee2bec</anchor>
      <arglist>(ServerFlags &amp;lhs, ServerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>generate_guid</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga1f11b499bbff8835c429c0fd534df4b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_guid</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>gaf95791c56c136194a67f3855a4416966</anchor>
      <arglist>(const std::string &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_name</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga05c67dee67b2ccccdcb0c19714abd5e1</anchor>
      <arglist>(const Glib::ustring &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_unique_name</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga04c3f3efa55c252ce9299a934f3bc9ed</anchor>
      <arglist>(const Glib::ustring &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_member_name</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga2383c7d151a59adc91e4fbfbd1e4652a</anchor>
      <arglist>(const Glib::ustring &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_interface_name</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>gaf8f12ce74f2521c357d814a0105359ea</anchor>
      <arglist>(const Glib::ustring &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>BusNameWatcherFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga11d69d7cecb05e6a1ab2e29802001c0d</anchor>
      <arglist>(BusNameWatcherFlags lhs, BusNameWatcherFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameWatcherFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga910364a6bf529ad6ae00fdfc1caf8d95</anchor>
      <arglist>(BusNameWatcherFlags lhs, BusNameWatcherFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameWatcherFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3c6767c920f33ef0acf5273d87d44191</anchor>
      <arglist>(BusNameWatcherFlags lhs, BusNameWatcherFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameWatcherFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga7f09a804dfb04f4a256cfb22cac05378</anchor>
      <arglist>(BusNameWatcherFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>BusNameWatcherFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3cde961e2c29d55871ad3cb2b4d0f7b1</anchor>
      <arglist>(BusNameWatcherFlags &amp;lhs, BusNameWatcherFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameWatcherFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf926fff083913a435999f13eaa283542</anchor>
      <arglist>(BusNameWatcherFlags &amp;lhs, BusNameWatcherFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameWatcherFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga606fa2da2a5a44a01e084c959fd1cca2</anchor>
      <arglist>(BusNameWatcherFlags &amp;lhs, BusNameWatcherFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>watch_name</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>gaa202af27755f2ea8d0736f8ab3a75dba</anchor>
      <arglist>(BusType bus_type, const Glib::ustring &amp;name, const SlotNameAppeared &amp;name_appeared_slot=SlotNameAppeared(), const SlotNameVanished &amp;name_vanished_slot=SlotNameVanished(), BusNameWatcherFlags flags=Gio::DBus::BUS_NAME_WATCHER_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>watch_name</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>gaf07c31497172ba813b9322dad4570927</anchor>
      <arglist>(const Glib::RefPtr&lt; Connection &gt; &amp;connection, const Glib::ustring &amp;name, const SlotNameAppeared &amp;name_appeared_slot=SlotNameAppeared(), const SlotNameVanished &amp;name_vanished_slot=SlotNameVanished(), BusNameWatcherFlags flags=Gio::DBus::BUS_NAME_WATCHER_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unwatch_name</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>gaa5106315b09d6fc5ad019ecfcc8d5342</anchor>
      <arglist>(guint watcher_id)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Gio::DBus::Address</name>
    <filename>namespaceGio_1_1DBus_1_1Address.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>is_address</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>gab2c056ac3cce34b4a58df19166d48fae</anchor>
      <arglist>(const std::string &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_supported</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga2f8d4a3d5bda1d3fcc4f4f3c8cc0c214</anchor>
      <arglist>(const std::string &amp;address)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_stream</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga2d53e540686789c834cef9a3ac447bf4</anchor>
      <arglist>(const std::string &amp;address, const SlotAsyncReady slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_stream</name>
      <anchorfile>namespaceGio_1_1DBus_1_1Address.html</anchorfile>
      <anchor>aa58fdb1a4137485cf491c795385932e5</anchor>
      <arglist>(const std::string &amp;address, const SlotAsyncReady slot)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; IOStream &gt;</type>
      <name>get_stream_finish</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga8fa5586dec918dfa553dab97f0f8e342</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res, std::string &amp;out_guid)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; IOStream &gt;</type>
      <name>get_stream_finish</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga7da9ac3910fa800a6a42b2667b1a0135</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; IOStream &gt;</type>
      <name>get_stream_sync</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga95b08ddb9dedf51b585fa7a5da4f4233</anchor>
      <arglist>(const std::string &amp;address, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, std::string &amp;out_guid)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; IOStream &gt;</type>
      <name>get_stream_sync</name>
      <anchorfile>namespaceGio_1_1DBus_1_1Address.html</anchorfile>
      <anchor>a5f06f1e4ad09337333452543a485c46a</anchor>
      <arglist>(const std::string &amp;address, std::string &amp;out_guid)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; IOStream &gt;</type>
      <name>get_stream_sync</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>gaec661c3dff45b4a5626b9dc1bc586b3d</anchor>
      <arglist>(const std::string &amp;address, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; IOStream &gt;</type>
      <name>get_stream_sync</name>
      <anchorfile>namespaceGio_1_1DBus_1_1Address.html</anchorfile>
      <anchor>a8c58bb121501abcc87d72ec827c31d14</anchor>
      <arglist>(const std::string &amp;address)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_for_bus_sync</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga3acef7d113b30124fe11e88c2d2a60a4</anchor>
      <arglist>(BusType bus_type, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_for_bus_sync</name>
      <anchorfile>namespaceGio_1_1DBus_1_1Address.html</anchorfile>
      <anchor>a4225e7aa980d9938325547157a2f1759</anchor>
      <arglist>(BusType bus_type)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Gio::DBus::ErrorUtils</name>
    <filename>namespaceGio_1_1DBus_1_1ErrorUtils.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>is_remote_error</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga2b6d40f35340690128b06b289388d120</anchor>
      <arglist>(const Glib::Error &amp;error)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_remote_error</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga94461b5c18260b017f3404d82ad5321a</anchor>
      <arglist>(const Glib::Error &amp;error)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>strip_remote_error</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga2f38119e0765fd1654363fcdee6e4c76</anchor>
      <arglist>(Glib::Error &amp;error)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Glib</name>
    <filename>namespaceGlib.html</filename>
    <namespace>Glib::Ascii</namespace>
    <namespace>Glib::Base64</namespace>
    <namespace>Glib::Container_Helpers</namespace>
    <namespace>Glib::Markup</namespace>
    <namespace>Glib::Threads</namespace>
    <namespace>Glib::Unicode</namespace>
    <class kind="class">Glib::ArrayHandle</class>
    <class kind="class">Glib::ArrayHandle&lt; bool, Container_Helpers::TypeTraits&lt; bool &gt; &gt;</class>
    <class kind="class">Glib::ArrayHandler</class>
    <class kind="class">Glib::ArrayHandler&lt; bool &gt;</class>
    <class kind="class">Glib::BalancedTree</class>
    <class kind="class">Glib::Binding</class>
    <class kind="class">Glib::ByteArray</class>
    <class kind="class">Glib::Bytes</class>
    <class kind="class">Glib::Checksum</class>
    <class kind="class">Glib::Cond</class>
    <class kind="class">Glib::ConvertError</class>
    <class kind="class">Glib::Date</class>
    <class kind="class">Glib::DateTime</class>
    <class kind="class">Glib::DBusObjectPathString</class>
    <class kind="class">Glib::DBusSignatureString</class>
    <class kind="class">Glib::Dir</class>
    <class kind="class">Glib::DirIterator</class>
    <class kind="class">Glib::Dispatcher</class>
    <class kind="class">Glib::Error</class>
    <class kind="class">Glib::Exception</class>
    <class kind="class">Glib::FileError</class>
    <class kind="class">Glib::HelperList</class>
    <class kind="class">Glib::IConv</class>
    <class kind="class">Glib::IdleSource</class>
    <class kind="class">Glib::Interface</class>
    <class kind="class">Glib::IOChannel</class>
    <class kind="class">Glib::IOChannelError</class>
    <class kind="class">Glib::IOSource</class>
    <class kind="class">Glib::KeyFile</class>
    <class kind="class">Glib::KeyFileError</class>
    <class kind="class">Glib::ListHandle</class>
    <class kind="class">Glib::ListHandler</class>
    <class kind="class">Glib::MainContext</class>
    <class kind="class">Glib::MainLoop</class>
    <class kind="class">Glib::MarkupError</class>
    <class kind="class">Glib::MatchInfo</class>
    <class kind="class">Glib::Module</class>
    <class kind="class">Glib::Mutex</class>
    <class kind="class">Glib::NodeTree</class>
    <class kind="class">Glib::Object</class>
    <class kind="class">Glib::ObjectBase</class>
    <class kind="class">Glib::OptionContext</class>
    <class kind="class">Glib::OptionEntry</class>
    <class kind="class">Glib::OptionError</class>
    <class kind="class">Glib::OptionGroup</class>
    <class kind="class">Glib::PatternSpec</class>
    <class kind="class">Glib::PollFD</class>
    <class kind="class">Glib::Private</class>
    <class kind="class">Glib::Property</class>
    <class kind="class">Glib::Property_ReadOnly</class>
    <class kind="class">Glib::Property_WriteOnly</class>
    <class kind="class">Glib::PropertyBase</class>
    <class kind="class">Glib::PropertyProxy</class>
    <class kind="class">Glib::PropertyProxy_Base</class>
    <class kind="class">Glib::PropertyProxy_ReadOnly</class>
    <class kind="class">Glib::PropertyProxy_WriteOnly</class>
    <class kind="class">Glib::Quark</class>
    <class kind="class">Glib::QueryQuark</class>
    <class kind="class">Glib::Rand</class>
    <class kind="class">Glib::RecMutex</class>
    <class kind="class">Glib::RefPtr</class>
    <class kind="class">Glib::Regex</class>
    <class kind="class">Glib::RegexError</class>
    <class kind="class">Glib::RWLock</class>
    <class kind="class">Glib::Sequence</class>
    <class kind="class">Glib::ShellError</class>
    <class kind="class">Glib::SignalChildWatch</class>
    <class kind="class">Glib::SignalIdle</class>
    <class kind="class">Glib::SignalIO</class>
    <class kind="class">Glib::SignalProxy</class>
    <class kind="class">Glib::SignalProxyBase</class>
    <class kind="class">Glib::SignalProxyDetailed</class>
    <class kind="class">Glib::SignalProxyDetailedAnyType</class>
    <class kind="class">Glib::SignalProxyNormal</class>
    <class kind="class">Glib::SignalProxyProperty</class>
    <class kind="class">Glib::SignalTimeout</class>
    <class kind="class">Glib::SListHandle</class>
    <class kind="class">Glib::SListHandler</class>
    <class kind="class">Glib::Source</class>
    <class kind="class">Glib::SpawnError</class>
    <class kind="struct">Glib::StaticMutex</class>
    <class kind="struct">Glib::StaticPrivate</class>
    <class kind="struct">Glib::StaticRecMutex</class>
    <class kind="struct">Glib::StaticRWLock</class>
    <class kind="class">Glib::StreamIOChannel</class>
    <class kind="class">Glib::Thread</class>
    <class kind="class">Glib::ThreadError</class>
    <class kind="class">Glib::ThreadPool</class>
    <class kind="class">Glib::TimeoutSource</class>
    <class kind="class">Glib::Timer</class>
    <class kind="struct">Glib::TimeVal</class>
    <class kind="class">Glib::TimeZone</class>
    <class kind="class">Glib::ustring</class>
    <class kind="class">Glib::ustring_Iterator</class>
    <class kind="class">Glib::Value</class>
    <class kind="class">Glib::Value&lt; bool &gt;</class>
    <class kind="class">Glib::Value&lt; char &gt;</class>
    <class kind="class">Glib::Value&lt; const T * &gt;</class>
    <class kind="class">Glib::Value&lt; double &gt;</class>
    <class kind="class">Glib::Value&lt; float &gt;</class>
    <class kind="class">Glib::Value&lt; Glib::RefPtr&lt; const T &gt; &gt;</class>
    <class kind="class">Glib::Value&lt; Glib::RefPtr&lt; T &gt; &gt;</class>
    <class kind="class">Glib::Value&lt; Glib::ustring &gt;</class>
    <class kind="class">Glib::Value&lt; int &gt;</class>
    <class kind="class">Glib::Value&lt; long &gt;</class>
    <class kind="class">Glib::Value&lt; long long &gt;</class>
    <class kind="class">Glib::Value&lt; signed char &gt;</class>
    <class kind="class">Glib::Value&lt; std::string &gt;</class>
    <class kind="class">Glib::Value&lt; T * &gt;</class>
    <class kind="class">Glib::Value&lt; unsigned char &gt;</class>
    <class kind="class">Glib::Value&lt; unsigned int &gt;</class>
    <class kind="class">Glib::Value&lt; unsigned long &gt;</class>
    <class kind="class">Glib::Value&lt; unsigned long long &gt;</class>
    <class kind="class">Glib::Value&lt; void * &gt;</class>
    <class kind="class">Glib::Value_Boxed</class>
    <class kind="class">Glib::Value_Enum</class>
    <class kind="class">Glib::Value_Flags</class>
    <class kind="class">Glib::Value_Pointer</class>
    <class kind="class">Glib::ValueArray</class>
    <class kind="class">Glib::ValueBase</class>
    <class kind="class">Glib::ValueBase_Boxed</class>
    <class kind="class">Glib::ValueBase_Enum</class>
    <class kind="class">Glib::ValueBase_Flags</class>
    <class kind="class">Glib::ValueBase_Object</class>
    <class kind="class">Glib::ValueBase_String</class>
    <class kind="class">Glib::Variant</class>
    <class kind="class">Glib::Variant&lt; bool &gt;</class>
    <class kind="class">Glib::Variant&lt; double &gt;</class>
    <class kind="class">Glib::Variant&lt; gint16 &gt;</class>
    <class kind="class">Glib::Variant&lt; gint32 &gt;</class>
    <class kind="class">Glib::Variant&lt; gint64 &gt;</class>
    <class kind="class">Glib::Variant&lt; Glib::DBusObjectPathString &gt;</class>
    <class kind="class">Glib::Variant&lt; Glib::DBusSignatureString &gt;</class>
    <class kind="class">Glib::Variant&lt; Glib::ustring &gt;</class>
    <class kind="class">Glib::Variant&lt; guint16 &gt;</class>
    <class kind="class">Glib::Variant&lt; guint32 &gt;</class>
    <class kind="class">Glib::Variant&lt; guint64 &gt;</class>
    <class kind="class">Glib::Variant&lt; std::map&lt; K, V &gt; &gt;</class>
    <class kind="class">Glib::Variant&lt; std::string &gt;</class>
    <class kind="class">Glib::Variant&lt; std::tuple&lt; Types... &gt; &gt;</class>
    <class kind="class">Glib::Variant&lt; std::vector&lt; Glib::DBusObjectPathString &gt; &gt;</class>
    <class kind="class">Glib::Variant&lt; std::vector&lt; Glib::ustring &gt; &gt;</class>
    <class kind="class">Glib::Variant&lt; std::vector&lt; std::string &gt; &gt;</class>
    <class kind="class">Glib::Variant&lt; std::vector&lt; T &gt; &gt;</class>
    <class kind="class">Glib::Variant&lt; unsigned char &gt;</class>
    <class kind="class">Glib::Variant&lt; Variant&lt; T &gt; &gt;</class>
    <class kind="class">Glib::Variant&lt; VariantBase &gt;</class>
    <class kind="class">Glib::VariantBase</class>
    <class kind="class">Glib::VariantContainerBase</class>
    <class kind="class">Glib::VariantDict</class>
    <class kind="class">Glib::VariantIter</class>
    <class kind="class">Glib::VariantParseError</class>
    <class kind="class">Glib::VariantStringBase</class>
    <class kind="class">Glib::VariantType</class>
    <class kind="class">Glib::WeakRef</class>
    <member kind="typedef">
      <type>GTimeSpan</type>
      <name>TimeSpan</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a3f11fead09a7e393e8e6b345a1b7b1c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GPid</type>
      <name>Pid</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a78044275242a0c3535e3b7b860106c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void &gt;</type>
      <name>SlotSpawnChildSetup</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>ga3bac87a2607d06097afbcd5ebae5d57a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArrayHandle&lt; Glib::ustring &gt;</type>
      <name>StringArrayHandle</name>
      <anchorfile>group__ContHandles.html</anchorfile>
      <anchor>ga66b4a4b57f64be3fdc1972d8bf93723a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::ArrayHandle&lt; Glib::ustring &gt;</type>
      <name>SArray</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a5be457e99a6774e61acfe8f7d20f12b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SignalProxy&lt; R &gt;</type>
      <name>SignalProxy0</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a155737cae7f7b06b2b7f2f63998bd4fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SignalProxy&lt; R, T1 &gt;</type>
      <name>SignalProxy1</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a51901f16f9c1b820b285a93919eff6d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SignalProxy&lt; R, T1, T2 &gt;</type>
      <name>SignalProxy2</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a2d7df8f788171725eb6667be8b0109ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SignalProxy&lt; R, T1, T2, T3 &gt;</type>
      <name>SignalProxy3</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>abe36304b876f34c10e2a3354611b8677</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SignalProxy&lt; R, T1, T2, T3, T4 &gt;</type>
      <name>SignalProxy4</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a02e24f53a767dfb69d0ef3ff6b26eb80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SignalProxy&lt; R, T1, T2, T3, T4, T5 &gt;</type>
      <name>SignalProxy5</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a4881f09b5aec85e9eb038eb265f4503d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SignalProxy&lt; R, T1, T2, T3, T4, T5, T6 &gt;</type>
      <name>SignalProxy6</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a4573dbf960fcbed7f8dc332603031f2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SignalProxyDetailedAnyType&lt; R &gt;</type>
      <name>SignalProxyDetailed0</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>aae7c7e7367ead24e78181bda1bfb3744</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SignalProxyDetailedAnyType&lt; R, T1 &gt;</type>
      <name>SignalProxyDetailed1</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a54274aad465ea5f4a2467cfed8643d4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SignalProxyDetailedAnyType&lt; R, T1, T2 &gt;</type>
      <name>SignalProxyDetailed2</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a49dfa86dde89998bf1fb28a6718d78a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SignalProxyDetailedAnyType&lt; R, T1, T2, T3 &gt;</type>
      <name>SignalProxyDetailed3</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a7133f945344c7d8b66f470492c99203a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SignalProxyDetailedAnyType&lt; R, T1, T2, T3, T4 &gt;</type>
      <name>SignalProxyDetailed4</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ad147a64bf10558f8382b9b142f08ed3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SignalProxyDetailedAnyType&lt; R, T1, T2, T3, T4, T5 &gt;</type>
      <name>SignalProxyDetailed5</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ae0bb2b218bc899c7711458ab8a55b0e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SignalProxyDetailedAnyType&lt; R, T1, T2, T3, T4, T5, T6 &gt;</type>
      <name>SignalProxyDetailed6</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a6a647516fa7ce3e8d6c3cc1da497b8ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BindingFlags</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga6af48352fc6ed053e5ebebfe02630a6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BINDING_DEFAULT</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga6af48352fc6ed053e5ebebfe02630a6fa429c481acc1ddaca5c09e6d84f7dae29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BINDING_BIDIRECTIONAL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga6af48352fc6ed053e5ebebfe02630a6fa0c2d9e60dc3177e8dd56f36e275b3327</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BINDING_SYNC_CREATE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga6af48352fc6ed053e5ebebfe02630a6fac39d6aa495608453a377af413fb7e9b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BINDING_INVERT_BOOLEAN</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga6af48352fc6ed053e5ebebfe02630a6faf5440a686da1abfc17d17cb1071f008c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ParamFlags</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga795b9718605425a03f337e0b7421fcbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_READABLE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga795b9718605425a03f337e0b7421fcbca8e86b397b1d896933f70bf78427dbc79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_WRITABLE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga795b9718605425a03f337e0b7421fcbcae586772dc00a2c781f504fdc4701846f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_READWRITE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga795b9718605425a03f337e0b7421fcbcad1554dc8f8eecab55f7c30e23ac391b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_CONSTRUCT</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga795b9718605425a03f337e0b7421fcbcaa9e37000824a21f417101c94c37b2adb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_CONSTRUCT_ONLY</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga795b9718605425a03f337e0b7421fcbcabc569cdee078f113f586999cd391f5d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_LAX_VALIDATION</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga795b9718605425a03f337e0b7421fcbca4c7e3a69c2d5e8e8419e912eb434e0e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_STATIC_NAME</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga795b9718605425a03f337e0b7421fcbcaea9c4dec23c8bbac14eaa8577e338551</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_PRIVATE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga795b9718605425a03f337e0b7421fcbcabc996f6a17c5aef47bcd8b0de7c2ea81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_STATIC_NICK</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga795b9718605425a03f337e0b7421fcbca5994d69d3d72b93e77536b5a531bd142</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_STATIC_BLURB</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga795b9718605425a03f337e0b7421fcbca703a97fea00613c8ddbd4211c4ed24df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_EXPLICIT_NOTIFY</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga795b9718605425a03f337e0b7421fcbca3dd3566586228c77257e6410386fa8c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_DEPRECATED</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga795b9718605425a03f337e0b7421fcbca586e2c999d0a2560e1804da0b36ab7ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileTest</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga33c24ccefbd130021f06708763e16ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TEST_IS_REGULAR</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga33c24ccefbd130021f06708763e16ef2ad7bb008269376841fe11c05da9c01a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TEST_IS_SYMLINK</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga33c24ccefbd130021f06708763e16ef2ae9fcdfcc6fc6ee7bb83ce9634e5e9f18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TEST_IS_DIR</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga33c24ccefbd130021f06708763e16ef2ae4072d5338587b51642d1a68c730ec19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TEST_IS_EXECUTABLE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga33c24ccefbd130021f06708763e16ef2ae236ad1999c8c106a5ff31154ebd5692</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TEST_EXISTS</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga33c24ccefbd130021f06708763e16ef2aa6cf22c3904f707c94f2ad911b5df6fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SeekType</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaa3767731311bdba4ef42dc99215e5cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEEK_TYPE_CUR</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaa3767731311bdba4ef42dc99215e5cdaac0fc030f79f4b5623de9867333011e30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEEK_TYPE_SET</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaa3767731311bdba4ef42dc99215e5cdaaa8e02688f42163a11bb8b47a72456bc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEEK_TYPE_END</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaa3767731311bdba4ef42dc99215e5cdaa615f7b38be2cbd60fe5fbebd656f38bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>IOStatus</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga23fb251e48485b62a9c2677bb1f87d5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STATUS_ERROR</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga23fb251e48485b62a9c2677bb1f87d5eabf1fa62d0111ab895ecb887ce6cce1c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STATUS_NORMAL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga23fb251e48485b62a9c2677bb1f87d5eaf2008e64a9691fc76ad9320baef5c8ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STATUS_EOF</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga23fb251e48485b62a9c2677bb1f87d5ea63be2a355cd7187f9ccdd854c80fd10c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STATUS_AGAIN</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga23fb251e48485b62a9c2677bb1f87d5ead240a3a0fd203dd76e11b76a8115d881</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>IOFlags</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaee093e5db5bc1ea5738771ba0d1af3b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_APPEND</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaee093e5db5bc1ea5738771ba0d1af3b7a0eddd66348cb8ec7aceef67736d59cce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_NONBLOCK</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaee093e5db5bc1ea5738771ba0d1af3b7a1a71350ea4fc4f9779a3a884f6977269</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_IS_READABLE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaee093e5db5bc1ea5738771ba0d1af3b7a45c527b36c1a1df9b5b1202f84eafeed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_IS_WRITABLE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaee093e5db5bc1ea5738771ba0d1af3b7a0632918f94e302c0b20e722e941ad124</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_IS_WRITEABLE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaee093e5db5bc1ea5738771ba0d1af3b7ac8bc4ce7e268189488cb98c94e15ce66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_IS_SEEKABLE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaee093e5db5bc1ea5738771ba0d1af3b7a65e5b54c7fad833478ed9cc169cc15be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_MASK</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaee093e5db5bc1ea5738771ba0d1af3b7a26bca9503544a0e4388041812e3ea1e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_GET_MASK</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaee093e5db5bc1ea5738771ba0d1af3b7a06c9ef83e6adc8a4b4ea98dd396e2206</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_SET_MASK</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaee093e5db5bc1ea5738771ba0d1af3b7a31bd353961673e2199474810e2ff3ff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>IOCondition</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gabd96381793b70d4ae32c725926990918</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_IN</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gabd96381793b70d4ae32c725926990918aa38ee764d957d52ccd85688c27778daf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_OUT</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gabd96381793b70d4ae32c725926990918a0945b81e85eb8d2d26e77fdc04821cae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_PRI</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gabd96381793b70d4ae32c725926990918ac8998d8c99453ea30c1ba129f89ec5a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERR</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gabd96381793b70d4ae32c725926990918a1798f7312c98ff12681ed93f1b08f0d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_HUP</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gabd96381793b70d4ae32c725926990918aa290fc1a996ead6c153515d4771fcdb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_NVAL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gabd96381793b70d4ae32c725926990918aadf52e698f361e79b53f0bcb3266df24</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>KeyFileFlags</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga5866be36312563d91e5a7be27348459b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KEY_FILE_NONE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga5866be36312563d91e5a7be27348459baec458bae700a8dfd34898a5ab5b22d3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KEY_FILE_KEEP_COMMENTS</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga5866be36312563d91e5a7be27348459ba27ebf6c0c9a771f0268f7b06fe7e0347</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KEY_FILE_KEEP_TRANSLATIONS</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga5866be36312563d91e5a7be27348459ba498ea5abdc02d9a60db9a0d2873f5c58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>UserDirectory</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga1d1ca7293a7a06f1d34ef3e21440b819</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USER_DIRECTORY_DESKTOP</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1d1ca7293a7a06f1d34ef3e21440b819a9bdde992722bfa20afe0533273f82bd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USER_DIRECTORY_DOCUMENTS</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1d1ca7293a7a06f1d34ef3e21440b819a3550469cfb212ed889b1106750495040</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USER_DIRECTORY_DOWNLOAD</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1d1ca7293a7a06f1d34ef3e21440b819aaf0c0361b86fd7c7e5cbf8015632bcd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USER_DIRECTORY_MUSIC</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1d1ca7293a7a06f1d34ef3e21440b819a5b8e18721d39fbb45fbf965088170ca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USER_DIRECTORY_PICTURES</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1d1ca7293a7a06f1d34ef3e21440b819a2623f44d7b841e7f781098afc1716e07</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USER_DIRECTORY_PUBLIC_SHARE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1d1ca7293a7a06f1d34ef3e21440b819ad516c3546c3ff32fedf4a0722d143b9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USER_DIRECTORY_TEMPLATES</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1d1ca7293a7a06f1d34ef3e21440b819ade29748ce1bc5d37e6662ea8d0c22f31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USER_DIRECTORY_VIDEOS</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1d1ca7293a7a06f1d34ef3e21440b819acde3610b2eec032f93b54863521cd20a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USER_N_DIRECTORIES</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1d1ca7293a7a06f1d34ef3e21440b819ae59fbe2f9e59f050f71638084be185b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FormatSizeFlags</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga53f0c2b27f8ba1bca1e695397a75c673</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FORMAT_SIZE_DEFAULT</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga53f0c2b27f8ba1bca1e695397a75c673aaa2c16592d413276b5243a5b2f14c5af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FORMAT_SIZE_LONG_FORMAT</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga53f0c2b27f8ba1bca1e695397a75c673a95ca15cbe9d4b5ea304e28bc5498ce67</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FORMAT_SIZE_IEC_UNITS</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga53f0c2b27f8ba1bca1e695397a75c673abf93b9978954086005fa99da714ae788</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FORMAT_SIZE_BITS</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga53f0c2b27f8ba1bca1e695397a75c673abde05d3468dbf691f7e199b5b441ae62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ModuleFlags</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga502283ffbe523adf38c69905ec8640f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MODULE_BIND_LAZY</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga502283ffbe523adf38c69905ec8640f3af7dfb341de1af451a3fc28d8c13e4593</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MODULE_BIND_LOCAL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga502283ffbe523adf38c69905ec8640f3a61ed78ca3b7464b163e43240a4fffa96</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MODULE_BIND_MASK</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga502283ffbe523adf38c69905ec8640f3ab1bb8b50aaab642b5abfcddac8d7806b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TraverseType</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gae3a70fa1e451da068323419e8c98e9a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAVERSE_IN_ORDER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggae3a70fa1e451da068323419e8c98e9a9aa7f260b474a886df2bf1aefcfc0f14b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAVERSE_PRE_ORDER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggae3a70fa1e451da068323419e8c98e9a9abed8efe71581ccb087323f38b6807661</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAVERSE_POST_ORDER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggae3a70fa1e451da068323419e8c98e9a9a0af70e322b94dfbbfc98b100d21cef4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAVERSE_LEVEL_ORDER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggae3a70fa1e451da068323419e8c98e9a9a16cd819f4ab8175453f6287aeefad870</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>RegexCompileFlags</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_CASELESS</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68da4e6c0b8e730db041fc8d1261c2932a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MULTILINE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68dab11968f7c699f48954c586063dc83226</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_DOTALL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68daa30cd6e3af26544676c5c05578f3701f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_EXTENDED</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68dae4955dc52d3f93f46fa7b894689bb9dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_ANCHORED</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68da242c71a1c506054daae47559a087885d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_DOLLAR_ENDONLY</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68da6a311ea6eb4cd26d46bef76a4ecd70d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_UNGREEDY</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68dad3d43ecb091918275855d44bf137432c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_RAW</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68da9aaaffdaa133f45d7412af35ad17b29e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_NO_AUTO_CAPTURE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68da98b6d7f319fcee7ae0c1b9e8dc146869</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_OPTIMIZE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68daefe22a8d4297013ffcef77b83c40bf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_FIRSTLINE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68da4d72c42c744da757f5b4e8760933e355</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_DUPNAMES</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68dad96b981e024568febb07d7f237950a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_NEWLINE_CR</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68da8743e2fb6fc70c8bbf53a025442a9f31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_NEWLINE_LF</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68da18bf3b48001c90a1aefca35dd9bd832b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_NEWLINE_CRLF</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68da31810ab9b1612d3dafbb86d164ea783c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_NEWLINE_ANYCRLF</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68da6c4921ffcc04c53566d6bfe89fcf78b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_BSR_ANYCRLF</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68da9fbe4801ca6fcae969a84c16826b9393</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_JAVASCRIPT_COMPAT</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68da7e66bb34557aafd6de8b6119c229d9c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>RegexMatchFlags</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga8375c7f6797efc96929e8be89435c746</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_ANCHORED</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga8375c7f6797efc96929e8be89435c746a6d9730749c5506b89f3085ce25c80c21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_NOTBOL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga8375c7f6797efc96929e8be89435c746ae09a3a58b8d8e052a35719b4f22f937a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_NOTEOL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga8375c7f6797efc96929e8be89435c746ab8850a97e7a6b06b1a5c97e703be2a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_NOTEMPTY</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga8375c7f6797efc96929e8be89435c746a0aaf0a3c6a7fae74d4a1a6255062ae91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_PARTIAL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga8375c7f6797efc96929e8be89435c746ab8930fa357708487ef7a83350304dc2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_NEWLINE_CR</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga8375c7f6797efc96929e8be89435c746ae0eb9716d96049f41f5560a215ea5dab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_NEWLINE_LF</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga8375c7f6797efc96929e8be89435c746a51549066ff64a814d44958ce9db5243b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_NEWLINE_CRLF</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga8375c7f6797efc96929e8be89435c746ad1536133fab0dd8e25c31c0c8555b365</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_NEWLINE_ANY</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga8375c7f6797efc96929e8be89435c746acebebe55d6e1197e4a7e92a4fc4a999b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_NEWLINE_ANYCRLF</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga8375c7f6797efc96929e8be89435c746aa1a18562a24484f87f73115cb3a722c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_BSR_ANYCRLF</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga8375c7f6797efc96929e8be89435c746affaea7b025e947b22e7378bf0b6baf92</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_BSR_ANY</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga8375c7f6797efc96929e8be89435c746a824f70cd3d882d3717d67325b96a9b3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_PARTIAL_SOFT</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga8375c7f6797efc96929e8be89435c746a69d773f5f7d17ef9b91bd43d545ae1c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_PARTIAL_HARD</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga8375c7f6797efc96929e8be89435c746a1d2d11e330bc91e85a50e01445288b3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_NOTEMPTY_ATSTART</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga8375c7f6797efc96929e8be89435c746aea0015d4a3887504f16321a0f960241f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SpawnFlags</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga075918988c271e7fb63f1a1d083e26dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_DEFAULT</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga075918988c271e7fb63f1a1d083e26dda4198b367b82bc1adf3469423da582663</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_LEAVE_DESCRIPTORS_OPEN</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga075918988c271e7fb63f1a1d083e26dda3b30d87840df513617bd468c750e52c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_DO_NOT_REAP_CHILD</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga075918988c271e7fb63f1a1d083e26dda8ba0abbaa6e1907446857439f454ced1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_SEARCH_PATH</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga075918988c271e7fb63f1a1d083e26dda7d76ee852f6b00ffaef373f3d595139f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_STDOUT_TO_DEV_NULL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga075918988c271e7fb63f1a1d083e26dda7a8c2616db1e6ef21f063652fd60872e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_STDERR_TO_DEV_NULL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga075918988c271e7fb63f1a1d083e26dda198a2b8f3ce92dce5a1117d1c2dac345</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_CHILD_INHERITS_STDIN</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga075918988c271e7fb63f1a1d083e26ddaeb1c843fc647e28134cd3e7fa259f285</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_FILE_AND_ARGV_ZERO</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga075918988c271e7fb63f1a1d083e26ddaead6dad17dda98e0196495dd11d62cd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_SEARCH_PATH_FROM_ENVP</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga075918988c271e7fb63f1a1d083e26dda876ee150dd220b4808c2f9ecab5dc0f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_CLOEXEC_PIPES</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga075918988c271e7fb63f1a1d083e26ddace745e1ccff2497f03ea638316abe076</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ThreadPriority</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga9b87dca6496b6ad53baec9ca01318448</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREAD_PRIORITY_LOW</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga9b87dca6496b6ad53baec9ca01318448a035a7bdc6a5b5eae6f644ed2605e8a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREAD_PRIORITY_NORMAL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga9b87dca6496b6ad53baec9ca01318448a6216bb25baaaca32642841ade911a92e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREAD_PRIORITY_HIGH</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga9b87dca6496b6ad53baec9ca01318448aef77081535e90116b203ce3b3b0fe523</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREAD_PRIORITY_URGENT</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga9b87dca6496b6ad53baec9ca01318448a5b79355bbd59c508995af57e0ed39a94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>NotLock</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a2dd111336e3b057b51ca5871795fffa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_LOCK</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a2dd111336e3b057b51ca5871795fffa4a9681fb4e85e62ba64e39a12526eaa840</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TryLock</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a7441a36336ea4cdb35c0fddbf3f97b19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRY_LOCK</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a7441a36336ea4cdb35c0fddbf3f97b19adf6b2565785992ff637cbc453988841d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TimeType</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga56a2fdf6fb8599b99302868a176aac43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIME_TYPE_STANDARD</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga56a2fdf6fb8599b99302868a176aac43ae6b2b23e160971f7487d630c1fa8cf70</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIME_TYPE_DAYLIGHT</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga56a2fdf6fb8599b99302868a176aac43a08bb0503339270dd7bf04c3406cf60c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIME_TYPE_UNIVERSAL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga56a2fdf6fb8599b99302868a176aac43a88ad6264677876bc7203353a1cf45391</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>UnicodeType</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_CONTROL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea600cfdae816c0d120e6e3e4a32d5d9cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_FORMAT</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea5b522871761887006148af4734e84875</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_UNASSIGNED</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea6e8a7e7b5ce23cd99d30f4ab7b672efd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_PRIVATE_USE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea4d8e2c9e7eb9ab4352d6e4b6699267f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_SURROGATE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea69161af321691d504ec819bb9c19b808</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_LOWERCASE_LETTER</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46eaab14707b2ffc2073a6d770ecd70ae321</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_MODIFIER_LETTER</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea7bfc1c73f50fa8c69224e0df70b0b14b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_OTHER_LETTER</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea146261fc855eb4e65cdfb86886bdedf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_TITLECASE_LETTER</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea3f43a11337d15c6050fc1ef0e2da75b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_UPPERCASE_LETTER</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea43db8de276cdf9f23e23a8661456ff4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_SPACING_MARK</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46eac73f211f2caa9d82027985cb8b549cf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_ENCLOSING_MARK</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea9a7db30781bd0d0a61374fd261944e07</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_NON_SPACING_MARK</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea09f4af19dd4a3d3d0f10369f8b8afda2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_DECIMAL_NUMBER</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46eaf93e0b2714dcd443d48e246768a8da9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_LETTER_NUMBER</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea09e6ab53938abe6c9c2d8981f137e5e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_OTHER_NUMBER</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea05027699449d2ff55d446fa7572a8c5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_CONNECT_PUNCTUATION</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea32edc36db8c13121a39dc416b22f822a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_DASH_PUNCTUATION</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46eab3b75b13d04b7ef056e72f798dae0e3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_CLOSE_PUNCTUATION</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea0d4f41955bed4fddc7855ce714e1f957</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_FINAL_PUNCTUATION</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea90fff8c0bd976f3592629074fa3e801f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_INITIAL_PUNCTUATION</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46eace6196e830393b5497bfbfd6501680a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_OTHER_PUNCTUATION</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea1ded1d0a0b6e5936e8a3ecd123f66869</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_OPEN_PUNCTUATION</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea14677d2ca9b5a1354f7460de17579daa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_CURRENCY_SYMBOL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46eae75f8f34e79ffe86801984519eb40e6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_MODIFIER_SYMBOL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea3b6b351ca86d8095ada1d6a32e758d7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_MATH_SYMBOL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46eac35f3c4aa05eca14835c22a4c6a56acf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_OTHER_SYMBOL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea85c851b5804ed262ed84c2d5bc59aa1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_LINE_SEPARATOR</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea2a65c1eb916c613c404eea150eac93ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_PARAGRAPH_SEPARATOR</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46eac808b6d7ba1f9cbb28bc0a255578085b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_SPACE_SEPARATOR</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46eabf9e349217923adfb3baef8135756118</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>UnicodeBreakType</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_MANDATORY</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaaade2215e9c2207518154a283bebb5c3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_CARRIAGE_RETURN</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa48ba653f60f909e05dd9b650970ecc1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_LINE_FEED</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaab556cd8a4eaa5d766b3e49591ffae8b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_COMBINING_MARK</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa3f8c62e980013b2e44027ef9c34ce5c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_SURROGATE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaaa47bd54d2aef8bd0e52c07e8abbb65f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_ZERO_WIDTH_SPACE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa37b49337ed4ecd7f53e7c9a2817d029f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_INSEPARABLE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa9913f639ecf34dbe62f6610fc9c3da11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_NON_BREAKING_GLUE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaaab52faa88b6578ab4cd88c3095793653</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_CONTINGENT</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa2cccec32194082ea6f93db40c4af1ca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_SPACE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaac623ed7dc2c0cabe23c2d69f4572b7bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_AFTER</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa9729f705eea307bb7ccb0283a3a85093</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_BEFORE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa32422806593a1aa950f533cf6eb394a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_BEFORE_AND_AFTER</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa05fc37bc6f3efcf0dc74973fb967f7c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_HYPHEN</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa1074d431136b2b556b91e682eee4a189</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_NON_STARTER</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaaeb0c44e9512fb806b9ce4991e9d50f5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_OPEN_PUNCTUATION</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaab7df43ac603e4d7b51d52d5a701e718e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_CLOSE_PUNCTUATION</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa80435e54ace548890b953c6395556c7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_QUOTATION</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaaf28d5b9cddeb8bb905fcfa829f436a2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_EXCLAMATION</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa4ab287f55e05833854353ae861b27f5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_IDEOGRAPHIC</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaabb30f05e59de03b80d55f021de4dd1ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_NUMERIC</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaaacc8824bbbaf262b7563f51afce9be15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_INFIX_SEPARATOR</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaacf598d2b5eb2d0459d2339f2e8a9b237</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_SYMBOL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa1bd798c1ae867ef8879f01778ee37b1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_ALPHABETIC</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaaecf3f2bfd41dbab74e897106fef322c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_PREFIX</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa7e5a7d95bc74c01ca77bd3a3446ebae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_POSTFIX</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa4c4fd955be2dc60284b046f8f7fae397</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_COMPLEX_CONTEXT</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaae0f8fcb8bfaaddb4f30edf642b2a6146</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_AMBIGUOUS</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa84ce090d6c8bf46abd148573bd0e3f78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_UNKNOWN</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaae393ca22fb6bd8b01c1012d4e3386a04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_NEXT_LINE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa28a02b08d3965c0ea0f6ff763a34beac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_WORD_JOINER</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa968e329ae40754bed636979d27540fed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_HANGUL_L_JAMO</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaabfa27ce91eb258c1bd72131c857669d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_HANGUL_V_JAMO</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaaeaea498600767a8af3b41e92816faea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_HANGUL_T_JAMO</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaaabefad2b773b963104e38fe77a03281c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_HANGUL_LV_SYLLABLE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaaccb629a2a1bae689139c8f3cc1048b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_HANGUL_LVT_SYLLABLE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa8903e767aa9ab7445578257292d1a1e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_CLOSE_PARANTHESIS</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaabfb13fbf5e6898e8c038bd4ade5eaa4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa9ccab026be2a4042b441a16dc5c393ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_HEBREW_LETTER</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaaaddbde75b0df1eee37443c5059884f19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_REGIONAL_INDICATOR</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaadff1a8802de9de1cec52b82a9b26f515</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_EMOJI_BASE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa2c31b8c70e7d86a680e6fc5f81b92595</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_EMOJI_MODIFIER</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa0d2fbd391a22f61e75f68e872bb8ada8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_ZERO_WIDTH_JOINER</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa8e123422d888bcb53f913413fc7a5eed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AsciiType</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga2e5a690ed07dfaa6f9ad9f1c57acd787</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_ALNUM</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787af7d63a99479102b5391b44f631b5f009</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_ALPHA</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787ac87947c729ac3c3f9f58b0ca28460152</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_CNTRL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787a2e19c57ce5a6eac38d911a86cc44a2fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_DIGIT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787a9acd9a82d0670a3eb0377db782f48853</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_GRAPH</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787a2ecdbe5137af423fce73ff2bbb34d625</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_LOWER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787a875d3cb7494e1548db0d37ab44d4057e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_PRINT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787a9b1775043a8043d994c0c0ab890e86c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_PUNCT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787ad3416d8662560db626259013ff72c58f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_SPACE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787a7d7a68814efba3cf3d294475123413ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_UPPER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787a5ae30681069b2ab88eed13e358c08090</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_XDIGIT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787ad78490a35d65839f2f06449e7e472337</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>NormalizeMode</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga18199b64f406e397627a4e7fc799f848</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_DEFAULT</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga18199b64f406e397627a4e7fc799f848a779b5d7aebd18e4b84c5e57ad1e72510</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_NFD</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga18199b64f406e397627a4e7fc799f848a81e760fdac4c57b878ba43603ed6e9d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_DEFAULT_COMPOSE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga18199b64f406e397627a4e7fc799f848af8fec61972c5f6ab8b7e600db176ed06</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_NFC</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga18199b64f406e397627a4e7fc799f848ae3887d6a5497fb144f48348af4d0c2f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_ALL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga18199b64f406e397627a4e7fc799f848a112d77bcde45ec6eb2bf2ac29bb39697</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_NFKD</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga18199b64f406e397627a4e7fc799f848a6dbd51b7381af7adf532faec482be46a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_ALL_COMPOSE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga18199b64f406e397627a4e7fc799f848abfd1d0e2d16a6ba9ef9b0855124aeeb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_NFKC</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga18199b64f406e397627a4e7fc799f848abf819c3bb24fbe163d47308cc4058640</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OwnershipType</name>
      <anchorfile>group__ContHandles.html</anchorfile>
      <anchor>ga64c27560b41710ccf64a3679a3ba3f20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OWNERSHIP_NONE</name>
      <anchorfile>group__ContHandles.html</anchorfile>
      <anchor>gga64c27560b41710ccf64a3679a3ba3f20a7d594cffcc2d2d6c4313ddb4d6613c79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OWNERSHIP_SHALLOW</name>
      <anchorfile>group__ContHandles.html</anchorfile>
      <anchor>gga64c27560b41710ccf64a3679a3ba3f20a448c598cdc37e2de8a162e1020001715</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OWNERSHIP_DEEP</name>
      <anchorfile>group__ContHandles.html</anchorfile>
      <anchor>gga64c27560b41710ccf64a3679a3ba3f20a2a6d6bfadc36f9eda31af79d32928c6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRIORITY_HIGH</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a0c450f82b9e34689e2dda2038ba7834faa3219d7be6fa3282a80d7a850c401db9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRIORITY_DEFAULT</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a0c450f82b9e34689e2dda2038ba7834fa597ed3aa6067516c9c752896f3816b5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRIORITY_HIGH_IDLE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a0c450f82b9e34689e2dda2038ba7834faf2d20696a8afab425c00268d981e9897</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRIORITY_DEFAULT_IDLE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a0c450f82b9e34689e2dda2038ba7834fae8c1127af0a2dab71f196a957dab8375</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRIORITY_LOW</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a0c450f82b9e34689e2dda2038ba7834fac6034649b50f9f92a69c1e67b92ecfc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>BindingFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga749e95d7cc7706529af4346d2cf93dbe</anchor>
      <arglist>(BindingFlags lhs, BindingFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BindingFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga406ddd8089e99f51026002dc3bf58357</anchor>
      <arglist>(BindingFlags lhs, BindingFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BindingFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga0fc30bce2b354d907971c0bf0e4d2f2e</anchor>
      <arglist>(BindingFlags lhs, BindingFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BindingFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga67a0e7f1c6cc4b071674d8026d562dc4</anchor>
      <arglist>(BindingFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>BindingFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga780a6b8d58daa1d6167da8f1b715d372</anchor>
      <arglist>(BindingFlags &amp;lhs, BindingFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BindingFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaf4f868b995d9f726c515586cd0af6cd2</anchor>
      <arglist>(BindingFlags &amp;lhs, BindingFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BindingFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaa52d6f01bc09aaeab3dd1a8afa4e9b57</anchor>
      <arglist>(BindingFlags &amp;lhs, BindingFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_charset</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gabf5fac564c47a7a9ad6037044c3909f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_charset</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>ga88965337df48a173a6b013e8243e4631</anchor>
      <arglist>(std::string &amp;charset)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>convert</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>ga58f7e4556c436a96c64b186bbc8f7f4c</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;to_codeset, const std::string &amp;from_codeset)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>convert_with_fallback</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>ga40b5aa172fabd1f3dbf50a962d0d351f</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;to_codeset, const std::string &amp;from_codeset)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>convert_with_fallback</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gaf1b091e4397a7637e884148484b1f71e</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;to_codeset, const std::string &amp;from_codeset, const Glib::ustring &amp;fallback)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>locale_to_utf8</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>ga4517b17f2aad4cd5c0e0640de212d928</anchor>
      <arglist>(const std::string &amp;opsys_string)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>locale_from_utf8</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gacc062729285890a7e9b22bece6fb987c</anchor>
      <arglist>(const Glib::ustring &amp;utf8_string)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>filename_to_utf8</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>ga6cf95dc00505401594260a360d70c17b</anchor>
      <arglist>(const std::string &amp;opsys_string)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>filename_from_utf8</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>ga2bd94064ad97b43324a7854b62f0835b</anchor>
      <arglist>(const Glib::ustring &amp;utf8_string)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>filename_from_uri</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gada23cd7f7dc8eb25e99b867a55551763</anchor>
      <arglist>(const Glib::ustring &amp;uri, Glib::ustring &amp;hostname)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>filename_from_uri</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gab1cb94f4a4a70bad06b715fb14a252d9</anchor>
      <arglist>(const Glib::ustring &amp;uri)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>filename_to_uri</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gae1b2f056bde3fbab578c602fe42e3de9</anchor>
      <arglist>(const std::string &amp;filename, const Glib::ustring &amp;hostname)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>filename_to_uri</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gaaf69aec83665229cc06596cf627d9d5a</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>filename_display_basename</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>ga05dd67157ad35da4401263247b6f4d81</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>filename_display_name</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gabc1b404cc965f3da6beecddfe2623afc</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>ParamFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga64411a0c48e2c3ecbc40926275201071</anchor>
      <arglist>(ParamFlags lhs, ParamFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParamFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga9c24626a54bc186c9da156f0b7bf9931</anchor>
      <arglist>(ParamFlags lhs, ParamFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParamFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga23118c9638ef338fb3cb06407099fb17</anchor>
      <arglist>(ParamFlags lhs, ParamFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParamFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaaea9028c5269446e3e892216fc7e9f09</anchor>
      <arglist>(ParamFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>ParamFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga4180c1b9f616ce95a2fdf066360796a5</anchor>
      <arglist>(ParamFlags &amp;lhs, ParamFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParamFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga2a99c6e07188d1e5498b3ebbb4128017</anchor>
      <arglist>(ParamFlags &amp;lhs, ParamFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParamFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaf07dad32ab115f4f1db890ed19d50220</anchor>
      <arglist>(ParamFlags &amp;lhs, ParamFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileTest</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga8e018d8609ba17b0f6955505a8363bf7</anchor>
      <arglist>(FileTest lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileTest</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga5a77e313c92f633c725b72e37123d651</anchor>
      <arglist>(FileTest lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileTest</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga6c089f23d6bfd92e083edc75519db75e</anchor>
      <arglist>(FileTest lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileTest</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga948edadd8ee7442b83d37dc3c325f890</anchor>
      <arglist>(FileTest flags)</arglist>
    </member>
    <member kind="function">
      <type>FileTest &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga9a6f5470f667596e897f5bfbd1068283</anchor>
      <arglist>(FileTest &amp;lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileTest &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga2338446673a7c5269f4bbecaf682ba71</anchor>
      <arglist>(FileTest &amp;lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileTest &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga2219c78993a5196ca2a435a18e0fc3a7</anchor>
      <arglist>(FileTest &amp;lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>file_test</name>
      <anchorfile>group__FileUtils.html</anchorfile>
      <anchor>ga0b2fce78896a9a84f7ea3a5646cc7d36</anchor>
      <arglist>(const std::string &amp;filename, FileTest test)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mkstemp</name>
      <anchorfile>group__FileUtils.html</anchorfile>
      <anchor>gae4c8d716bd109b6b8e1420a8c20b3507</anchor>
      <arglist>(std::string &amp;filename_template)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>file_open_tmp</name>
      <anchorfile>group__FileUtils.html</anchorfile>
      <anchor>gae91f239f1cf0123399374deed54fbf3a</anchor>
      <arglist>(std::string &amp;name_used, const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>file_open_tmp</name>
      <anchorfile>group__FileUtils.html</anchorfile>
      <anchor>ga682379de4ea119540b4bdc1759e93e1d</anchor>
      <arglist>(std::string &amp;name_used)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>file_get_contents</name>
      <anchorfile>group__FileUtils.html</anchorfile>
      <anchor>ga835da54212fe78e833ac55b49150b989</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>file_set_contents</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a4c6c4cb2115f410b15f09634909b0b7c</anchor>
      <arglist>(const std::string &amp;filename, const gchar *contents, gssize length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>file_set_contents</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a3e51edee26822f97749f589138776850</anchor>
      <arglist>(const std::string &amp;filename, const std::string &amp;contents)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga0dd0a8800b6311ee8f3867eb27a72ae5</anchor>
      <arglist>(IOFlags lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga95be842cf20172964fbec282be81135e</anchor>
      <arglist>(IOFlags lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gad61c57b0678c703e8a14230d18bacff7</anchor>
      <arglist>(IOFlags lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga548c1cb09208fef57e5d0b3c992d71b9</anchor>
      <arglist>(IOFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gac3539f6df5e0c0658726f4f0573146f9</anchor>
      <arglist>(IOFlags &amp;lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gac7ce19021a408224765321b8c6c5e5e1</anchor>
      <arglist>(IOFlags &amp;lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga2180a5c566ced37bbeb37050d9632da9</anchor>
      <arglist>(IOFlags &amp;lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gab5937e9164f36f75ba87fd67903348d5</anchor>
      <arglist>(IOCondition lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gad2276da64a2e0932bed1d380ff4cc6c7</anchor>
      <arglist>(IOCondition lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga6416bbf923045261beb85241fff8ef0d</anchor>
      <arglist>(IOCondition lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga85461947d24f306cefd2fe17999deb97</anchor>
      <arglist>(IOCondition flags)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga8269a01826f8737d98ab0d345a0004f4</anchor>
      <arglist>(IOCondition &amp;lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaa8edf211ac636c53cdc03be5b086253b</anchor>
      <arglist>(IOCondition &amp;lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga995d6d5d01db67af62661bcd5dfd1ad6</anchor>
      <arglist>(IOCondition &amp;lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; IOChannel &gt;</type>
      <name>wrap</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a671306f4a3a0cae5ab4d7a9d54886592</anchor>
      <arglist>(GIOChannel *gobject, bool take_copy=false)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gabac5e1493392116b118e4d1048e3fef0</anchor>
      <arglist>(KeyFileFlags lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga62e7dc772f6045c2994a9c6b6f1c8dc2</anchor>
      <arglist>(KeyFileFlags lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gacc28b21831114895abfdbae6c1908114</anchor>
      <arglist>(KeyFileFlags lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gab99ff1d7c6d96da2ddfcfd1c4954e9b6</anchor>
      <arglist>(KeyFileFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga7096a34594825c90d7b6257935a62eb1</anchor>
      <arglist>(KeyFileFlags &amp;lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga2fce9d9b90f298093def1368b4114b31</anchor>
      <arglist>(KeyFileFlags &amp;lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gac90869f74a743e2f99f55708c28a585d</anchor>
      <arglist>(KeyFileFlags &amp;lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FormatSizeFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga55c3ed59e5e0f11fe51ae823c9ebd8c5</anchor>
      <arglist>(FormatSizeFlags lhs, FormatSizeFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FormatSizeFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gac7645ac7c1188da3a4bdb7a5b52145be</anchor>
      <arglist>(FormatSizeFlags lhs, FormatSizeFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FormatSizeFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gac1a95f6b60212d09d58f2d5f79c2ed55</anchor>
      <arglist>(FormatSizeFlags lhs, FormatSizeFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FormatSizeFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga0ae9e277d1b96ba75f89aad2c449951a</anchor>
      <arglist>(FormatSizeFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>FormatSizeFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gad0242df3176de300921be12195b30066</anchor>
      <arglist>(FormatSizeFlags &amp;lhs, FormatSizeFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FormatSizeFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gafdcdb75e1742aaa5131ecd7279f3689c</anchor>
      <arglist>(FormatSizeFlags &amp;lhs, FormatSizeFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FormatSizeFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga472fd7f4cc0a950e7b9ec14f0d89f060</anchor>
      <arglist>(FormatSizeFlags &amp;lhs, FormatSizeFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_application_name</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga9c2f67828083d74925b23c59ab868698</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_application_name</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga40e45835b7b461cba0f7a10fbb63c0d3</anchor>
      <arglist>(const Glib::ustring &amp;application_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_prgname</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga391655dededb496010eee2e92d0f1fdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_prgname</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga7d5c429822c09048892c4dee9c8e08c1</anchor>
      <arglist>(const std::string &amp;prgname)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getenv</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga5e186fdb08835342a5866b11fe787ebb</anchor>
      <arglist>(const std::string &amp;variable, bool &amp;found)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getenv</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga8e2c8f250aa7f059956737851ace08f6</anchor>
      <arglist>(const std::string &amp;variable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setenv</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga862657f21e5a930541d048a920204f59</anchor>
      <arglist>(const std::string &amp;variable, const std::string &amp;value, bool overwrite=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsetenv</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga6fb89001630714ec9ee5244cab56343e</anchor>
      <arglist>(const std::string &amp;variable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; std::string &gt;</type>
      <name>listenv</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga350a5f6f1ae631f748c89d8dbe7557df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_user_name</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga52964bfd712e8c9e688f668da51f3ed9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_real_name</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga30692e3263e66868878f535e0b7c9722</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_home_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga9412ea70c7fea058c03211dac318f8e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_tmp_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gac42272146fd9320958132f1591d28991</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_current_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga06d93c95572d6a382b8cc4e09dd5a339</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_user_special_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gabc928a4e477df53f90e221a854cc73cb</anchor>
      <arglist>(GUserDirectory directory)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_user_special_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga33289a74049470bc23a3859ba8b310c5</anchor>
      <arglist>(UserDirectory directory)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_user_data_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga821b704b5ede1583e4057990976d394b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_user_config_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gae517b931f4753abcd48adb2769a8fc48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>get_system_data_dirs</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga3a957e23dc92b928045135d4a5c6aec9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>get_system_config_dirs</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga7ac473ccb6ff59400b62b9396d1b72bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_user_cache_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gaa68121f26e82df1c293c82b89c8998e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>path_is_absolute</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gad82525f39f7408f97f2c096c4f721b3b</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>path_skip_root</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga306eee64abc3d28993895b826f4dd533</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>path_get_basename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga20ebf2917a7fce5d1901568017b95a35</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>path_get_dirname</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gae03457226c4239a74b83486739521434</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_filename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gaa4a70bf050b3f318f87049ed30206a9a</anchor>
      <arglist>(const Glib::ArrayHandle&lt; std::string &gt; &amp;elements)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_filename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gada06023cc39be3a44eb68e38d6cbea6c</anchor>
      <arglist>(const std::string &amp;elem1, const std::string &amp;elem2)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_filename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gaf2be471b98cb5d47c9a30c084f87d9a7</anchor>
      <arglist>(const std::string &amp;elem1, const std::string &amp;elem2, const std::string &amp;elem3)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_filename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gab342ab4856f3de7a5bc69a36773d7fb3</anchor>
      <arglist>(const std::string &amp;elem1, const std::string &amp;elem2, const std::string &amp;elem3, const std::string &amp;elem4)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_filename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga95d2bc18e3b0974f909243aca9970476</anchor>
      <arglist>(const std::string &amp;elem1, const std::string &amp;elem2, const std::string &amp;elem3, const std::string &amp;elem4, const std::string &amp;elem5)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_filename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga8b726f15e39f873bb0174d26d8a636a6</anchor>
      <arglist>(const std::string &amp;elem1, const std::string &amp;elem2, const std::string &amp;elem3, const std::string &amp;elem4, const std::string &amp;elem5, const std::string &amp;elem6)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_filename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gaea9f342e6f620944625d48194622cdc6</anchor>
      <arglist>(const std::string &amp;elem1, const std::string &amp;elem2, const std::string &amp;elem3, const std::string &amp;elem4, const std::string &amp;elem5, const std::string &amp;elem6, const std::string &amp;elem7)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_filename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga4349eeddfaee3e22194bc511d1e92873</anchor>
      <arglist>(const std::string &amp;elem1, const std::string &amp;elem2, const std::string &amp;elem3, const std::string &amp;elem4, const std::string &amp;elem5, const std::string &amp;elem6, const std::string &amp;elem7, const std::string &amp;elem8)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_filename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gafb17c98037af155ff8c46499bfbc5d2d</anchor>
      <arglist>(const std::string &amp;elem1, const std::string &amp;elem2, const std::string &amp;elem3, const std::string &amp;elem4, const std::string &amp;elem5, const std::string &amp;elem6, const std::string &amp;elem7, const std::string &amp;elem8, const std::string &amp;elem9)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_path</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga6afc89d45cc34f3cfce4a55f3f5e7afa</anchor>
      <arglist>(const std::string &amp;separator, const Glib::ArrayHandle&lt; std::string &gt; &amp;elements)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>find_program_in_path</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gaa4c4ecb9a3eb803ae6d9dee51e1e5b14</anchor>
      <arglist>(const std::string &amp;program)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>format_size</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga496c472c5f7234a09924eb1d30b93f44</anchor>
      <arglist>(guint64 size, FormatSizeFlags flags=FORMAT_SIZE_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gade862759d091b90329ba8f85aa2fd010</anchor>
      <arglist>(ModuleFlags lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gac398a62a7005f25655af13a4c41fa3d5</anchor>
      <arglist>(ModuleFlags lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga333d93ef372c08c322d27ac05bda0e18</anchor>
      <arglist>(ModuleFlags lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaaa723a5b4d33e54167f7adbb18746004</anchor>
      <arglist>(ModuleFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gae9df767ea1ec74b0d9d9acce426a07a8</anchor>
      <arglist>(ModuleFlags &amp;lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaed5693619fa4f5ebd1389c697003129d</anchor>
      <arglist>(ModuleFlags &amp;lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga8e73a634c6441630eddf8805b22dd163</anchor>
      <arglist>(ModuleFlags &amp;lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexCompileFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga5c44b3a4eee7eefbb1f2d1d8f22642ca</anchor>
      <arglist>(RegexCompileFlags lhs, RegexCompileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexCompileFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga02877e07b7d38f5b21db4967b86486f2</anchor>
      <arglist>(RegexCompileFlags lhs, RegexCompileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexCompileFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga69068f48bbea92cdd3cc7d69fdc017e1</anchor>
      <arglist>(RegexCompileFlags lhs, RegexCompileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexCompileFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gacb650222b1a3f6a44e72df95d815a7f8</anchor>
      <arglist>(RegexCompileFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>RegexCompileFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gae6fd65d5a674d2e2e453793d86fa64cd</anchor>
      <arglist>(RegexCompileFlags &amp;lhs, RegexCompileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexCompileFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaa01d49815b8b6e1796c063d889cfb705</anchor>
      <arglist>(RegexCompileFlags &amp;lhs, RegexCompileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexCompileFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga1425051a4ffed939a1bff1e0543c9498</anchor>
      <arglist>(RegexCompileFlags &amp;lhs, RegexCompileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexMatchFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gab63da3a959cbd5f00f4fa535e35eda08</anchor>
      <arglist>(RegexMatchFlags lhs, RegexMatchFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexMatchFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga8bac0b06494980cf1006d7b3ce82da08</anchor>
      <arglist>(RegexMatchFlags lhs, RegexMatchFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexMatchFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga06c395f619dffca3f0fc483fab302122</anchor>
      <arglist>(RegexMatchFlags lhs, RegexMatchFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexMatchFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaf192ce556cbd7ddb416e8078bdb09523</anchor>
      <arglist>(RegexMatchFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>RegexMatchFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga8f30deab298559a873d7beca40279ead</anchor>
      <arglist>(RegexMatchFlags &amp;lhs, RegexMatchFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexMatchFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gab58ecc98b067e580d45971eb6131e494</anchor>
      <arglist>(RegexMatchFlags &amp;lhs, RegexMatchFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexMatchFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga402d81f594d95305aa6e275aa74126ae</anchor>
      <arglist>(RegexMatchFlags &amp;lhs, RegexMatchFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; std::string &gt;</type>
      <name>shell_parse_argv</name>
      <anchorfile>group__ShellUtils.html</anchorfile>
      <anchor>gabc52fcb14cfc7a5ba37ca821cc837818</anchor>
      <arglist>(const std::string &amp;command_line)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>shell_quote</name>
      <anchorfile>group__ShellUtils.html</anchorfile>
      <anchor>ga55ebfb935f2131b2ae40d339568f568c</anchor>
      <arglist>(const std::string &amp;unquoted_string)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>shell_unquote</name>
      <anchorfile>group__ShellUtils.html</anchorfile>
      <anchor>ga449dc37c6ea7e7563740df86e31c263c</anchor>
      <arglist>(const std::string &amp;quoted_string)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaba6cac919da111ebf69667bf9f8006ff</anchor>
      <arglist>(SpawnFlags lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gadd494793fc2c7d5bf1b547f690df27a6</anchor>
      <arglist>(SpawnFlags lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga84449a9a461b381f88f65435ef8389ec</anchor>
      <arglist>(SpawnFlags lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga065f45ca68d1397febf331293e4cc4de</anchor>
      <arglist>(SpawnFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gabbe289c910b34a158f8dc22bb0b0095f</anchor>
      <arglist>(SpawnFlags &amp;lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga0c9d398f7ef6682e6cb2ce9ae48f2253</anchor>
      <arglist>(SpawnFlags &amp;lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga40166fcca8eb8ec5b148c82444553927</anchor>
      <arglist>(SpawnFlags &amp;lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_async_with_pipes</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>ga68ea12be3693ed49e92312b63bef2d38</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, const Glib::ArrayHandle&lt; std::string &gt; &amp;envp, SpawnFlags flags=SPAWN_DEFAULT, const SlotSpawnChildSetup &amp;child_setup=SlotSpawnChildSetup(), Pid *child_pid=nullptr, int *standard_input=nullptr, int *standard_output=nullptr, int *standard_error=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_async_with_pipes</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>ga6d494f70dd5b914102c89083f7996486</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, SpawnFlags flags=SPAWN_DEFAULT, const SlotSpawnChildSetup &amp;child_setup=SlotSpawnChildSetup(), Pid *child_pid=nullptr, int *standard_input=nullptr, int *standard_output=nullptr, int *standard_error=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_async</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>gaa08d620227e82bccba437ecc541ef6fa</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, const Glib::ArrayHandle&lt; std::string &gt; &amp;envp, SpawnFlags flags=SPAWN_DEFAULT, const SlotSpawnChildSetup &amp;child_setup=SlotSpawnChildSetup(), Pid *child_pid=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_async</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>gab045450852e2a4dcbdecf0887d716aa6</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, SpawnFlags flags=SPAWN_DEFAULT, const SlotSpawnChildSetup &amp;child_setup=SlotSpawnChildSetup(), Pid *child_pid=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_sync</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>ga570555dc2fe25b548aaf528ac0127a1e</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, const Glib::ArrayHandle&lt; std::string &gt; &amp;envp, SpawnFlags flags=SPAWN_DEFAULT, const SlotSpawnChildSetup &amp;child_setup=SlotSpawnChildSetup(), std::string *standard_output=nullptr, std::string *standard_error=nullptr, int *exit_status=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_sync</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>ga44b768c4cd7158e32980fedbb7438a6d</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, SpawnFlags flags=SPAWN_DEFAULT, const SlotSpawnChildSetup &amp;child_setup=SlotSpawnChildSetup(), std::string *standard_output=nullptr, std::string *standard_error=nullptr, int *exit_status=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_command_line_async</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>ga648167a4af607f87763f1334fe5a472f</anchor>
      <arglist>(const std::string &amp;command_line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_command_line_sync</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>ga75961831b4dd3979bb8ab508ee3b3de7</anchor>
      <arglist>(const std::string &amp;command_line, std::string *standard_output=nullptr, std::string *standard_error=nullptr, int *exit_status=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_close_pid</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>gaaea8f41c7a08af3b2919ce64fd0c27e5</anchor>
      <arglist>(Pid pid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>thread_init</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a8e983bffd7c8cdbbbe6038fc5e6fd3cf</anchor>
      <arglist>(GThreadFunctions *vtable=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>thread_supported</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ad59d126f6197035e6f6a31e7f4d87818</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AsciiType</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga5bc1518eb5547dbb8af77b944ccaa048</anchor>
      <arglist>(AsciiType lhs, AsciiType rhs)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga9167966379cf1ba3029cfc02ddff139a</anchor>
      <arglist>(AsciiType lhs, AsciiType rhs)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga682a545ca2e86b3e162305e4f14fa8d5</anchor>
      <arglist>(AsciiType lhs, AsciiType rhs)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gad7ea47582094c6d092a8f485e1e709c6</anchor>
      <arglist>(AsciiType flags)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga69bba23f4c9a83c268d0599f241b8ebe</anchor>
      <arglist>(AsciiType &amp;lhs, AsciiType rhs)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga194de740078d985c2e2911934cadc90c</anchor>
      <arglist>(AsciiType &amp;lhs, AsciiType rhs)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gac1b0239e539cf250333fe0adc04dbb41</anchor>
      <arglist>(AsciiType &amp;lhs, AsciiType rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>uri_unescape_string</name>
      <anchorfile>group__UriUtils.html</anchorfile>
      <anchor>ga0c070cac984dc463fd60ccbdb4237e25</anchor>
      <arglist>(const std::string &amp;escaped_string, const std::string &amp;illegal_characters=std::string())</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>uri_parse_scheme</name>
      <anchorfile>group__UriUtils.html</anchorfile>
      <anchor>ga0cc4270d6796b2166964f08a5cb746b3</anchor>
      <arglist>(const std::string &amp;uri)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>uri_escape_string</name>
      <anchorfile>group__UriUtils.html</anchorfile>
      <anchor>gad902095ab5049111caa9207770b0a437</anchor>
      <arglist>(const std::string &amp;unescaped, const std::string &amp;reserved_chars_allowed=std::string(), bool allow_utf8=true)</arglist>
    </member>
    <member kind="function">
      <type>Variant&lt; Glib::ustring &gt;</type>
      <name>VariantBase::cast_dynamic&lt; Variant&lt; Glib::ustring &gt; &gt;</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a807ef11423a04d9f22d6d045fbaed27a</anchor>
      <arglist>(const VariantBase &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Variant&lt; std::string &gt;</type>
      <name>VariantBase::cast_dynamic&lt; Variant&lt; std::string &gt; &gt;</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>af44bc8b008e33a7ad5804c9a50226562</anchor>
      <arglist>(const VariantBase &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sequence&lt; Iterator &gt;</type>
      <name>sequence</name>
      <anchorfile>group__ContHandles.html</anchorfile>
      <anchor>ga76f58aa143a15c1ba422846c3176fbdc</anchor>
      <arglist>(Iterator pbegin, Iterator pend)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>add_exception_handler</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a9a79a59cac511993cfea861bebd2f391</anchor>
      <arglist>(const sigc::slot&lt; void &gt; &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ac90aee10d0b90e3d8a96a86b5394f87b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RefPtr&lt; ObjectBase &gt;</type>
      <name>wrap_interface</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a75643fed688d354848a0379d3da00133</anchor>
      <arglist>(GObject *object, bool take_copy=false)</arglist>
    </member>
    <member kind="function">
      <type>SignalTimeout</type>
      <name>signal_timeout</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>gaadb206fcc112f086f9d47c016b1f2175</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SignalIdle</type>
      <name>signal_idle</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>ga76792522d9680a05e232d3519a25f98d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SignalIO</type>
      <name>signal_io</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>gaf391654b755a32169d18be4835677376</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SignalChildWatch</type>
      <name>signal_child_watch</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>ga11ee7db80cc44ece02056a38bb049e3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>str_has_prefix</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>ga6b7e8354049756e92a97554a107618ac</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>str_has_suffix</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>ga5c4e380ffc6617ac61ca92e203e45630</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;suffix)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>strescape</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>ga35e288b5ce34cb15eeec907421d2b77c</anchor>
      <arglist>(const std::string &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>strescape</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>gad24f3547c8d6b3ec56d7f5805a11d6ab</anchor>
      <arglist>(const std::string &amp;source, const std::string &amp;exceptions)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>strcompress</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>ga85cd83bd40baf0119aac3ff0a9a5e7b2</anchor>
      <arglist>(const std::string &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>strerror</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>ga1eb869894996c91c0f69dbff96714c71</anchor>
      <arglist>(int errnum)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>strsignal</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>ga44ce9f689aff8abe1e3073b209f360d3</anchor>
      <arglist>(int signum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usleep</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a5d75264c8b47f13fb33f973b0d4fc73e</anchor>
      <arglist>(unsigned long microseconds)</arglist>
    </member>
    <member kind="function">
      <type>gunichar</type>
      <name>get_unichar_from_std_iterator</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a1053052aad41d0dcf51f36c345bf4625</anchor>
      <arglist>(std::string::const_iterator pos)</arglist>
    </member>
    <member kind="function">
      <type>T::BaseObjectType *</type>
      <name>unwrap</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a2f73967c03d89b0bd6f730f6c36f748d</anchor>
      <arglist>(T *ptr)</arglist>
    </member>
    <member kind="function">
      <type>const T::BaseObjectType *</type>
      <name>unwrap</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a9841353e0b6ffe28fd74abe40c4d005d</anchor>
      <arglist>(const T *ptr)</arglist>
    </member>
    <member kind="function">
      <type>T::BaseObjectType *</type>
      <name>unwrap</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ac72231155b9573af4b4d5e6ce6494620</anchor>
      <arglist>(const Glib::RefPtr&lt; T &gt; &amp;ptr)</arglist>
    </member>
    <member kind="function">
      <type>const T::BaseObjectType *</type>
      <name>unwrap</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ad806817113ad836cdd8ef5e3913316ab</anchor>
      <arglist>(const Glib::RefPtr&lt; const T &gt; &amp;ptr)</arglist>
    </member>
    <member kind="function">
      <type>T::BaseObjectType *</type>
      <name>unwrap_copy</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a4e505dac0cb5b57703424cb12fa5a84f</anchor>
      <arglist>(const T &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>T::BaseObjectType *</type>
      <name>unwrap_copy</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a10a4206b41c1c361c29750d76924a752</anchor>
      <arglist>(const Glib::RefPtr&lt; T &gt; &amp;ptr)</arglist>
    </member>
    <member kind="function">
      <type>const T::BaseObjectType *</type>
      <name>unwrap_copy</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a2792c33cdf2e70d10e432c6cf0fcac76</anchor>
      <arglist>(const Glib::RefPtr&lt; const T &gt; &amp;ptr)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Drive &gt;</type>
      <name>wrap</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a3c4b3f9afbb1f72fcd0db0fb9d96a23e</anchor>
      <arglist>(GDrive *object, bool take_copy)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::File &gt;</type>
      <name>wrap</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>aa536133405cc52c5887f4b87879e3bd6</anchor>
      <arglist>(GFile *object, bool take_copy)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Mount &gt;</type>
      <name>wrap</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>aecec41aa86f5a57489c23f367593802c</anchor>
      <arglist>(GMount *object, bool take_copy)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Volume &gt;</type>
      <name>wrap</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>aa4ad6dff9c5f095f3b45b6af8124c883</anchor>
      <arglist>(GVolume *object, bool take_copy)</arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_BOOL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a0784d542e9b53c186bba6d96c131a1b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_BYTE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a315351b721918e130a75fa64e8f595ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_INT16</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a88fcc49187b1e775333edd0e31fe9503</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_UINT16</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a7e31fbcbbfdd63b923e5ba30157af2c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_INT32</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a1c7d03f6e8a214c0c9e8f93912900803</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_UINT32</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>aea985e724e3ea31a3a0ba801ab0d34ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_INT64</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a9fda1870c01b8514588eaf17c1f11700</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_UINT64</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a52cc2e5d30a3707d03503dfbafba0a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_DOUBLE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a1e01c96d6a7a33b47c0ce5d3678c3cc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_STRING</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a5234d463a42d95bf51ed31795aa214b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_OBJECT_PATH</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>acb229115cd457c6f4c46db53179bcf09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_SIGNATURE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a1ae362fd54a0dca4ff11dc91eb91e807</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_VARIANT</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a423dc734d6f45d88da308c355e1daad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_HANDLE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a42a8f15e75bbb853c29f82b226b8524d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_UNIT</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a401be57899373ddc4ea3fa90dd082c88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_ANY</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>abb0b65abaef0c0f96b5dd53c2d41d50f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_BASIC</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>af3dd5a8ce4eea408f082ec37239f8594</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_MAYBE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>afa3c807de47227c78826fbd0c1ff1c59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_ARRAY</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a44335d30ad2929ba1cb03f6b218f61f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_TUPLE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ae4f961225712c4218460ed1a0d09e0bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_DICT_ENTRY</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a2351713cde6ee899e9cd5dc6792424d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_DICTIONARY</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a642324aa1ad05df695012086ea4a4ee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_STRING_ARRAY</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>aeba26de9c5d32fb0d5fd14a66279d930</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_OBJECT_PATH_ARRAY</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>adfdadf7e0a33345e22924c238987272f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_BYTESTRING</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ad20daf2fe6fa1235624d4180e949ad5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_BYTESTRING_ARRAY</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a046eff603c12c9414430468883cc609b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Glib::Ascii</name>
    <filename>namespaceGlib_1_1Ascii.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>isalnum</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>a237f239d63fea6102675733dc5ad4532</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isalpha</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>a0b553edea22d284c188942fab794cc78</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iscntrl</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>afa8fe78a0c26cc3827c6240785aa135d</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isdigit</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>a65a4e1ccf3858e96bcedc19d2f4b11dd</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isgraph</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>a7f484ef6bd6d06df723e31b357f868a3</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>islower</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>acae72029ba931a9921a685f5a9aae892</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isprint</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>a8157fffa4686d541c5953fc8e12f5cfa</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ispunct</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>a7fb86bc4209b57cfb3c4f52b841d73e4</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isspace</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>aa09ae30b62f155b8921cc9982342a314</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isupper</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>a7f02fe9caa1467a4cfd4de81b9f29ac5</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isxdigit</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>ad56e2eca24891cbfbc94c5466f33ba7e</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>tolower</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>a441978a247c1dc46bbe7159fa25c4365</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>toupper</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>affdbf0a8cc3cf286605a0ead51e524f6</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>digit_value</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>a597106ad0bd771bef0698ca1482db880</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>xdigit_value</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>a06d4bb1120cb8b48f7a8a4f1e9aeab53</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>strtod</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>gaa44aba9faa6575d4881b1fe779464f6b</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>strtod</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>ga6465a8320d790115c41a2c76d1d3233c</anchor>
      <arglist>(const std::string &amp;str, std::string::size_type &amp;end_index, std::string::size_type start_index=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>dtostr</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>gac740e6c99bca5896ccbfc12b621491ac</anchor>
      <arglist>(double d)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Glib::Base64</name>
    <filename>namespaceGlib_1_1Base64.html</filename>
    <member kind="function">
      <type>std::string</type>
      <name>encode</name>
      <anchorfile>namespaceGlib_1_1Base64.html</anchorfile>
      <anchor>a2f4df7504060eb7114ee58405b406987</anchor>
      <arglist>(const std::string &amp;source, bool break_lines=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>decode</name>
      <anchorfile>namespaceGlib_1_1Base64.html</anchorfile>
      <anchor>a761e98d0e8c40b5510b5924d959b7c21</anchor>
      <arglist>(const std::string &amp;source)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Glib::Container_Helpers</name>
    <filename>namespaceGlib_1_1Container__Helpers.html</filename>
    <class kind="class">Glib::Container_Helpers::ArrayHandleIterator</class>
    <class kind="class">Glib::Container_Helpers::ArrayIterator</class>
    <class kind="class">Glib::Container_Helpers::ArrayKeeper</class>
    <class kind="class">Glib::Container_Helpers::GListKeeper</class>
    <class kind="class">Glib::Container_Helpers::GSListKeeper</class>
    <class kind="class">Glib::Container_Helpers::ListHandleIterator</class>
    <class kind="class">Glib::Container_Helpers::ListIterator</class>
    <class kind="class">Glib::Container_Helpers::SListHandleIterator</class>
    <class kind="class">Glib::Container_Helpers::SListIterator</class>
    <class kind="struct">Glib::Container_Helpers::TypeTraits</class>
    <class kind="struct">Glib::Container_Helpers::TypeTraits&lt; Glib::RefPtr&lt; Gio::Drive &gt; &gt;</class>
    <class kind="struct">Glib::Container_Helpers::TypeTraits&lt; Glib::RefPtr&lt; Gio::File &gt; &gt;</class>
    <class kind="struct">Glib::Container_Helpers::TypeTraits&lt; Glib::RefPtr&lt; Gio::Mount &gt; &gt;</class>
    <class kind="struct">Glib::Container_Helpers::TypeTraits&lt; Glib::RefPtr&lt; Gio::Volume &gt; &gt;</class>
  </compound>
  <compound kind="namespace">
    <name>Glib::Markup</name>
    <filename>namespaceGlib_1_1Markup.html</filename>
    <class kind="class">Glib::Markup::AttributeKeyLess</class>
    <class kind="class">Glib::Markup::ParseContext</class>
    <class kind="class">Glib::Markup::Parser</class>
    <member kind="typedef">
      <type>Glib::MarkupError</type>
      <name>Error</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>gaa370f40dc82086ee7aa5456657db1244</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ParseFlags</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaa4fcaf917b6eb2aa085817e83b0a4108</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DO_NOT_USE_THIS_UNSUPPORTED_FLAG</name>
      <anchorfile>namespaceGlib_1_1Markup.html</anchorfile>
      <anchor>gaa4fcaf917b6eb2aa085817e83b0a4108a3f48cb56dd56d529c9379ae244441e90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TREAT_CDATA_AS_TEXT</name>
      <anchorfile>namespaceGlib_1_1Markup.html</anchorfile>
      <anchor>gaa4fcaf917b6eb2aa085817e83b0a4108adc8bc2a2d501a339db31b5e3a8351646</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PREFIX_ERROR_POSITION</name>
      <anchorfile>namespaceGlib_1_1Markup.html</anchorfile>
      <anchor>gaa4fcaf917b6eb2aa085817e83b0a4108aad5bd1990be534b2dc3a73f69b283114</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IGNORE_QUALIFIED</name>
      <anchorfile>namespaceGlib_1_1Markup.html</anchorfile>
      <anchor>gaa4fcaf917b6eb2aa085817e83b0a4108ab6113dcacb1e8b362936ef34c7bbf301</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>escape_text</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>gac95c5843d8dada8449f90f2fd635feb1</anchor>
      <arglist>(const Glib::ustring &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga330303c9d78eb78547012d549d4bb018</anchor>
      <arglist>(ParseFlags lhs, ParseFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gad6a9bd8e738b34f5ffc50ac6428995f2</anchor>
      <arglist>(ParseFlags lhs, ParseFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gab059cb7acda2b29eb2066958fc71951a</anchor>
      <arglist>(ParseFlags lhs, ParseFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga1fb97b62ae844c056b400e2813a21ee2</anchor>
      <arglist>(ParseFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga6b24d718f166cb352be94ee6e4090296</anchor>
      <arglist>(ParseFlags &amp;lhs, ParseFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga3b614b40b2e11761c0ee920ec572c87a</anchor>
      <arglist>(ParseFlags &amp;lhs, ParseFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaf59b9479390c508dff23dba221177bcc</anchor>
      <arglist>(ParseFlags &amp;lhs, ParseFlags rhs)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Glib::Threads</name>
    <filename>namespaceGlib_1_1Threads.html</filename>
    <class kind="class">Glib::Threads::Cond</class>
    <class kind="class">Glib::Threads::Mutex</class>
    <class kind="class">Glib::Threads::Private</class>
    <class kind="class">Glib::Threads::RecMutex</class>
    <class kind="class">Glib::Threads::RWLock</class>
    <class kind="class">Glib::Threads::Thread</class>
    <class kind="class">Glib::Threads::ThreadError</class>
    <member kind="enumeration">
      <type></type>
      <name>NotLock</name>
      <anchorfile>group__Threads.html</anchorfile>
      <anchor>ga298a91d4f9bcfd13d3f9c342bcc8161a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_LOCK</name>
      <anchorfile>group__Threads.html</anchorfile>
      <anchor>gga298a91d4f9bcfd13d3f9c342bcc8161aa67a1c7fd98ae71afc32ad7c22bfb0a87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TryLock</name>
      <anchorfile>group__Threads.html</anchorfile>
      <anchor>ga58eba5840db7a5440b7c37bf17a5bb74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRY_LOCK</name>
      <anchorfile>group__Threads.html</anchorfile>
      <anchor>gga58eba5840db7a5440b7c37bf17a5bb74aca992b53c9825f414b1b5b308228beeb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Glib::Unicode</name>
    <filename>namespaceGlib_1_1Unicode.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>validate</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>ab64054c4576955fd0285dae603fad4bc</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isalnum</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>abd50a6139564bb0d2351855470d1a69b</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isalpha</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>a9620b1df5b96a81a44cebbee81b2f09a</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iscntrl</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>a937030a624b77cf949f95c0e9a8c6461</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isdigit</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>a1f82bfebc6c5094bfb6372a6ba4c4019</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isgraph</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>a8c3c04d4dcdafc485266a393da455ee3</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>islower</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>aeef7ef9a28faaa25215b1c5e94bab1dd</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isprint</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>ae4d9f8199f86bd64d269854dffb92008</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ispunct</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>ab81127c9fc1a6ddc04f3f7171c23111b</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isspace</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>aa78d1b888a48ab92ddcbc6122592478f</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isupper</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>a042c4000427af2f777150f5d88f3d154</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isxdigit</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>a059de050d5449076c62756a490c91eba</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>istitle</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>a083a3cf6b6fd165b0e272ad1e4c6ac33</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isdefined</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>a8d4c5c43e6892e7567d3e30f817ff9a2</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iswide</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>afa1f9e1a5bcba3dc2e2c6bf4d39620c7</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>gunichar</type>
      <name>toupper</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>a1abe6ec99b03e1a4eb4462251e088e85</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>gunichar</type>
      <name>tolower</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>a0b6fd738acb468a21fd83e66af9b67a8</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>gunichar</type>
      <name>totitle</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>a5c4a3831dfd19f0a05aaea992795f939</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>digit_value</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>a5cf00f04bd69129448f48cd278bff522</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>xdigit_value</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>a8f036631847c5058f13196a9f815822b</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>Glib::UnicodeType</type>
      <name>type</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>a042d1c3fdb1a22daf647211210af80c3</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>Glib::UnicodeBreakType</type>
      <name>break_type</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>ac426083d525f1e30e4b5bff28962575b</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Base64</name>
    <title>Base64 routines</title>
    <filename>group__Base64.html</filename>
    <namespace>Glib::Base64</namespace>
  </compound>
  <compound kind="group">
    <name>CharsetConv</name>
    <title>Character Set Conversion</title>
    <filename>group__CharsetConv.html</filename>
    <class kind="class">Glib::ConvertError</class>
    <class kind="class">Glib::IConv</class>
    <member kind="function">
      <type>bool</type>
      <name>get_charset</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gabf5fac564c47a7a9ad6037044c3909f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_charset</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>ga88965337df48a173a6b013e8243e4631</anchor>
      <arglist>(std::string &amp;charset)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>convert</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>ga58f7e4556c436a96c64b186bbc8f7f4c</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;to_codeset, const std::string &amp;from_codeset)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>convert_with_fallback</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>ga40b5aa172fabd1f3dbf50a962d0d351f</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;to_codeset, const std::string &amp;from_codeset)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>convert_with_fallback</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gaf1b091e4397a7637e884148484b1f71e</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;to_codeset, const std::string &amp;from_codeset, const Glib::ustring &amp;fallback)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>locale_to_utf8</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>ga4517b17f2aad4cd5c0e0640de212d928</anchor>
      <arglist>(const std::string &amp;opsys_string)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>locale_from_utf8</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gacc062729285890a7e9b22bece6fb987c</anchor>
      <arglist>(const Glib::ustring &amp;utf8_string)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>filename_to_utf8</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>ga6cf95dc00505401594260a360d70c17b</anchor>
      <arglist>(const std::string &amp;opsys_string)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>filename_from_utf8</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>ga2bd94064ad97b43324a7854b62f0835b</anchor>
      <arglist>(const Glib::ustring &amp;utf8_string)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>filename_from_uri</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gada23cd7f7dc8eb25e99b867a55551763</anchor>
      <arglist>(const Glib::ustring &amp;uri, Glib::ustring &amp;hostname)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>filename_from_uri</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gab1cb94f4a4a70bad06b715fb14a252d9</anchor>
      <arglist>(const Glib::ustring &amp;uri)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>filename_to_uri</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gae1b2f056bde3fbab578c602fe42e3de9</anchor>
      <arglist>(const std::string &amp;filename, const Glib::ustring &amp;hostname)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>filename_to_uri</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gaaf69aec83665229cc06596cf627d9d5a</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>filename_display_basename</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>ga05dd67157ad35da4401263247b6f4d81</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>filename_display_name</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gabc1b404cc965f3da6beecddfe2623afc</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>DBus</name>
    <title>D-Bus API</title>
    <filename>group__DBus.html</filename>
    <class kind="class">Gio::DBus::AuthObserver</class>
    <class kind="class">Gio::DBus::Connection</class>
    <class kind="class">Gio::DBus::InterfaceVTable</class>
    <class kind="class">Gio::DBus::AnnotationInfo</class>
    <class kind="class">Gio::DBus::ArgInfo</class>
    <class kind="class">Gio::DBus::MethodInfo</class>
    <class kind="class">Gio::DBus::SignalInfo</class>
    <class kind="class">Gio::DBus::PropertyInfo</class>
    <class kind="class">Gio::DBus::InterfaceInfo</class>
    <class kind="class">Gio::DBus::NodeInfo</class>
    <class kind="class">Gio::DBus::Message</class>
    <class kind="class">Gio::DBus::MethodInvocation</class>
    <class kind="class">Gio::DBus::Proxy</class>
    <class kind="class">Gio::DBus::Server</class>
    <class kind="class">Gio::DBus::SubtreeVTable</class>
    <member kind="typedef">
      <type>sigc::slot&lt; void, const Glib::RefPtr&lt; Gio::DBus::Connection &gt; &amp;, Glib::ustring &gt;</type>
      <name>SlotBusAcquired</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>gab7640ad4f168b22492f5783148ad0d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void, const Glib::RefPtr&lt; Gio::DBus::Connection &gt; &amp;, Glib::ustring &gt;</type>
      <name>SlotNameAcquired</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga41021af407491538d8bfd65ab63f456a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void, const Glib::RefPtr&lt; Gio::DBus::Connection &gt; &amp;, Glib::ustring &gt;</type>
      <name>SlotNameLost</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga69b58dba209c6b3a5f5f20fcd492c973</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void, const Glib::RefPtr&lt; Gio::DBus::Connection &gt; &amp;, Glib::ustring, const Glib::ustring &amp; &gt;</type>
      <name>SlotNameAppeared</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga200acb252ecaa113828e23b9001a7a8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void, const Glib::RefPtr&lt; Gio::DBus::Connection &gt; &amp;, Glib::ustring &gt;</type>
      <name>SlotNameVanished</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga01da22e2e222d03382d93e6741be6935</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_address</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>gab2c056ac3cce34b4a58df19166d48fae</anchor>
      <arglist>(const std::string &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_supported</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga2f8d4a3d5bda1d3fcc4f4f3c8cc0c214</anchor>
      <arglist>(const std::string &amp;address)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_stream</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga2d53e540686789c834cef9a3ac447bf4</anchor>
      <arglist>(const std::string &amp;address, const SlotAsyncReady slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; IOStream &gt;</type>
      <name>get_stream_finish</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga8fa5586dec918dfa553dab97f0f8e342</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res, std::string &amp;out_guid)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; IOStream &gt;</type>
      <name>get_stream_finish</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga7da9ac3910fa800a6a42b2667b1a0135</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; IOStream &gt;</type>
      <name>get_stream_sync</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga95b08ddb9dedf51b585fa7a5da4f4233</anchor>
      <arglist>(const std::string &amp;address, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, std::string &amp;out_guid)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; IOStream &gt;</type>
      <name>get_stream_sync</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>gaec661c3dff45b4a5626b9dc1bc586b3d</anchor>
      <arglist>(const std::string &amp;address, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_for_bus_sync</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga3acef7d113b30124fe11e88c2d2a60a4</anchor>
      <arglist>(BusType bus_type, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_remote_error</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga2b6d40f35340690128b06b289388d120</anchor>
      <arglist>(const Glib::Error &amp;error)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_remote_error</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga94461b5c18260b017f3404d82ad5321a</anchor>
      <arglist>(const Glib::Error &amp;error)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>strip_remote_error</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga2f38119e0765fd1654363fcdee6e4c76</anchor>
      <arglist>(Glib::Error &amp;error)</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>own_name</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga6e63011eb298f04364d38d44ae51d1e5</anchor>
      <arglist>(BusType bus_type, const Glib::ustring &amp;name, const SlotBusAcquired &amp;bus_acquired_slot=SlotBusAcquired(), const SlotNameAcquired &amp;name_acquired_slot=SlotNameAcquired(), const SlotNameLost &amp;name_lost_slot=SlotNameLost(), BusNameOwnerFlags flags=Gio::DBus::BUS_NAME_OWNER_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>generate_guid</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga1f11b499bbff8835c429c0fd534df4b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_guid</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>gaf95791c56c136194a67f3855a4416966</anchor>
      <arglist>(const std::string &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_name</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga05c67dee67b2ccccdcb0c19714abd5e1</anchor>
      <arglist>(const Glib::ustring &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_unique_name</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga04c3f3efa55c252ce9299a934f3bc9ed</anchor>
      <arglist>(const Glib::ustring &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_member_name</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga2383c7d151a59adc91e4fbfbd1e4652a</anchor>
      <arglist>(const Glib::ustring &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_interface_name</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>gaf8f12ce74f2521c357d814a0105359ea</anchor>
      <arglist>(const Glib::ustring &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>watch_name</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>gaa202af27755f2ea8d0736f8ab3a75dba</anchor>
      <arglist>(BusType bus_type, const Glib::ustring &amp;name, const SlotNameAppeared &amp;name_appeared_slot=SlotNameAppeared(), const SlotNameVanished &amp;name_vanished_slot=SlotNameVanished(), BusNameWatcherFlags flags=Gio::DBus::BUS_NAME_WATCHER_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>watch_name</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>gaf07c31497172ba813b9322dad4570927</anchor>
      <arglist>(const Glib::RefPtr&lt; Connection &gt; &amp;connection, const Glib::ustring &amp;name, const SlotNameAppeared &amp;name_appeared_slot=SlotNameAppeared(), const SlotNameVanished &amp;name_vanished_slot=SlotNameVanished(), BusNameWatcherFlags flags=Gio::DBus::BUS_NAME_WATCHER_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unwatch_name</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>gaa5106315b09d6fc5ad019ecfcc8d5342</anchor>
      <arglist>(guint watcher_id)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>FileUtils</name>
    <title>File Utilities</title>
    <filename>group__FileUtils.html</filename>
    <class kind="class">Glib::FileError</class>
    <class kind="class">Glib::DirIterator</class>
    <class kind="class">Glib::Dir</class>
    <member kind="function">
      <type>bool</type>
      <name>file_test</name>
      <anchorfile>group__FileUtils.html</anchorfile>
      <anchor>ga0b2fce78896a9a84f7ea3a5646cc7d36</anchor>
      <arglist>(const std::string &amp;filename, FileTest test)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mkstemp</name>
      <anchorfile>group__FileUtils.html</anchorfile>
      <anchor>gae4c8d716bd109b6b8e1420a8c20b3507</anchor>
      <arglist>(std::string &amp;filename_template)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>file_open_tmp</name>
      <anchorfile>group__FileUtils.html</anchorfile>
      <anchor>gae91f239f1cf0123399374deed54fbf3a</anchor>
      <arglist>(std::string &amp;name_used, const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>file_open_tmp</name>
      <anchorfile>group__FileUtils.html</anchorfile>
      <anchor>ga682379de4ea119540b4bdc1759e93e1d</anchor>
      <arglist>(std::string &amp;name_used)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>file_get_contents</name>
      <anchorfile>group__FileUtils.html</anchorfile>
      <anchor>ga835da54212fe78e833ac55b49150b989</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>glibmmValue</name>
    <title>Generic Values</title>
    <filename>group__glibmmValue.html</filename>
    <class kind="class">Glib::Value&lt; bool &gt;</class>
    <class kind="class">Glib::Value&lt; char &gt;</class>
    <class kind="class">Glib::Value&lt; signed char &gt;</class>
    <class kind="class">Glib::Value&lt; unsigned char &gt;</class>
    <class kind="class">Glib::Value&lt; int &gt;</class>
    <class kind="class">Glib::Value&lt; unsigned int &gt;</class>
    <class kind="class">Glib::Value&lt; long &gt;</class>
    <class kind="class">Glib::Value&lt; unsigned long &gt;</class>
    <class kind="class">Glib::Value&lt; long long &gt;</class>
    <class kind="class">Glib::Value&lt; unsigned long long &gt;</class>
    <class kind="class">Glib::Value&lt; float &gt;</class>
    <class kind="class">Glib::Value&lt; double &gt;</class>
    <class kind="class">Glib::Value&lt; void * &gt;</class>
    <class kind="class">Glib::ValueBase</class>
    <class kind="class">Glib::ValueBase_Boxed</class>
    <class kind="class">Glib::ValueBase_Object</class>
    <class kind="class">Glib::ValueBase_Enum</class>
    <class kind="class">Glib::ValueBase_Flags</class>
    <class kind="class">Glib::ValueBase_String</class>
    <class kind="class">Glib::Value_Boxed</class>
    <class kind="class">Glib::Value&lt; Glib::RefPtr&lt; T &gt; &gt;</class>
    <class kind="class">Glib::Value&lt; Glib::RefPtr&lt; const T &gt; &gt;</class>
    <class kind="class">Glib::Value&lt; std::string &gt;</class>
    <class kind="class">Glib::Value&lt; Glib::ustring &gt;</class>
    <class kind="class">Glib::Value_Enum</class>
    <class kind="class">Glib::Value_Flags</class>
    <class kind="class">Glib::Value_Pointer</class>
    <class kind="class">Glib::Value</class>
    <class kind="class">Glib::Value&lt; T * &gt;</class>
    <class kind="class">Glib::Value&lt; const T * &gt;</class>
  </compound>
  <compound kind="group">
    <name>ContHandles</name>
    <title>Generic container converters</title>
    <filename>group__ContHandles.html</filename>
    <subgroup>ContHelpers</subgroup>
    <class kind="class">Glib::ArrayHandle</class>
    <class kind="class">Glib::Sequence</class>
    <class kind="class">Glib::ListHandle</class>
    <class kind="class">Glib::SListHandle</class>
    <member kind="typedef">
      <type>ArrayHandle&lt; Glib::ustring &gt;</type>
      <name>StringArrayHandle</name>
      <anchorfile>group__ContHandles.html</anchorfile>
      <anchor>ga66b4a4b57f64be3fdc1972d8bf93723a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OwnershipType</name>
      <anchorfile>group__ContHandles.html</anchorfile>
      <anchor>ga64c27560b41710ccf64a3679a3ba3f20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OWNERSHIP_NONE</name>
      <anchorfile>group__ContHandles.html</anchorfile>
      <anchor>gga64c27560b41710ccf64a3679a3ba3f20a7d594cffcc2d2d6c4313ddb4d6613c79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OWNERSHIP_SHALLOW</name>
      <anchorfile>group__ContHandles.html</anchorfile>
      <anchor>gga64c27560b41710ccf64a3679a3ba3f20a448c598cdc37e2de8a162e1020001715</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OWNERSHIP_DEEP</name>
      <anchorfile>group__ContHandles.html</anchorfile>
      <anchor>gga64c27560b41710ccf64a3679a3ba3f20a2a6d6bfadc36f9eda31af79d32928c6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Sequence&lt; Iterator &gt;</type>
      <name>sequence</name>
      <anchorfile>group__ContHandles.html</anchorfile>
      <anchor>ga76f58aa143a15c1ba422846c3176fbdc</anchor>
      <arglist>(Iterator pbegin, Iterator pend)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>PatternMatching</name>
    <title>Glob-style Pattern Matching</title>
    <filename>group__PatternMatching.html</filename>
    <class kind="class">Glib::PatternSpec</class>
  </compound>
  <compound kind="group">
    <name>ContHelpers</name>
    <title>Helper classes</title>
    <filename>group__ContHelpers.html</filename>
    <class kind="class">Glib::Container_Helpers::ArrayHandleIterator</class>
    <class kind="struct">Glib::Container_Helpers::TypeTraits</class>
    <class kind="class">Glib::Container_Helpers::ListHandleIterator</class>
    <class kind="class">Glib::Container_Helpers::SListHandleIterator</class>
  </compound>
  <compound kind="group">
    <name>MiscUtils</name>
    <title>Miscellaneous Utility Functions</title>
    <filename>group__MiscUtils.html</filename>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_application_name</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga9c2f67828083d74925b23c59ab868698</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_application_name</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga40e45835b7b461cba0f7a10fbb63c0d3</anchor>
      <arglist>(const Glib::ustring &amp;application_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_prgname</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga391655dededb496010eee2e92d0f1fdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_prgname</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga7d5c429822c09048892c4dee9c8e08c1</anchor>
      <arglist>(const std::string &amp;prgname)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getenv</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga5e186fdb08835342a5866b11fe787ebb</anchor>
      <arglist>(const std::string &amp;variable, bool &amp;found)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getenv</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga8e2c8f250aa7f059956737851ace08f6</anchor>
      <arglist>(const std::string &amp;variable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setenv</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga862657f21e5a930541d048a920204f59</anchor>
      <arglist>(const std::string &amp;variable, const std::string &amp;value, bool overwrite=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsetenv</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga6fb89001630714ec9ee5244cab56343e</anchor>
      <arglist>(const std::string &amp;variable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; std::string &gt;</type>
      <name>listenv</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga350a5f6f1ae631f748c89d8dbe7557df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_user_name</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga52964bfd712e8c9e688f668da51f3ed9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_real_name</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga30692e3263e66868878f535e0b7c9722</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_home_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga9412ea70c7fea058c03211dac318f8e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_tmp_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gac42272146fd9320958132f1591d28991</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_current_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga06d93c95572d6a382b8cc4e09dd5a339</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_user_special_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gabc928a4e477df53f90e221a854cc73cb</anchor>
      <arglist>(GUserDirectory directory)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_user_special_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga33289a74049470bc23a3859ba8b310c5</anchor>
      <arglist>(UserDirectory directory)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_user_data_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga821b704b5ede1583e4057990976d394b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_user_config_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gae517b931f4753abcd48adb2769a8fc48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>get_system_data_dirs</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga3a957e23dc92b928045135d4a5c6aec9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>get_system_config_dirs</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga7ac473ccb6ff59400b62b9396d1b72bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_user_cache_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gaa68121f26e82df1c293c82b89c8998e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>path_is_absolute</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gad82525f39f7408f97f2c096c4f721b3b</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>path_skip_root</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga306eee64abc3d28993895b826f4dd533</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>path_get_basename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga20ebf2917a7fce5d1901568017b95a35</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>path_get_dirname</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gae03457226c4239a74b83486739521434</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_filename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gaa4a70bf050b3f318f87049ed30206a9a</anchor>
      <arglist>(const Glib::ArrayHandle&lt; std::string &gt; &amp;elements)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_filename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gada06023cc39be3a44eb68e38d6cbea6c</anchor>
      <arglist>(const std::string &amp;elem1, const std::string &amp;elem2)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_filename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gaf2be471b98cb5d47c9a30c084f87d9a7</anchor>
      <arglist>(const std::string &amp;elem1, const std::string &amp;elem2, const std::string &amp;elem3)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_filename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gab342ab4856f3de7a5bc69a36773d7fb3</anchor>
      <arglist>(const std::string &amp;elem1, const std::string &amp;elem2, const std::string &amp;elem3, const std::string &amp;elem4)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_filename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga95d2bc18e3b0974f909243aca9970476</anchor>
      <arglist>(const std::string &amp;elem1, const std::string &amp;elem2, const std::string &amp;elem3, const std::string &amp;elem4, const std::string &amp;elem5)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_filename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga8b726f15e39f873bb0174d26d8a636a6</anchor>
      <arglist>(const std::string &amp;elem1, const std::string &amp;elem2, const std::string &amp;elem3, const std::string &amp;elem4, const std::string &amp;elem5, const std::string &amp;elem6)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_filename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gaea9f342e6f620944625d48194622cdc6</anchor>
      <arglist>(const std::string &amp;elem1, const std::string &amp;elem2, const std::string &amp;elem3, const std::string &amp;elem4, const std::string &amp;elem5, const std::string &amp;elem6, const std::string &amp;elem7)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_filename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga4349eeddfaee3e22194bc511d1e92873</anchor>
      <arglist>(const std::string &amp;elem1, const std::string &amp;elem2, const std::string &amp;elem3, const std::string &amp;elem4, const std::string &amp;elem5, const std::string &amp;elem6, const std::string &amp;elem7, const std::string &amp;elem8)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_filename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gafb17c98037af155ff8c46499bfbc5d2d</anchor>
      <arglist>(const std::string &amp;elem1, const std::string &amp;elem2, const std::string &amp;elem3, const std::string &amp;elem4, const std::string &amp;elem5, const std::string &amp;elem6, const std::string &amp;elem7, const std::string &amp;elem8, const std::string &amp;elem9)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_path</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga6afc89d45cc34f3cfce4a55f3f5e7afa</anchor>
      <arglist>(const std::string &amp;separator, const Glib::ArrayHandle&lt; std::string &gt; &amp;elements)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>find_program_in_path</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gaa4c4ecb9a3eb803ae6d9dee51e1e5b14</anchor>
      <arglist>(const std::string &amp;program)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>format_size</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga496c472c5f7234a09924eb1d30b93f44</anchor>
      <arglist>(guint64 size, FormatSizeFlags flags=FORMAT_SIZE_DEFAULT)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>giommContentType</name>
    <title>Platform-specific content typing</title>
    <filename>group__giommContentType.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>content_type_equals</name>
      <anchorfile>group__giommContentType.html</anchorfile>
      <anchor>ga496c304f10ea79f1a20137bf614466e8</anchor>
      <arglist>(const Glib::ustring &amp;type1, const Glib::ustring &amp;type2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>content_type_is_a</name>
      <anchorfile>group__giommContentType.html</anchorfile>
      <anchor>ga278fca288c7c2e9995ebb64ce43a6ffd</anchor>
      <arglist>(const Glib::ustring &amp;type, const Glib::ustring &amp;supertype)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>content_type_is_unknown</name>
      <anchorfile>group__giommContentType.html</anchorfile>
      <anchor>gaee153086e7cd9f1ab0509cbf81ec06e9</anchor>
      <arglist>(const Glib::ustring &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>content_type_get_description</name>
      <anchorfile>group__giommContentType.html</anchorfile>
      <anchor>gac065cb89d7abb5935cfa225e3d41a732</anchor>
      <arglist>(const Glib::ustring &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>content_type_get_mime_type</name>
      <anchorfile>group__giommContentType.html</anchorfile>
      <anchor>ga92f379d45658e14f3ec1bec3da71d908</anchor>
      <arglist>(const Glib::ustring &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Icon &gt;</type>
      <name>content_type_get_icon</name>
      <anchorfile>group__giommContentType.html</anchorfile>
      <anchor>ga7972eb82466bf972bbbf5b58f6344e84</anchor>
      <arglist>(const Glib::ustring &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Icon &gt;</type>
      <name>content_type_get_symbolic_icon</name>
      <anchorfile>group__giommContentType.html</anchorfile>
      <anchor>gab55b0d4ac98b1aa0edab98afa66a8b6c</anchor>
      <arglist>(const Glib::ustring &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>content_type_can_be_executable</name>
      <anchorfile>group__giommContentType.html</anchorfile>
      <anchor>gae5107c4e00134d7d9df3b755a74f9494</anchor>
      <arglist>(const Glib::ustring &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>content_type_from_mime_type</name>
      <anchorfile>group__giommContentType.html</anchorfile>
      <anchor>gad5432d8f8c8ba74f8157af9d49930b4c</anchor>
      <arglist>(const Glib::ustring &amp;mime_type)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>content_type_guess</name>
      <anchorfile>group__giommContentType.html</anchorfile>
      <anchor>ga48e8afbb7f1724efcdebd7c028da5560</anchor>
      <arglist>(const std::string &amp;filename, const guchar *data, gsize data_size, bool &amp;result_uncertain)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>content_type_guess</name>
      <anchorfile>group__giommContentType.html</anchorfile>
      <anchor>gae46acc46aa5c33a8d1feda6a675fefa9</anchor>
      <arglist>(const std::string &amp;filename, const std::string &amp;data, bool &amp;result_uncertain)</arglist>
    </member>
    <member kind="function">
      <type>Glib::StringArrayHandle</type>
      <name>content_type_guess_for_tree</name>
      <anchorfile>group__giommContentType.html</anchorfile>
      <anchor>ga7e82e215c402edca50219020e43d08ec</anchor>
      <arglist>(const Glib::RefPtr&lt; const File &gt; &amp;root)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ListHandle&lt; Glib::ustring &gt;</type>
      <name>content_types_get_registered</name>
      <anchorfile>group__giommContentType.html</anchorfile>
      <anchor>gaeae6cd7ee77a7b1c52443116f346b476</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>NetworkIO</name>
    <title>Portable Network I/O Functionality</title>
    <filename>group__NetworkIO.html</filename>
    <class kind="class">Gio::InetAddress</class>
    <class kind="class">Gio::InetSocketAddress</class>
    <class kind="class">Gio::NetworkAddress</class>
    <class kind="class">Gio::NetworkService</class>
    <class kind="class">Gio::Proxy</class>
    <class kind="class">Gio::ProxyAddress</class>
    <class kind="class">Gio::ProxyResolver</class>
    <class kind="class">Gio::Resolver</class>
    <class kind="class">Gio::Socket</class>
    <class kind="class">Gio::SocketAddress</class>
    <class kind="class">Gio::SocketAddressEnumerator</class>
    <class kind="class">Gio::SocketClient</class>
    <class kind="class">Gio::SocketConnectable</class>
    <class kind="class">Gio::SocketConnection</class>
    <class kind="class">Gio::SocketControlMessage</class>
    <class kind="class">Gio::SocketListener</class>
    <class kind="class">Gio::SocketService</class>
    <class kind="class">Gio::SrvTarget</class>
    <class kind="class">Gio::TcpConnection</class>
    <class kind="class">Gio::TcpWrapperConnection</class>
    <class kind="class">Gio::ThreadedSocketService</class>
    <class kind="class">Gio::UnixConnection</class>
    <class kind="class">Gio::UnixCredentialsMessage</class>
    <class kind="class">Gio::UnixFDList</class>
    <class kind="class">Gio::UnixFDMessage</class>
    <class kind="class">Gio::UnixSocketAddress</class>
    <class kind="class">Gio::SignalSocket</class>
    <class kind="class">Gio::SocketSource</class>
    <member kind="function">
      <type>SignalSocket</type>
      <name>signal_socket</name>
      <anchorfile>group__NetworkIO.html</anchorfile>
      <anchor>ga73dc3243f51abce0a62424329724f510</anchor>
      <arglist>(const Glib::RefPtr&lt; Glib::MainContext &gt; &amp;context=Glib::RefPtr&lt; Glib::MainContext &gt;())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Random</name>
    <title>Random Numbers</title>
    <filename>group__Random.html</filename>
    <class kind="class">Glib::Rand</class>
  </compound>
  <compound kind="group">
    <name>ShellUtils</name>
    <title>Shell-related Utilities</title>
    <filename>group__ShellUtils.html</filename>
    <class kind="class">Glib::ShellError</class>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; std::string &gt;</type>
      <name>shell_parse_argv</name>
      <anchorfile>group__ShellUtils.html</anchorfile>
      <anchor>gabc52fcb14cfc7a5ba37ca821cc837818</anchor>
      <arglist>(const std::string &amp;command_line)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>shell_quote</name>
      <anchorfile>group__ShellUtils.html</anchorfile>
      <anchor>ga55ebfb935f2131b2ae40d339568f568c</anchor>
      <arglist>(const std::string &amp;unquoted_string)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>shell_unquote</name>
      <anchorfile>group__ShellUtils.html</anchorfile>
      <anchor>ga449dc37c6ea7e7563740df86e31c263c</anchor>
      <arglist>(const std::string &amp;quoted_string)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Markup</name>
    <title>Simple XML Subset Parser</title>
    <filename>group__Markup.html</filename>
    <class kind="class">Glib::MarkupError</class>
    <class kind="class">Glib::Markup::AttributeKeyLess</class>
    <class kind="class">Glib::Markup::Parser</class>
    <class kind="class">Glib::Markup::ParseContext</class>
    <member kind="typedef">
      <type>Glib::MarkupError</type>
      <name>Error</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>gaa370f40dc82086ee7aa5456657db1244</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_UTF8</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>ga1422c4a583441bbe490b8ed47d7fe1a7a30c6a6f1fcf9249db2692abc39b34c48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EMPTY</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>ga1422c4a583441bbe490b8ed47d7fe1a7a5b3981a2a475d8b0ab4481c931c816dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARSE</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>ga1422c4a583441bbe490b8ed47d7fe1a7adb7227e7bfab9c3409b7f5ce7da8075c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_ELEMENT</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>ga1422c4a583441bbe490b8ed47d7fe1a7a2a63efd807b6e40451b57e128b34d9f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_ATTRIBUTE</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>ga1422c4a583441bbe490b8ed47d7fe1a7aef0a541fa2885ffc56d0703a55afa735</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_CONTENT</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>ga1422c4a583441bbe490b8ed47d7fe1a7a4051754fb4e8f11408fe06445e99761e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>escape_text</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>gac95c5843d8dada8449f90f2fd635feb1</anchor>
      <arglist>(const Glib::ustring &amp;text)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Spawn</name>
    <title>Spawning Processes</title>
    <filename>group__Spawn.html</filename>
    <class kind="class">Glib::SpawnError</class>
    <member kind="typedef">
      <type>sigc::slot&lt; void &gt;</type>
      <name>SlotSpawnChildSetup</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>ga3bac87a2607d06097afbcd5ebae5d57a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_async_with_pipes</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>ga68ea12be3693ed49e92312b63bef2d38</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, const Glib::ArrayHandle&lt; std::string &gt; &amp;envp, SpawnFlags flags=SPAWN_DEFAULT, const SlotSpawnChildSetup &amp;child_setup=SlotSpawnChildSetup(), Pid *child_pid=nullptr, int *standard_input=nullptr, int *standard_output=nullptr, int *standard_error=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_async_with_pipes</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>ga6d494f70dd5b914102c89083f7996486</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, SpawnFlags flags=SPAWN_DEFAULT, const SlotSpawnChildSetup &amp;child_setup=SlotSpawnChildSetup(), Pid *child_pid=nullptr, int *standard_input=nullptr, int *standard_output=nullptr, int *standard_error=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_async</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>gaa08d620227e82bccba437ecc541ef6fa</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, const Glib::ArrayHandle&lt; std::string &gt; &amp;envp, SpawnFlags flags=SPAWN_DEFAULT, const SlotSpawnChildSetup &amp;child_setup=SlotSpawnChildSetup(), Pid *child_pid=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_async</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>gab045450852e2a4dcbdecf0887d716aa6</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, SpawnFlags flags=SPAWN_DEFAULT, const SlotSpawnChildSetup &amp;child_setup=SlotSpawnChildSetup(), Pid *child_pid=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_sync</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>ga570555dc2fe25b548aaf528ac0127a1e</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, const Glib::ArrayHandle&lt; std::string &gt; &amp;envp, SpawnFlags flags=SPAWN_DEFAULT, const SlotSpawnChildSetup &amp;child_setup=SlotSpawnChildSetup(), std::string *standard_output=nullptr, std::string *standard_error=nullptr, int *exit_status=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_sync</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>ga44b768c4cd7158e32980fedbb7438a6d</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, SpawnFlags flags=SPAWN_DEFAULT, const SlotSpawnChildSetup &amp;child_setup=SlotSpawnChildSetup(), std::string *standard_output=nullptr, std::string *standard_error=nullptr, int *exit_status=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_command_line_async</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>ga648167a4af607f87763f1334fe5a472f</anchor>
      <arglist>(const std::string &amp;command_line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_command_line_sync</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>ga75961831b4dd3979bb8ab508ee3b3de7</anchor>
      <arglist>(const std::string &amp;command_line, std::string *standard_output=nullptr, std::string *standard_error=nullptr, int *exit_status=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_close_pid</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>gaaea8f41c7a08af3b2919ce64fd0c27e5</anchor>
      <arglist>(Pid pid)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Streams</name>
    <title>Stream Classes</title>
    <filename>group__Streams.html</filename>
    <class kind="class">Gio::BufferedInputStream</class>
    <class kind="class">Gio::BufferedOutputStream</class>
    <class kind="class">Gio::DataInputStream</class>
    <class kind="class">Gio::DataOutputStream</class>
    <class kind="class">Gio::FileInputStream</class>
    <class kind="class">Gio::FileIOStream</class>
    <class kind="class">Gio::FileOutputStream</class>
    <class kind="class">Gio::FilterInputStream</class>
    <class kind="class">Gio::FilterOutputStream</class>
    <class kind="class">Gio::InputStream</class>
    <class kind="class">Gio::IOStream</class>
    <class kind="class">Gio::MemoryInputStream</class>
    <class kind="class">Gio::MemoryOutputStream</class>
    <class kind="class">Gio::Mount</class>
    <class kind="class">Gio::OutputStream</class>
    <class kind="class">Gio::Seekable</class>
    <class kind="class">Gio::SimpleIOStream</class>
    <class kind="class">Gio::UnixInputStream</class>
    <class kind="class">Gio::UnixOutputStream</class>
  </compound>
  <compound kind="group">
    <name>StringUtils</name>
    <title>String Utility Functions</title>
    <filename>group__StringUtils.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>str_has_prefix</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>ga6b7e8354049756e92a97554a107618ac</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>str_has_suffix</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>ga5c4e380ffc6617ac61ca92e203e45630</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;suffix)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>strtod</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>gaa44aba9faa6575d4881b1fe779464f6b</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>strtod</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>ga6465a8320d790115c41a2c76d1d3233c</anchor>
      <arglist>(const std::string &amp;str, std::string::size_type &amp;end_index, std::string::size_type start_index=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>dtostr</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>gac740e6c99bca5896ccbfc12b621491ac</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>strescape</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>ga35e288b5ce34cb15eeec907421d2b77c</anchor>
      <arglist>(const std::string &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>strescape</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>gad24f3547c8d6b3ec56d7f5805a11d6ab</anchor>
      <arglist>(const std::string &amp;source, const std::string &amp;exceptions)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>strcompress</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>ga85cd83bd40baf0119aac3ff0a9a5e7b2</anchor>
      <arglist>(const std::string &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>strerror</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>ga1eb869894996c91c0f69dbff96714c71</anchor>
      <arglist>(int errnum)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>strsignal</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>ga44ce9f689aff8abe1e3073b209f360d3</anchor>
      <arglist>(int signum)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>MainLoop</name>
    <title>The Main Event Loop</title>
    <filename>group__MainLoop.html</filename>
    <class kind="class">Glib::PollFD</class>
    <class kind="class">Glib::SignalTimeout</class>
    <class kind="class">Glib::SignalIdle</class>
    <class kind="class">Glib::SignalIO</class>
    <class kind="class">Glib::SignalChildWatch</class>
    <class kind="class">Glib::MainContext</class>
    <class kind="class">Glib::MainLoop</class>
    <class kind="class">Glib::Source</class>
    <class kind="class">Glib::TimeoutSource</class>
    <class kind="class">Glib::IdleSource</class>
    <class kind="class">Glib::IOSource</class>
    <member kind="function">
      <type>SignalTimeout</type>
      <name>signal_timeout</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>gaadb206fcc112f086f9d47c016b1f2175</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SignalIdle</type>
      <name>signal_idle</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>ga76792522d9680a05e232d3519a25f98d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SignalIO</type>
      <name>signal_io</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>gaf391654b755a32169d18be4835677376</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SignalChildWatch</type>
      <name>signal_child_watch</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>ga11ee7db80cc44ece02056a38bb049e3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; MainContext &gt;</type>
      <name>wrap</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>ga043c5714afbad2745b27301dd58470a4</anchor>
      <arglist>(GMainContext *gobject, bool take_copy=false)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; MainLoop &gt;</type>
      <name>wrap</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>ga22ea72cda4ef327ca03fb72d6a3bea89</anchor>
      <arglist>(GMainLoop *gobject, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>ThreadPools</name>
    <title>Thread Pools</title>
    <filename>group__ThreadPools.html</filename>
    <class kind="class">Glib::ThreadPool</class>
  </compound>
  <compound kind="group">
    <name>Threads</name>
    <title>Threads</title>
    <filename>group__Threads.html</filename>
    <class kind="class">Glib::Threads::ThreadError</class>
    <class kind="class">Glib::Threads::Thread::Exit</class>
    <class kind="class">Glib::Threads::Thread</class>
    <class kind="class">Glib::Threads::Mutex::Lock</class>
    <class kind="class">Glib::Threads::Mutex</class>
    <class kind="class">Glib::Threads::RecMutex::Lock</class>
    <class kind="class">Glib::Threads::RecMutex</class>
    <class kind="class">Glib::Threads::RWLock::ReaderLock</class>
    <class kind="class">Glib::Threads::RWLock::WriterLock</class>
    <class kind="class">Glib::Threads::RWLock</class>
    <class kind="class">Glib::Threads::Cond</class>
    <class kind="class">Glib::Threads::Private</class>
    <class kind="class">Glib::Dispatcher</class>
    <member kind="enumeration">
      <type></type>
      <name>NotLock</name>
      <anchorfile>group__Threads.html</anchorfile>
      <anchor>ga298a91d4f9bcfd13d3f9c342bcc8161a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_LOCK</name>
      <anchorfile>group__Threads.html</anchorfile>
      <anchor>gga298a91d4f9bcfd13d3f9c342bcc8161aa67a1c7fd98ae71afc32ad7c22bfb0a87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TryLock</name>
      <anchorfile>group__Threads.html</anchorfile>
      <anchor>ga58eba5840db7a5440b7c37bf17a5bb74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRY_LOCK</name>
      <anchorfile>group__Threads.html</anchorfile>
      <anchor>gga58eba5840db7a5440b7c37bf17a5bb74aca992b53c9825f414b1b5b308228beeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Thread *</type>
      <name>wrap</name>
      <anchorfile>group__Threads.html</anchorfile>
      <anchor>ga6bfbb3119eaac9fa8cb725aa1e82f61e</anchor>
      <arglist>(GThread *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Mutex *</type>
      <name>wrap</name>
      <anchorfile>group__Threads.html</anchorfile>
      <anchor>ga474cb9d17afdc606a6afd0068ac061d3</anchor>
      <arglist>(GMutex *gobject)</arglist>
    </member>
    <member kind="function">
      <type>RecMutex *</type>
      <name>wrap</name>
      <anchorfile>group__Threads.html</anchorfile>
      <anchor>gad710cc5f6feaccfe6fe2c886b6cd1636</anchor>
      <arglist>(GRecMutex *gobject)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>UriUtils</name>
    <title>URI Utilities</title>
    <filename>group__UriUtils.html</filename>
    <member kind="function">
      <type>std::string</type>
      <name>uri_unescape_string</name>
      <anchorfile>group__UriUtils.html</anchorfile>
      <anchor>ga0c070cac984dc463fd60ccbdb4237e25</anchor>
      <arglist>(const std::string &amp;escaped_string, const std::string &amp;illegal_characters=std::string())</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>uri_parse_scheme</name>
      <anchorfile>group__UriUtils.html</anchorfile>
      <anchor>ga0cc4270d6796b2166964f08a5cb746b3</anchor>
      <arglist>(const std::string &amp;uri)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>uri_escape_string</name>
      <anchorfile>group__UriUtils.html</anchorfile>
      <anchor>gad902095ab5049111caa9207770b0a437</anchor>
      <arglist>(const std::string &amp;unescaped, const std::string &amp;reserved_chars_allowed=std::string(), bool allow_utf8=true)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Unicode</name>
    <title>Unicode Manipulation</title>
    <filename>group__Unicode.html</filename>
    <namespace>Glib::Unicode</namespace>
    <namespace>Glib::Ascii</namespace>
  </compound>
  <compound kind="group">
    <name>Variant</name>
    <title>Variant Data Types</title>
    <filename>group__Variant.html</filename>
    <class kind="class">Glib::VariantBase</class>
    <class kind="class">Glib::VariantStringBase</class>
    <class kind="class">Glib::VariantContainerBase</class>
    <class kind="class">Glib::Variant</class>
    <class kind="class">Glib::Variant&lt; VariantBase &gt;</class>
    <class kind="class">Glib::Variant&lt; Variant&lt; T &gt; &gt;</class>
    <class kind="class">Glib::Variant&lt; Glib::ustring &gt;</class>
    <class kind="class">Glib::Variant&lt; Glib::DBusObjectPathString &gt;</class>
    <class kind="class">Glib::Variant&lt; Glib::DBusSignatureString &gt;</class>
    <class kind="class">Glib::Variant&lt; std::string &gt;</class>
    <class kind="class">Glib::Variant&lt; std::vector&lt; T &gt; &gt;</class>
    <class kind="class">Glib::Variant&lt; std::vector&lt; Glib::ustring &gt; &gt;</class>
    <class kind="class">Glib::Variant&lt; std::vector&lt; Glib::DBusObjectPathString &gt; &gt;</class>
    <class kind="class">Glib::Variant&lt; std::vector&lt; std::string &gt; &gt;</class>
    <class kind="class">Glib::Variant&lt; std::map&lt; K, V &gt; &gt;</class>
    <class kind="class">Glib::Variant&lt; std::tuple&lt; Types... &gt; &gt;</class>
    <class kind="class">Glib::VariantType</class>
    <class kind="class">Glib::Variant&lt; bool &gt;</class>
    <class kind="class">Glib::Variant&lt; unsigned char &gt;</class>
    <class kind="class">Glib::Variant&lt; gint16 &gt;</class>
    <class kind="class">Glib::Variant&lt; guint16 &gt;</class>
    <class kind="class">Glib::Variant&lt; gint32 &gt;</class>
    <class kind="class">Glib::Variant&lt; guint32 &gt;</class>
    <class kind="class">Glib::Variant&lt; gint64 &gt;</class>
    <class kind="class">Glib::Variant&lt; guint64 &gt;</class>
    <class kind="class">Glib::Variant&lt; double &gt;</class>
    <class kind="class">Glib::DBusObjectPathString</class>
    <class kind="class">Glib::DBusSignatureString</class>
  </compound>
  <compound kind="group">
    <name>giommEnums</name>
    <title>giomm Enums and Flags</title>
    <filename>group__giommEnums.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>AppInfoCreateFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gae39c1e25f40a070e1720470758a55344</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APP_INFO_CREATE_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gae39c1e25f40a070e1720470758a55344add0a457b19825cca468ab82bfcb26792</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APP_INFO_CREATE_NEEDS_TERMINAL</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gae39c1e25f40a070e1720470758a55344a856b6d31af6aa3b829c4f7d0c369cb36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APP_INFO_CREATE_SUPPORTS_URIS</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gae39c1e25f40a070e1720470758a55344acdadd06006e617905058fe72b7d20a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gae39c1e25f40a070e1720470758a55344a019ac7f7975aa01cf9cce569d32cb305</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ApplicationFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga493d914cf0a466cc9c6b18a44c5d345e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APPLICATION_FLAGS_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga493d914cf0a466cc9c6b18a44c5d345eac3648311d6c651b1ec142a9126dd9218</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APPLICATION_IS_SERVICE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga493d914cf0a466cc9c6b18a44c5d345eacbfbbfcf23728f586b20198ec8c0ef65</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APPLICATION_IS_LAUNCHER</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga493d914cf0a466cc9c6b18a44c5d345ea80b9654d577ba14cac46a377803582f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APPLICATION_HANDLES_OPEN</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga493d914cf0a466cc9c6b18a44c5d345ea48febe68e1b1d161e976fbe7438d6dfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APPLICATION_HANDLES_COMMAND_LINE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga493d914cf0a466cc9c6b18a44c5d345ea571b3655b06b966f063c6934c716827a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APPLICATION_SEND_ENVIRONMENT</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga493d914cf0a466cc9c6b18a44c5d345ea3d7a27c9565496e3e091054a5c43d3a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APPLICATION_NON_UNIQUE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga493d914cf0a466cc9c6b18a44c5d345ea076d0a322fe529f2d3e34cab73036d2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APPLICATION_CAN_OVERRIDE_APP_ID</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga493d914cf0a466cc9c6b18a44c5d345eae62ad4558f55afd1e1f72b5b055dcc86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ConverterResult</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa0a2aaee2c908b38261e17b4cb851b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONVERTER_ERROR</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaa0a2aaee2c908b38261e17b4cb851b5fafe3299680b582332e478fb2687a2444e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONVERTER_CONVERTED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaa0a2aaee2c908b38261e17b4cb851b5fa90c651f8d195d6f831ac5129d37bfea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONVERTER_FINISHED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaa0a2aaee2c908b38261e17b4cb851b5fa8b4c5ace43db5f6c59e93f2657c64a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONVERTER_FLUSHED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaa0a2aaee2c908b38261e17b4cb851b5faf5796b84682a3a74758fc0ebbff8e78a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ConverterFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab07e5ab152ffbc542e6e5c007809f17c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONVERTER_NO_FLAGS</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gab07e5ab152ffbc542e6e5c007809f17cad789df2d3d8b69e3c3e769799ea2fd9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONVERTER_INPUT_AT_END</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gab07e5ab152ffbc542e6e5c007809f17caf8ef1d62da6ff9d9f48354d086c4542b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONVERTER_FLUSH</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gab07e5ab152ffbc542e6e5c007809f17ca09637822cb0ec186b2765b19e32ca75c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CredentialsType</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gae498b021f21459dc83201f010ddf8dde</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CREDENTIALS_TYPE_INVALID</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gae498b021f21459dc83201f010ddf8ddea29474824e47dc06cd31745084064b741</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CREDENTIALS_TYPE_LINUX_UCRED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gae498b021f21459dc83201f010ddf8ddea41895e1cf2bf9aa8f1913fee18f6f57a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CREDENTIALS_TYPE_FREEBSD_CMSGCRED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gae498b021f21459dc83201f010ddf8ddea87ae260e0bc318acd72444ee24be4563</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gae498b021f21459dc83201f010ddf8ddea6f27f270318a2033f69c7fa5f3289813</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CREDENTIALS_TYPE_SOLARIS_UCRED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gae498b021f21459dc83201f010ddf8ddea70852c7fca3b1ed74f6adf469115c523</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CREDENTIALS_TYPE_NETBSD_UNPCBID</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gae498b021f21459dc83201f010ddf8ddea478afdbc5ff761304d5876f51e8c6d0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BusType</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa00806111608557f425bf09bdf4b0087</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUS_TYPE_STARTER</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gaa00806111608557f425bf09bdf4b0087aab916c886b6a3f3aadd08806416fe776</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUS_TYPE_NONE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gaa00806111608557f425bf09bdf4b0087a04b4cf0b4c4e1ade2161d47f50573a03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUS_TYPE_SYSTEM</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gaa00806111608557f425bf09bdf4b0087a2eccc6ac9ad0dd3ab3b5156173bf4270</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUS_TYPE_SESSION</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gaa00806111608557f425bf09bdf4b0087ae0de0856fe1ddbb862fe8fa39da894cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CallFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa2aaa37e1bbc56a65746a9ebc3a5a4db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CALL_FLAGS_NONE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gaa2aaa37e1bbc56a65746a9ebc3a5a4dba40e3b6a19ddaa17280300aa628abe849</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CALL_FLAGS_NO_AUTO_START</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gaa2aaa37e1bbc56a65746a9ebc3a5a4dba07771ba4cced2dbe5a356c7b1169bcab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CALL_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gaa2aaa37e1bbc56a65746a9ebc3a5a4dbae4b042d99e12117dbd6a28b959956522</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ConnectionFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa395bc4535e698ee8615a929c947187d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTION_FLAGS_NONE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gaa395bc4535e698ee8615a929c947187da2eb3cb8d569f71c870a88394f591fded</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTION_FLAGS_AUTHENTICATION_CLIENT</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gaa395bc4535e698ee8615a929c947187da83efcd0c5b446244f4de720f8f2d9903</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTION_FLAGS_AUTHENTICATION_SERVER</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gaa395bc4535e698ee8615a929c947187da3d01acde66ebbf2422da41d3a3644388</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gaa395bc4535e698ee8615a929c947187da5eb013d20a37142b4d6e5dfe3cdad04c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gaa395bc4535e698ee8615a929c947187da2ef23aff9fc5ed0984bdd2f94e6de6a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gaa395bc4535e698ee8615a929c947187da5912bf6845315acc846b31cf13333cc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SendMessageFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab2b457af9dfcf8a106e4b8495d22af2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEND_MESSAGE_FLAGS_NONE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gab2b457af9dfcf8a106e4b8495d22af2ba033b75923dcedbfd7f395b6b11f59cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEND_MESSAGE_FLAGS_PRESERVE_SERIAL</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gab2b457af9dfcf8a106e4b8495d22af2ba27d67cc732f62f053bc596e1376ee348</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SignalFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga5978f448a9187eca418eac34799144fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGNAL_FLAGS_NONE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga5978f448a9187eca418eac34799144faaea59457ebca8e18dbcf629edfdc2214f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGNAL_FLAGS_NO_MATCH_RULE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga5978f448a9187eca418eac34799144faa9357714d880d0bf44a617714a9d16fdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga5978f448a9187eca418eac34799144faa97049b22e5a8c6b8f7a071906bf476f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGNAL_FLAGS_MATCH_ARG0_PATH</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga5978f448a9187eca418eac34799144faa0cd86d556df3b75375c80de534c834f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SubtreeFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga57ca559dd8d3b93c96c4828cb457b975</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUBTREE_FLAGS_NONE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga57ca559dd8d3b93c96c4828cb457b975a235c5dac5f3035f4ddd88ae6bf2d5653</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga57ca559dd8d3b93c96c4828cb457b975a52969f47406b6454b4c2ab0c9b8b5e82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>InterfaceSkeletonFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gad553d6b87f056a42ec83373c5f6198d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DBUS_INTERFACE_SKELETON_FLAGS_NONE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gad553d6b87f056a42ec83373c5f6198d7a29fbfeb50c91d0bc36ea3787456357a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gad553d6b87f056a42ec83373c5f6198d7a40f6eded2fb704153c939c0be30cb9be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PropertyInfoFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga54150c0a362b8266949aa773ddeae53b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROPERTY_INFO_FLAGS_NONE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga54150c0a362b8266949aa773ddeae53baaa63905ed5df2500e977566ee5d50903</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROPERTY_INFO_FLAGS_READABLE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga54150c0a362b8266949aa773ddeae53baca64e29b7a0c8f601486d803cfaa81d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROPERTY_INFO_FLAGS_WRITABLE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga54150c0a362b8266949aa773ddeae53baabf556bc3f5e90e4c205f3d0135064ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MessageType</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gadd9b3057ea07b6bb75a7c033678a07b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_TYPE_INVALID</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gadd9b3057ea07b6bb75a7c033678a07b6a8b9a7a6a084815a8060eabf1be20eabe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_TYPE_METHOD_CALL</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gadd9b3057ea07b6bb75a7c033678a07b6a0a9c5e63591ba34e488c83d4600e681d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_TYPE_METHOD_RETURN</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gadd9b3057ea07b6bb75a7c033678a07b6a16c69b9e9b6cec7e8a5b7a66608f104f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_TYPE_ERROR</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gadd9b3057ea07b6bb75a7c033678a07b6a12f215babf0bfc97fb6567de80e9b4d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_TYPE_SIGNAL</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gadd9b3057ea07b6bb75a7c033678a07b6a795e7b4a83d335bc31ccc8297d55e9c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MessageFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf22c46c040ba585ee936319b7e414784</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_FLAGS_NONE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gaf22c46c040ba585ee936319b7e414784a0c88b5d305a144cfb012c3cb2fd70585</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_FLAGS_NO_REPLY_EXPECTED</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gaf22c46c040ba585ee936319b7e414784a04f4cdacc644a4e28f846aa6d9bbf002</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_FLAGS_NO_AUTO_START</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gaf22c46c040ba585ee936319b7e414784a75250947c066ac742792ef5349e33253</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gaf22c46c040ba585ee936319b7e414784ae123f8d107181e976741cf9e8bad7c29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MessageHeaderField</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga6cfd9fb2c0212aea31cecd5fd923a0f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_HEADER_FIELD_INVALID</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga6cfd9fb2c0212aea31cecd5fd923a0f0a0919873bbe88467c5baad50f3baa5243</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_HEADER_FIELD_PATH</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga6cfd9fb2c0212aea31cecd5fd923a0f0a5d2013e287e2ba9b1948cc27e4167393</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_HEADER_FIELD_INTERFACE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga6cfd9fb2c0212aea31cecd5fd923a0f0ac969fef8c51f9124c48eda21f6e82967</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_HEADER_FIELD_MEMBER</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga6cfd9fb2c0212aea31cecd5fd923a0f0a5ffa315233785645f6d85b1362b5f4e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_HEADER_FIELD_ERROR_NAME</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga6cfd9fb2c0212aea31cecd5fd923a0f0a37658b900f0090e075394e1ae05c4d56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_HEADER_FIELD_REPLY_SERIAL</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga6cfd9fb2c0212aea31cecd5fd923a0f0a4f7e9cdc27fcddb17d5fbd7f748fb0f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_HEADER_FIELD_DESTINATION</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga6cfd9fb2c0212aea31cecd5fd923a0f0adbbdafefa229a74ba0cf4ebb6005832b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_HEADER_FIELD_SENDER</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga6cfd9fb2c0212aea31cecd5fd923a0f0af56b497d31dd6bf2d60f276ec3eb9860</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_HEADER_FIELD_SIGNATURE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga6cfd9fb2c0212aea31cecd5fd923a0f0aa125004b5dadc193b5b333fe1ad1b9b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_HEADER_FIELD_NUM_UNIX_FDS</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga6cfd9fb2c0212aea31cecd5fd923a0f0a3d842bfa90a49623fcbf34f4dbfd20a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CapabilityFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gadc652797a964763619fdb48a89b42f93</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAPABILITY_FLAGS_NONE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gadc652797a964763619fdb48a89b42f93a3ed3e77bb323d43df2818db094d96bfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAPABILITY_FLAGS_UNIX_FD_PASSING</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gadc652797a964763619fdb48a89b42f93abca338e994b09efcf37e7fc7950d03fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BusNameOwnerFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga90e13b67fdf97528695baa4a6a18b051</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUS_NAME_OWNER_FLAGS_NONE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga90e13b67fdf97528695baa4a6a18b051a900fa7dcd6f4b5263dc9b42969439140</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga90e13b67fdf97528695baa4a6a18b051a064a68e0fa3528cdede245b4a7f30a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUS_NAME_OWNER_FLAGS_REPLACE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga90e13b67fdf97528695baa4a6a18b051ac8d4a3e5664ccd285031c35e6a6b03b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUS_NAME_OWNER_FLAGS_DO_NOT_QUEUE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga90e13b67fdf97528695baa4a6a18b051a8f73a9a1a3b21d97af5f54f63d861b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ProxyFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gac7e5173c0b0042ec1dfca220d6761c9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROXY_FLAGS_NONE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gac7e5173c0b0042ec1dfca220d6761c9fa03980d62f7e788a29e39d9ff27fa13ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gac7e5173c0b0042ec1dfca220d6761c9fa2746107ef7f01e33186ec8a73e52f03e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gac7e5173c0b0042ec1dfca220d6761c9faaed9ebcc1eebcb8f74a7ee86a9f6a757</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROXY_FLAGS_DO_NOT_AUTO_START</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gac7e5173c0b0042ec1dfca220d6761c9faa4beae8b2803f42530e2b5d7916e8d71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROXY_FLAGS_GET_INVALIDATED_PROPERTIES</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gac7e5173c0b0042ec1dfca220d6761c9fa5998625f06e94240adde9f3125e3c58e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>gac7e5173c0b0042ec1dfca220d6761c9fa8f8e762671b830cfc00ec07aee37052e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ServerFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3fbaae392de9b7cb4e91ba94476a82b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SERVER_FLAGS_NONE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga3fbaae392de9b7cb4e91ba94476a82b2adbf5c5f93fd528dcf3bc9975e8971ae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SERVER_FLAGS_RUN_IN_THREAD</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga3fbaae392de9b7cb4e91ba94476a82b2a16f16173f6d63d6f4a87a07dfc3ea168</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga3fbaae392de9b7cb4e91ba94476a82b2a002f455d364a7646b317d9cb764c6da5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BusNameWatcherFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga724a510e53ed4df47411bcdbaf680c85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUS_NAME_WATCHER_FLAGS_NONE</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga724a510e53ed4df47411bcdbaf680c85a23e333ede42826b165a4d40b0f55ad22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUS_NAME_WATCHER_FLAGS_AUTO_START</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>ga724a510e53ed4df47411bcdbaf680c85a559feaf6228b1762dc83064053a137d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DriveStartFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab628e70b1d028b3bc9b02b0d3b8acf2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DRIVE_START_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gab628e70b1d028b3bc9b02b0d3b8acf2da9fe888bc06249b6238868b8fffa4c9cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DriveStartStopType</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga148d2356238c5c8f809dcbd58341cc2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DRIVE_START_STOP_TYPE_UNKNOWN</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga148d2356238c5c8f809dcbd58341cc2dac0b4d7173528ab4d281f2946189225b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DRIVE_START_STOP_TYPE_SHUTDOWN</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga148d2356238c5c8f809dcbd58341cc2dab2f2a704561293cdd46fc45149a698ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DRIVE_START_STOP_TYPE_NETWORK</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga148d2356238c5c8f809dcbd58341cc2daf3635f16b2365d617603e90b9894be49</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DRIVE_START_STOP_TYPE_MULTIDISK</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga148d2356238c5c8f809dcbd58341cc2da76e4f6e59c0474cb0f73bd35f8ede533</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DRIVE_START_STOP_TYPE_PASSWORD</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga148d2356238c5c8f809dcbd58341cc2daeed465a6f82c4446c9585d3a070af35f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EmblemOrigin</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga7f2c8f757fdeb91ca48c0bc8184f9270</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EMBLEM_ORIGIN_UNKNOWN</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7f2c8f757fdeb91ca48c0bc8184f9270a91846b396a34f3df7fabff035440d684</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EMBLEM_ORIGIN_DEVICE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7f2c8f757fdeb91ca48c0bc8184f9270a03234829155a8c8df81621edefb0611f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EMBLEM_ORIGIN_LIVEMETADATA</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7f2c8f757fdeb91ca48c0bc8184f9270a162bb08277c29a9e2a4697ae2bbe1abc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EMBLEM_ORIGIN_TAG</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7f2c8f757fdeb91ca48c0bc8184f9270a19f1be7e988a13fb24aba702e3a053a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DataStreamByteOrder</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga87dea9b56fed9c0bca0f8426fb57781e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DATA_STREAM_BYTE_ORDER_BIG_ENDIAN</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga87dea9b56fed9c0bca0f8426fb57781ea8b4902d3cb6f18ca9cd368b8592bc2d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga87dea9b56fed9c0bca0f8426fb57781eacfc71a021f044e01f47fc17414d614cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DATA_STREAM_BYTE_ORDER_HOST_ENDIAN</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga87dea9b56fed9c0bca0f8426fb57781eadbbb7a6b49187d80effe2f86ece4df35</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DataStreamNewlineType</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga2de111fe308aff763fb98a39bc507267</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DATA_STREAM_NEWLINE_TYPE_LF</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga2de111fe308aff763fb98a39bc507267a3436677feb41490a984ca7a2888703c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DATA_STREAM_NEWLINE_TYPE_CR</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga2de111fe308aff763fb98a39bc507267a26f114922babde47f335da1db19edc0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DATA_STREAM_NEWLINE_TYPE_CR_LF</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga2de111fe308aff763fb98a39bc507267a67902d64d395eaf7ffda260087c18258</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DATA_STREAM_NEWLINE_TYPE_ANY</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga2de111fe308aff763fb98a39bc507267acb8fa2e7c3b4afceb6247a60e11b3a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ErrorEnum</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_FAILED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9ab0cc1f39ca02a434f5743fe048024234</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NOT_FOUND</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a4ef5a9505bfc5dfc1ae9f9f3447d4e11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_EXISTS</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a4ceb1df9ce7cee68ae688d9b4928bd35</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_IS_DIRECTORY</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a51c6cd44b213e6398f0832b2e4f0d9a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NOT_DIRECTORY</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a59876b7a8237ec343ab802d3d8d3993c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NOT_EMPTY</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a88ac8b2960da0db4b2ad1911421ce6a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NOT_REGULAR_FILE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a26df8843300d90f513e9e3cedb6b7160</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NOT_SYMBOLIC_LINK</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a1cae279c511fd3bfa2bd6c22f40afad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NOT_MOUNTABLE_FILE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a61a760edac9e645617248da0dc4cb1b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_FILENAME_TOO_LONG</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a94e7643e3100aec970d860fc04cf2a4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_INVALID_FILENAME</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a169d1d04640be309d75f57daaaab967a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_TOO_MANY_LINKS</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9aab3cb365b675f525a57cb3aa59b19eb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NO_SPACE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a74478cef936bb366faa61c4d3fbd2f35</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_INVALID_ARGUMENT</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a133a98e6b98462e693e2cdb01d04dd45</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_PERMISSION_DENIED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a175f98a99b2eedf9388b0b1a14337768</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NOT_SUPPORTED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a8105194f1a5fcafb73fa0bb11a58ba37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NOT_MOUNTED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a6077fb042b3fbf7919b07e32cc58a0c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_ALREADY_MOUNTED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a76f3bd66119828db7de127c2d0d9d404</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_CLOSED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a811449c2fc1320fdc9cc2699e95c28b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_CANCELLED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a34b177be2c03351bc7229368daeb6c7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_PENDING</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a59888e38aafea0a297cddda02b4d4c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_READ_ONLY</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a94ce70939862a818366ce36d4073eea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_CANT_CREATE_BACKUP</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a3d84f8d331584efdecd6509659469963</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_WRONG_ETAG</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a5e70c1d9cabf665b6644072e617fcd8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_TIMED_OUT</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a6afbb366cf6fadbcd3a0cc9bdda4d785</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_WOULD_RECURSE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a40e63426571446c6b8367e8723ff884b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_BUSY</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9af03051cf787ed29bfbfc3eef779f643c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_WOULD_BLOCK</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a33cedc0aa8ed9ed6fe2046dafa6be761</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_HOST_NOT_FOUND</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9af82cfefac7dcb8443eeb68e00655018c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_HOST_WAS_NOT_FOUND</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9ae0f97278ba9282b38b4de0a05bc5d02a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_WOULD_MERGE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a8fde4035c92a204ea5ced8fc0246b1c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_FAILED_HANDLED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9aedf009957a6447d72d7b57e322873241</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_TOO_MANY_OPEN_FILES</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a07c99219035cdedfb7e68912103c4809</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NOT_INITIALIZED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a41dba331826e8286d2cd6b0597c66ed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_ADDRESS_IN_USE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a52c950d317ba2bf030503348fbbe3507</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_PARTIAL_INPUT</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a499e88d84d7c74f16f05d590ad325939</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_INVALID_DATA</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9ac127dae51d242cf4e555698a304ab6e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_DBUS_ERROR</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a01732f06363333ccd3a92315c39997bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_HOST_UNREACHABLE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9abb38de071094e3719cff06eda169ad19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NETWORK_UNREACHABLE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a10b76e3c96ac62ce1b391bd16aaddd34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_CONNECTION_REFUSED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a7ea93acf57628c52f0ec0bca88867a1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_PROXY_FAILED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a488eb73dbfcda6c9dfdce34506aad189</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_PROXY_AUTH_FAILED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a719d21f61636b4a2be41c57095d75a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_PROXY_NEED_AUTH</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9af530560c8f757e469966e70937c2b84f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_PROXY_NOT_ALLOWED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a792abebe5a0f00a91b764195990f863d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_BROKEN_PIPE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a4a016f0cbd21e8208d0d48ce6882ad98</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_CONNECTION_CLOSED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a5a5a8e19d31cc278f25dfecd7a838c96</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NOT_CONNECTED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a74feb15f7727640d014feecdd4f5ce9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_MESSAGE_TOO_LARGE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9a62d62e6f664b90737381377af7d58747</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SocketFamily</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga0ba69e14ad979bf9b2073ad122e38d48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_FAMILY_INVALID</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0ba69e14ad979bf9b2073ad122e38d48a6bed0d7385152034c574c30517146415</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_FAMILY_UNIX</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0ba69e14ad979bf9b2073ad122e38d48a064bccdabdfea2abf2b51d0c75776c90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_FAMILY_IPV4</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0ba69e14ad979bf9b2073ad122e38d48ad5c89514986f19d88128f5e6904a7954</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_FAMILY_IPV6</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0ba69e14ad979bf9b2073ad122e38d48ada5d2619a60802d5623077908d7d9d9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TlsAuthenticationMode</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga202fd408b6a0f198ae5aaf0f0c6a69b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_AUTHENTICATION_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga202fd408b6a0f198ae5aaf0f0c6a69b1a6f68cd7902a2ff811172ef8790c3b45f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_AUTHENTICATION_REQUESTED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga202fd408b6a0f198ae5aaf0f0c6a69b1a7f674a9fdd9ada5fc3aa290be6daa714</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_AUTHENTICATION_REQUIRED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga202fd408b6a0f198ae5aaf0f0c6a69b1af0e295a2f16be5c1964b35b8ed26d755</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TlsCertificateFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gac96df88bc70e763045de6aa47e87039a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_CERTIFICATE_UNKNOWN_CA</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gac96df88bc70e763045de6aa47e87039aaa61070c1752cab0ed249d122ea6d1c82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_CERTIFICATE_BAD_IDENTITY</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gac96df88bc70e763045de6aa47e87039aacab8c8dda0e2cec3f607d9a9ca1a42b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_CERTIFICATE_NOT_ACTIVATED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gac96df88bc70e763045de6aa47e87039aa5254c1571dbe9837634767c357b7d8bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_CERTIFICATE_EXPIRED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gac96df88bc70e763045de6aa47e87039aa4fac7824ceea67b46567d4c02758f0de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_CERTIFICATE_REVOKED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gac96df88bc70e763045de6aa47e87039aaef5e648db292564cead690dc80454a5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_CERTIFICATE_INSECURE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gac96df88bc70e763045de6aa47e87039aa2fe51d259ecb128d4905bb5e25d6c5c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_CERTIFICATE_GENERIC_ERROR</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gac96df88bc70e763045de6aa47e87039aad6eeb967a5da3b6b700f9380816f4840</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_CERTIFICATE_VALIDATE_ALL</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gac96df88bc70e763045de6aa47e87039aa5f708cb7a52ac87665c6fb824f9ae066</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileQueryInfoFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga2cb7bdea61353f0999607785abd032c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_QUERY_INFO_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga2cb7bdea61353f0999607785abd032c0a4e412b5c20ae24607975e36b1d2142c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_QUERY_INFO_NOFOLLOW_SYMLINKS</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga2cb7bdea61353f0999607785abd032c0a083d027fec770383a5747b6f5d555f80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileCreateFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga500a44e123fd4c578f8af9ddef2f7601</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_CREATE_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga500a44e123fd4c578f8af9ddef2f7601a823486fdb9088ef7b93e208bc6b62e88</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_CREATE_PRIVATE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga500a44e123fd4c578f8af9ddef2f7601a20a321bcbed7bc1ca7dcfdafbd71542d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_CREATE_REPLACE_DESTINATION</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga500a44e123fd4c578f8af9ddef2f7601ae08c57359cd652d3ce61f4e1509748f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileCopyFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga08edc09a45449b136b27493647d4ecbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_COPY_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga08edc09a45449b136b27493647d4ecbea74324723d31670f9d554d43d4d21cba9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_COPY_OVERWRITE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga08edc09a45449b136b27493647d4ecbea2be9041c22de8fec379aee9fb358320b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_COPY_BACKUP</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga08edc09a45449b136b27493647d4ecbeadc037d686a7557c965dfa15491df35cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_COPY_NOFOLLOW_SYMLINKS</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga08edc09a45449b136b27493647d4ecbea32ab435654684ff92fa8f8175af13201</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_COPY_ALL_METADATA</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga08edc09a45449b136b27493647d4ecbea4e001ed252dd18fecaa44f1b759e1569</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_COPY_NO_FALLBACK_FOR_MOVE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga08edc09a45449b136b27493647d4ecbeada7bad8e87c41d3dc1754d534216536d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_COPY_TARGET_DEFAULT_PERMS</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga08edc09a45449b136b27493647d4ecbeaae94c977672250ae25bc12fc6fe2c112</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileMonitorFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga469f795e9a4dddb2421c0e5568be6649</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga469f795e9a4dddb2421c0e5568be6649adedf14a2a5916e81bc91e6174b400290</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_WATCH_MOUNTS</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga469f795e9a4dddb2421c0e5568be6649a137fce52cf19a9e99778bc444a168e8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_SEND_MOVED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga469f795e9a4dddb2421c0e5568be6649a685c2e018318ca8b6b74d1ad42275644</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_WATCH_HARD_LINKS</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga469f795e9a4dddb2421c0e5568be6649a415c73cd16a4fb046d37b427a087aac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_WATCH_MOVES</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga469f795e9a4dddb2421c0e5568be6649a08340eaa7f8de052ae3850c07b92ad39</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileMeasureFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3d27573e797e8e78e7b71705ad015ced</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MEASURE_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga3d27573e797e8e78e7b71705ad015ceda96dacae2624b3093efe929aed02cbca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MEASURE_REPORT_ANY_ERROR</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga3d27573e797e8e78e7b71705ad015ceda32288391e78d0e5cdb60043371e6bc67</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MEASURE_APPARENT_SIZE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga3d27573e797e8e78e7b71705ad015cedaa164ff3f2ce85af9ce27769f624e68a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MEASURE_NO_XDEV</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga3d27573e797e8e78e7b71705ad015cedab724452e7293d1d0a823cabb170b691d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileAttributeType</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga5e79fa284e14b18d180741cd1c03d0e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_TYPE_INVALID</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga5e79fa284e14b18d180741cd1c03d0e2a805ed50e0977f72475eeda88c0d7a7a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_TYPE_STRING</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga5e79fa284e14b18d180741cd1c03d0e2a2245a488ce026f086d5c675094eff3f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_TYPE_BYTE_STRING</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga5e79fa284e14b18d180741cd1c03d0e2a164db2121bfd5ff822bac6acbde33544</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_TYPE_BOOLEAN</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga5e79fa284e14b18d180741cd1c03d0e2a93319c8374a669b5e1129567418bde82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_TYPE_UINT32</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga5e79fa284e14b18d180741cd1c03d0e2aba6788fbe235ea29dea30b35257fbc68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_TYPE_INT32</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga5e79fa284e14b18d180741cd1c03d0e2a4dc9622fb7721f6c649cd84383a5d5c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_TYPE_UINT64</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga5e79fa284e14b18d180741cd1c03d0e2a0fa0752320fa928bc91377fd949dd2b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_TYPE_INT64</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga5e79fa284e14b18d180741cd1c03d0e2a2125480e07a560278057f1708b2f2786</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_TYPE_OBJECT</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga5e79fa284e14b18d180741cd1c03d0e2a62c78139dc3d8dcfd7d9a065f03d8dd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_TYPE_STRINGV</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga5e79fa284e14b18d180741cd1c03d0e2a099ea86783dc6107a1091288cde7ed8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileAttributeInfoFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8687b5c14230bb3e46a1df7341941f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_INFO_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga8687b5c14230bb3e46a1df7341941f16a94fee536cd3b76cf646d218bbe79431f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_INFO_COPY_WITH_FILE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga8687b5c14230bb3e46a1df7341941f16a4d067fa34aaa26916a8e628a324fd0ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga8687b5c14230bb3e46a1df7341941f16a7c592c7403a77c24938d2cf862f3d4f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileAttributeStatus</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gae926022c51a79fd117e4bfd100c25b29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_STATUS_UNSET</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gae926022c51a79fd117e4bfd100c25b29aa6ae1faab740fea51730ec8deb321357</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_STATUS_SET</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gae926022c51a79fd117e4bfd100c25b29a498cc49dddb48bc7b47c6a1436635e9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_STATUS_ERROR_SETTING</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gae926022c51a79fd117e4bfd100c25b29a33b51e197bf827abaaf840392ca490c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileType</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga7dcba95023d74c47bba3fd0a07f8824c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TYPE_NOT_KNOWN</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7dcba95023d74c47bba3fd0a07f8824cac25cd997f78ab9767b89832029ff7643</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TYPE_REGULAR</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7dcba95023d74c47bba3fd0a07f8824cabb375590e8c40cd86e52d5514ef6cecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TYPE_DIRECTORY</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7dcba95023d74c47bba3fd0a07f8824ca92da3d5f23153beff0aca0df8306f205</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TYPE_SYMBOLIC_LINK</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7dcba95023d74c47bba3fd0a07f8824ca1c546c9a8d5b169bc9341f91a4043a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TYPE_SPECIAL</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7dcba95023d74c47bba3fd0a07f8824caa018808e35cbe9662b5d4912839d92af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TYPE_SHORTCUT</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7dcba95023d74c47bba3fd0a07f8824ca945309db7d4a735df1b2f9aa0de8e9af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TYPE_MOUNTABLE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7dcba95023d74c47bba3fd0a07f8824ca22b432ea367e5862e5afc063fd6b77e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileMonitorEvent</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gabd42cf9877b5b6556bb18b7fd6b6dd81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_EVENT_CHANGED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gabd42cf9877b5b6556bb18b7fd6b6dd81a5a51698573022af410cb775ab5f624a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_EVENT_CHANGES_DONE_HINT</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gabd42cf9877b5b6556bb18b7fd6b6dd81a92c379f4f5af44ae845743ac00356ae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_EVENT_DELETED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gabd42cf9877b5b6556bb18b7fd6b6dd81ae5ad92f521597f62f841b2fa3f4ac5ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_EVENT_CREATED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gabd42cf9877b5b6556bb18b7fd6b6dd81ab930b855d1b6166425a50e2f0073e96d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gabd42cf9877b5b6556bb18b7fd6b6dd81a497566a966a85e8a3d605b1e0f2fe6df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_EVENT_PRE_UNMOUNT</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gabd42cf9877b5b6556bb18b7fd6b6dd81aa6b5259e0e4118e4278e7ba3b2a7b3a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_EVENT_UNMOUNTED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gabd42cf9877b5b6556bb18b7fd6b6dd81afc80802f75f9a2b28e0ac8865a1c6c3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_EVENT_MOVED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gabd42cf9877b5b6556bb18b7fd6b6dd81a476780dff2264f47c66d99e73d82902b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_EVENT_RENAMED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gabd42cf9877b5b6556bb18b7fd6b6dd81a03ad1d5e5109472390938c337dc75577</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_EVENT_MOVED_IN</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gabd42cf9877b5b6556bb18b7fd6b6dd81adfad74bbc20e2c6d17ef283212983ca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_EVENT_MOVED_OUT</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gabd42cf9877b5b6556bb18b7fd6b6dd81a3279dd7033a88654f27cc04b933df22b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>IOStreamSpliceFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga753fc539949f2db7d1114d7ebd5b45b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STREAM_SPLICE_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga753fc539949f2db7d1114d7ebd5b45b7a72d9ff1d41beeda3a353d288067c1a89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STREAM_SPLICE_CLOSE_STREAM1</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga753fc539949f2db7d1114d7ebd5b45b7a24034382c40a690f81e569dc73bb8ca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STREAM_SPLICE_CLOSE_STREAM2</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga753fc539949f2db7d1114d7ebd5b45b7aa6bbcbd7487a11353206d37995150d50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STREAM_SPLICE_WAIT_FOR_BOTH</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga753fc539949f2db7d1114d7ebd5b45b7a76dec5a78d423a9443f657ce2fac8c36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MountUnmountFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga9fa1b6a8eabf8f88e4cf6d611a4cff44</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MOUNT_UNMOUNT_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga9fa1b6a8eabf8f88e4cf6d611a4cff44a1599c4ebeb5c0c6e9c312a4b9e4231b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MOUNT_UNMOUNT_FORCE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga9fa1b6a8eabf8f88e4cf6d611a4cff44a8a1875392ebf634f2d02625395df5207</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MountMountFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga5484bace25c932fd4c7354259e138814</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MOUNT_MOUNT_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga5484bace25c932fd4c7354259e138814a73c8f98eedd8a952ae25a55533dc145d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AskPasswordFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gac807da73d3b89a6dc16dad028244e6ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASK_PASSWORD_NEED_PASSWORD</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gac807da73d3b89a6dc16dad028244e6eca777e15d6610937851ef05608edb34d16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASK_PASSWORD_NEED_USERNAME</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gac807da73d3b89a6dc16dad028244e6eca01380b474c01152aeb2db5351adc14a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASK_PASSWORD_NEED_DOMAIN</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gac807da73d3b89a6dc16dad028244e6ecae283224523fe0a4c343984e1fd0e7a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASK_PASSWORD_SAVING_SUPPORTED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gac807da73d3b89a6dc16dad028244e6eca4e5c4cd229b2d87c9fa505262e31a747</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASK_PASSWORD_ANONYMOUS_SUPPORTED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gac807da73d3b89a6dc16dad028244e6eca58484c40d21ac105c3af15f845ef55f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PasswordSave</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gafec517575c8f8d6f48433c86da52448f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PASSWORD_SAVE_NEVER</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gafec517575c8f8d6f48433c86da52448faedf9056b0e9394620857b9b142b4ceb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PASSWORD_SAVE_FOR_SESSION</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gafec517575c8f8d6f48433c86da52448fa11147906f5de9af5313c3dc99223e4dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PASSWORD_SAVE_PERMANENTLY</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gafec517575c8f8d6f48433c86da52448fa3372ea635ae7fa7c23f2941211703bba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MountOperationResult</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gac479310f8df4ad5909d717caec261076</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MOUNT_OPERATION_HANDLED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gac479310f8df4ad5909d717caec261076aadc695f34c2910427dc53ceb41785ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MOUNT_OPERATION_ABORTED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gac479310f8df4ad5909d717caec261076a88bb44b71d0d353785c6b60b42bb5e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MOUNT_OPERATION_UNHANDLED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gac479310f8df4ad5909d717caec261076a22c0d4477019d21864affc0e6739b51d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>NetworkConnectivity</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga19329d33cc5bb273b36883742550acd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NETWORK_CONNECTIVITY_LOCAL</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga19329d33cc5bb273b36883742550acd6a2988c68726b7f02a22e319aa3bd2ede9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NETWORK_CONNECTIVITY_LIMITED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga19329d33cc5bb273b36883742550acd6a63aa0e6c77f73d0caa7fa46ef38b8815</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NETWORK_CONNECTIVITY_PORTAL</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga19329d33cc5bb273b36883742550acd6a3cb00b4090345f8538ff202c64c29cb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NETWORK_CONNECTIVITY_FULL</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga19329d33cc5bb273b36883742550acd6accb71a7cff4a7118470fb72839551873</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>NotificationPriority</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga342e11d6fd463ede2d49d20cb584f1b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOTIFICATION_PRIORITY_NORMAL</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga342e11d6fd463ede2d49d20cb584f1b4a540bdded59011a11fe23020237b9bc0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOTIFICATION_PRIORITY_LOW</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga342e11d6fd463ede2d49d20cb584f1b4a0c7be3f42864b275ac740c46ff2f1946</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOTIFICATION_PRIORITY_HIGH</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga342e11d6fd463ede2d49d20cb584f1b4ad7c266a72023d6a1d06f73c4db84dd20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOTIFICATION_PRIORITY_URGENT</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga342e11d6fd463ede2d49d20cb584f1b4ac6e8d50dba1a2f9364fb10199c3d12ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OutputStreamSpliceFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga7c30d67e5f60d33fdcd3053123feea74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUTPUT_STREAM_SPLICE_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7c30d67e5f60d33fdcd3053123feea74a4a8d0f68799497978b5baaf64a453435</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUTPUT_STREAM_SPLICE_CLOSE_SOURCE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7c30d67e5f60d33fdcd3053123feea74abc66eea22d58051ebd68f30510264db5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUTPUT_STREAM_SPLICE_CLOSE_TARGET</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7c30d67e5f60d33fdcd3053123feea74a342a9302a3953a86a706a5d016df4fc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ResolverRecordType</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga7305dc7c78903a65491f3a505f55e966</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESOLVER_RECORD_SRV</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7305dc7c78903a65491f3a505f55e966ac548d0dd4d1ca0dc44e0198026d97743</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESOLVER_RECORD_MX</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7305dc7c78903a65491f3a505f55e966a659ee77f7a108769e0a5ed1bd8d623cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESOLVER_RECORD_TXT</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7305dc7c78903a65491f3a505f55e966a88dfa057fc978cf1b44d97cc524b4fba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESOLVER_RECORD_SOA</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7305dc7c78903a65491f3a505f55e966ac16f3405fc29e0a668b86d50c297242b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESOLVER_RECORD_NS</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga7305dc7c78903a65491f3a505f55e966ad1009cbb36502af096ebbbe783b7a6ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ResourceFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab96db7e3e47eb9f35766a29b025790e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESOURCE_FLAGS_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gab96db7e3e47eb9f35766a29b025790e0a42a249e1bb855320676e5256495339a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESOURCE_FLAGS_COMPRESSED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gab96db7e3e47eb9f35766a29b025790e0a30500369b14531c262d0afecbf9dd217</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ResourceLookupFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga834108a2d288186de3d9beea8925b9a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESOURCE_LOOKUP_FLAGS_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga834108a2d288186de3d9beea8925b9a8a107ee0f5b03ddf59931825aab1696256</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SettingsBindFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab41e4379084ff04d75104143d99ecf61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SETTINGS_BIND_DEFAULT</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gab41e4379084ff04d75104143d99ecf61a3ce16849b0de4e3ee431fdc4b9e22743</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SETTINGS_BIND_GET</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gab41e4379084ff04d75104143d99ecf61aa319946ecd163150075ef1ab0f19284c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SETTINGS_BIND_SET</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gab41e4379084ff04d75104143d99ecf61a80140cfe9c11b5cea3600728f9d82ede</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SETTINGS_BIND_NO_SENSITIVITY</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gab41e4379084ff04d75104143d99ecf61a4f626b2d4de6868c5a90cac6e1ce19f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SETTINGS_BIND_GET_NO_CHANGES</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gab41e4379084ff04d75104143d99ecf61ad9391f896ba987bdf6eb6c41e33b4f8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SETTINGS_BIND_INVERT_BOOLEAN</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gab41e4379084ff04d75104143d99ecf61a3ad9eea211350bc06670ff384d0e8268</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SocketType</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga2302a45e052658e343729e0be2fd3310</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_TYPE_INVALID</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga2302a45e052658e343729e0be2fd3310a49bd4b46e7905c9394731d0abadb2e02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_TYPE_STREAM</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga2302a45e052658e343729e0be2fd3310afc55c511821dc58a492d7c474a1b1ea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_TYPE_DATAGRAM</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga2302a45e052658e343729e0be2fd3310ae1eef5b09f7187e72db09c0f7bfaf944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_TYPE_SEQPACKET</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga2302a45e052658e343729e0be2fd3310a1b81d801009c9471bbeb3aba2412b6a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SocketProtocol</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga4e8932017a600fffa5e8e6b5f6ea5b16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_PROTOCOL_UNKNOWN</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga4e8932017a600fffa5e8e6b5f6ea5b16ab3f91855912cd06d5ae3cdc79ce65a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_PROTOCOL_DEFAULT</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga4e8932017a600fffa5e8e6b5f6ea5b16a96f0a62cfb9d0121dff3b1cbb86588e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_PROTOCOL_TCP</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga4e8932017a600fffa5e8e6b5f6ea5b16ad06eafdd4ba6c1989f0e79da060bd968</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_PROTOCOL_UDP</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga4e8932017a600fffa5e8e6b5f6ea5b16a68e3a82b9749e8503d2121bcc8528102</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_PROTOCOL_SCTP</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga4e8932017a600fffa5e8e6b5f6ea5b16a1f4d47329d9ef942f5d20247da0b4c6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SocketMsgFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga11f5e6b2ba2903428e93d947c82fa04e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_MSG_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga11f5e6b2ba2903428e93d947c82fa04ea566eba142e4067e3510eb479d177ffad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_MSG_OOB</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga11f5e6b2ba2903428e93d947c82fa04ea1d7b6de8ed171562d9254f285f5a5993</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_MSG_PEEK</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga11f5e6b2ba2903428e93d947c82fa04eab353a9d8f6a5efbd5c5b5f70b3310b25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_MSG_DONTROUTE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga11f5e6b2ba2903428e93d947c82fa04ea4d60627f51602e0da0f517d544236be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SocketClientEvent</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf8428cdf057aabdd8990b5e0a8021adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_CLIENT_RESOLVING</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaf8428cdf057aabdd8990b5e0a8021adcaf27ff2bb8aa4bfba7f530914302e6b68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_CLIENT_RESOLVED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaf8428cdf057aabdd8990b5e0a8021adcad20a5e4f48335b65d71dd81fbb4e45ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_CLIENT_CONNECTING</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaf8428cdf057aabdd8990b5e0a8021adcaab53be1516a7898addfa234505380c91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_CLIENT_CONNECTED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaf8428cdf057aabdd8990b5e0a8021adca272d5c7a7ff4f8cc2dfb3f35a70293ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_CLIENT_PROXY_NEGOTIATING</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaf8428cdf057aabdd8990b5e0a8021adcad78637c6c51ffe5f0ee87445241ee07a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_CLIENT_PROXY_NEGOTIATED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaf8428cdf057aabdd8990b5e0a8021adca88d3229819861b95e92db313a03178fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_CLIENT_TLS_HANDSHAKING</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaf8428cdf057aabdd8990b5e0a8021adca6a19a1c046f9c1a7a48c035c15f2e9ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_CLIENT_TLS_HANDSHAKED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaf8428cdf057aabdd8990b5e0a8021adca9b4da0f454f3921280a4b53d627e5509</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_CLIENT_COMPLETE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaf8428cdf057aabdd8990b5e0a8021adcae48a58af767d126bf0b857f01606274a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TlsRehandshakeMode</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga9730680b829b7745e4f36c1540761f3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_REHANDSHAKE_NEVER</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga9730680b829b7745e4f36c1540761f3fac8ff1b158382a7e0944ca22d36efa45d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_REHANDSHAKE_SAFELY</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga9730680b829b7745e4f36c1540761f3faa634954ea0400e153992717d5cb26cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_REHANDSHAKE_UNSAFELY</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga9730680b829b7745e4f36c1540761f3fa2176f716b50ba1295c669015897f5a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TlsDatabaseVerifyFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa46a3fc37c1e5566af625d7db3123a4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_DATABASE_VERIFY_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaa46a3fc37c1e5566af625d7db3123a4bae878bdddf57ebe9c6763e09cbeb1d0db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TlsDatabaseLookupFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga0de6ee7362d49df4f068b6214b93a076</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_DATABASE_LOOKUP_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0de6ee7362d49df4f068b6214b93a076ab4bcee74e44c9e07b862aea638a6a702</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_DATABASE_LOOKUP_KEYPAIR</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga0de6ee7362d49df4f068b6214b93a076a4a63bab7d12dc952756580064d71a0a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TlsInteractionResult</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga13ffba1819a4d780593c50266d7a9484</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_INTERACTION_UNHANDLED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga13ffba1819a4d780593c50266d7a9484a9124d1a05b6e51fcfb74d1c5dfe81444</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_INTERACTION_HANDLED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga13ffba1819a4d780593c50266d7a9484ae073f3fa9246f1aaf14cca26b643c0bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_INTERACTION_FAILED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga13ffba1819a4d780593c50266d7a9484a246a89fbc6dd9fa82f7fe072f20d6ed8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TlsCertificateRequestFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaab2a17acffc49fca7080e27fd1e61996</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_CERTIFICATE_REQUEST_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaab2a17acffc49fca7080e27fd1e61996a1a43c45f95ab7c4cd60f77d3a668579d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TlsPasswordFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8ac18330be9383471445ba62336a929a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_PASSWORD_NONE</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga8ac18330be9383471445ba62336a929aa974fc670e6e7a7a558552003dd192b00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_PASSWORD_RETRY</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga8ac18330be9383471445ba62336a929aa13f226bbdab3f2abb89c5bdc6aabbbff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_PASSWORD_MANY_TRIES</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga8ac18330be9383471445ba62336a929aae3b9f706b9a6b6d6c63dc9c1d2609911</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_PASSWORD_FINAL_TRY</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ga8ac18330be9383471445ba62336a929aa231f395c8c272846b106aee9690901eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ZlibCompressorFormat</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab247c6072c566753c8b9762f66e84c02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZLIB_COMPRESSOR_FORMAT_ZLIB</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gab247c6072c566753c8b9762f66e84c02ab635cfa0d0ddeafe35f7e3c8ad411e1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZLIB_COMPRESSOR_FORMAT_GZIP</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gab247c6072c566753c8b9762f66e84c02a0c0304ef454aaf0d34a180241d3c604b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZLIB_COMPRESSOR_FORMAT_RAW</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gab247c6072c566753c8b9762f66e84c02a97beae051e98c770a6185a3336390fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>UnixSocketAddressType</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf842f4597d522154407164deb4906c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNIX_SOCKET_ADDRESS_INVALID</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaf842f4597d522154407164deb4906c2eaeefc2bdc5ec67828a46119a74c8e7143</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNIX_SOCKET_ADDRESS_ANONYMOUS</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaf842f4597d522154407164deb4906c2ea93c2605ae77d14182f21150b0b399b95</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNIX_SOCKET_ADDRESS_PATH</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaf842f4597d522154407164deb4906c2eaa81d365fa4258138dd887b23768fd30d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNIX_SOCKET_ADDRESS_ABSTRACT</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaf842f4597d522154407164deb4906c2eae50800b7fb801e830b3ead075c13d644</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>gaf842f4597d522154407164deb4906c2ea7deb4d7d3c78b7f9bd191b853ede3f88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>AppInfoCreateFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gac2ae439cef63de06f97ed8454b67ec32</anchor>
      <arglist>(AppInfoCreateFlags lhs, AppInfoCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AppInfoCreateFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga383e30021c91def6e5a33ea1d2316114</anchor>
      <arglist>(AppInfoCreateFlags lhs, AppInfoCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AppInfoCreateFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga9f582e5773b615c406ceb28b695b7015</anchor>
      <arglist>(AppInfoCreateFlags lhs, AppInfoCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AppInfoCreateFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga302df8457f421e75eaea25a67cb63c19</anchor>
      <arglist>(AppInfoCreateFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>AppInfoCreateFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaccda1b3df9583689a62a3add6715f640</anchor>
      <arglist>(AppInfoCreateFlags &amp;lhs, AppInfoCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AppInfoCreateFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gac1201397fa24921e3b60ef6cd62c304d</anchor>
      <arglist>(AppInfoCreateFlags &amp;lhs, AppInfoCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AppInfoCreateFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga5dac484830e37250c0942325fb4b85a3</anchor>
      <arglist>(AppInfoCreateFlags &amp;lhs, AppInfoCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ApplicationFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga44ea3f3bc13b4f365f8b2423a9ac6697</anchor>
      <arglist>(ApplicationFlags lhs, ApplicationFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ApplicationFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga054de3d03be476f92ac269d01f5d6717</anchor>
      <arglist>(ApplicationFlags lhs, ApplicationFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ApplicationFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf78c94e5bddf6119131fc2925e25e4db</anchor>
      <arglist>(ApplicationFlags lhs, ApplicationFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ApplicationFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gabfccee773f2311c38a00aa0d1ecbe3ac</anchor>
      <arglist>(ApplicationFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>ApplicationFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga7f8cf604f276081f162dfe2e78e5e76a</anchor>
      <arglist>(ApplicationFlags &amp;lhs, ApplicationFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ApplicationFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa047e992118ed36688faf5a0a8cbc344</anchor>
      <arglist>(ApplicationFlags &amp;lhs, ApplicationFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ApplicationFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga58651ff4ec0b8e4ca0fd0e868e8f09cf</anchor>
      <arglist>(ApplicationFlags &amp;lhs, ApplicationFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConverterFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga9f956fe651a1375f27fc596f1ade2ab6</anchor>
      <arglist>(ConverterFlags lhs, ConverterFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConverterFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga6e58e9e48396f6319571dcbe76d81deb</anchor>
      <arglist>(ConverterFlags lhs, ConverterFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConverterFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa24dddaf6719113c40e5c8ec9694cf05</anchor>
      <arglist>(ConverterFlags lhs, ConverterFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConverterFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga1ca85527dd594724362f3a6e8d1ad466</anchor>
      <arglist>(ConverterFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>ConverterFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga006555992fbb516f1cea93b762566516</anchor>
      <arglist>(ConverterFlags &amp;lhs, ConverterFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConverterFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gade6a95b5e41956a879b57a097c159f88</anchor>
      <arglist>(ConverterFlags &amp;lhs, ConverterFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConverterFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga65a84e2cc906ff5924d3eb0af66b56b2</anchor>
      <arglist>(ConverterFlags &amp;lhs, ConverterFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CallFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaaf256ad4e34a802125934a3602918182</anchor>
      <arglist>(CallFlags lhs, CallFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CallFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gadd59f33797ba9003a8a00654dc21c5cb</anchor>
      <arglist>(CallFlags lhs, CallFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CallFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga2f5d5bbe79d36aeb8946a9d1985ba5d4</anchor>
      <arglist>(CallFlags lhs, CallFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CallFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab7d0c01e24d4734b302439ac13db5c01</anchor>
      <arglist>(CallFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>CallFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf7f8b92419edde75f68a2e9fe3f6b207</anchor>
      <arglist>(CallFlags &amp;lhs, CallFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CallFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa58d14bfa8dc1d3f779077664bcef5cd</anchor>
      <arglist>(CallFlags &amp;lhs, CallFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CallFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga45397d95ea49e8d13e45968ec55056f0</anchor>
      <arglist>(CallFlags &amp;lhs, CallFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConnectionFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gabf0261e49d127ddbb20121314bd691e5</anchor>
      <arglist>(ConnectionFlags lhs, ConnectionFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConnectionFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga157afd8bf936c40577d7ba7762c7a119</anchor>
      <arglist>(ConnectionFlags lhs, ConnectionFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConnectionFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gadeceb9495694a6f85d0aa34cd76593f4</anchor>
      <arglist>(ConnectionFlags lhs, ConnectionFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConnectionFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga9cd54aecd4fcf0476f3908ced65ea3da</anchor>
      <arglist>(ConnectionFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>ConnectionFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga531539a51f6fa26100e00cf79b3ef074</anchor>
      <arglist>(ConnectionFlags &amp;lhs, ConnectionFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConnectionFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga557f2bfae2346665f5eb373ea461ab20</anchor>
      <arglist>(ConnectionFlags &amp;lhs, ConnectionFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConnectionFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab3e32a633be5fab9f1e2ea91e4c203b2</anchor>
      <arglist>(ConnectionFlags &amp;lhs, ConnectionFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SendMessageFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga517437c24b21c9390d68d06252c38ee0</anchor>
      <arglist>(SendMessageFlags lhs, SendMessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SendMessageFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gae3636e72afeab50d8ba2b017f3d548bf</anchor>
      <arglist>(SendMessageFlags lhs, SendMessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SendMessageFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gacb730118932c2c089205040b6f99bb5e</anchor>
      <arglist>(SendMessageFlags lhs, SendMessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SendMessageFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga2a7223d208f91d9a6d618b24bcd120ad</anchor>
      <arglist>(SendMessageFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>SendMessageFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga2c8dbd2f0ee82cc71309daaa7708fac2</anchor>
      <arglist>(SendMessageFlags &amp;lhs, SendMessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SendMessageFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gabea4f6e4bf3c96e7eda48cf085be7176</anchor>
      <arglist>(SendMessageFlags &amp;lhs, SendMessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SendMessageFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga47c0490b33800886410984ebc8ade747</anchor>
      <arglist>(SendMessageFlags &amp;lhs, SendMessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SignalFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa71251f9666e33b79ca3a35b14c56b75</anchor>
      <arglist>(SignalFlags lhs, SignalFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SignalFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gafc16be7d1a676ae22b0d81ae6f66373a</anchor>
      <arglist>(SignalFlags lhs, SignalFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SignalFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab061e0a24b6b7d57c6eb05bb8a311f9b</anchor>
      <arglist>(SignalFlags lhs, SignalFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SignalFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8a995c39db7f285301ce89935348568b</anchor>
      <arglist>(SignalFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>SignalFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga92a022e06267a8e614e64124f3ac27ae</anchor>
      <arglist>(SignalFlags &amp;lhs, SignalFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SignalFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga461265e9505580ac52efceab01fb5e5a</anchor>
      <arglist>(SignalFlags &amp;lhs, SignalFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SignalFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga67e999a4414637b197248e62958c6528</anchor>
      <arglist>(SignalFlags &amp;lhs, SignalFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SubtreeFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gae3a3d5e31e4ddea76624f7681614397c</anchor>
      <arglist>(SubtreeFlags lhs, SubtreeFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SubtreeFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga534fa8ab13f51db6d92400754fa79221</anchor>
      <arglist>(SubtreeFlags lhs, SubtreeFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SubtreeFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga515f8f33ea2499547311998d503cbdf1</anchor>
      <arglist>(SubtreeFlags lhs, SubtreeFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SubtreeFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa24aa533cfbe9d4988c40466d5105272</anchor>
      <arglist>(SubtreeFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>SubtreeFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga48af5a57b27520a781794b0d491b2c18</anchor>
      <arglist>(SubtreeFlags &amp;lhs, SubtreeFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SubtreeFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga33e51d25230d5cc488e53aa1117bd5fe</anchor>
      <arglist>(SubtreeFlags &amp;lhs, SubtreeFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SubtreeFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa9e879e08b368bda95e12b464c246461</anchor>
      <arglist>(SubtreeFlags &amp;lhs, SubtreeFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>InterfaceSkeletonFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga93f58fade77f58a700609e2155c0284c</anchor>
      <arglist>(InterfaceSkeletonFlags lhs, InterfaceSkeletonFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>InterfaceSkeletonFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gada93a8df39c6b80e121a1594397d0eb3</anchor>
      <arglist>(InterfaceSkeletonFlags lhs, InterfaceSkeletonFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>InterfaceSkeletonFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab154380be90dcc8abd71ab17da151708</anchor>
      <arglist>(InterfaceSkeletonFlags lhs, InterfaceSkeletonFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>InterfaceSkeletonFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf0aadfd03ce7e0ad24b9d5672a85ffb9</anchor>
      <arglist>(InterfaceSkeletonFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>InterfaceSkeletonFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga2015b9e953b4ea4b5d4480568e91e7d3</anchor>
      <arglist>(InterfaceSkeletonFlags &amp;lhs, InterfaceSkeletonFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>InterfaceSkeletonFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga896a78d960b5e61e2f7eb9066ffd6feb</anchor>
      <arglist>(InterfaceSkeletonFlags &amp;lhs, InterfaceSkeletonFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>InterfaceSkeletonFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga78faf490171eeb84cafee0a15f50886f</anchor>
      <arglist>(InterfaceSkeletonFlags &amp;lhs, InterfaceSkeletonFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>PropertyInfoFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3162179be3acb867fc1b7d66a9e2d27c</anchor>
      <arglist>(PropertyInfoFlags lhs, PropertyInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>PropertyInfoFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab85a9e69cc725a1dbab52063325506db</anchor>
      <arglist>(PropertyInfoFlags lhs, PropertyInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>PropertyInfoFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga36f6ee825d38230e4fb1d264550f385c</anchor>
      <arglist>(PropertyInfoFlags lhs, PropertyInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>PropertyInfoFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gac36330aaaa3f5436abef2c04ddd76edb</anchor>
      <arglist>(PropertyInfoFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>PropertyInfoFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga9d77c45a262381a023550c672f4aad30</anchor>
      <arglist>(PropertyInfoFlags &amp;lhs, PropertyInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>PropertyInfoFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3e60d9a5aef48a3b9c262af3a38267f5</anchor>
      <arglist>(PropertyInfoFlags &amp;lhs, PropertyInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>PropertyInfoFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga332bf3aa8cd16de4a9d563ac60aa34c6</anchor>
      <arglist>(PropertyInfoFlags &amp;lhs, PropertyInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MessageFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga7dab85256a6961f9edbd479b8641a840</anchor>
      <arglist>(MessageFlags lhs, MessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MessageFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga835d8975311157d663491aefaf72bf97</anchor>
      <arglist>(MessageFlags lhs, MessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MessageFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaedaa6d5aed08b463298ef9a29abf6611</anchor>
      <arglist>(MessageFlags lhs, MessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MessageFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga45fb183fd7a0d4e6c9c741e4f3544449</anchor>
      <arglist>(MessageFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>MessageFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa7c77f89fbc6749eeb2580b0708385ef</anchor>
      <arglist>(MessageFlags &amp;lhs, MessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MessageFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8ea4aae38ba17dca7ad158bace6ee650</anchor>
      <arglist>(MessageFlags &amp;lhs, MessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MessageFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf94c469e7db6e0c1e018f472976c0e6b</anchor>
      <arglist>(MessageFlags &amp;lhs, MessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CapabilityFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa381c473b1bd9ba61f55980bdfbd64a7</anchor>
      <arglist>(CapabilityFlags lhs, CapabilityFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CapabilityFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga1c1c4fa47d960fda035c5dded3cdd0eb</anchor>
      <arglist>(CapabilityFlags lhs, CapabilityFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CapabilityFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf407a0b027a0f5ac46690ccf96a1d16b</anchor>
      <arglist>(CapabilityFlags lhs, CapabilityFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CapabilityFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaac055f4785da200653bdbc7d228d158d</anchor>
      <arglist>(CapabilityFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>CapabilityFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaffb83150531f7af44949645e6d7bd632</anchor>
      <arglist>(CapabilityFlags &amp;lhs, CapabilityFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CapabilityFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaab9138705b6d619b54ed0813604a72bb</anchor>
      <arglist>(CapabilityFlags &amp;lhs, CapabilityFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CapabilityFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf6b4bae2281097b7020ebd2c78460a88</anchor>
      <arglist>(CapabilityFlags &amp;lhs, CapabilityFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameOwnerFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga6ee165e164ee5ac76fcae97d149b0096</anchor>
      <arglist>(BusNameOwnerFlags lhs, BusNameOwnerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameOwnerFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga50b86acd56b5d8ef26c08b2edbeb5fa2</anchor>
      <arglist>(BusNameOwnerFlags lhs, BusNameOwnerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameOwnerFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga66e5ff30c50eda68a6e9c9856ff24929</anchor>
      <arglist>(BusNameOwnerFlags lhs, BusNameOwnerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameOwnerFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga76ae3c19edb95730bbf26a8bd2fe41fc</anchor>
      <arglist>(BusNameOwnerFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>BusNameOwnerFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga1082185ea5b919ef8e797f5a4a2cbd84</anchor>
      <arglist>(BusNameOwnerFlags &amp;lhs, BusNameOwnerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameOwnerFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8b3d76ca0ece547b75ddf7977beb2012</anchor>
      <arglist>(BusNameOwnerFlags &amp;lhs, BusNameOwnerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameOwnerFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8256822b508991b36784f8633f5a2a41</anchor>
      <arglist>(BusNameOwnerFlags &amp;lhs, BusNameOwnerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ProxyFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa322b87fce3af1fdea7133a127088be1</anchor>
      <arglist>(ProxyFlags lhs, ProxyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ProxyFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaedd6c084853864f9adf4c6263908109f</anchor>
      <arglist>(ProxyFlags lhs, ProxyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ProxyFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga86dfb1bb4f81af398e3d9e46c7bcfdd6</anchor>
      <arglist>(ProxyFlags lhs, ProxyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ProxyFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3ea4f184a1f3477087c578f74b88fbf2</anchor>
      <arglist>(ProxyFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>ProxyFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gace0563138240e17842fa5110f70e6c38</anchor>
      <arglist>(ProxyFlags &amp;lhs, ProxyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ProxyFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga95b7b16dbf0d153c9ae500b25c1cf29a</anchor>
      <arglist>(ProxyFlags &amp;lhs, ProxyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ProxyFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga996098077862478d47a82bae84847f4e</anchor>
      <arglist>(ProxyFlags &amp;lhs, ProxyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ServerFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga7955ba627de857db9a98ba002092c825</anchor>
      <arglist>(ServerFlags lhs, ServerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ServerFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gad76003cb3c7ee635acce39d25e293f1c</anchor>
      <arglist>(ServerFlags lhs, ServerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ServerFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga11ec0042ba646a016c058c8ead2cd18d</anchor>
      <arglist>(ServerFlags lhs, ServerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ServerFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga5ab28f60229aa0c887d0c1ec05ec286f</anchor>
      <arglist>(ServerFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>ServerFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gac1a3b9ca9c65cb38a478ac3df387983a</anchor>
      <arglist>(ServerFlags &amp;lhs, ServerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ServerFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaceba145483aef79b9f829545e5c35673</anchor>
      <arglist>(ServerFlags &amp;lhs, ServerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ServerFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3104ed754362062701f00c4aa9ee2bec</anchor>
      <arglist>(ServerFlags &amp;lhs, ServerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameWatcherFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga11d69d7cecb05e6a1ab2e29802001c0d</anchor>
      <arglist>(BusNameWatcherFlags lhs, BusNameWatcherFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameWatcherFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga910364a6bf529ad6ae00fdfc1caf8d95</anchor>
      <arglist>(BusNameWatcherFlags lhs, BusNameWatcherFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameWatcherFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3c6767c920f33ef0acf5273d87d44191</anchor>
      <arglist>(BusNameWatcherFlags lhs, BusNameWatcherFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameWatcherFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga7f09a804dfb04f4a256cfb22cac05378</anchor>
      <arglist>(BusNameWatcherFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>BusNameWatcherFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3cde961e2c29d55871ad3cb2b4d0f7b1</anchor>
      <arglist>(BusNameWatcherFlags &amp;lhs, BusNameWatcherFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameWatcherFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf926fff083913a435999f13eaa283542</anchor>
      <arglist>(BusNameWatcherFlags &amp;lhs, BusNameWatcherFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameWatcherFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga606fa2da2a5a44a01e084c959fd1cca2</anchor>
      <arglist>(BusNameWatcherFlags &amp;lhs, BusNameWatcherFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>DriveStartFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga38b31de13d1949c2acb9255bdc858767</anchor>
      <arglist>(DriveStartFlags lhs, DriveStartFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>DriveStartFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga469bc3cfd0273e72057fcdea791a5e5f</anchor>
      <arglist>(DriveStartFlags lhs, DriveStartFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>DriveStartFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gae75239258d148626dc4b0048b55a4c44</anchor>
      <arglist>(DriveStartFlags lhs, DriveStartFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>DriveStartFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf625621abb6c686d449c3f3c43aee02c</anchor>
      <arglist>(DriveStartFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>DriveStartFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga994648faf5be7fd03bc1929554044dac</anchor>
      <arglist>(DriveStartFlags &amp;lhs, DriveStartFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>DriveStartFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3a70a69affb9acc3192f731f5a51e2be</anchor>
      <arglist>(DriveStartFlags &amp;lhs, DriveStartFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>DriveStartFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga1c0e50bc08aaf61dc1fbbe786c5e6b33</anchor>
      <arglist>(DriveStartFlags &amp;lhs, DriveStartFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga22c0194e634b597f4dcec67551a7ca9b</anchor>
      <arglist>(TlsCertificateFlags lhs, TlsCertificateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga0daad7f705714622e093da3383ceb997</anchor>
      <arglist>(TlsCertificateFlags lhs, TlsCertificateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga9fd8470137571e8eef6bc1af201a5867</anchor>
      <arglist>(TlsCertificateFlags lhs, TlsCertificateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8fd13816125414ef8f52696da2c1e0ca</anchor>
      <arglist>(TlsCertificateFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga69a2edc59567e8ddc43d718a01ca11a3</anchor>
      <arglist>(TlsCertificateFlags &amp;lhs, TlsCertificateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga232c3a04aca042c4193284eba69830eb</anchor>
      <arglist>(TlsCertificateFlags &amp;lhs, TlsCertificateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga7960cd8bde85baaf03372bf57015d123</anchor>
      <arglist>(TlsCertificateFlags &amp;lhs, TlsCertificateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileQueryInfoFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaba7574ea0b336541af125d4eb9423088</anchor>
      <arglist>(FileQueryInfoFlags lhs, FileQueryInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileQueryInfoFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga88919bc64976573d31af5a4621436b3a</anchor>
      <arglist>(FileQueryInfoFlags lhs, FileQueryInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileQueryInfoFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gacae77e10133f304081534efa76be4a52</anchor>
      <arglist>(FileQueryInfoFlags lhs, FileQueryInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileQueryInfoFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga42422c40ea08ec4f0ad74c8e2a657eb5</anchor>
      <arglist>(FileQueryInfoFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>FileQueryInfoFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gac59d6f3b6a2adca24d2763ba2af99a02</anchor>
      <arglist>(FileQueryInfoFlags &amp;lhs, FileQueryInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileQueryInfoFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaaea473e3ea4be6ab9de95a0099a33983</anchor>
      <arglist>(FileQueryInfoFlags &amp;lhs, FileQueryInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileQueryInfoFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga55adc6ecb3a15cb850b30bafb7eb9248</anchor>
      <arglist>(FileQueryInfoFlags &amp;lhs, FileQueryInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCreateFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga431f17ab67ccea562ea556c10df6bd27</anchor>
      <arglist>(FileCreateFlags lhs, FileCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCreateFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga150cbdf6590be48029d85d14dab2f85b</anchor>
      <arglist>(FileCreateFlags lhs, FileCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCreateFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab4d3e010c78b9f5ca2673210269b999d</anchor>
      <arglist>(FileCreateFlags lhs, FileCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCreateFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga703109997bbde3b6a686dd36ec9d35ad</anchor>
      <arglist>(FileCreateFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>FileCreateFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga4f6ed1c3e6f2a3a7d394b62f3166df7a</anchor>
      <arglist>(FileCreateFlags &amp;lhs, FileCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCreateFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga6a9894f553ae85b4cf5bba980bccc9f1</anchor>
      <arglist>(FileCreateFlags &amp;lhs, FileCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCreateFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga045123aaa65f69e2a76a488d1024e34d</anchor>
      <arglist>(FileCreateFlags &amp;lhs, FileCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCopyFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga0b841b27ceceb381f08e1bc5cf929eb1</anchor>
      <arglist>(FileCopyFlags lhs, FileCopyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCopyFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga41baf7218374c765844ff2a7dcb9c39a</anchor>
      <arglist>(FileCopyFlags lhs, FileCopyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCopyFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga29b016e93e7a6dfdebc4f9f6e4fbf1c1</anchor>
      <arglist>(FileCopyFlags lhs, FileCopyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCopyFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga70312f36423a73fbf663c64824631dc8</anchor>
      <arglist>(FileCopyFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>FileCopyFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gabb9c03e9bbf1ef698696dc08b0d36371</anchor>
      <arglist>(FileCopyFlags &amp;lhs, FileCopyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCopyFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gafeb53f251bc932077ba5190238c12a8d</anchor>
      <arglist>(FileCopyFlags &amp;lhs, FileCopyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCopyFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga514b3929469585c9cfc222ef2daf4fea</anchor>
      <arglist>(FileCopyFlags &amp;lhs, FileCopyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileMonitorFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab3fab04e51aeff08aaf235f038e50d72</anchor>
      <arglist>(FileMonitorFlags lhs, FileMonitorFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileMonitorFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga74a4fb73c8d8bb4ff84ae5f73ba88c91</anchor>
      <arglist>(FileMonitorFlags lhs, FileMonitorFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileMonitorFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga81b5df359bd6a61df867af8274d182ae</anchor>
      <arglist>(FileMonitorFlags lhs, FileMonitorFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileMonitorFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga501c69e3e5101b66d2e5fb8181229b2c</anchor>
      <arglist>(FileMonitorFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>FileMonitorFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8af51d7b4e7b78d3f0153090674470aa</anchor>
      <arglist>(FileMonitorFlags &amp;lhs, FileMonitorFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileMonitorFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaccd6a49937bb6b3e0b9854ba3a777c2a</anchor>
      <arglist>(FileMonitorFlags &amp;lhs, FileMonitorFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileMonitorFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaffa032f65b2c0270e12fe6bafa5c36bf</anchor>
      <arglist>(FileMonitorFlags &amp;lhs, FileMonitorFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileMeasureFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga881f9e3f716eea055f2436e00f817bcd</anchor>
      <arglist>(FileMeasureFlags lhs, FileMeasureFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileMeasureFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga46c1ae06b82fb82ce83a13586a77cb04</anchor>
      <arglist>(FileMeasureFlags lhs, FileMeasureFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileMeasureFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga178b6b7a47d7191a834ba91ef45d8900</anchor>
      <arglist>(FileMeasureFlags lhs, FileMeasureFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileMeasureFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga73ba283b4941eb5ed0586c5de9e687af</anchor>
      <arglist>(FileMeasureFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>FileMeasureFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8b334fb16e12f2fb292818af8f91430b</anchor>
      <arglist>(FileMeasureFlags &amp;lhs, FileMeasureFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileMeasureFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga0543255c72616f0d65a3c92d3a080770</anchor>
      <arglist>(FileMeasureFlags &amp;lhs, FileMeasureFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileMeasureFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga1dd67b3e69f82f1ae7d29ae6a36a0571</anchor>
      <arglist>(FileMeasureFlags &amp;lhs, FileMeasureFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileAttributeInfoFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3779f0623bf9380fb656028b9bc88323</anchor>
      <arglist>(FileAttributeInfoFlags lhs, FileAttributeInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileAttributeInfoFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaca854e01ff332df713e3f3e4f004cdf8</anchor>
      <arglist>(FileAttributeInfoFlags lhs, FileAttributeInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileAttributeInfoFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gade49ce26dfa73eb2eb9fc56534ac1319</anchor>
      <arglist>(FileAttributeInfoFlags lhs, FileAttributeInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileAttributeInfoFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga9150f4358ab779fd1267151c4ee84a46</anchor>
      <arglist>(FileAttributeInfoFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>FileAttributeInfoFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gadebdfefd85c32a1b626bce9ae251138b</anchor>
      <arglist>(FileAttributeInfoFlags &amp;lhs, FileAttributeInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileAttributeInfoFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga9ae9134d75beb6ab7128bb5765ebee73</anchor>
      <arglist>(FileAttributeInfoFlags &amp;lhs, FileAttributeInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileAttributeInfoFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf8c86d142fcb81426bc429d51da4f7d9</anchor>
      <arglist>(FileAttributeInfoFlags &amp;lhs, FileAttributeInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOStreamSpliceFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gadd33991052b8c7b6d70b6afd4c4b3850</anchor>
      <arglist>(IOStreamSpliceFlags lhs, IOStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOStreamSpliceFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaef13d603f1c86ee8b308f606c881de9a</anchor>
      <arglist>(IOStreamSpliceFlags lhs, IOStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOStreamSpliceFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga798437d9bba38467f6bf1eb02935f618</anchor>
      <arglist>(IOStreamSpliceFlags lhs, IOStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOStreamSpliceFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga69033ae6dd34521e4951f4a5ca14dfff</anchor>
      <arglist>(IOStreamSpliceFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>IOStreamSpliceFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gadeb0ed62d112c12255260042ff0205dd</anchor>
      <arglist>(IOStreamSpliceFlags &amp;lhs, IOStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOStreamSpliceFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga03cc958c73d1f7560e3138c317ecf1fc</anchor>
      <arglist>(IOStreamSpliceFlags &amp;lhs, IOStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOStreamSpliceFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gad48e0449d3be29a9e01e27982d62fad6</anchor>
      <arglist>(IOStreamSpliceFlags &amp;lhs, IOStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountUnmountFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga42e2925c2e192eb3e9b71b727e676644</anchor>
      <arglist>(MountUnmountFlags lhs, MountUnmountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountUnmountFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaff0fe1fa0d77c5d5e3d9d7699399dc29</anchor>
      <arglist>(MountUnmountFlags lhs, MountUnmountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountUnmountFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga76909c76363248e860a94b20dad18ad9</anchor>
      <arglist>(MountUnmountFlags lhs, MountUnmountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountUnmountFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gace7018ee540582a709530dce1dd9191a</anchor>
      <arglist>(MountUnmountFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>MountUnmountFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga2d1ab6ef14833802a3615e54b8115aa8</anchor>
      <arglist>(MountUnmountFlags &amp;lhs, MountUnmountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountUnmountFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gad1b73a7e5a218228776589769d64ba61</anchor>
      <arglist>(MountUnmountFlags &amp;lhs, MountUnmountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountUnmountFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga6a939c0dc5f5b25dbad5cdb7a1848184</anchor>
      <arglist>(MountUnmountFlags &amp;lhs, MountUnmountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountMountFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga1248f40d35ae4fb70d74c5df295cb4ae</anchor>
      <arglist>(MountMountFlags lhs, MountMountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountMountFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa6fbc60829952ed9919950afc79ba424</anchor>
      <arglist>(MountMountFlags lhs, MountMountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountMountFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga02952bdc6c064b144e6667e326618c2d</anchor>
      <arglist>(MountMountFlags lhs, MountMountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountMountFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga74223d1de9c9db1c53429a6d23671d4f</anchor>
      <arglist>(MountMountFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>MountMountFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaab40e5b0bc75d3308e8cb78606c4eb18</anchor>
      <arglist>(MountMountFlags &amp;lhs, MountMountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountMountFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gafa4281057a072141233a22d8aaf9b737</anchor>
      <arglist>(MountMountFlags &amp;lhs, MountMountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountMountFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gad941eb418369c3f95f0b5c046e7d868d</anchor>
      <arglist>(MountMountFlags &amp;lhs, MountMountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AskPasswordFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab444ed2fbe1877464f469a64d9107e36</anchor>
      <arglist>(AskPasswordFlags lhs, AskPasswordFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AskPasswordFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gad25d80c61831198a4eb6ecbef4918b85</anchor>
      <arglist>(AskPasswordFlags lhs, AskPasswordFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AskPasswordFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf0b37f457e38844832549486982ed1d8</anchor>
      <arglist>(AskPasswordFlags lhs, AskPasswordFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AskPasswordFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga993dba04647b8f34ad72e86cbc88ba34</anchor>
      <arglist>(AskPasswordFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>AskPasswordFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga01e87fab2e1906ac5eafa153747ceae9</anchor>
      <arglist>(AskPasswordFlags &amp;lhs, AskPasswordFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AskPasswordFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gac9b1bc2be6351cafe0275aeec24a2d8f</anchor>
      <arglist>(AskPasswordFlags &amp;lhs, AskPasswordFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AskPasswordFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8e3411a2fa7d7f016953b5f84dbad4c1</anchor>
      <arglist>(AskPasswordFlags &amp;lhs, AskPasswordFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>OutputStreamSpliceFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaef500d088ea9d123dc514f71c4c67b1d</anchor>
      <arglist>(OutputStreamSpliceFlags lhs, OutputStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>OutputStreamSpliceFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga722e50f24697e0cfe734708528c4aa38</anchor>
      <arglist>(OutputStreamSpliceFlags lhs, OutputStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>OutputStreamSpliceFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga14a79b6dee4f711a22b52bf259539e34</anchor>
      <arglist>(OutputStreamSpliceFlags lhs, OutputStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>OutputStreamSpliceFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gafcded381df7535fe7c41bb8f8c21c169</anchor>
      <arglist>(OutputStreamSpliceFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>OutputStreamSpliceFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga5602d53794a62a9e823005e6f9aed428</anchor>
      <arglist>(OutputStreamSpliceFlags &amp;lhs, OutputStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>OutputStreamSpliceFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga5c52121dbb21b04f7d25cda1b757a514</anchor>
      <arglist>(OutputStreamSpliceFlags &amp;lhs, OutputStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>OutputStreamSpliceFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga01f192f0f1b9f66047d603780c458e6e</anchor>
      <arglist>(OutputStreamSpliceFlags &amp;lhs, OutputStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ResourceFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga516e2a00d96b55f44b38f344f7e33958</anchor>
      <arglist>(ResourceFlags lhs, ResourceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ResourceFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gabcdcaaffd25561491f5ab9c4cda672da</anchor>
      <arglist>(ResourceFlags lhs, ResourceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ResourceFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gace4049bb40811eef3a5e999e2818b8a4</anchor>
      <arglist>(ResourceFlags lhs, ResourceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ResourceFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gad9978d07f4e7b6d6c1bcf01bc61a76ec</anchor>
      <arglist>(ResourceFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>ResourceFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaacd735992103524e700acf793263248c</anchor>
      <arglist>(ResourceFlags &amp;lhs, ResourceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ResourceFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf78667a2e52296da815408fa928b3c8c</anchor>
      <arglist>(ResourceFlags &amp;lhs, ResourceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ResourceFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaebb4dc4755df27ef3c41fc535e3e96cc</anchor>
      <arglist>(ResourceFlags &amp;lhs, ResourceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ResourceLookupFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga20427c15169127d85de3e40bfccda3b9</anchor>
      <arglist>(ResourceLookupFlags lhs, ResourceLookupFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ResourceLookupFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gad194da034c5dbe05ba49724a8d513416</anchor>
      <arglist>(ResourceLookupFlags lhs, ResourceLookupFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ResourceLookupFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa9ebf29ebadd80df263f088a1b90b583</anchor>
      <arglist>(ResourceLookupFlags lhs, ResourceLookupFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ResourceLookupFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga217b7daa1dfa4753ae2d2d4b0afe5fcc</anchor>
      <arglist>(ResourceLookupFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>ResourceLookupFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gac1a4ea570928539b089d621205950fbf</anchor>
      <arglist>(ResourceLookupFlags &amp;lhs, ResourceLookupFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ResourceLookupFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga1ee5171f4482aa90093c848f003ecf1e</anchor>
      <arglist>(ResourceLookupFlags &amp;lhs, ResourceLookupFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ResourceLookupFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gacb4f3bd6cedade144573c1722a028e4a</anchor>
      <arglist>(ResourceLookupFlags &amp;lhs, ResourceLookupFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SettingsBindFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8cd5ffb873f77345b515bf4ec2522ad7</anchor>
      <arglist>(SettingsBindFlags lhs, SettingsBindFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SettingsBindFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3cfc37090e507ab83ba08e96e2248c24</anchor>
      <arglist>(SettingsBindFlags lhs, SettingsBindFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SettingsBindFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gabe81d29f028b8bfb85c189c2471a290d</anchor>
      <arglist>(SettingsBindFlags lhs, SettingsBindFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SettingsBindFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3faf22f64ae075a5465b7827001101d2</anchor>
      <arglist>(SettingsBindFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>SettingsBindFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga0299f50197606d69c0f306224760fcdb</anchor>
      <arglist>(SettingsBindFlags &amp;lhs, SettingsBindFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SettingsBindFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga58044b0ab24bee93db6b0385d4792383</anchor>
      <arglist>(SettingsBindFlags &amp;lhs, SettingsBindFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SettingsBindFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3f4f0e3823c4d8ce3470b656913fb4e0</anchor>
      <arglist>(SettingsBindFlags &amp;lhs, SettingsBindFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SocketMsgFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa085ca077592487a87d8339ce3324166</anchor>
      <arglist>(SocketMsgFlags lhs, SocketMsgFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SocketMsgFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaeef3544f65ae7406b8d5e938e868497f</anchor>
      <arglist>(SocketMsgFlags lhs, SocketMsgFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SocketMsgFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaadfaf5e3a456218e23ca0ee13ac3db3d</anchor>
      <arglist>(SocketMsgFlags lhs, SocketMsgFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SocketMsgFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf31952f93c501b25194ad46df8994752</anchor>
      <arglist>(SocketMsgFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>SocketMsgFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga62b41279cd63908c0736e96f868e832e</anchor>
      <arglist>(SocketMsgFlags &amp;lhs, SocketMsgFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SocketMsgFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga02ec1970d51a454fac3f5763139129f9</anchor>
      <arglist>(SocketMsgFlags &amp;lhs, SocketMsgFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SocketMsgFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab892045d6e9cf73dc96593ead692145b</anchor>
      <arglist>(SocketMsgFlags &amp;lhs, SocketMsgFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseVerifyFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga39e0d92d55656c2a2632f98636265306</anchor>
      <arglist>(TlsDatabaseVerifyFlags lhs, TlsDatabaseVerifyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseVerifyFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaedc27cd6cf2b592e2424cad4ad95f3ca</anchor>
      <arglist>(TlsDatabaseVerifyFlags lhs, TlsDatabaseVerifyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseVerifyFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8368dd487149972f892a91422e9bd33b</anchor>
      <arglist>(TlsDatabaseVerifyFlags lhs, TlsDatabaseVerifyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseVerifyFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf2f0b0b2463b3e547db1a4b85603bd36</anchor>
      <arglist>(TlsDatabaseVerifyFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseVerifyFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga23b4f358bf1da65d761823c0c14601a3</anchor>
      <arglist>(TlsDatabaseVerifyFlags &amp;lhs, TlsDatabaseVerifyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseVerifyFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga158c2843a2b32fa4908b9bba406b145d</anchor>
      <arglist>(TlsDatabaseVerifyFlags &amp;lhs, TlsDatabaseVerifyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseVerifyFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gacf39fa96fbecf1a1eb1c265794b79c03</anchor>
      <arglist>(TlsDatabaseVerifyFlags &amp;lhs, TlsDatabaseVerifyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseLookupFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga17032c82d6f99398b325773ecfbb8864</anchor>
      <arglist>(TlsDatabaseLookupFlags lhs, TlsDatabaseLookupFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseLookupFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab22bf778be0148df6250fc1fb68b71eb</anchor>
      <arglist>(TlsDatabaseLookupFlags lhs, TlsDatabaseLookupFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseLookupFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaab103c2de8ca0e1abc5afb44a06ab7c7</anchor>
      <arglist>(TlsDatabaseLookupFlags lhs, TlsDatabaseLookupFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseLookupFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gae83d0705d3e1b6a1c1214802fd0413a7</anchor>
      <arglist>(TlsDatabaseLookupFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseLookupFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga70adec8becf6acbe4d1f3a7d32512647</anchor>
      <arglist>(TlsDatabaseLookupFlags &amp;lhs, TlsDatabaseLookupFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseLookupFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gacdd2b1e7736f4aa17054d4ca3b61b928</anchor>
      <arglist>(TlsDatabaseLookupFlags &amp;lhs, TlsDatabaseLookupFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseLookupFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gad91ca8afd55f164582fc2182414a567d</anchor>
      <arglist>(TlsDatabaseLookupFlags &amp;lhs, TlsDatabaseLookupFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateRequestFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf22bb92488cf1cd6097decfc5ccff4aa</anchor>
      <arglist>(TlsCertificateRequestFlags lhs, TlsCertificateRequestFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateRequestFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gabfaa5e32da493e3ef962f54c54af1d1d</anchor>
      <arglist>(TlsCertificateRequestFlags lhs, TlsCertificateRequestFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateRequestFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gabf70e6fec894c648a62a8b3057601b90</anchor>
      <arglist>(TlsCertificateRequestFlags lhs, TlsCertificateRequestFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateRequestFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga9b6865e73e13095e7a4a57bbac28db74</anchor>
      <arglist>(TlsCertificateRequestFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateRequestFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga25a044628996f41d7419dd2ea3631ca7</anchor>
      <arglist>(TlsCertificateRequestFlags &amp;lhs, TlsCertificateRequestFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateRequestFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga1f52ad40e03db53a888abb29ea90d787</anchor>
      <arglist>(TlsCertificateRequestFlags &amp;lhs, TlsCertificateRequestFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateRequestFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gad07b2cce57653f7ed382f2fecaba5798</anchor>
      <arglist>(TlsCertificateRequestFlags &amp;lhs, TlsCertificateRequestFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsPasswordFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gafbbaf640a1d770dc0bd46380763952e8</anchor>
      <arglist>(TlsPasswordFlags lhs, TlsPasswordFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsPasswordFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga80adba52fb921f5ce8582cb7144746bd</anchor>
      <arglist>(TlsPasswordFlags lhs, TlsPasswordFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsPasswordFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga18b59057b4efe6dfb55345e198c2dd4a</anchor>
      <arglist>(TlsPasswordFlags lhs, TlsPasswordFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsPasswordFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga9c6566499acc6dbfb73ad14225ebaff4</anchor>
      <arglist>(TlsPasswordFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>TlsPasswordFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab3d9e43f9d3f79660d3eba8402cc3c7d</anchor>
      <arglist>(TlsPasswordFlags &amp;lhs, TlsPasswordFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsPasswordFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaba35b9420c7c104d2b57477658a6d3c5</anchor>
      <arglist>(TlsPasswordFlags &amp;lhs, TlsPasswordFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsPasswordFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga1bf68c82d083fab33b612fe7756b7d56</anchor>
      <arglist>(TlsPasswordFlags &amp;lhs, TlsPasswordFlags rhs)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>glibmmEnums</name>
    <title>glibmm Enums and Flags</title>
    <filename>group__glibmmEnums.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>TraverseType</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gae3a70fa1e451da068323419e8c98e9a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAVERSE_IN_ORDER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggae3a70fa1e451da068323419e8c98e9a9aa7f260b474a886df2bf1aefcfc0f14b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAVERSE_PRE_ORDER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggae3a70fa1e451da068323419e8c98e9a9abed8efe71581ccb087323f38b6807661</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAVERSE_POST_ORDER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggae3a70fa1e451da068323419e8c98e9a9a0af70e322b94dfbbfc98b100d21cef4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAVERSE_LEVEL_ORDER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggae3a70fa1e451da068323419e8c98e9a9a16cd819f4ab8175453f6287aeefad870</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TraverseFlags</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gad11179d39a4991e5b09f145d594a450e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAVERSE_LEAVES</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggad11179d39a4991e5b09f145d594a450ea7da8793fdd0c433870a5e6c2e3152898</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAVERSE_NON_LEAVES</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggad11179d39a4991e5b09f145d594a450ea6473ae1f054172ae349d01003fabf37f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAVERSE_ALL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggad11179d39a4991e5b09f145d594a450ea1be75d605b0c93ca7932110467536670</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAVERSE_MASK</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggad11179d39a4991e5b09f145d594a450ea6832c7b45443db4eed6f4cfbd3c04b69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AsciiType</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga2e5a690ed07dfaa6f9ad9f1c57acd787</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_ALNUM</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787af7d63a99479102b5391b44f631b5f009</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_ALPHA</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787ac87947c729ac3c3f9f58b0ca28460152</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_CNTRL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787a2e19c57ce5a6eac38d911a86cc44a2fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_DIGIT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787a9acd9a82d0670a3eb0377db782f48853</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_GRAPH</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787a2ecdbe5137af423fce73ff2bbb34d625</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_LOWER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787a875d3cb7494e1548db0d37ab44d4057e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_PRINT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787a9b1775043a8043d994c0c0ab890e86c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_PUNCT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787ad3416d8662560db626259013ff72c58f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_SPACE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787a7d7a68814efba3cf3d294475123413ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_UPPER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787a5ae30681069b2ab88eed13e358c08090</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_XDIGIT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787ad78490a35d65839f2f06449e7e472337</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OptionType</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gabd6606988f30170f2e53b2b121f2b219</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTION_TYPE_BOOL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd6606988f30170f2e53b2b121f2b219a31b0b3d2951ef1533e8a2775db79250e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTION_TYPE_STRING</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd6606988f30170f2e53b2b121f2b219a018d6130d8f46e1dbdf7db263c54d05e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTION_TYPE_INT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd6606988f30170f2e53b2b121f2b219ab5f2e456b9c5bd209c872b11a878d29b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTION_TYPE_FILENAME</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd6606988f30170f2e53b2b121f2b219aa24cb753e2b6aa5411bbc242217935ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTION_TYPE_STRING_VECTOR</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd6606988f30170f2e53b2b121f2b219adc4a9ed1661944d8301d372708915d78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTION_TYPE_FILENAME_VECTOR</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd6606988f30170f2e53b2b121f2b219a9f3ccf0b9217a0d5380bc97d11117c58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTION_TYPE_DOUBLE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd6606988f30170f2e53b2b121f2b219a320a43020a59acf7a724177a30d0265e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTION_TYPE_INT64</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd6606988f30170f2e53b2b121f2b219ae4ceecbbf5f1e343ca896fcd442d707f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BindingFlags</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga6af48352fc6ed053e5ebebfe02630a6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BINDING_DEFAULT</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga6af48352fc6ed053e5ebebfe02630a6fa429c481acc1ddaca5c09e6d84f7dae29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BINDING_BIDIRECTIONAL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga6af48352fc6ed053e5ebebfe02630a6fa0c2d9e60dc3177e8dd56f36e275b3327</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BINDING_SYNC_CREATE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga6af48352fc6ed053e5ebebfe02630a6fac39d6aa495608453a377af413fb7e9b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BINDING_INVERT_BOOLEAN</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga6af48352fc6ed053e5ebebfe02630a6faf5440a686da1abfc17d17cb1071f008c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ChecksumType</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga5d1c13a9d5c34bff7dd1e74654f282eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHECKSUM_MD5</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>ga5d1c13a9d5c34bff7dd1e74654f282ebaa22d278286ecebcc3bc58636a1aa909d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHECKSUM_SHA1</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>ga5d1c13a9d5c34bff7dd1e74654f282ebab2258b031ebb9a20477f4d564ac26e52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHECKSUM_SHA256</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>ga5d1c13a9d5c34bff7dd1e74654f282ebadc95ea210a79482241022fd0bb19c957</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHECKSUM_SHA512</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>ga5d1c13a9d5c34bff7dd1e74654f282eba7a4ed07c4b7a43431ac773c8485f871a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHECKSUM_SHA384</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>ga5d1c13a9d5c34bff7dd1e74654f282eba3a3a0a9a1e28931d9a01141e97eae091</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Month</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_MONTH</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fab42b19485c354997ff99d0280d8883bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JANUARY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fa41f162c224a741223ef2a282a22f7612</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEBRUARY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fa6e58a73346cb200c19e1a2e8c6766c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MARCH</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031faa6f580fd1bf61b898baa203eab425ef9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APRIL</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fa1ae9ac1173f8c33acd183f4af21503e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fa8cb59e2c5f3f4c407f839648428e781b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JUNE</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fa45b980fffd2bca9caa454c0ff22d4668</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JULY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fa79d02809a794bfff2a3fee86d9029b68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AUGUST</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fa0f91e886e724ba8b2b78c4c109608806</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEPTEMBER</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fa6bb760f0b99884e88b05dd45361a8e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OCTOBER</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fad88f29a9fe61914cfba985c0d99caaf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOVEMBER</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fa8d76aafc0a7ccce22e224702332c02f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DECEMBER</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031fa707720b95b5565ecc2082487cda63936</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Weekday</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga073c9f49a289b2036eb226bcdf16a2f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_WEEKDAY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga073c9f49a289b2036eb226bcdf16a2f1a209441f7cd5e544bd8715ebbd53cb578</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MONDAY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga073c9f49a289b2036eb226bcdf16a2f1aa910eb464873ddd2ac4b3f2975796275</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TUESDAY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga073c9f49a289b2036eb226bcdf16a2f1ad096dfc005da0574f708365aca840edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WEDNESDAY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga073c9f49a289b2036eb226bcdf16a2f1a6893621fdc75f8d2f9ab4aadbf00f94e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THURSDAY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga073c9f49a289b2036eb226bcdf16a2f1a94dc5538b8f75d17020925c582c66f88</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FRIDAY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga073c9f49a289b2036eb226bcdf16a2f1a94ba4c5d515872decaf2986ca953a8d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SATURDAY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga073c9f49a289b2036eb226bcdf16a2f1acad9946c6af8b8132a6264e14b5b51cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUNDAY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ga073c9f49a289b2036eb226bcdf16a2f1a3fac85ddb897babe92ad1888cd325742</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DMY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gac803072d86bbc2ce1f7d558c94f41ae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DAY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>gac803072d86bbc2ce1f7d558c94f41ae1a560fa4f9a4733a4c043b3f279610f9d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MONTH</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>gac803072d86bbc2ce1f7d558c94f41ae1aba581b678d9b703faa5db3eb0d1713d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>YEAR</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>gac803072d86bbc2ce1f7d558c94f41ae1a9f9e923dc13c924a74987cf00250674e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ParamFlags</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga795b9718605425a03f337e0b7421fcbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_READABLE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga795b9718605425a03f337e0b7421fcbca8e86b397b1d896933f70bf78427dbc79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_WRITABLE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga795b9718605425a03f337e0b7421fcbcae586772dc00a2c781f504fdc4701846f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_READWRITE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga795b9718605425a03f337e0b7421fcbcad1554dc8f8eecab55f7c30e23ac391b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_CONSTRUCT</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga795b9718605425a03f337e0b7421fcbcaa9e37000824a21f417101c94c37b2adb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_CONSTRUCT_ONLY</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga795b9718605425a03f337e0b7421fcbcabc569cdee078f113f586999cd391f5d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_LAX_VALIDATION</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga795b9718605425a03f337e0b7421fcbca4c7e3a69c2d5e8e8419e912eb434e0e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_STATIC_NAME</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga795b9718605425a03f337e0b7421fcbcaea9c4dec23c8bbac14eaa8577e338551</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_PRIVATE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga795b9718605425a03f337e0b7421fcbcabc996f6a17c5aef47bcd8b0de7c2ea81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_STATIC_NICK</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga795b9718605425a03f337e0b7421fcbca5994d69d3d72b93e77536b5a531bd142</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_STATIC_BLURB</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga795b9718605425a03f337e0b7421fcbca703a97fea00613c8ddbd4211c4ed24df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_EXPLICIT_NOTIFY</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga795b9718605425a03f337e0b7421fcbca3dd3566586228c77257e6410386fa8c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_DEPRECATED</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga795b9718605425a03f337e0b7421fcbca586e2c999d0a2560e1804da0b36ab7ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileTest</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga33c24ccefbd130021f06708763e16ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TEST_IS_REGULAR</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga33c24ccefbd130021f06708763e16ef2ad7bb008269376841fe11c05da9c01a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TEST_IS_SYMLINK</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga33c24ccefbd130021f06708763e16ef2ae9fcdfcc6fc6ee7bb83ce9634e5e9f18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TEST_IS_DIR</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga33c24ccefbd130021f06708763e16ef2ae4072d5338587b51642d1a68c730ec19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TEST_IS_EXECUTABLE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga33c24ccefbd130021f06708763e16ef2ae236ad1999c8c106a5ff31154ebd5692</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TEST_EXISTS</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga33c24ccefbd130021f06708763e16ef2aa6cf22c3904f707c94f2ad911b5df6fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SeekType</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaa3767731311bdba4ef42dc99215e5cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEEK_TYPE_CUR</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaa3767731311bdba4ef42dc99215e5cdaac0fc030f79f4b5623de9867333011e30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEEK_TYPE_SET</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaa3767731311bdba4ef42dc99215e5cdaaa8e02688f42163a11bb8b47a72456bc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEEK_TYPE_END</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaa3767731311bdba4ef42dc99215e5cdaa615f7b38be2cbd60fe5fbebd656f38bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>IOStatus</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga23fb251e48485b62a9c2677bb1f87d5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STATUS_ERROR</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga23fb251e48485b62a9c2677bb1f87d5eabf1fa62d0111ab895ecb887ce6cce1c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STATUS_NORMAL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga23fb251e48485b62a9c2677bb1f87d5eaf2008e64a9691fc76ad9320baef5c8ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STATUS_EOF</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga23fb251e48485b62a9c2677bb1f87d5ea63be2a355cd7187f9ccdd854c80fd10c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STATUS_AGAIN</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga23fb251e48485b62a9c2677bb1f87d5ead240a3a0fd203dd76e11b76a8115d881</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>IOFlags</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaee093e5db5bc1ea5738771ba0d1af3b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_APPEND</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaee093e5db5bc1ea5738771ba0d1af3b7a0eddd66348cb8ec7aceef67736d59cce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_NONBLOCK</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaee093e5db5bc1ea5738771ba0d1af3b7a1a71350ea4fc4f9779a3a884f6977269</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_IS_READABLE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaee093e5db5bc1ea5738771ba0d1af3b7a45c527b36c1a1df9b5b1202f84eafeed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_IS_WRITABLE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaee093e5db5bc1ea5738771ba0d1af3b7a0632918f94e302c0b20e722e941ad124</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_IS_WRITEABLE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaee093e5db5bc1ea5738771ba0d1af3b7ac8bc4ce7e268189488cb98c94e15ce66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_IS_SEEKABLE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaee093e5db5bc1ea5738771ba0d1af3b7a65e5b54c7fad833478ed9cc169cc15be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_MASK</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaee093e5db5bc1ea5738771ba0d1af3b7a26bca9503544a0e4388041812e3ea1e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_GET_MASK</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaee093e5db5bc1ea5738771ba0d1af3b7a06c9ef83e6adc8a4b4ea98dd396e2206</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_SET_MASK</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaee093e5db5bc1ea5738771ba0d1af3b7a31bd353961673e2199474810e2ff3ff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>IOCondition</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gabd96381793b70d4ae32c725926990918</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_IN</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gabd96381793b70d4ae32c725926990918aa38ee764d957d52ccd85688c27778daf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_OUT</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gabd96381793b70d4ae32c725926990918a0945b81e85eb8d2d26e77fdc04821cae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_PRI</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gabd96381793b70d4ae32c725926990918ac8998d8c99453ea30c1ba129f89ec5a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERR</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gabd96381793b70d4ae32c725926990918a1798f7312c98ff12681ed93f1b08f0d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_HUP</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gabd96381793b70d4ae32c725926990918aa290fc1a996ead6c153515d4771fcdb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_NVAL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gabd96381793b70d4ae32c725926990918aadf52e698f361e79b53f0bcb3266df24</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>KeyFileFlags</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga5866be36312563d91e5a7be27348459b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KEY_FILE_NONE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga5866be36312563d91e5a7be27348459baec458bae700a8dfd34898a5ab5b22d3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KEY_FILE_KEEP_COMMENTS</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga5866be36312563d91e5a7be27348459ba27ebf6c0c9a771f0268f7b06fe7e0347</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KEY_FILE_KEEP_TRANSLATIONS</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga5866be36312563d91e5a7be27348459ba498ea5abdc02d9a60db9a0d2873f5c58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ParseFlags</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaa4fcaf917b6eb2aa085817e83b0a4108</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DO_NOT_USE_THIS_UNSUPPORTED_FLAG</name>
      <anchorfile>namespaceGlib_1_1Markup.html</anchorfile>
      <anchor>gaa4fcaf917b6eb2aa085817e83b0a4108a3f48cb56dd56d529c9379ae244441e90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TREAT_CDATA_AS_TEXT</name>
      <anchorfile>namespaceGlib_1_1Markup.html</anchorfile>
      <anchor>gaa4fcaf917b6eb2aa085817e83b0a4108adc8bc2a2d501a339db31b5e3a8351646</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PREFIX_ERROR_POSITION</name>
      <anchorfile>namespaceGlib_1_1Markup.html</anchorfile>
      <anchor>gaa4fcaf917b6eb2aa085817e83b0a4108aad5bd1990be534b2dc3a73f69b283114</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IGNORE_QUALIFIED</name>
      <anchorfile>namespaceGlib_1_1Markup.html</anchorfile>
      <anchor>gaa4fcaf917b6eb2aa085817e83b0a4108ab6113dcacb1e8b362936ef34c7bbf301</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>UserDirectory</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga1d1ca7293a7a06f1d34ef3e21440b819</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USER_DIRECTORY_DESKTOP</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1d1ca7293a7a06f1d34ef3e21440b819a9bdde992722bfa20afe0533273f82bd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USER_DIRECTORY_DOCUMENTS</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1d1ca7293a7a06f1d34ef3e21440b819a3550469cfb212ed889b1106750495040</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USER_DIRECTORY_DOWNLOAD</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1d1ca7293a7a06f1d34ef3e21440b819aaf0c0361b86fd7c7e5cbf8015632bcd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USER_DIRECTORY_MUSIC</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1d1ca7293a7a06f1d34ef3e21440b819a5b8e18721d39fbb45fbf965088170ca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USER_DIRECTORY_PICTURES</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1d1ca7293a7a06f1d34ef3e21440b819a2623f44d7b841e7f781098afc1716e07</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USER_DIRECTORY_PUBLIC_SHARE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1d1ca7293a7a06f1d34ef3e21440b819ad516c3546c3ff32fedf4a0722d143b9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USER_DIRECTORY_TEMPLATES</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1d1ca7293a7a06f1d34ef3e21440b819ade29748ce1bc5d37e6662ea8d0c22f31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USER_DIRECTORY_VIDEOS</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1d1ca7293a7a06f1d34ef3e21440b819acde3610b2eec032f93b54863521cd20a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USER_N_DIRECTORIES</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1d1ca7293a7a06f1d34ef3e21440b819ae59fbe2f9e59f050f71638084be185b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FormatSizeFlags</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga53f0c2b27f8ba1bca1e695397a75c673</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FORMAT_SIZE_DEFAULT</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga53f0c2b27f8ba1bca1e695397a75c673aaa2c16592d413276b5243a5b2f14c5af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FORMAT_SIZE_LONG_FORMAT</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga53f0c2b27f8ba1bca1e695397a75c673a95ca15cbe9d4b5ea304e28bc5498ce67</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FORMAT_SIZE_IEC_UNITS</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga53f0c2b27f8ba1bca1e695397a75c673abf93b9978954086005fa99da714ae788</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FORMAT_SIZE_BITS</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga53f0c2b27f8ba1bca1e695397a75c673abde05d3468dbf691f7e199b5b441ae62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ModuleFlags</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga502283ffbe523adf38c69905ec8640f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MODULE_BIND_LAZY</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga502283ffbe523adf38c69905ec8640f3af7dfb341de1af451a3fc28d8c13e4593</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MODULE_BIND_LOCAL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga502283ffbe523adf38c69905ec8640f3a61ed78ca3b7464b163e43240a4fffa96</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MODULE_BIND_MASK</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga502283ffbe523adf38c69905ec8640f3ab1bb8b50aaab642b5abfcddac8d7806b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>RegexCompileFlags</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_CASELESS</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68da4e6c0b8e730db041fc8d1261c2932a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MULTILINE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68dab11968f7c699f48954c586063dc83226</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_DOTALL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68daa30cd6e3af26544676c5c05578f3701f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_EXTENDED</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68dae4955dc52d3f93f46fa7b894689bb9dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_ANCHORED</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68da242c71a1c506054daae47559a087885d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_DOLLAR_ENDONLY</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68da6a311ea6eb4cd26d46bef76a4ecd70d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_UNGREEDY</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68dad3d43ecb091918275855d44bf137432c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_RAW</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68da9aaaffdaa133f45d7412af35ad17b29e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_NO_AUTO_CAPTURE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68da98b6d7f319fcee7ae0c1b9e8dc146869</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_OPTIMIZE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68daefe22a8d4297013ffcef77b83c40bf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_FIRSTLINE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68da4d72c42c744da757f5b4e8760933e355</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_DUPNAMES</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68dad96b981e024568febb07d7f237950a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_NEWLINE_CR</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68da8743e2fb6fc70c8bbf53a025442a9f31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_NEWLINE_LF</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68da18bf3b48001c90a1aefca35dd9bd832b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_NEWLINE_CRLF</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68da31810ab9b1612d3dafbb86d164ea783c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_NEWLINE_ANYCRLF</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68da6c4921ffcc04c53566d6bfe89fcf78b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_BSR_ANYCRLF</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68da9fbe4801ca6fcae969a84c16826b9393</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_JAVASCRIPT_COMPAT</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68da7e66bb34557aafd6de8b6119c229d9c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>RegexMatchFlags</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga8375c7f6797efc96929e8be89435c746</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_ANCHORED</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga8375c7f6797efc96929e8be89435c746a6d9730749c5506b89f3085ce25c80c21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_NOTBOL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga8375c7f6797efc96929e8be89435c746ae09a3a58b8d8e052a35719b4f22f937a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_NOTEOL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga8375c7f6797efc96929e8be89435c746ab8850a97e7a6b06b1a5c97e703be2a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_NOTEMPTY</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga8375c7f6797efc96929e8be89435c746a0aaf0a3c6a7fae74d4a1a6255062ae91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_PARTIAL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga8375c7f6797efc96929e8be89435c746ab8930fa357708487ef7a83350304dc2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_NEWLINE_CR</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga8375c7f6797efc96929e8be89435c746ae0eb9716d96049f41f5560a215ea5dab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_NEWLINE_LF</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga8375c7f6797efc96929e8be89435c746a51549066ff64a814d44958ce9db5243b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_NEWLINE_CRLF</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga8375c7f6797efc96929e8be89435c746ad1536133fab0dd8e25c31c0c8555b365</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_NEWLINE_ANY</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga8375c7f6797efc96929e8be89435c746acebebe55d6e1197e4a7e92a4fc4a999b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_NEWLINE_ANYCRLF</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga8375c7f6797efc96929e8be89435c746aa1a18562a24484f87f73115cb3a722c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_BSR_ANYCRLF</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga8375c7f6797efc96929e8be89435c746affaea7b025e947b22e7378bf0b6baf92</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_BSR_ANY</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga8375c7f6797efc96929e8be89435c746a824f70cd3d882d3717d67325b96a9b3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_PARTIAL_SOFT</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga8375c7f6797efc96929e8be89435c746a69d773f5f7d17ef9b91bd43d545ae1c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_PARTIAL_HARD</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga8375c7f6797efc96929e8be89435c746a1d2d11e330bc91e85a50e01445288b3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_NOTEMPTY_ATSTART</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga8375c7f6797efc96929e8be89435c746aea0015d4a3887504f16321a0f960241f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SpawnFlags</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga075918988c271e7fb63f1a1d083e26dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_DEFAULT</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga075918988c271e7fb63f1a1d083e26dda4198b367b82bc1adf3469423da582663</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_LEAVE_DESCRIPTORS_OPEN</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga075918988c271e7fb63f1a1d083e26dda3b30d87840df513617bd468c750e52c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_DO_NOT_REAP_CHILD</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga075918988c271e7fb63f1a1d083e26dda8ba0abbaa6e1907446857439f454ced1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_SEARCH_PATH</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga075918988c271e7fb63f1a1d083e26dda7d76ee852f6b00ffaef373f3d595139f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_STDOUT_TO_DEV_NULL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga075918988c271e7fb63f1a1d083e26dda7a8c2616db1e6ef21f063652fd60872e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_STDERR_TO_DEV_NULL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga075918988c271e7fb63f1a1d083e26dda198a2b8f3ce92dce5a1117d1c2dac345</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_CHILD_INHERITS_STDIN</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga075918988c271e7fb63f1a1d083e26ddaeb1c843fc647e28134cd3e7fa259f285</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_FILE_AND_ARGV_ZERO</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga075918988c271e7fb63f1a1d083e26ddaead6dad17dda98e0196495dd11d62cd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_SEARCH_PATH_FROM_ENVP</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga075918988c271e7fb63f1a1d083e26dda876ee150dd220b4808c2f9ecab5dc0f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_CLOEXEC_PIPES</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga075918988c271e7fb63f1a1d083e26ddace745e1ccff2497f03ea638316abe076</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ThreadPriority</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga9b87dca6496b6ad53baec9ca01318448</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREAD_PRIORITY_LOW</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga9b87dca6496b6ad53baec9ca01318448a035a7bdc6a5b5eae6f644ed2605e8a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREAD_PRIORITY_NORMAL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga9b87dca6496b6ad53baec9ca01318448a6216bb25baaaca32642841ade911a92e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREAD_PRIORITY_HIGH</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga9b87dca6496b6ad53baec9ca01318448aef77081535e90116b203ce3b3b0fe523</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREAD_PRIORITY_URGENT</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga9b87dca6496b6ad53baec9ca01318448a5b79355bbd59c508995af57e0ed39a94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TimeType</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga56a2fdf6fb8599b99302868a176aac43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIME_TYPE_STANDARD</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga56a2fdf6fb8599b99302868a176aac43ae6b2b23e160971f7487d630c1fa8cf70</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIME_TYPE_DAYLIGHT</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga56a2fdf6fb8599b99302868a176aac43a08bb0503339270dd7bf04c3406cf60c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIME_TYPE_UNIVERSAL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga56a2fdf6fb8599b99302868a176aac43a88ad6264677876bc7203353a1cf45391</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>UnicodeType</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_CONTROL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea600cfdae816c0d120e6e3e4a32d5d9cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_FORMAT</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea5b522871761887006148af4734e84875</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_UNASSIGNED</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea6e8a7e7b5ce23cd99d30f4ab7b672efd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_PRIVATE_USE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea4d8e2c9e7eb9ab4352d6e4b6699267f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_SURROGATE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea69161af321691d504ec819bb9c19b808</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_LOWERCASE_LETTER</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46eaab14707b2ffc2073a6d770ecd70ae321</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_MODIFIER_LETTER</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea7bfc1c73f50fa8c69224e0df70b0b14b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_OTHER_LETTER</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea146261fc855eb4e65cdfb86886bdedf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_TITLECASE_LETTER</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea3f43a11337d15c6050fc1ef0e2da75b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_UPPERCASE_LETTER</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea43db8de276cdf9f23e23a8661456ff4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_SPACING_MARK</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46eac73f211f2caa9d82027985cb8b549cf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_ENCLOSING_MARK</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea9a7db30781bd0d0a61374fd261944e07</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_NON_SPACING_MARK</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea09f4af19dd4a3d3d0f10369f8b8afda2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_DECIMAL_NUMBER</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46eaf93e0b2714dcd443d48e246768a8da9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_LETTER_NUMBER</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea09e6ab53938abe6c9c2d8981f137e5e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_OTHER_NUMBER</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea05027699449d2ff55d446fa7572a8c5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_CONNECT_PUNCTUATION</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea32edc36db8c13121a39dc416b22f822a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_DASH_PUNCTUATION</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46eab3b75b13d04b7ef056e72f798dae0e3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_CLOSE_PUNCTUATION</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea0d4f41955bed4fddc7855ce714e1f957</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_FINAL_PUNCTUATION</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea90fff8c0bd976f3592629074fa3e801f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_INITIAL_PUNCTUATION</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46eace6196e830393b5497bfbfd6501680a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_OTHER_PUNCTUATION</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea1ded1d0a0b6e5936e8a3ecd123f66869</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_OPEN_PUNCTUATION</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea14677d2ca9b5a1354f7460de17579daa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_CURRENCY_SYMBOL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46eae75f8f34e79ffe86801984519eb40e6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_MODIFIER_SYMBOL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea3b6b351ca86d8095ada1d6a32e758d7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_MATH_SYMBOL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46eac35f3c4aa05eca14835c22a4c6a56acf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_OTHER_SYMBOL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea85c851b5804ed262ed84c2d5bc59aa1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_LINE_SEPARATOR</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46ea2a65c1eb916c613c404eea150eac93ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_PARAGRAPH_SEPARATOR</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46eac808b6d7ba1f9cbb28bc0a255578085b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_SPACE_SEPARATOR</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46eabf9e349217923adfb3baef8135756118</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>UnicodeBreakType</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_MANDATORY</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaaade2215e9c2207518154a283bebb5c3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_CARRIAGE_RETURN</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa48ba653f60f909e05dd9b650970ecc1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_LINE_FEED</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaab556cd8a4eaa5d766b3e49591ffae8b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_COMBINING_MARK</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa3f8c62e980013b2e44027ef9c34ce5c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_SURROGATE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaaa47bd54d2aef8bd0e52c07e8abbb65f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_ZERO_WIDTH_SPACE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa37b49337ed4ecd7f53e7c9a2817d029f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_INSEPARABLE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa9913f639ecf34dbe62f6610fc9c3da11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_NON_BREAKING_GLUE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaaab52faa88b6578ab4cd88c3095793653</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_CONTINGENT</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa2cccec32194082ea6f93db40c4af1ca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_SPACE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaac623ed7dc2c0cabe23c2d69f4572b7bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_AFTER</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa9729f705eea307bb7ccb0283a3a85093</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_BEFORE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa32422806593a1aa950f533cf6eb394a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_BEFORE_AND_AFTER</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa05fc37bc6f3efcf0dc74973fb967f7c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_HYPHEN</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa1074d431136b2b556b91e682eee4a189</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_NON_STARTER</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaaeb0c44e9512fb806b9ce4991e9d50f5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_OPEN_PUNCTUATION</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaab7df43ac603e4d7b51d52d5a701e718e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_CLOSE_PUNCTUATION</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa80435e54ace548890b953c6395556c7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_QUOTATION</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaaf28d5b9cddeb8bb905fcfa829f436a2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_EXCLAMATION</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa4ab287f55e05833854353ae861b27f5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_IDEOGRAPHIC</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaabb30f05e59de03b80d55f021de4dd1ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_NUMERIC</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaaacc8824bbbaf262b7563f51afce9be15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_INFIX_SEPARATOR</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaacf598d2b5eb2d0459d2339f2e8a9b237</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_SYMBOL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa1bd798c1ae867ef8879f01778ee37b1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_ALPHABETIC</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaaecf3f2bfd41dbab74e897106fef322c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_PREFIX</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa7e5a7d95bc74c01ca77bd3a3446ebae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_POSTFIX</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa4c4fd955be2dc60284b046f8f7fae397</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_COMPLEX_CONTEXT</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaae0f8fcb8bfaaddb4f30edf642b2a6146</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_AMBIGUOUS</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa84ce090d6c8bf46abd148573bd0e3f78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_UNKNOWN</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaae393ca22fb6bd8b01c1012d4e3386a04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_NEXT_LINE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa28a02b08d3965c0ea0f6ff763a34beac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_WORD_JOINER</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa968e329ae40754bed636979d27540fed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_HANGUL_L_JAMO</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaabfa27ce91eb258c1bd72131c857669d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_HANGUL_V_JAMO</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaaeaea498600767a8af3b41e92816faea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_HANGUL_T_JAMO</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaaabefad2b773b963104e38fe77a03281c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_HANGUL_LV_SYLLABLE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaaccb629a2a1bae689139c8f3cc1048b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_HANGUL_LVT_SYLLABLE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa8903e767aa9ab7445578257292d1a1e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_CLOSE_PARANTHESIS</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaabfb13fbf5e6898e8c038bd4ade5eaa4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa9ccab026be2a4042b441a16dc5c393ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_HEBREW_LETTER</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaaaddbde75b0df1eee37443c5059884f19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_REGIONAL_INDICATOR</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaadff1a8802de9de1cec52b82a9b26f515</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_EMOJI_BASE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa2c31b8c70e7d86a680e6fc5f81b92595</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_EMOJI_MODIFIER</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa0d2fbd391a22f61e75f68e872bb8ada8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_ZERO_WIDTH_JOINER</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0eaa8e123422d888bcb53f913413fc7a5eed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>NormalizeMode</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga18199b64f406e397627a4e7fc799f848</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_DEFAULT</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga18199b64f406e397627a4e7fc799f848a779b5d7aebd18e4b84c5e57ad1e72510</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_NFD</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga18199b64f406e397627a4e7fc799f848a81e760fdac4c57b878ba43603ed6e9d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_DEFAULT_COMPOSE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga18199b64f406e397627a4e7fc799f848af8fec61972c5f6ab8b7e600db176ed06</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_NFC</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga18199b64f406e397627a4e7fc799f848ae3887d6a5497fb144f48348af4d0c2f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_ALL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga18199b64f406e397627a4e7fc799f848a112d77bcde45ec6eb2bf2ac29bb39697</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_NFKD</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga18199b64f406e397627a4e7fc799f848a6dbd51b7381af7adf532faec482be46a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_ALL_COMPOSE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga18199b64f406e397627a4e7fc799f848abfd1d0e2d16a6ba9ef9b0855124aeeb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_NFKC</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ga18199b64f406e397627a4e7fc799f848abf819c3bb24fbe163d47308cc4058640</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>BindingFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga749e95d7cc7706529af4346d2cf93dbe</anchor>
      <arglist>(BindingFlags lhs, BindingFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BindingFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga406ddd8089e99f51026002dc3bf58357</anchor>
      <arglist>(BindingFlags lhs, BindingFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BindingFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga0fc30bce2b354d907971c0bf0e4d2f2e</anchor>
      <arglist>(BindingFlags lhs, BindingFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BindingFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga67a0e7f1c6cc4b071674d8026d562dc4</anchor>
      <arglist>(BindingFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>BindingFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga780a6b8d58daa1d6167da8f1b715d372</anchor>
      <arglist>(BindingFlags &amp;lhs, BindingFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BindingFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaf4f868b995d9f726c515586cd0af6cd2</anchor>
      <arglist>(BindingFlags &amp;lhs, BindingFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BindingFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaa52d6f01bc09aaeab3dd1a8afa4e9b57</anchor>
      <arglist>(BindingFlags &amp;lhs, BindingFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParamFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga64411a0c48e2c3ecbc40926275201071</anchor>
      <arglist>(ParamFlags lhs, ParamFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParamFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga9c24626a54bc186c9da156f0b7bf9931</anchor>
      <arglist>(ParamFlags lhs, ParamFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParamFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga23118c9638ef338fb3cb06407099fb17</anchor>
      <arglist>(ParamFlags lhs, ParamFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParamFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaaea9028c5269446e3e892216fc7e9f09</anchor>
      <arglist>(ParamFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>ParamFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga4180c1b9f616ce95a2fdf066360796a5</anchor>
      <arglist>(ParamFlags &amp;lhs, ParamFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParamFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga2a99c6e07188d1e5498b3ebbb4128017</anchor>
      <arglist>(ParamFlags &amp;lhs, ParamFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParamFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaf07dad32ab115f4f1db890ed19d50220</anchor>
      <arglist>(ParamFlags &amp;lhs, ParamFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileTest</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga8e018d8609ba17b0f6955505a8363bf7</anchor>
      <arglist>(FileTest lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileTest</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga5a77e313c92f633c725b72e37123d651</anchor>
      <arglist>(FileTest lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileTest</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga6c089f23d6bfd92e083edc75519db75e</anchor>
      <arglist>(FileTest lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileTest</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga948edadd8ee7442b83d37dc3c325f890</anchor>
      <arglist>(FileTest flags)</arglist>
    </member>
    <member kind="function">
      <type>FileTest &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga9a6f5470f667596e897f5bfbd1068283</anchor>
      <arglist>(FileTest &amp;lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileTest &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga2338446673a7c5269f4bbecaf682ba71</anchor>
      <arglist>(FileTest &amp;lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileTest &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga2219c78993a5196ca2a435a18e0fc3a7</anchor>
      <arglist>(FileTest &amp;lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga0dd0a8800b6311ee8f3867eb27a72ae5</anchor>
      <arglist>(IOFlags lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga95be842cf20172964fbec282be81135e</anchor>
      <arglist>(IOFlags lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gad61c57b0678c703e8a14230d18bacff7</anchor>
      <arglist>(IOFlags lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga548c1cb09208fef57e5d0b3c992d71b9</anchor>
      <arglist>(IOFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gac3539f6df5e0c0658726f4f0573146f9</anchor>
      <arglist>(IOFlags &amp;lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gac7ce19021a408224765321b8c6c5e5e1</anchor>
      <arglist>(IOFlags &amp;lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga2180a5c566ced37bbeb37050d9632da9</anchor>
      <arglist>(IOFlags &amp;lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gab5937e9164f36f75ba87fd67903348d5</anchor>
      <arglist>(IOCondition lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gad2276da64a2e0932bed1d380ff4cc6c7</anchor>
      <arglist>(IOCondition lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga6416bbf923045261beb85241fff8ef0d</anchor>
      <arglist>(IOCondition lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga85461947d24f306cefd2fe17999deb97</anchor>
      <arglist>(IOCondition flags)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga8269a01826f8737d98ab0d345a0004f4</anchor>
      <arglist>(IOCondition &amp;lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaa8edf211ac636c53cdc03be5b086253b</anchor>
      <arglist>(IOCondition &amp;lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga995d6d5d01db67af62661bcd5dfd1ad6</anchor>
      <arglist>(IOCondition &amp;lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gabac5e1493392116b118e4d1048e3fef0</anchor>
      <arglist>(KeyFileFlags lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga62e7dc772f6045c2994a9c6b6f1c8dc2</anchor>
      <arglist>(KeyFileFlags lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gacc28b21831114895abfdbae6c1908114</anchor>
      <arglist>(KeyFileFlags lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gab99ff1d7c6d96da2ddfcfd1c4954e9b6</anchor>
      <arglist>(KeyFileFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga7096a34594825c90d7b6257935a62eb1</anchor>
      <arglist>(KeyFileFlags &amp;lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga2fce9d9b90f298093def1368b4114b31</anchor>
      <arglist>(KeyFileFlags &amp;lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gac90869f74a743e2f99f55708c28a585d</anchor>
      <arglist>(KeyFileFlags &amp;lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga330303c9d78eb78547012d549d4bb018</anchor>
      <arglist>(ParseFlags lhs, ParseFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gad6a9bd8e738b34f5ffc50ac6428995f2</anchor>
      <arglist>(ParseFlags lhs, ParseFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gab059cb7acda2b29eb2066958fc71951a</anchor>
      <arglist>(ParseFlags lhs, ParseFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga1fb97b62ae844c056b400e2813a21ee2</anchor>
      <arglist>(ParseFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga6b24d718f166cb352be94ee6e4090296</anchor>
      <arglist>(ParseFlags &amp;lhs, ParseFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga3b614b40b2e11761c0ee920ec572c87a</anchor>
      <arglist>(ParseFlags &amp;lhs, ParseFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaf59b9479390c508dff23dba221177bcc</anchor>
      <arglist>(ParseFlags &amp;lhs, ParseFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FormatSizeFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga55c3ed59e5e0f11fe51ae823c9ebd8c5</anchor>
      <arglist>(FormatSizeFlags lhs, FormatSizeFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FormatSizeFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gac7645ac7c1188da3a4bdb7a5b52145be</anchor>
      <arglist>(FormatSizeFlags lhs, FormatSizeFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FormatSizeFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gac1a95f6b60212d09d58f2d5f79c2ed55</anchor>
      <arglist>(FormatSizeFlags lhs, FormatSizeFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FormatSizeFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga0ae9e277d1b96ba75f89aad2c449951a</anchor>
      <arglist>(FormatSizeFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>FormatSizeFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gad0242df3176de300921be12195b30066</anchor>
      <arglist>(FormatSizeFlags &amp;lhs, FormatSizeFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FormatSizeFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gafdcdb75e1742aaa5131ecd7279f3689c</anchor>
      <arglist>(FormatSizeFlags &amp;lhs, FormatSizeFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FormatSizeFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga472fd7f4cc0a950e7b9ec14f0d89f060</anchor>
      <arglist>(FormatSizeFlags &amp;lhs, FormatSizeFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gade862759d091b90329ba8f85aa2fd010</anchor>
      <arglist>(ModuleFlags lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gac398a62a7005f25655af13a4c41fa3d5</anchor>
      <arglist>(ModuleFlags lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga333d93ef372c08c322d27ac05bda0e18</anchor>
      <arglist>(ModuleFlags lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaaa723a5b4d33e54167f7adbb18746004</anchor>
      <arglist>(ModuleFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gae9df767ea1ec74b0d9d9acce426a07a8</anchor>
      <arglist>(ModuleFlags &amp;lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaed5693619fa4f5ebd1389c697003129d</anchor>
      <arglist>(ModuleFlags &amp;lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga8e73a634c6441630eddf8805b22dd163</anchor>
      <arglist>(ModuleFlags &amp;lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexCompileFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga5c44b3a4eee7eefbb1f2d1d8f22642ca</anchor>
      <arglist>(RegexCompileFlags lhs, RegexCompileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexCompileFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga02877e07b7d38f5b21db4967b86486f2</anchor>
      <arglist>(RegexCompileFlags lhs, RegexCompileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexCompileFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga69068f48bbea92cdd3cc7d69fdc017e1</anchor>
      <arglist>(RegexCompileFlags lhs, RegexCompileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexCompileFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gacb650222b1a3f6a44e72df95d815a7f8</anchor>
      <arglist>(RegexCompileFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>RegexCompileFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gae6fd65d5a674d2e2e453793d86fa64cd</anchor>
      <arglist>(RegexCompileFlags &amp;lhs, RegexCompileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexCompileFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaa01d49815b8b6e1796c063d889cfb705</anchor>
      <arglist>(RegexCompileFlags &amp;lhs, RegexCompileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexCompileFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga1425051a4ffed939a1bff1e0543c9498</anchor>
      <arglist>(RegexCompileFlags &amp;lhs, RegexCompileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexMatchFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gab63da3a959cbd5f00f4fa535e35eda08</anchor>
      <arglist>(RegexMatchFlags lhs, RegexMatchFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexMatchFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga8bac0b06494980cf1006d7b3ce82da08</anchor>
      <arglist>(RegexMatchFlags lhs, RegexMatchFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexMatchFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga06c395f619dffca3f0fc483fab302122</anchor>
      <arglist>(RegexMatchFlags lhs, RegexMatchFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexMatchFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaf192ce556cbd7ddb416e8078bdb09523</anchor>
      <arglist>(RegexMatchFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>RegexMatchFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga8f30deab298559a873d7beca40279ead</anchor>
      <arglist>(RegexMatchFlags &amp;lhs, RegexMatchFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexMatchFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gab58ecc98b067e580d45971eb6131e494</anchor>
      <arglist>(RegexMatchFlags &amp;lhs, RegexMatchFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexMatchFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga402d81f594d95305aa6e275aa74126ae</anchor>
      <arglist>(RegexMatchFlags &amp;lhs, RegexMatchFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaba6cac919da111ebf69667bf9f8006ff</anchor>
      <arglist>(SpawnFlags lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gadd494793fc2c7d5bf1b547f690df27a6</anchor>
      <arglist>(SpawnFlags lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga84449a9a461b381f88f65435ef8389ec</anchor>
      <arglist>(SpawnFlags lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga065f45ca68d1397febf331293e4cc4de</anchor>
      <arglist>(SpawnFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gabbe289c910b34a158f8dc22bb0b0095f</anchor>
      <arglist>(SpawnFlags &amp;lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga0c9d398f7ef6682e6cb2ce9ae48f2253</anchor>
      <arglist>(SpawnFlags &amp;lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga40166fcca8eb8ec5b148c82444553927</anchor>
      <arglist>(SpawnFlags &amp;lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga5bc1518eb5547dbb8af77b944ccaa048</anchor>
      <arglist>(AsciiType lhs, AsciiType rhs)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga9167966379cf1ba3029cfc02ddff139a</anchor>
      <arglist>(AsciiType lhs, AsciiType rhs)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga682a545ca2e86b3e162305e4f14fa8d5</anchor>
      <arglist>(AsciiType lhs, AsciiType rhs)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gad7ea47582094c6d092a8f485e1e709c6</anchor>
      <arglist>(AsciiType flags)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga69bba23f4c9a83c268d0599f241b8ebe</anchor>
      <arglist>(AsciiType &amp;lhs, AsciiType rhs)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga194de740078d985c2e2911934cadc90c</anchor>
      <arglist>(AsciiType &amp;lhs, AsciiType rhs)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gac1b0239e539cf250333fe0adc04dbb41</anchor>
      <arglist>(AsciiType &amp;lhs, AsciiType rhs)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>glibmm Reference Manual</title>
    <filename>index</filename>
  </compound>
</tagfile>
