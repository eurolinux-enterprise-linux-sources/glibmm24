// Generated by gmmproc 2.42.0 -- DO NOT MODIFY!

#undef G_DISABLE_DEPRECATED
#define GLIB_DISABLE_DEPRECATION_WARNINGS 1
 

#include <glibmm.h>

#include <giomm/application.h>
#include <giomm/private/application_p.h>


// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* Copyright (C) 2007 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gio/gio.h>
#include <giomm/file.h>
#include <giomm/actiongroup.h>
#include <giomm/init.h>
#include <cstring> // std::memset()
#include <glibmm/threads.h>
#include <map>
#include <vector>

namespace // anonymous
{
//TODO: At the next ABI break, implement the pimpl idiom. Then we need not use
// a GQuark for ExtraApplicationData, which should be renamed to
// struct Gio::Application::Impl.
// These are new data members that can't be added to Gio::Application now,
// because it would break ABI.
struct ExtraApplicationData
{
  std::vector<gchar*> option_entry_strings;

  ~ExtraApplicationData()
  {
    for (std::vector<gchar*>::iterator iter = option_entry_strings.begin();
         iter != option_entry_strings.end(); ++iter)
    {
      g_free(*iter);
      *iter = 0;
    }
  }
};

GQuark quark_extra_application_data =
  g_quark_from_static_string("glibmm__Gio::Application::quark_extra_application_data");

void Application_delete_extra_application_data(gpointer data)
{
  ExtraApplicationData* extra_application_data = static_cast<ExtraApplicationData*>(data);
  delete extra_application_data;
}

static void Application_signal_open_callback(GApplication* self, GFile** files,
  gint n_files, const gchar* hint, void* data)
{
  typedef sigc::slot< void, const Gio::Application::type_vec_files&, const Glib::ustring& > SlotType;

  Gio::Application::type_vec_files vec_files(n_files);
  for(int i = 0; i < n_files; ++i)
  {
    vec_files[i] = Glib::wrap(files[i], true);
  }

  const Glib::ustring hint_str = (hint ? hint : Glib::ustring());

  // Do not try to call a signal on a disassociated wrapper.
  if(Glib::ObjectBase::_get_current_wrapper((GObject*) self))
  {
    try
    {
      if(sigc::slot_base *const slot = Glib::SignalProxyNormal::data_to_slot(data)) {
        (*static_cast<SlotType*>(slot))(vec_files, hint_str);
        return;
      }
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
  }

  return;
}

static void Application_signal_open_notify_callback(GApplication* self, GFile** files,
                                             gint n_files, const gchar *hint, void* data)
{
  using namespace Gio;
  typedef sigc::slot< void, const Application::type_vec_files&, const Glib::ustring& > SlotType;

  Application::type_vec_files vec_files(n_files);
  for (int i = 0; i < n_files; i++)
  {
    vec_files[i] = Glib::wrap(files[i], true);
  }

  const Glib::ustring hint_str = (hint ? hint : Glib::ustring());

  // Do not try to call a signal on a disassociated wrapper.
  if(Glib::ObjectBase::_get_current_wrapper((GObject*) self))
  {
    try
    {
      if(sigc::slot_base *const slot = Glib::SignalProxyNormal::data_to_slot(data))
      {
        (*static_cast<SlotType*>(slot))(vec_files, hint_str);
        return;
      }
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
  }

  return;
}

static const Glib::SignalProxyInfo Application_signal_open_info =
{
  "open",
  (GCallback) &Application_signal_open_callback,
  (GCallback) &Application_signal_open_notify_callback
};

// The add_main_option_entry*() methods that take a slot parameter are handled
// similarly to the corresponding Glib::OptionGroup::add_entry*() methods.
// There is an important difference: In add_main_option_entry*() we can't pass
// an Application pointer to the used GOptionGroup.
// g_application_add_main_option_entries() creates a GOptionGroup with user_data == NULL.
// Therefore Application_option_arg_callback() is called with data == NULL.
// Application_option_arg_callback() does not know which Application instance
// the command-line option belongs to. All Application instances (usually only one)
// share a map, mapping the long command option name to an OptionArgCallbackData.
class OptionArgCallbackData
{
public:
  explicit OptionArgCallbackData(const Gio::Application* application, gchar short_name,
    const Glib::OptionGroup::SlotOptionArgString& slot)
  : application_(application), short_name_(short_name),
    slot_string_(new Glib::OptionGroup::SlotOptionArgString(slot)), slot_filename_(0)
  { }

  explicit OptionArgCallbackData(const Gio::Application* application, gchar short_name,
    const Glib::OptionGroup::SlotOptionArgFilename& slot)
  : application_(application), short_name_(short_name),
    slot_string_(0), slot_filename_(new Glib::OptionGroup::SlotOptionArgFilename(slot))
  { }

  const Gio::Application* get_application() const  { return application_; }
  gchar get_short_name() const { return short_name_; }
  bool is_filename_option() const { return slot_filename_ != 0; }

  const Glib::OptionGroup::SlotOptionArgString* get_slot_string() const
  { return slot_string_; }

  const Glib::OptionGroup::SlotOptionArgFilename* get_slot_filename() const
  { return slot_filename_; }

  ~OptionArgCallbackData()
  {
    delete slot_string_;
    delete slot_filename_;
    // Don't delete application_. It's not owned by this class.
  }

private:
  const Gio::Application* application_;
  gchar short_name_;
  // One of these slot pointers is 0 and the other one points to a slot.
  Glib::OptionGroup::SlotOptionArgString* slot_string_;
  Glib::OptionGroup::SlotOptionArgFilename* slot_filename_;

  // Not copyable
  OptionArgCallbackData(const OptionArgCallbackData&);
  OptionArgCallbackData& operator=(const OptionArgCallbackData&);
};

typedef std::map<Glib::ustring, OptionArgCallbackData*> OptionArgCallbackDataMap;
OptionArgCallbackDataMap option_arg_callback_data;

// Gio::Application instances may be used in different threads.
// Accesses to option_arg_callback_data must be thread-safe.
Glib::Threads::Mutex option_arg_callback_data_mutex;

gboolean Application_option_arg_callback(const gchar* option_name, const gchar* value,
  gpointer /* data */, GError** error)
{
  const Glib::ustring cpp_option_name(option_name);

  // option_name is either a single dash followed by a single letter (for a
  // short name) or two dashes followed by a long option name.
  Glib::Threads::Mutex::Lock lock(option_arg_callback_data_mutex);
  OptionArgCallbackDataMap::const_iterator iterFind = option_arg_callback_data.end();
  if (option_name[1] == '-')
  {
    // Long option name.
    const Glib::ustring long_option_name = Glib::ustring(option_name+2);
    iterFind = option_arg_callback_data.find(long_option_name);
  }
  else
  {
    // Short option name.
    const gchar short_option_name = option_name[1];
    for (iterFind = option_arg_callback_data.begin();
         iterFind != option_arg_callback_data.end(); ++iterFind)
    {
      if (iterFind->second->get_short_name() == short_option_name)
        break;
    }
  }

  if (iterFind == option_arg_callback_data.end())
  {
    Glib::OptionError(Glib::OptionError::UNKNOWN_OPTION, "Application_option_arg_callback(): "
      "Unknown option " + cpp_option_name).propagate(error);
    return false;
  }

  const bool has_value = (value != 0);
  const OptionArgCallbackData* const option_arg = iterFind->second;
  try
  {
    if (option_arg->is_filename_option())
    {
      const Glib::OptionGroup::SlotOptionArgFilename* the_slot = option_arg->get_slot_filename();
      lock.release();
      const std::string cpp_value(value ? value : "");
      return (*the_slot)(cpp_option_name, cpp_value, has_value);
    }
    else
    {
      const Glib::OptionGroup::SlotOptionArgString* the_slot = option_arg->get_slot_string();
      lock.release();
      const Glib::ustring cpp_value(value ? value : "");
      return (*the_slot)(cpp_option_name, cpp_value, has_value);
    }
  }
  catch (Glib::Error& err)
  {
    err.propagate(error);
  }
  catch (...)
  {
    Glib::exception_handlers_invoke();
  }
  return false;
}

} // anonymous namespace

namespace Gio
{


const Glib::Class& Application::custom_class_init()
{
  Glib::init();
  Gio::init();
  return application_class_.init();
}


Application::Application(const Glib::ustring& application_id, ApplicationFlags flags)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Glib::Object(Glib::ConstructParams(custom_class_init(), "application_id", (application_id.empty() ? 0 : application_id.c_str()), "flags", ((GApplicationFlags)(flags)), static_cast<char*>(0)))
{

}

Application::~Application()
{
  // Delete all OptionArgCallbackData instances that belong to this application.
  Glib::Threads::Mutex::Lock lock(option_arg_callback_data_mutex);
  OptionArgCallbackDataMap::iterator iter = option_arg_callback_data.begin();
  while (iter != option_arg_callback_data.end())
  {
    OptionArgCallbackDataMap::iterator saved_iter = iter;
    ++iter;
    if (saved_iter->second->get_application() == this)
    {
      delete saved_iter->second;
      option_arg_callback_data.erase(saved_iter);
    }
  }
}

//static
void Application::unset_default()
{
  g_application_set_default(0);
}

void Application_Class::open_callback(GApplication* self, GFile** files,
  gint n_files, const gchar *hint)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:

  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        Application::type_vec_files vec_files(n_files);
        for (int i = 0; i < n_files; i++) {
          vec_files[i] = Glib::wrap(files[i], true);
        }

        const Glib::ustring hint_str = (hint ? hint : Glib::ustring());

        obj->on_open(vec_files, hint_str);
        return;
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
    g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
    );

  // Call the original underlying C function:
  if(base && base->open)
    (*base->open)(self, files, n_files, hint);
}

Glib::SignalProxy2< void, const Application::type_vec_files&, const Glib::ustring& > Application::signal_open()
{
  return Glib::SignalProxy2< void, const Application::type_vec_files&, const Glib::ustring& >(this, &Application_signal_open_info);
}

void Gio::Application::on_open(const Application::type_vec_files& files, const Glib::ustring& hint)
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->open) {
    (*base->open)(gobj(),
      Glib::ArrayHandler<type_vec_files::value_type>::vector_to_array(files).data(),
      files.size(),
      hint.c_str());
  }
}

void Application::open(const type_vec_files& files, const Glib::ustring& hint)
{
  g_application_open(gobj(),
    Glib::ArrayHandler<type_vec_files::value_type>::vector_to_array(files).data(),
    files.size(),
    hint.c_str());
}

void Application::open(const Glib::RefPtr<Gio::File>& file, const Glib::ustring& hint)
{
  type_vec_files files(1);
  files[0] = file;
  open(files, hint);
}

void Application::add_main_option_entry(OptionType arg_type, const Glib::ustring& long_name,
  gchar short_name, const Glib::ustring& description, const Glib::ustring& arg_description, int flags)
{
  add_main_option_entry_private((GOptionArg)arg_type, long_name, short_name,
    description, arg_description, flags);
}

void Application::add_main_option_entry(
  const Glib::OptionGroup::SlotOptionArgString& slot, const Glib::ustring& long_name,
  gchar short_name, const Glib::ustring& description,
  const Glib::ustring& arg_description, int flags)
{
  Glib::Threads::Mutex::Lock lock(option_arg_callback_data_mutex);
  OptionArgCallbackDataMap::iterator iterFind = option_arg_callback_data.find(long_name);
  if (iterFind != option_arg_callback_data.end())
    return; // Ignore duplicates

  OptionArgCallbackData* callback_data = new OptionArgCallbackData(this, short_name, slot);
  option_arg_callback_data[long_name] = callback_data;
  lock.release();

  add_main_option_entry_private(G_OPTION_ARG_CALLBACK, long_name, short_name,
    description, arg_description, flags & ~Glib::OptionEntry::FLAG_FILENAME);
}

void Application::add_main_option_entry_filename(
  const Glib::OptionGroup::SlotOptionArgFilename& slot, const Glib::ustring& long_name,
  gchar short_name, const Glib::ustring& description,
  const Glib::ustring& arg_description, int flags)
{
  Glib::Threads::Mutex::Lock lock(option_arg_callback_data_mutex);
  OptionArgCallbackDataMap::iterator iterFind = option_arg_callback_data.find(long_name);
  if (iterFind != option_arg_callback_data.end())
    return; // Ignore duplicates

  OptionArgCallbackData* callback_data = new OptionArgCallbackData(this, short_name, slot);
  option_arg_callback_data[long_name] = callback_data;
  lock.release();

  add_main_option_entry_private(G_OPTION_ARG_CALLBACK, long_name, short_name,
    description, arg_description, flags | Glib::OptionEntry::FLAG_FILENAME);
}

void Application::add_main_option_entry_private(GOptionArg arg, const Glib::ustring& long_name,
  gchar short_name, const Glib::ustring& description, const Glib::ustring& arg_description, int flags)
{
  // Create a temporary array, just so we can give the correct thing to g_application_add_main_option_entries():
  GOptionEntry array[2];
  std::memset(array, 0, 2 * sizeof(GOptionEntry)); // null-termination

  // g_application_add_main_option_entries() does not take its own copy
  // of the strings. We must keep them alive, and keep pointers to them,
  // so we can delete them when the Application instance is deleted.

  // GOptionEntry.long_name must be set, even if it's an empty string.
  gchar* lname = g_strdup(long_name.c_str());
  gchar* desc = description.empty() ? 0 : g_strdup(description.c_str());
  gchar* arg_desc = arg_description.empty() ? 0 : g_strdup(arg_description.c_str());

  ExtraApplicationData* extra_application_data =
    static_cast<ExtraApplicationData*>(g_object_get_qdata(gobject_, quark_extra_application_data));
  if (!extra_application_data)
  {
    extra_application_data = new ExtraApplicationData();
    g_object_set_qdata_full(gobject_, quark_extra_application_data, extra_application_data,
      Application_delete_extra_application_data);
  }

  extra_application_data->option_entry_strings.push_back(lname);
  if (desc)
    extra_application_data->option_entry_strings.push_back(desc);
  if (arg_desc)
    extra_application_data->option_entry_strings.push_back(arg_desc);

  // Fill in array[0].
  array[0].arg = arg;
  array[0].long_name = lname;
  array[0].short_name = short_name;
  array[0].description = desc;
  array[0].arg_description = arg_desc;
  array[0].flags = flags;

  if (arg == G_OPTION_ARG_CALLBACK)
  {
    // GoptionEntry.arg_data is a function pointer, cast to void*.
    // See Glib::OptionGroup::CppOptionEntry::allocate_c_arg() for a discussion
    // of this hack.
    union {
      void* dp;
      GOptionArgFunc fp;
    } u;
    u.fp = &Application_option_arg_callback;
    array[0].arg_data = u.dp;
  }
  else
    // We ensure that this is null to ensure that it is not used,
    // telling GApplication to put the parsed value in the options VariantDict instead.
    array[0].arg_data = 0;

  g_application_add_main_option_entries(gobj(), array);
}

} // namespace Gio

namespace
{


static const Glib::SignalProxyInfo Application_signal_startup_info =
{
  "startup",
  (GCallback) &Glib::SignalProxyNormal::slot0_void_callback,
  (GCallback) &Glib::SignalProxyNormal::slot0_void_callback
};


static const Glib::SignalProxyInfo Application_signal_activate_info =
{
  "activate",
  (GCallback) &Glib::SignalProxyNormal::slot0_void_callback,
  (GCallback) &Glib::SignalProxyNormal::slot0_void_callback
};


static gint Application_signal_command_line_callback(GApplication* self, GApplicationCommandLine* p0,void* data)
{
  using namespace Gio;
  typedef sigc::slot< int,const Glib::RefPtr<ApplicationCommandLine>& > SlotType;

  Application* obj = dynamic_cast<Application*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    try
    {
    #endif //GLIBMM_EXCEPTIONS_ENABLED
      if(sigc::slot_base *const slot = Glib::SignalProxyNormal::data_to_slot(data))
        return (*static_cast<SlotType*>(slot))(Glib::wrap(p0, true)
);
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    }
    catch(...)
    {
       Glib::exception_handlers_invoke();
    }
    #endif //GLIBMM_EXCEPTIONS_ENABLED
  }

  typedef gint RType;
  return RType();
}

static gint Application_signal_command_line_notify_callback(GApplication* self, GApplicationCommandLine* p0, void* data)
{
  using namespace Gio;
  typedef sigc::slot< void,const Glib::RefPtr<ApplicationCommandLine>& > SlotType;

  Application* obj = dynamic_cast<Application*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    try
    {
    #endif //GLIBMM_EXCEPTIONS_ENABLED
      if(sigc::slot_base *const slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(Glib::wrap(p0, true)
);
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
    #endif //GLIBMM_EXCEPTIONS_ENABLED
  }

  typedef gint RType;
  return RType();
}

static const Glib::SignalProxyInfo Application_signal_command_line_info =
{
  "command-line",
  (GCallback) &Application_signal_command_line_callback,
  (GCallback) &Application_signal_command_line_notify_callback
};


static gint Application_signal_handle_local_options_callback(GApplication* self, GVariantDict* p0,void* data)
{
  using namespace Gio;
  typedef sigc::slot< int,const Glib::RefPtr<Glib::VariantDict>& > SlotType;

  Application* obj = dynamic_cast<Application*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    try
    {
    #endif //GLIBMM_EXCEPTIONS_ENABLED
      if(sigc::slot_base *const slot = Glib::SignalProxyNormal::data_to_slot(data))
        return (*static_cast<SlotType*>(slot))(Glib::wrap(p0, true)
);
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    }
    catch(...)
    {
       Glib::exception_handlers_invoke();
    }
    #endif //GLIBMM_EXCEPTIONS_ENABLED
  }

  typedef gint RType;
  return RType();
}

static gint Application_signal_handle_local_options_notify_callback(GApplication* self, GVariantDict* p0, void* data)
{
  using namespace Gio;
  typedef sigc::slot< void,const Glib::RefPtr<Glib::VariantDict>& > SlotType;

  Application* obj = dynamic_cast<Application*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    try
    {
    #endif //GLIBMM_EXCEPTIONS_ENABLED
      if(sigc::slot_base *const slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(Glib::wrap(p0, true)
);
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
    #endif //GLIBMM_EXCEPTIONS_ENABLED
  }

  typedef gint RType;
  return RType();
}

static const Glib::SignalProxyInfo Application_signal_handle_local_options_info =
{
  "handle-local-options",
  (GCallback) &Application_signal_handle_local_options_callback,
  (GCallback) &Application_signal_handle_local_options_notify_callback
};


} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gio::Application> wrap(GApplication* object, bool take_copy)
{
  return Glib::RefPtr<Gio::Application>( dynamic_cast<Gio::Application*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gio
{


/* The *_Class implementation: */

const Glib::Class& Application_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &Application_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(g_application_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  ActionGroup::add_interface(get_type());
  ActionMap::add_interface(get_type());

  }

  return *this;
}


void Application_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);

  klass->local_command_line = &local_command_line_vfunc_callback;
  klass->before_emit = &before_emit_vfunc_callback;
  klass->after_emit = &after_emit_vfunc_callback;
  klass->quit_mainloop = &quit_mainloop_vfunc_callback;
  klass->run_mainloop = &run_mainloop_vfunc_callback;

  klass->startup = &startup_callback;
  klass->activate = &activate_callback;
  klass->command_line = &command_line_callback;
  klass->open = &open_callback;
  }

gboolean Application_Class::local_command_line_vfunc_callback(GApplication* self, gchar*** arguments, int* exit_status)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
      #endif //GLIBMM_EXCEPTIONS_ENABLED
        // Call the virtual member method, which derived classes might override.
        return static_cast<int>(obj->local_command_line_vfunc(*(arguments)
, *(exit_status)
));
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
      #endif //GLIBMM_EXCEPTIONS_ENABLED
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
  );

  // Call the original underlying C function:
  if(base && base->local_command_line)
  {
    gboolean retval = (*base->local_command_line)(self, arguments, exit_status);
    return retval;
  }

  typedef gboolean RType;
  return RType();
}
void Application_Class::before_emit_vfunc_callback(GApplication* self, GVariant* platform_data)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
      #endif //GLIBMM_EXCEPTIONS_ENABLED
        // Call the virtual member method, which derived classes might override.
        obj->before_emit_vfunc(Glib::wrap(platform_data,true)
);
        return;
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
      #endif //GLIBMM_EXCEPTIONS_ENABLED
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
  );

  // Call the original underlying C function:
  if(base && base->before_emit)
  {
    (*base->before_emit)(self, platform_data);
  }

}
void Application_Class::after_emit_vfunc_callback(GApplication* self, GVariant* platform_data)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
      #endif //GLIBMM_EXCEPTIONS_ENABLED
        // Call the virtual member method, which derived classes might override.
        obj->after_emit_vfunc(Glib::wrap(platform_data,true)
);
        return;
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
      #endif //GLIBMM_EXCEPTIONS_ENABLED
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
  );

  // Call the original underlying C function:
  if(base && base->after_emit)
  {
    (*base->after_emit)(self, platform_data);
  }

}
void Application_Class::quit_mainloop_vfunc_callback(GApplication* self)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
      #endif //GLIBMM_EXCEPTIONS_ENABLED
        // Call the virtual member method, which derived classes might override.
        obj->quit_mainloop_vfunc();
        return;
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
      #endif //GLIBMM_EXCEPTIONS_ENABLED
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
  );

  // Call the original underlying C function:
  if(base && base->quit_mainloop)
  {
    (*base->quit_mainloop)(self);
  }

}
void Application_Class::run_mainloop_vfunc_callback(GApplication* self)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
      #endif //GLIBMM_EXCEPTIONS_ENABLED
        // Call the virtual member method, which derived classes might override.
        obj->run_mainloop_vfunc();
        return;
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
      #endif //GLIBMM_EXCEPTIONS_ENABLED
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
  );

  // Call the original underlying C function:
  if(base && base->run_mainloop)
  {
    (*base->run_mainloop)(self);
  }

}

void Application_Class::startup_callback(GApplication* self)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
      #endif //GLIBMM_EXCEPTIONS_ENABLED
        // Call the virtual member method, which derived classes might override.
        obj->on_startup();
        return;
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
      #endif //GLIBMM_EXCEPTIONS_ENABLED
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
        g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
    );

  // Call the original underlying C function:
  if(base && base->startup)
    (*base->startup)(self);
}
void Application_Class::activate_callback(GApplication* self)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
      #endif //GLIBMM_EXCEPTIONS_ENABLED
        // Call the virtual member method, which derived classes might override.
        obj->on_activate();
        return;
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
      #endif //GLIBMM_EXCEPTIONS_ENABLED
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
        g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
    );

  // Call the original underlying C function:
  if(base && base->activate)
    (*base->activate)(self);
}
gint Application_Class::command_line_callback(GApplication* self, GApplicationCommandLine* p0)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
      #endif //GLIBMM_EXCEPTIONS_ENABLED
        // Call the virtual member method, which derived classes might override.
        return obj->on_command_line(Glib::wrap(p0, true)
);
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
      #endif //GLIBMM_EXCEPTIONS_ENABLED
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
        g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
    );

  // Call the original underlying C function:
  if(base && base->command_line)
    return (*base->command_line)(self, p0);

  typedef gint RType;
  return RType();
}


Glib::ObjectBase* Application_Class::wrap_new(GObject* object)
{
  return new Application((GApplication*)object);
}


/* The implementation: */

GApplication* Application::gobj_copy()
{
  reference();
  return gobj();
}

Application::Application(const Glib::ConstructParams& construct_params)
:
  Glib::Object(construct_params)
{

}

Application::Application(GApplication* castitem)
:
  Glib::Object((GObject*)(castitem))
{}


Application::CppClassType Application::application_class_; // initialize static member

GType Application::get_type()
{
  return application_class_.init().get_type();
}


GType Application::get_base_type()
{
  return g_application_get_type();
}


Glib::RefPtr<Application> Application::create(const Glib::ustring& application_id, ApplicationFlags flags)
{
  return Glib::RefPtr<Application>( new Application(application_id, flags) );
}

bool Application::id_is_valid(const Glib::ustring& application_id)
{
  return g_application_id_is_valid(application_id.c_str());
}


Glib::ustring Application::get_id() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(g_application_get_application_id(const_cast<GApplication*>(gobj())));
}

void Application::set_id(const Glib::ustring& application_id)
{
  g_application_set_application_id(gobj(), application_id.c_str());
}

Glib::RefPtr<DBus::Connection> Application::get_dbus_connection()
{
  Glib::RefPtr<DBus::Connection> retvalue = Glib::wrap(g_application_get_dbus_connection(gobj()));
  if(retvalue)
    retvalue->reference(); //The function does not do a ref for us.
  return retvalue;
}

Glib::RefPtr<const DBus::Connection> Application::get_dbus_connection() const
{
  return const_cast<Application*>(this)->get_dbus_connection();
}

Glib::ustring Application::get_dbus_object_path() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(g_application_get_dbus_object_path(const_cast<GApplication*>(gobj())));
}

guint Application::get_inactivity_timeout() const
{
  return g_application_get_inactivity_timeout(const_cast<GApplication*>(gobj()));
}

void Application::set_inactivity_timeout(guint inactivity_timeout)
{
  g_application_set_inactivity_timeout(gobj(), inactivity_timeout);
}

ApplicationFlags Application::get_flags() const
{
  return ((ApplicationFlags)(g_application_get_flags(const_cast<GApplication*>(gobj()))));
}

void Application::set_flags(ApplicationFlags flags)
{
  g_application_set_flags(gobj(), ((GApplicationFlags)(flags)));
}

#ifndef GIOMM_DISABLE_DEPRECATED

void Application::set_action_group(const Glib::RefPtr<ActionGroup>& action_group)
{
  g_application_set_action_group(gobj(), Glib::unwrap(action_group));
}

#endif // GIOMM_DISABLE_DEPRECATED

bool Application::is_registered() const
{
  return g_application_get_is_registered(const_cast<GApplication*>(gobj()));
}

bool Application::is_remote() const
{
  return g_application_get_is_remote(const_cast<GApplication*>(gobj()));
}

bool Application::register_application(const Glib::RefPtr<Gio::Cancellable>& cancellable)
{
  GError* gerror = 0;
  bool retvalue = g_application_register(gobj(), const_cast<GCancellable*>(Glib::unwrap(cancellable)), &(gerror));
  if(gerror)
    ::Glib::Error::throw_exception(gerror);
  return retvalue;
}

bool Application::register_application()
{
  GError* gerror = 0;
  bool retvalue = g_application_register(gobj(), 0, &(gerror));
  if(gerror)
    ::Glib::Error::throw_exception(gerror);
  return retvalue;
}

void Application::hold()
{
  g_application_hold(gobj());
}

void Application::release()
{
  g_application_release(gobj());
}

void Application::activate()
{
  g_application_activate(gobj());
}

int Application::run(int argc, char** argv)
{
  return g_application_run(gobj(), argc, argv);
}

void Application::quit()
{
  g_application_quit(gobj());
}

void Application::set_default(const Glib::RefPtr<Application>& application)
{
  g_application_set_default(const_cast<GApplication*>(Glib::unwrap(application)));
}


Glib::RefPtr<Application> Application::get_default()
{
  return Glib::wrap(g_application_get_default());
}


void Application::mark_busy()
{
  g_application_mark_busy(gobj());
}

void Application::unmark_busy()
{
  g_application_unmark_busy(gobj());
}

void Application::send_notification(const Glib::ustring& id, const Glib::RefPtr<Notification>& notification)
{
  g_application_send_notification(gobj(), id.empty() ? 0 : id.c_str(), const_cast<GNotification*>(Glib::unwrap(notification)));
}

void Application::send_notification(const Glib::RefPtr<Notification>& notification)
{
  g_application_send_notification(gobj(), 0, const_cast<GNotification*>(Glib::unwrap(notification)));
}

void Application::withdraw_notification(const Glib::ustring& id)
{
  g_application_withdraw_notification(gobj(), id.c_str());
}


Glib::SignalProxy0< void > Application::signal_startup()
{
  return Glib::SignalProxy0< void >(this, &Application_signal_startup_info);
}


Glib::SignalProxy0< void > Application::signal_activate()
{
  return Glib::SignalProxy0< void >(this, &Application_signal_activate_info);
}


Glib::SignalProxy1< int,const Glib::RefPtr<ApplicationCommandLine>& > Application::signal_command_line()
{
  return Glib::SignalProxy1< int,const Glib::RefPtr<ApplicationCommandLine>& >(this, &Application_signal_command_line_info);
}


Glib::SignalProxy1< int,const Glib::RefPtr<Glib::VariantDict>& > Application::signal_handle_local_options()
{
  return Glib::SignalProxy1< int,const Glib::RefPtr<Glib::VariantDict>& >(this, &Application_signal_handle_local_options_info);
}


#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_WriteOnly< Glib::RefPtr<ActionGroup> > Application::property_action_group() 
{
  return Glib::PropertyProxy_WriteOnly< Glib::RefPtr<ActionGroup> >(this, "action-group");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< Glib::ustring > Application::property_application_id() 
{
  return Glib::PropertyProxy< Glib::ustring >(this, "application-id");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< Glib::ustring > Application::property_application_id() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "application-id");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< ApplicationFlags > Application::property_flags() 
{
  return Glib::PropertyProxy< ApplicationFlags >(this, "flags");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< ApplicationFlags > Application::property_flags() const
{
  return Glib::PropertyProxy_ReadOnly< ApplicationFlags >(this, "flags");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< guint > Application::property_inactivity_timeout() 
{
  return Glib::PropertyProxy< guint >(this, "inactivity-timeout");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< guint > Application::property_inactivity_timeout() const
{
  return Glib::PropertyProxy_ReadOnly< guint >(this, "inactivity-timeout");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< bool > Application::property_is_registered() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "is-registered");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< bool > Application::property_is_remote() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "is-remote");
}
#endif //GLIBMM_PROPERTIES_ENABLED


void Gio::Application::on_startup()
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->startup)
    (*base->startup)(gobj());
}
void Gio::Application::on_activate()
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->activate)
    (*base->activate)(gobj());
}
int Gio::Application::on_command_line(const Glib::RefPtr<ApplicationCommandLine>& command_line)
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->command_line)
    return (*base->command_line)(gobj(),const_cast<GApplicationCommandLine*>(Glib::unwrap(command_line)));

  typedef int RType;
  return RType();
}

bool Gio::Application::local_command_line_vfunc(char**& arguments, int& exit_status) 
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->local_command_line)
  {
    bool retval((*base->local_command_line)(gobj(),&(arguments),&(exit_status)));
    return retval;
  }

  typedef bool RType;
  return RType();
}
void Gio::Application::before_emit_vfunc(const Glib::VariantBase& platform_data) 
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->before_emit)
  {
    (*base->before_emit)(gobj(),const_cast<GVariant*>((platform_data).gobj()));
  }
}
void Gio::Application::after_emit_vfunc(const Glib::VariantBase& platform_data) 
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->after_emit)
  {
    (*base->after_emit)(gobj(),const_cast<GVariant*>((platform_data).gobj()));
  }
}
void Gio::Application::quit_mainloop_vfunc() 
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->quit_mainloop)
  {
    (*base->quit_mainloop)(gobj());
  }
}
void Gio::Application::run_mainloop_vfunc() 
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->run_mainloop)
  {
    (*base->run_mainloop)(gobj());
  }
}


} // namespace Gio


