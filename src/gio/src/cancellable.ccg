// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* Copyright (C) 2007 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gio/gio.h>
#include <glibmm/exceptionhandler.h>

namespace Gio {

extern "C" {

void delete_slot(gpointer data)
{
    Cancellable::SlotCancelledCallback* callback =
        reinterpret_cast<Cancellable::SlotCancelledCallback*>(data);
    delete callback;
}

void slot_cancelled_proxy(GCancellable * /*cancellable*/, gpointer data)
{
    Cancellable::SlotCancelledCallback* callback =
        reinterpret_cast<Cancellable::SlotCancelledCallback*>(data);
    (*callback)();
}

} // extern "C"

gulong
Cancellable::connect(const SlotCancelledCallback& slot)
{
    SlotCancelledCallback* slot_copy = new SlotCancelledCallback(slot);
    return g_cancellable_connect (gobj(),
                                  G_CALLBACK(slot_cancelled_proxy),
                                  slot_copy,
                                  &delete_slot);
}

} // namespace Gio
