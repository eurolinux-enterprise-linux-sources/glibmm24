// -*- Mode: C; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* Copyright (C) 2007 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <glibmm/error.h>
#include <glibmm/exceptionhandler.h>
#include <giomm/drive.h>
#include <giomm/volume.h>
#include <gio/gio.h>
#include "slot_async.h"

namespace Gio
{

void Mount::unmount(const SlotAsyncReady& slot, const Glib::RefPtr<Cancellable>& cancellable, MountUnmountFlags flags)
{
  // Create a copy of the slot.
  // A pointer to it will be passed through the callback's data parameter
  // and deleted in the callback.
  SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);

  g_mount_unmount_with_operation(gobj(),
                                 GMountUnmountFlags(flags),
                                 0, // mount_operation
                                 Glib::unwrap(cancellable),
                                 &SignalProxy_async_callback,
                                 slot_copy);
}

void Mount::unmount(const SlotAsyncReady& slot, MountUnmountFlags flags)
{
  // Create a copy of the slot.
  // A pointer to it will be passed through the callback's data parameter
  // and deleted in the callback.
  SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);

  g_mount_unmount_with_operation(gobj(),
                                 GMountUnmountFlags(flags),
                                 0, // mount_operation
                                 0, // cancellable
                                 &SignalProxy_async_callback,
                                 slot_copy);
}

void Mount::unmount(MountUnmountFlags flags)
{
  g_mount_unmount_with_operation(gobj(),
                                 GMountUnmountFlags(flags),
                                 0, // mount_operation
                                 0, // cancellable
                                 0, // callback
                                 0); // data
}

void Mount::unmount(const Glib::RefPtr<MountOperation>& mount_operation,
                    const SlotAsyncReady& slot, const Glib::RefPtr<Cancellable>& cancellable, MountUnmountFlags flags)
{
  // Create a copy of the slot.
  // A pointer to it will be passed through the callback's data parameter
  // and deleted in the callback.
  SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);

  g_mount_unmount_with_operation(gobj(),
                                 GMountUnmountFlags(flags),
                                 Glib::unwrap(mount_operation),
                                 Glib::unwrap(cancellable),
                                 &SignalProxy_async_callback,
                                 slot_copy);
}

void Mount::unmount(const Glib::RefPtr<MountOperation>& mount_operation,
                    const SlotAsyncReady& slot, MountUnmountFlags flags)
{
  // Create a copy of the slot.
  // A pointer to it will be passed through the callback's data parameter
  // and deleted in the callback.
  SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);

  g_mount_unmount_with_operation(gobj(),
                                 GMountUnmountFlags(flags),
                                 Glib::unwrap(mount_operation),
                                 0, // cancellable
                                 &SignalProxy_async_callback,
                                 slot_copy);
}

void Mount::unmount(const Glib::RefPtr<MountOperation>& mount_operation,
                    MountUnmountFlags flags)
{
  g_mount_unmount_with_operation(gobj(),
                                 GMountUnmountFlags(flags),
                                 Glib::unwrap(mount_operation),
                                 0, // cancellable
                                 0, // callback
                                 0); // data
}


void Mount::remount(const Glib::RefPtr<MountOperation>& operation, const SlotAsyncReady& slot, const Glib::RefPtr<Cancellable>& cancellable, MountMountFlags flags)
{
  // Create a copy of the slot.
  // A pointer to it will be passed through the callback's data parameter
  // and deleted in the callback.
  SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);

  g_mount_remount(gobj(),
                  static_cast<GMountMountFlags>(flags),
                  Glib::unwrap(operation),
                  Glib::unwrap(cancellable),
                  &SignalProxy_async_callback,
                  slot_copy);
}

void Mount::remount(const Glib::RefPtr<MountOperation>& operation, const SlotAsyncReady& slot, MountMountFlags flags)
{
  // Create a copy of the slot.
  // A pointer to it will be passed through the callback's data parameter
  // and deleted in the callback.
  SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);

  g_mount_remount(gobj(),
                  static_cast<GMountMountFlags>(flags),
                  Glib::unwrap(operation),
                  0,
                  &SignalProxy_async_callback,
                  slot_copy);
}

void Mount::remount(const Glib::RefPtr<MountOperation>& operation, MountMountFlags flags)
{
  g_mount_remount(gobj(),
                  static_cast<GMountMountFlags>(flags),
                  Glib::unwrap(operation),
                  0,
                  0,
                  0);
}

void Mount::remount(MountMountFlags flags)
{
  g_mount_remount(gobj(),
                  static_cast<GMountMountFlags>(flags),
                  0,
                  0,
                  0,
                  0);
}

void Mount::eject(const SlotAsyncReady& slot, const Glib::RefPtr<Cancellable>& cancellable, MountUnmountFlags flags)
{
  // Create a copy of the slot.
  // A pointer to it will be passed through the callback's data parameter
  // and deleted in the callback.
  SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);

  g_mount_eject_with_operation(gobj(),
                               GMountUnmountFlags(flags),
                               0, // mount_operation
                               Glib::unwrap(cancellable),
                               &SignalProxy_async_callback,
                               slot_copy);
}

void Mount::eject(const SlotAsyncReady& slot, MountUnmountFlags flags)
{
  // Create a copy of the slot.
  // A pointer to it will be passed through the callback's data parameter
  // and deleted in the callback.
  SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);

  g_mount_eject_with_operation(gobj(),
                               GMountUnmountFlags(flags),
                               0, // mount_operation
                               0, // cancellable
                               &SignalProxy_async_callback,
                               slot_copy);
}

void Mount::eject(MountUnmountFlags flags)
{
  g_mount_eject_with_operation(gobj(),
                               GMountUnmountFlags(flags),
                               0, // mount_operation
                               0, // cancellable
                               0, // callback
                               0); // data
}

void Mount::eject(const Glib::RefPtr<MountOperation>& mount_operation, const SlotAsyncReady& slot, const Glib::RefPtr<Cancellable>& cancellable, MountUnmountFlags flags)
{
  // Create a copy of the slot.
  // A pointer to it will be passed through the callback's data parameter
  // and deleted in the callback.
  SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);

  g_mount_eject_with_operation(gobj(),
                               GMountUnmountFlags(flags),
                               Glib::unwrap(mount_operation),
                               Glib::unwrap(cancellable),
                               &SignalProxy_async_callback,
                               slot_copy);
}

void Mount::eject(const Glib::RefPtr<MountOperation>& mount_operation, const SlotAsyncReady& slot, MountUnmountFlags flags)
{
  // Create a copy of the slot.
  // A pointer to it will be passed through the callback's data parameter
  // and deleted in the callback.
  SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);

  g_mount_eject_with_operation(gobj(),
                               GMountUnmountFlags(flags),
                               Glib::unwrap(mount_operation),
                               0, // cancellable
                               &SignalProxy_async_callback,
                               slot_copy);
}

void Mount::eject(const Glib::RefPtr<MountOperation>& mount_operation, MountUnmountFlags flags)
{
  g_mount_eject_with_operation(gobj(),
                  GMountUnmountFlags(flags),
                  Glib::unwrap(mount_operation),
                  0, // cancellable
                  0, // callback
                  0); // data
}


void Mount::guess_content_type(const SlotAsyncReady& slot, const Glib::RefPtr<Cancellable>& cancellable, bool force_rescan)
{
  // Create a copy of the slot.
  // A pointer to it will be passed through the callback's data parameter
  // and deleted in the callback.
  SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);

  g_mount_guess_content_type(gobj(),
                  force_rescan,
                  Glib::unwrap(cancellable),
                  &SignalProxy_async_callback,
                  slot_copy);
}

void Mount::guess_content_type(const SlotAsyncReady& slot, bool force_rescan)
{
  // Create a copy of the slot.
  // A pointer to it will be passed through the callback's data parameter
  // and deleted in the callback.
  SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);

  g_mount_guess_content_type(gobj(),
                  force_rescan,
                  0,
                  &SignalProxy_async_callback,
                  slot_copy);
}

void Mount::guess_content_type(bool force_rescan)
{
  g_mount_guess_content_type(gobj(),
                  force_rescan,
                  0,
                  0,
                  0);
}

void Mount::guess_content_type_sync(const Glib::RefPtr<Cancellable>& cancellable, bool force_rescan)
{
    GError* gerror = 0;
    g_mount_guess_content_type_sync(gobj(), force_rescan, Glib::unwrap(cancellable),
                                    &gerror);
  if(gerror)
          ::Glib::Error::throw_exception(gerror);
}

void Mount::guess_content_type_sync(bool force_rescan)
{
    GError* gerror = 0;
    g_mount_guess_content_type_sync(gobj(), force_rescan, 0, &gerror);
  if(gerror)
          ::Glib::Error::throw_exception(gerror);
}


} // namespace Gio

